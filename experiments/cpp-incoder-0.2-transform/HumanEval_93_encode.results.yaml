language: cpp
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (int i =\
    \ 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'A';\n\
    \        }\n        else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[i] = 'E';\n        }\n        else if (c == 'o' || c == 'u')\
    \ {\n            ans[i] = 'O';\n        }\n        else if (c == 'i' || c == 'u')\
    \ {\n            ans[i] = 'I';\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        char c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n        }\n        else\
    \ if (c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'e';\n\
    \        }\n        else if (c == 'O' || c == 'U') {\n            ans[i] = 'o';\n\
    \        }\n        else if (c == 'I' || c == 'U') {\n            ans[i] = 'i';\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        char c\
    \ = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        }\n        else if (c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'E';\n        }\n  \
    \      else if (c == 'o' || c == 'u') {\n            ans[i] = 'O';\n        }\n\
    \        else if (c == 'i' || c == 'u') {\n            ans[i] = 'I';\n       \
    \ }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         ans[i] = 'a';\n        }\n        else if (c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'e';\n        }\n        else if\
    \ (c == 'O' || c == 'U') {\n            ans[i] = 'o';\n        }\n        else\
    \ if (c == 'I' || c == 'U') {\n            ans[i] = 'i';\n        }\n    }\n \
    \   for (int i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n       \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  ans[i] = 'A\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63zcyxmj.cpp:81:22: warning: missing terminating ' character [enabled\
    \ by default]\n             ans[i] = 'A\n                      ^\n/tmp/tmp63zcyxmj.cpp:81:13:\
    \ error: missing terminating ' character\n             ans[i] = 'A\n         \
    \    ^\n/tmp/tmp63zcyxmj.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp63zcyxmj.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmp63zcyxmj.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmp63zcyxmj.cpp:82:1: error: expected\
    \ primary-expression before '}' token\n }\n ^\n/tmp/tmp63zcyxmj.cpp:82:1: error:\
    \ expected ';' before '}' token\n/tmp/tmp63zcyxmj.cpp:83:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmp63zcyxmj.cpp:90:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmp63zcyxmj.cpp:90:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (char)(c + 1);\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1]\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58_u6_xt.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp58_u6_xt.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp58_u6_xt.cpp:71:1:\
    \ error: expected ';' before '}' token\n }\n ^\n/tmp/tmp58_u6_xt.cpp:72:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmp58_u6_xt.cpp:79:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp58_u6_xt.cpp:79:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto c :\
    \ ans) {\n        ans.replace(ans.find(c), 2, tolower(c));\n    }\n    for (auto\
    \ c : ans) {\n        ans.replace(ans.find(c), 2, toupper(c));\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdt5is8g6.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpdt5is8g6.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : message) {\n               ^\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected ';'\
    \ before 'for'\n     for (auto c : ans) {\n     ^\n/tmp/tmpdt5is8g6.cpp:18:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdt5is8g6.cpp:18:15: error: 'c' does not name a type\n\
    \     for (auto c : ans) {\n               ^\n/tmp/tmpdt5is8g6.cpp:21:5: error:\
    \ expected ';' before 'for'\n     for (auto c : ans) {\n     ^\n/tmp/tmpdt5is8g6.cpp:21:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdt5is8g6.cpp:21:15: error: 'c' does not name a type\n\
    \     for (auto c : ans) {\n               ^\n/tmp/tmpdt5is8g6.cpp:24:5: error:\
    \ expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpdt5is8g6.cpp:24:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdt5is8g6.cpp: In function 'int main()':\n/tmp/tmpdt5is8g6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdt5is8g6.cpp:2:\n/tmp/tmpdt5is8g6.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        char c = message[i];\n        if(c>='a' && c<='z') {\n            ans\
    \ += (char)(c + 32);\n        }\n        else if(c>='A' && c<='Z') {\n       \
    \     ans += (char)(c + 32);\n        }\n        else if(c>='a' && c<='z') {\n\
    \            ans += (char)(c + 32);\n        }\n        else if(c>='A' && c<='Z')\
    \ {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a' &&\
    \ c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7eshl5ms.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp7eshl5ms.cpp:81:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmp7eshl5ms.cpp:81:1: error: expected ')' before '}' token\n/tmp/tmp7eshl5ms.cpp:81:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmp7eshl5ms.cpp:81:1:\
    \ error: expected ';' before '}' token\n/tmp/tmp7eshl5ms.cpp:82:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmp7eshl5ms.cpp:89:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (char c : message)\
    \ {\n        encodedMessage += toupper(c);\n    }\n    for (int i = 0; i < encodedMessage.length();\
    \ i++) {\n        char c = encodedMessage[i];\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            char nextLetter = encodedMessage[(i\
    \ + 2) % encodedMessage.length()];\n            encodedMessage[i] = nextLetter;\n\
    \        }\n    }\n    for (int i = 0; i < encodedMessage.length(); i++) {\n \
    \       char c = encodedMessage[i];\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            char nextLetter = encodedMessage[(i\
    \ + 2) % encodedMessage.length()];\n            encodedMessage[i] = nextLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5yy1y2z.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp_5yy1y2z.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp_5yy1y2z.cpp:\
    \ In function 'int main()':\n/tmp/tmp_5yy1y2z.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5yy1y2z.cpp:2:\n/tmp/tmp_5yy1y2z.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (std::find(vowels.begin(), vowels.end(), c) != vowels.end())\
    \ {\n            ans.replace(vowels.find(c), 2, vowels[vowels.find(c) + 1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyx4lsl7.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpfyx4lsl7.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpfyx4lsl7.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpfyx4lsl7.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpfyx4lsl7.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpfyx4lsl7.cpp:19:23: error: 'vowels' was not declared\
    \ in this scope\n         if (std::find(vowels.begin(), vowels.end(), c) != vowels.end())\
    \ {\n                       ^\n/tmp/tmpfyx4lsl7.cpp: In function 'int main()':\n\
    /tmp/tmpfyx4lsl7.cpp:26:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyx4lsl7.cpp:2:\n/tmp/tmpfyx4lsl7.cpp:27:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c) ? toupper(c) : tolower(c));\n    }\n    for (char c :\
    \ ans) {\n        ans[ans.find(c) + 2] = tolower(c);\n    }\n    for (char c :\
    \ ans) {\n        ans[ans.find(c) - 2] = toupper(c);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzn4pt29q.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpzn4pt29q.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpzn4pt29q.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpzn4pt29q.cpp:21:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmpzn4pt29q.cpp: In function 'int main()':\n/tmp/tmpzn4pt29q.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzn4pt29q.cpp:2:\n/tmp/tmpzn4pt29q.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (char\
    \ c : ans) {\n        if (isalpha(c)) {\n            char prev = ans[ans.length()\
    \ - 1];\n            if (isupper(c)) {\n                ans[ans.length() - 1]\
    \ = tolower(c);\n            } else if (islower(c)) {\n                ans[ans.length()\
    \ - 1] = toupper(c);\n            } else if (prev == 'A' || prev == 'E' || prev\
    \ == 'I' || prev == 'O' || prev == 'U') {\n                ans[ans.length() -\
    \ 1] = c;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsupqedy.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpwsupqedy.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpwsupqedy.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpwsupqedy.cpp: In function 'int main()':\n\
    /tmp/tmpwsupqedy.cpp:33:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsupqedy.cpp:2:\n/tmp/tmpwsupqedy.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (c >= 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i]\
    \ = 'a';\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] =\
    \ 'e';\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans[i] = 'E';\n        }\n    }\n    for (int i\
    \ = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'i';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'I';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'o';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'O';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'u';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'U';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'A';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxfcrpgv.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpwxfcrpgv.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpwxfcrpgv.cpp:75:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpwxfcrpgv.cpp:82:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n        ans += (toupper(c)\
    \ - 'A');\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        ans[i] = tolower(c);\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n        }\n    }\n  \
    \  for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n       \
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \ ans[i] = 'A';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfscizwr.cpp: In function 'int main()':\n/tmp/tmpjfscizwr.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjfscizwr.cpp:2:\n/tmp/tmpjfscizwr.cpp:40:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (c >= 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i]\
    \ = 'a';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = '\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp14ct8pkg.cpp:108:22: warning: missing terminating ' character [enabled\
    \ by default]\n             ans[i] = '\n                      ^\n/tmp/tmp14ct8pkg.cpp:108:13:\
    \ error: missing terminating ' character\n             ans[i] = '\n          \
    \   ^\n/tmp/tmp14ct8pkg.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp14ct8pkg.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp14ct8pkg.cpp:109:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmp14ct8pkg.cpp:109:1:\
    \ error: expected ';' before '}' token\n/tmp/tmp14ct8pkg.cpp:110:12: error: a\
    \ function-definition is not allowed here before '{' token\n int main() {\n  \
    \          ^\n/tmp/tmp14ct8pkg.cpp:117:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp14ct8pkg.cpp:117:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (int i\
    \ = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqoru5fqq.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpqoru5fqq.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpqoru5fqq.cpp:\
    \ In function 'int main()':\n/tmp/tmpqoru5fqq.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqoru5fqq.cpp:2:\n/tmp/tmpqoru5fqq.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for(char &c: message)\
    \ {\n        c = toupper(c);\n        encodedMessage += c;\n    }\n    for(char\
    \ &c: encodedMessage) {\n        c = tolower(c);\n        for(char &d: c) {\n\
    \            d = toupper(d);\n        }\n    }\n    for(char &c: encodedMessage)\
    \ {\n        c = tolower(c);\n        for(char &d: c) {\n            d = tolower(d);\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppe0epgel.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmppe0epgel.cpp:15:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(char &c: message) {\n                  ^\n/tmp/tmppe0epgel.cpp:19:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(char\
    \ &c: encodedMessage) {\n                  ^\n/tmp/tmppe0epgel.cpp:21:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for(char &d:\
    \ c) {\n                      ^\n/tmp/tmppe0epgel.cpp:25:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(char &c: encodedMessage)\
    \ {\n                  ^\n/tmp/tmppe0epgel.cpp:27:22: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for(char &d: c) {\n          \
    \            ^\n/tmp/tmppe0epgel.cpp: In function 'int main()':\n/tmp/tmppe0epgel.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppe0epgel.cpp:2:\n/tmp/tmppe0epgel.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        if (temp >= 'a' && temp <= 'z') {\n            ans\
    \ += temp - 'a' + 2;\n        } else if (temp >= 'A' && temp <= 'Z') {\n     \
    \       ans += temp - 'A' + 2;\n        } else {\n            ans += temp;\n \
    \       }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = c + 2;\n        } else if (c >= 'A' && c <=\
    \ 'Z') {\n            ans[ans.find(c)] = c + 2;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdtfouzh.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmprdtfouzh.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmprdtfouzh.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmprdtfouzh.cpp:25:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmprdtfouzh.cpp:25:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmprdtfouzh.cpp: In function 'int main()':\n/tmp/tmprdtfouzh.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprdtfouzh.cpp:2:\n/tmp/tmprdtfouzh.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char a = c;\n        char b =\
    \ c;\n        char d = c;\n        char e = c;\n        char f = c;\n        char\
    \ g = c;\n        char h = c;\n        char j = c;\n        char k = c;\n    \
    \    char l = c;\n        char m = c;\n        char n = c;\n        char o = c;\n\
    \        char p = c;\n        char q = c;\n        char r = c;\n        char s\
    \ = c;\n        char t = c;\n        char u = c;\n        char v = c;\n      \
    \  char w = c;\n        char x = c;\n        char y = c;\n        char z = c;\n\
    \        char A = c;\n        char B = c;\n        char C = c;\n        char D\
    \ = c;\n        char E = c;\n        char F = c;\n        char G = c;\n      \
    \  char H = c;\n        char I = c;\n        char J = c;\n        char K = c;\n\
    \        char L = c;\n        char M = c;\n        char N = c;\n        char O\
    \ = c;\n        char P = c;\n        char Q = c;\n        char R = c;\n      \
    \  char S = c;\n        char T = c;\n        char U = c;\n        char V = c;\n\
    \        char W = c;\n        char X = c;\n        char Y = c;\n        char Z\
    \ = c;\n        char a1 = c;\n        char a2 = c;\n        char a3 = c;\n   \
    \     char a4 = c;\n        char a5 = c;\n        char a6 = c;\n        char a7\
    \ = c;\n        char a8 = c;\n        char a9 = c;\n        char a10 = c;\n  \
    \      char a11 = c;\n        char a12 = c;\n        char a13 = c;\n        char\
    \ a14 = c;\n        char a15 = c;\n        char a16 = c;\n        char a17 = c;\n\
    \        char a18 = c;\n        char a19 = c;\n        char a20 = c;\n       \
    \ char a21 = c;\n        char a22 = c;\n        char a23 = c;\n        char a24\
    \ = c;\n        char a25 = c;\n        char a26 = c;\n        char a27 = c;\n\
    \        char a28 = c;\n        char a29 = c;\n        char a30 = c;\n       \
    \ char a31 = c;\n        char a32 = c;\n        char a33 = c;\n        char a34\
    \ = c;\n        char a35 = c;\n        char \n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ejpwof8.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp0ejpwof8.cpp:103:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp0ejpwof8.cpp:104:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmp0ejpwof8.cpp:111:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans += c;\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   ans += c + 1;\n        } else if (c >= '0' && c <= '9') {\n            ans\
    \ += c + 2;\n        } else {\n            ans += c;\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i] ==\
    \ 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i]\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs6350so.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmphs6350so.cpp:74:1: error: expected ')' before '}' token\n }\n ^\n/tmp/tmphs6350so.cpp:74:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmphs6350so.cpp:74:1:\
    \ error: expected ';' before '}' token\n/tmp/tmphs6350so.cpp:75:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmphs6350so.cpp:82:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : std::tolower(c);\n   \
    \ }\n    for (auto &c : ans) {\n        std::transform(c.begin(), c.end(), c.begin(),\
    \ ::toupper);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpls5p6it9.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpls5p6it9.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpls5p6it9.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpls5p6it9.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpls5p6it9.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpls5p6it9.cpp:19:26: error: request for member 'begin'\
    \ in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n                          ^\n/tmp/tmpls5p6it9.cpp:19:37:\
    \ error: request for member 'end' in 'c', which is of non-class type 'int'\n \
    \        std::transform(c.begin(), c.end(), c.begin(), ::toupper);\n         \
    \                            ^\n/tmp/tmpls5p6it9.cpp:19:46: error: request for\
    \ member 'begin' in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n                                          \
    \    ^\n/tmp/tmpls5p6it9.cpp:21:16: error: ISO C++ forbids declaration of 'c'\
    \ with no type [-fpermissive]\n     for (auto &c : ans) {\n                ^\n\
    /tmp/tmpls5p6it9.cpp:21:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpls5p6it9.cpp:22:26:\
    \ error: request for member 'begin' in 'c', which is of non-class type 'int'\n\
    \         std::transform(c.begin(), c.end(), c.begin(), ::tolower);\n        \
    \                  ^\n/tmp/tmpls5p6it9.cpp:22:37: error: request for member 'end'\
    \ in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n                                     ^\n/tmp/tmpls5p6it9.cpp:22:46:\
    \ error: request for member 'begin' in 'c', which is of non-class type 'in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char currentChar = message[i];\n        char\
    \ nextChar = message[i+1];\n        if (currentChar == 'a' || currentChar == 'e'\
    \ || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n     \
    \       encodedMessage += nextChar;\n        }\n        else if (currentChar ==\
    \ 'A' || currentChar == 'E' || currentChar == 'I' || currentChar == 'O' || currentChar\
    \ == 'U') {\n            encodedMessage += nextChar;\n        }\n        else\
    \ {\n            encodedMessage += currentChar;\n        }\n    }\n    return\
    \ encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8tf84xe.cpp: In function 'int main()':\n/tmp/tmpn8tf84xe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn8tf84xe.cpp:2:\n/tmp/tmpn8tf84xe.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'A':\n            case 'a':\n           \
    \     ans += \"a\";\n                break;\n            case 'B':\n         \
    \   case 'b':\n                ans += \"b\";\n                break;\n       \
    \     case 'C':\n            case 'c':\n                ans += \"c\";\n      \
    \          break;\n            case 'D':\n            case 'd':\n            \
    \    ans += \"d\";\n                break;\n            case 'E':\n          \
    \  case 'e':\n                ans += \"e\";\n                break;\n        \
    \    case 'F':\n            case 'f':\n                ans += \"f\";\n       \
    \         break;\n            case 'G':\n            case 'g':\n             \
    \   ans += \"g\";\n                break;\n            case 'H':\n           \
    \ case 'h':\n                ans += \"h\";\n                break;\n         \
    \   case 'I':\n            case 'i':\n                ans += \"i\";\n        \
    \        break;\n            case 'J':\n            case 'j':\n              \
    \  ans += \"j\";\n                break;\n            case 'K':\n            case\
    \ 'k':\n                ans += \"k\";\n                break;\n            case\
    \ 'L':\n            case 'l':\n                ans += \"l\";\n               \
    \ break;\n            case 'M':\n            case 'm':\n                ans +=\
    \ \"m\";\n                break;\n            case 'N':\n            case 'n':\n\
    \                ans += \"n\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                ans += \"o\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                ans += \"p\";\n\
    \                break;\n            case 'Q':\n            case 'q':\n      \
    \          ans += \"q\";\n                break;\n            case 'R':\n    \
    \        case 'r':\n                ans += \"r\";\n                break;\n  \
    \          case 'S':\n            case 's':\n                ans += \"s\";\n \
    \               break;\n            case 'T':\n            case 't':\n       \
    \         ans += \"t\";\n                break;\n            case 'U':\n     \
    \       case 'u':\n                ans += \"u\";\n                break;\n   \
    \         case 'V':\n            case 'v':\n                ans += \"v\";\n  \
    \              break;\n            case 'W':\n            case 'w':\n        \
    \        ans += \"w\";\n                break;\n            case 'X':\n      \
    \      case 'x':\n                ans += \"x\";\n                break;\n    \
    \        case 'Y':\n            case 'y':\n                ans += \"y\";\n   \
    \             break;\n            case 'Z':\n            case 'z':\n         \
    \       ans += \"z\";\n                break;\n            default:\n        \
    \        ans += c;\n        }\n    }\n    for (auto &c : ans) {\n        switch\
    \ (c) {\n            case 'a':\n            case 'A':\n                ans[ans.size()\
    \ - 2] = 'A';\n                break;\n            case 'b':\n            case\
    \ 'B':\n                an\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqpy6s830.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpqpy6s830.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpqpy6s830.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpqpy6s830.cpp:125:16: error:\
    \ ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto\
    \ &c : ans) {\n                ^\n/tmp/tmpqpy6s830.cpp:125:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpqpy6s830.cpp:133:17: error: 'an' was not declared\
    \ in this scope\n                 an\n                 ^\n/tmp/tmpqpy6s830.cpp:134:1:\
    \ error: expected ';' before '}' token\n }\n ^\n/tmp/tmpqpy6s830.cpp:135:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmpqpy6s830.cpp:142:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpqpy6s830.cpp:142:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char nextC = message[i+1];\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans += nextC;\n        }\n        else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n            ans += nextC;\n        }\n     \
    \   else {\n            ans += c;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz77zm67j.cpp: In function 'int main()':\n/tmp/tmpz77zm67j.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz77zm67j.cpp:2:\n/tmp/tmpz77zm67j.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n        case 'a':\n            ans += \"A\";\n           \
    \ break;\n        case 'b':\n            ans += \"B\";\n            break;\n \
    \       case 'c':\n            ans += \"C\";\n            break;\n        case\
    \ 'd':\n            ans += \"D\";\n            break;\n        case 'e':\n   \
    \         ans += \"E\";\n            break;\n        case 'f':\n            ans\
    \ += \"F\";\n            break;\n        case 'g':\n            ans += \"G\";\n\
    \            break;\n        case 'h':\n            ans += \"H\";\n          \
    \  break;\n        case 'i':\n            ans += \"I\";\n            break;\n\
    \        case 'j':\n            ans += \"J\";\n            break;\n        case\
    \ 'k':\n            ans += \"K\";\n            break;\n        case 'l':\n   \
    \         ans += \"L\";\n            break;\n        case 'm':\n            ans\
    \ += \"M\";\n            break;\n        case 'n':\n            ans += \"N\";\n\
    \            break;\n        case 'o':\n            ans += \"O\";\n          \
    \  break;\n        case 'p':\n            ans += \"P\";\n            break;\n\
    \        case 'q':\n            ans += \"Q\";\n            break;\n        case\
    \ 'r':\n            ans += \"R\";\n            break;\n        case 's':\n   \
    \         ans += \"S\";\n            break;\n        case 't':\n            ans\
    \ += \"T\";\n            break;\n        case 'u':\n            ans += \"U\";\n\
    \            break;\n        case 'v':\n            ans += \"V\";\n          \
    \  break;\n        case 'w':\n            ans += \"W\";\n            break;\n\
    \        case 'x':\n            ans += \"X\";\n            break;\n        case\
    \ 'y':\n            ans += \"Y\";\n            break;\n        case 'z':\n   \
    \         ans += \"Z\";\n            break;\n        default:\n            ans\
    \ += c;\n            break;\n        }\n    }\n    for (auto &c : ans) {\n   \
    \     switch (c) {\n        case 'A':\n            ans += \"a\";\n           \
    \ break;\n        case 'B':\n            ans += \"b\";\n            break;\n \
    \       case 'C':\n            ans += \"c\";\n            break;\n        case\
    \ 'D':\n            ans += \"d\";\n            break;\n        case 'E':\n   \
    \         ans += \"e\";\n            break;\n        case 'F':\n            ans\
    \ += \"f\";\n            break;\n        case 'G':\n            ans += \"g\";\n\
    \            break;\n        case 'H':\n            ans += \"h\";\n          \
    \  break;\n        case 'I':\n            ans += \"i\";\n            break;\n\
    \        case 'J':\n            ans += \"j\";\n            break;\n        case\
    \ 'K\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5xnknnu5.cpp:132:14: warning: missing terminating ' character [enabled\
    \ by default]\n         case 'K\n              ^\n/tmp/tmp5xnknnu5.cpp:132:9:\
    \ error: missing terminating ' character\n         case 'K\n         ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xnknnu5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_tr"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            c = toupper(c);\n        }\n       \
    \ ans += c;\n    }\n    for (char &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            c = tolower(c);\n        }\n    }\n    for (char &c : ans) {\n  \
    \      if (std::isalpha(c)) {\n            int index = static_cast<int>(c);\n\
    \            if (index >= 'a' && index <= 'z') {\n                c += 2;\n  \
    \          }\n        }\n    }\n    for (char &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            int index = static_cast<int>(c);\n            if (index >= 'a'\
    \ && index <= 'z') {\n                c -= 2;\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqwej1_7c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        if (temp >= 'a' && temp <= 'z') {\n            ans\
    \ += temp - 'a' + 2;\n        } else if (temp >= 'A' && temp <= 'Z') {\n     \
    \       ans += temp - 'A' + 2;\n        } else {\n            ans += temp;\n \
    \       }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = 'a';\n        } else if (c >= 'A' && c <=\
    \ 'Z') {\n            ans[ans.find(c)] = 'A';\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpguckosaw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) - 'a') + \n                (std::toupper(c) - 'A');\n\
    \    }\n    for (auto &c : ans) {\n        if (std::tolower(c) - 'a' > std::toupper(c)\
    \ - 'A') {\n            ans[ans.find(c) - 1] = (std::tolower(c) - 'a') + (std::toupper(c)\
    \ - 'A');\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c) - 1] = (std::tolower(c) - 'a') + (std::toupper(c)\
    \ - 'A');\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4qibpm9q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (auto &c : message)\
    \ {\n        switch (c) {\n            case 'A':\n            case 'a':\n    \
    \            encodedMessage += \"a\";\n                break;\n            case\
    \ 'B':\n            case 'b':\n                encodedMessage += \"b\";\n    \
    \            break;\n            case 'C':\n            case 'c':\n          \
    \      encodedMessage += \"c\";\n                break;\n            case 'D':\n\
    \            case 'd':\n                encodedMessage += \"d\";\n           \
    \     break;\n            case 'E':\n            case 'e':\n                encodedMessage\
    \ += \"e\";\n                break;\n            case 'F':\n            case 'f':\n\
    \                encodedMessage += \"f\";\n                break;\n          \
    \  case 'G':\n            case 'g':\n                encodedMessage += \"g\";\n\
    \                break;\n            case 'H':\n            case 'h':\n      \
    \          encodedMessage += \"h\";\n                break;\n            case\
    \ 'I':\n            case 'i':\n                encodedMessage += \"i\";\n    \
    \            break;\n            case 'J':\n            case 'j':\n          \
    \      encodedMessage += \"j\";\n                break;\n            case 'K':\n\
    \            case 'k':\n                encodedMessage += \"k\";\n           \
    \     break;\n            case 'L':\n            case 'l':\n                encodedMessage\
    \ += \"l\";\n                break;\n            case 'M':\n            case 'm':\n\
    \                encodedMessage += \"m\";\n                break;\n          \
    \  case 'N':\n            case 'n':\n                encodedMessage += \"n\";\n\
    \                break;\n            case 'O':\n            case 'o':\n      \
    \          encodedMessage += \"o\";\n                break;\n            case\
    \ 'P':\n            case 'p':\n                encodedMessage += \"p\";\n    \
    \            break;\n            case 'Q':\n            case 'q':\n          \
    \      encodedMessage += \"q\";\n                break;\n            case 'R':\n\
    \            case 'r':\n                encodedMessage += \"r\";\n           \
    \     break;\n            case 'S':\n            case 's':\n                encodedMessage\
    \ += \"s\";\n                break;\n            case 'T':\n            case 't':\n\
    \                encodedMessage += \"t\";\n                break;\n          \
    \  case 'U':\n            case 'u':\n                encodedMessage += \"u\";\n\
    \                break;\n            case 'V':\n            case 'v':\n      \
    \          encodedMessage += \"v\";\n                break;\n            case\
    \ 'W':\n            case 'w':\n                encodedMessage += \"w\";\n    \
    \            break;\n            case 'X':\n            case 'x':\n          \
    \      encodedMessage += \"x\";\n                break;\n            case 'Y':\n\
    \            case 'y':\n                encodedMessage += \"y\";\n           \
    \     break;\n            case 'Z':\n            case 'z':\n                encodedMessage\
    \ += \"z\";\n                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    for (auto &c : encodedMessage) {\n        switch (c) {\n\
    \            case 'a':\n            case 'A':\n                encodedMessage\
    \ = encodedMessage.replace(\"a\", \"A\");\n                break;\n          \
    \  case 'b':\n            case 'B':\n                encoded\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nf0typn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char c :\
    \ ans) {\n        ans.replace(ans.find(c), 1, 1, std::tolower(c));\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps7hcmowt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto c : message) {\n\
    \        switch (c) {\n            case 'a':\n                encoded += \"A\"\
    ;\n                break;\n            case 'b':\n                encoded += \"\
    B\";\n                break;\n            case 'c':\n                encoded +=\
    \ \"C\";\n                break;\n            case 'd':\n                encoded\
    \ += \"D\";\n                break;\n            case 'e':\n                encoded\
    \ += \"E\";\n                break;\n            case 'f':\n                encoded\
    \ += \"F\";\n                break;\n            case 'g':\n                encoded\
    \ += \"G\";\n                break;\n            case 'h':\n                encoded\
    \ += \"H\";\n                break;\n            case 'i':\n                encoded\
    \ += \"I\";\n                break;\n            case 'j':\n                encoded\
    \ += \"J\";\n                break;\n            case 'k':\n                encoded\
    \ += \"K\";\n                break;\n            case 'l':\n                encoded\
    \ += \"L\";\n                break;\n            case 'm':\n                encoded\
    \ += \"M\";\n                break;\n            case 'n':\n                encoded\
    \ += \"N\";\n                break;\n            case 'o':\n                encoded\
    \ += \"O\";\n                break;\n            case 'p':\n                encoded\
    \ += \"P\";\n                break;\n            case 'q':\n                encoded\
    \ += \"Q\";\n                break;\n            case 'r':\n                encoded\
    \ += \"R\";\n                break;\n            case 's':\n                encoded\
    \ += \"S\";\n                break;\n            case 't':\n                encoded\
    \ += \"T\";\n                break;\n            case 'u':\n                encoded\
    \ += \"U\";\n                break;\n            case 'v':\n                encoded\
    \ += \"V\";\n                break;\n            case 'w':\n                encoded\
    \ += \"W\";\n                break;\n            case 'x':\n                encoded\
    \ += \"X\";\n                break;\n            case 'y':\n                encoded\
    \ += \"Y\";\n                break;\n            case 'z':\n                encoded\
    \ += \"Z\";\n                break;\n            case 'A':\n                encoded\
    \ += \"a\";\n                break;\n            case 'B':\n                encoded\
    \ += \"b\";\n                break;\n            case 'C':\n                encoded\
    \ += \"c\";\n                break;\n            case 'D':\n                encoded\
    \ += \"d\";\n                break;\n            case 'E':\n                encoded\
    \ += \"e\";\n                break;\n            case 'F':\n                encoded\
    \ += \"f\";\n                break;\n            case 'G':\n                encoded\
    \ += \"g\";\n                break;\n            case 'H':\n                encoded\
    \ += \"h\";\n                break;\n            case 'I':\n                encoded\
    \ += \"i\";\n                break;\n            case 'J':\n                encoded\
    \ += \"j\";\n                break;\n            case 'K':\n                encoded\
    \ += \"k\";\n                break;\n            case 'L':\n                encoded\
    \ += \"l\";\n                break;\n            case 'M':\n                encoded\
    \ += \"m\";\n                break;\n            case 'N':\n                encoded\
    \ += \"n\";\n                break;\n            case 'O':\n                encoded\
    \ += \"o\";\n                break;\n            case 'P':\n                \n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4lnr3ktn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     char c = i;\n        ans += c;\n    }\n    for (auto &i : ans) {\n     \
    \   char c = i;\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[ans.find(c) + 1] = 'A';\n        }\n        if (c\
    \ == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = 'O';\n        }\n\
    \        if (c == 'i' || c == 'e') {\n            ans[ans.find(c) + 1] = 'E';\n\
    \        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = 'A';\n        }\n        if (c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 1] = 'O';\n        }\n       \
    \ if (c == 'i' || c == 'e') {\n            ans[ans.find(c) + 1] = 'E';\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz9n4w6c2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n        ans += (c >=\
    \ 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ntd1xzs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    for (char c :\
    \ ans) {\n        ans[ans.find(c) - 2] = std::tolower(c);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfah07ubz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        ans += message[i];\n        for(int j=i+1;j<message.length();j++) {\n\
    \            if(message[i]==message[j]) {\n                ans += message[j];\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3d6645d2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans += c;\n        }\n        else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  ans += 'A';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += 'a';\n        }\n        else if\
    \ (c == 'O') {\n            ans += 'O';\n        }\n        else if (c == 'o')\
    \ {\n            ans += 'o';\n        }\n        else if (c == 'U') {\n      \
    \      ans += 'U';\n        }\n        else if (c == 'u') {\n            ans +=\
    \ 'u';\n        }\n        else if (c == 'I' || c == 'i') {\n            ans +=\
    \ 'I';\n        }\n        else if (c == 'i') {\n            ans += 'i';\n   \
    \     }\n        else if (c == 'E' || c == 'e') {\n            ans += 'E';\n \
    \       }\n        else if (c == 'e') {\n            ans += 'e';\n        }\n\
    \        else if (c == 'A' || c == 'a') {\n            ans += 'A';\n        }\n\
    \        else if (c == 'a') {\n            ans += 'a';\n        }\n        else\
    \ if (c == 'T' || c == 't') {\n            ans += 'T';\n        }\n        else\
    \ if (c == 't') {\n            ans += 't';\n        }\n        else if (c == 'G'\
    \ || c == 'g') {\n            ans += 'G';\n        }\n        else if (c == 'g')\
    \ {\n            ans += 'g';\n        }\n        else if (c == 'K' || c == 'k')\
    \ {\n            ans += 'K';\n        }\n        else if (c == 'k') {\n      \
    \      ans += 'k';\n        }\n        else if (c == 'S' || c == 's') {\n    \
    \        ans += 'S';\n        }\n        else if (c == 's') {\n            ans\
    \ += 's';\n        }\n        else if (c == 'C' || c == 'c') {\n            ans\
    \ += 'C';\n        }\n        else if (c == 'c') {\n            ans += 'c';\n\
    \        }\n        else if (c == 'M' || c == 'm') {\n            ans += 'M';\n\
    \        }\n        else if (c == 'm') {\n            ans += 'm';\n        }\n\
    \        else if (c == 'G' || c == 'g') {\n            ans += 'G';\n        }\n\
    \        else if (c == 'g') {\n            ans += 'g';\n        }\n        else\
    \ if (c == 'K' || c == 'k') {\n            ans += 'K';\n        }\n        else\
    \ if (\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwzhi8ggz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        }\n \
    \       else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            encoded += c + 2;\n        }\n        else {\n            encoded\
    \ += c;\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp21_oiphs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto c : message) {\n    \
    \    ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto c :\
    \ message) {\n        ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2n58uk9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = std::tolower(c);\n        }\n   \
    \ }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = std::toupper(c);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpak709oq6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if \n}\nint main() {\n \
    \   auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpleedp3e7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for(int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            encodedMessage += c;\n        }\n\
    \        else {\n            int index = c - 'a';\n            int index2 = index\
    \ + 2;\n            char temp = message[i];\n            message[i] = message[index2];\n\
    \            message[index2] = temp;\n            encodedMessage += message[i];\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptg0y6qce.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            encoded += c;\n        } else\
    \ {\n            char nextLetter = message[(i + 2) % message.length()];\n    \
    \        encoded += nextLetter;\n        }\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpocnm51zs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for (char c : message) {\n\
    \        encodedMessage += toupper(c);\n    }\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            encodedMessage += tolower(c);\n\
    \        }\n        else if (c >= 'A' && c <= 'Z') {\n            encodedMessage\
    \ += toupper(c);\n        }\n        else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n    \
    \    }\n    }\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            encodedMessage += tolower(c);\n        }\n        else if (c\
    \ >= 'A' && c <= 'Z') {\n            encodedMessage += toupper(c);\n        }\n\
    \        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            encodedMessage += tolower(c);\n        }\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmz8h2_rq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    for (auto &c\
    \ : ans) {\n        ans[ans.find(c) - 1] = (std::tolower(c) - 'a' + 1) % 26 +\
    \ 'a';\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3scbnm2t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (isupper(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n        if (islower(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjrhu6g8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto c : message) {\n    \
    \    ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto c :\
    \ ans) {\n        ans.replace(ans.find(c), 1, 1, std::tolower(c));\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvslkrx9p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for(int i = 0; i < message.size();\
    \ i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += message[i] - 'a' + 'A';\n        } else if(message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encodedMessage += message[i] - 'A' + 'a';\n        }\
    \ else {\n            encodedMessage += message[i];\n        }\n    }\n    return\
    \ encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo194bjzs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        auto pos = find(ans.begin(), ans.end(), c);\n        if (pos\
    \ != ans.end()) {\n            ans.replace(pos, 1, tolower(ans[pos + 1]));\n \
    \       }\n    }\n    for (auto &c : ans) {\n        auto pos = find(ans.begin(),\
    \ ans.end(), c);\n        if (pos != ans.end()) {\n            ans.replace(pos,\
    \ 1, toupper(ans[pos + 1]));\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd8rs01dp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        }\n        else if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n        }\n    \
    \    else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n  \
    \          ans += 'a';\n        }\n        else if (c == 'O') {\n            ans\
    \ += 'O';\n        }\n        else if (c == 'o') {\n            ans += 'o';\n\
    \        }\n        else if (c == 'U') {\n            ans += 'U';\n        }\n\
    \        else if (c == 'u') {\n            ans += 'u';\n        }\n        else\
    \ if (c == 'I') {\n            ans += 'I';\n        }\n        else if (c == 'i')\
    \ {\n            ans += 'i';\n        }\n        else if (c == 'E') {\n      \
    \      ans += 'E';\n        }\n        else if (c == 'e') {\n            ans +=\
    \ 'e';\n        }\n        else if (c == 'A') {\n            ans += 'A';\n   \
    \     }\n        else if (c == 'a') {\n            ans += 'a';\n        }\n  \
    \      else if (c == 'S') {\n            ans += 'S';\n        }\n        else\
    \ if (c == 's') {\n            ans += 's';\n        }\n        else if (c == 'C')\
    \ {\n            ans += 'C';\n        }\n        else if (c == 'c') {\n      \
    \      ans += 'c';\n        }\n        else if (c == 'M') {\n            ans +=\
    \ 'M';\n        }\n        else if (c == 'm') {\n            ans += 'm';\n   \
    \     }\n        else if (c == 'G') {\n            ans += 'G';\n        }\n  \
    \      else if (c == 'g') {\n            ans += 'g';\n        }\n        else\
    \ if (c == 'K') {\n            ans += 'K';\n        }\n        else if (c == 'k')\
    \ {\n            ans += 'k';\n        }\n        else if (c == 'T') {\n      \
    \      ans += 'T';\n        }\n        else if (c == 't') {\n            ans +=\
    \ 't';\n        }\n        else if (c == 'H') {\n            ans += 'H';\n   \
    \     }\n        else if (c == 'h') {\n            ans += 'h';\n        }\n  \
    \      else if (c == 'R') {\n            ans += 'R';\n        }\n        else\
    \ if (c == 'r') {\n            ans += 'r';\n        }\n        else if (c == 'P')\
    \ {\n            ans += 'P';\n        }\n        else if (c == 'p') {\n      \
    \      ans += '\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshji8x93.cpp:108:20: warning: missing terminating ' character [enabled\
    \ by default]\n             ans += '\n                    ^\n/tmp/tmpshji8x93.cpp:108:13:\
    \ error: missing terminating ' character\n             ans += '\n            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshji8x93.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ boo"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto c : message) {\n    \
    \    ans += (tolower(c) == c) ? toupper(c) : tolower(c);\n    }\n    for (auto\
    \ c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyohip4rb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += ((message[i] - 'a') + 2) % 26 + 'a';\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpldwebdhj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n            case 'a':\n            case 'e':\n           \
    \ case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += \"A\";\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'n':\n            case 'r':\n            case 't':\n       \
    \         ans += \"B\";\n                break;\n            case 'c':\n     \
    \       case 'g':\n            case 'j':\n            case 'k':\n            case\
    \ 'm':\n                ans += \"C\";\n                break;\n            case\
    \ 'd':\n            case 'h':\n            case 'j':\n            case 'k':\n\
    \            case 'n':\n                ans += \"D\";\n                break;\n\
    \            case 'e':\n            case 'h':\n            case 'k':\n       \
    \     case 'n':\n                ans += \"E\";\n                break;\n     \
    \       case 'f':\n            case 'h':\n            case 'k':\n            case\
    \ 'n':\n                ans += \"F\";\n                break;\n            case\
    \ 'g':\n            case 'h':\n            case 'j':\n            case 'k':\n\
    \            case 'm':\n                ans += \"G\";\n                break;\n\
    \            case 'h':\n            case 'j':\n            case 'k':\n       \
    \     case 'n':\n                ans += \"H\";\n                break;\n     \
    \       case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'n':\n                ans += \"I\";\n                break;\n            case\
    \ 'j':\n            case 'k':\n            case 'n':\n                ans += \"\
    J\";\n                break;\n            case 'k':\n            case 'n':\n \
    \               ans += \"K\";\n                break;\n            case 'l':\n\
    \            case 'm':\n            case 'n':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n            case 'n':\n      \
    \          ans += \"M\";\n                break;\n            case 'n':\n    \
    \            ans += \"N\";\n                break;\n            case 'o':\n  \
    \          case 'p':\n            case 'q':\n            case 'r':\n         \
    \   case 's':\n                ans += \"O\";\n                break;\n       \
    \     case 'p':\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n                ans += \"P\";\n                break;\n            case\
    \ 'q':\n            case 'r':\n            case 's':\n                ans += \"\
    Q\";\n                break;\n            case 'r':\n            case 's':\n \
    \               ans += \"R\";\n                break;\n            case 's':\n\
    \                ans += \"S\";\n                break;\n            case 't':\n\
    \            case 'u':\n            case 'v':\n            case 'w':\n       \
    \     case 'x':\n            case 'y':\n            case 'z':\n              \
    \  ans += \"T\";\n                break;\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmcdejn16.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        ans += message[i];\n    }\n    for(int i = 0; i < ans.length(); i++)\
    \ {\n        if(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i + 1];\n        }\n    }\n  \
    \  for(int i = 0; i < ans.length(); i++) {\n        if(ans[i] == 'A' || ans[i]\
    \ == 'E' || ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U') {\n            ans[i]\
    \ = ans[i + 1];\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n\
    \        if(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' ||\
    \ ans[i] == 'u') {\n            ans[i] = ans[i + 1];\n        }\n    }\n    for(int\
    \ i = 0; i < ans.length(); i++) {\n        if(ans[i] == 'A' || ans[i] == 'E' ||\
    \ ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U') {\n            ans[i] = ans[i\
    \ + 1];\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i]\
    \ == 'u') {\n            ans[i] = ans[i + 1];\n        }\n    }\n    for(int i\
    \ = 0; i < ans.length(); i++) {\n        if(ans[i] == 'A' || ans[i] == 'E' ||\
    \ ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U') {\n            ans[i] = ans[i\
    \ + 1];\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i]\
    \ == 'u') {\n            ans[i] = ans[i + 1];\n        }\n    }\n    for(int i\
    \ = 0; i < ans.length(); i++) {\n        if(ans[i] == 'A' || ans[i] == 'E' ||\
    \ ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U') {\n            ans[i] = ans[i\
    \ + 1];\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i]\
    \ == 'u') {\n            ans[i] = ans[i + 1];\n        }\n    }\n    for(int i\
    \ = 0; i < ans.length(); i++) {\n        if(ans[i] == 'A' || ans[i] == 'E' ||\
    \ ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U') {\n            ans[i] = ans[i\
    \ + 1];\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(ans[i] == 'a' || ans[i] == 'e' || ans[i]\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt5c4u9rv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if \n}\nint main() {\n \
    \   auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfmbi6rr5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c: message) {\n    \
    \    ans += (tolower(c) == c) ? toupper(c) : tolower(c);\n    }\n    for (auto\
    \ &c: ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n    }\n \
    \   for (auto &c: ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = tolower(c);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz2rqg65_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (auto\
    \ &c : ans) {\n        if (isalpha(c)) {\n            int index = c - 'a';\n \
    \           if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n   \
    \ for (auto &c : ans) {\n        if (isalpha(c)) {\n            int index = c\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                ans[ans.length()\
    \ - 1] += (index == 0) ? \"A\" : \"a\";\n            }\n        }\n    }\n\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn6cgb4h_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        if (std::isalpha(c)) {\n            char temp = c;\n            std::swap(temp,\
    \ std::toupper(c));\n            encoded.append(temp);\n        }\n        else\
    \ if (std::isupper(c)) {\n            char temp = c;\n            std::swap(temp,\
    \ std::tolower(c));\n            encoded.append(temp);\n        }\n        else\
    \ if (std::islower(c)) {\n            char temp = c;\n            encoded.append(temp);\n\
    \        }\n        else if (std::isdigit(c)) {\n            char temp = c;\n\
    \            encoded.append(temp);\n        }\n        else if (std::isspace(c))\
    \ {\n            char temp = c;\n            encoded.append(temp);\n        }\n\
    \        else if (c == '.') {\n            encoded.append(\". \");\n        }\n\
    \        else if (c == '!') {\n            encoded.append(\"! \");\n        }\n\
    \        else if (c == '?') {\n            encoded.append(\"? \");\n        }\n\
    \        else if (c == '-') {\n            encoded.append(\"-\");\n        }\n\
    \        else if (c == '_') {\n            encoded.append(\"_\");\n        }\n\
    \        else if (c == '/') {\n            encoded.append(\"/\");\n        }\n\
    \        else if (c == '\\\\') {\n            encoded.append(\"\\\\\");\n    \
    \    }\n        else if (c == '<') {\n            encoded.append(\"<\");\n   \
    \     }\n        else if (c == '>') {\n            encoded.append(\">\");\n  \
    \      }\n        else if (c == '%') {\n            encoded.append(\"%\");\n \
    \       }\n        else if (c == '&') {\n            encoded.append(\"&\");\n\
    \        }\n        else if (c == '(') {\n            encoded.append(\"(\");\n\
    \        }\n        else if (c == ')') {\n            encoded.append(\")\");\n\
    \        }\n        else if (c == '[') {\n            encoded.append(\"[\");\n\
    \        }\n        else if (c == ']') {\n            encoded.append(\"]\");\n\
    \        }\n        else if (c == '{') {\n            encoded.append(\"{\");\n\
    \        }\n        else if (c == '}') {\n            encoded.append(\"}\");\n\
    \        }\n        else if (c == '*') {\n            encoded.append(\"*\");\n\
    \        }\n        else if (c == '+') {\n            encoded.append(\"+\");\n\
    \        }\n        else if (c == '=') {\n            encoded.append(\"=\");\n\
    \        }\n        else if (c == '^') {\n            encoded.append(\"^\");\n\
    \        }\n        else if (c == '~') {\n            encoded.append(\"~\");\n\
    \        }\n        else if (c == '|') {\n            encoded.append(\"|\");\n\
    \        }\n        else if (c == '`') {\n            encoded.append(\"`\");\n\
    \        }\n        else if (c == '?') {\n            encoded.append(\"?\");\n\
    \        }\n        else if (\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnikxupvx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n      \
    \      ans += i;\n        } else {\n            ans += 'A' + (i - 'a');\n    \
    \    }\n    }\n    for (auto &i : ans) {\n        if (i == 'A') {\n          \
    \  ans += 'a';\n        } else {\n            ans += i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxwpbotj2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for(int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if(isalpha(c)) {\n           \
    \ int index = c - 'a';\n            int index2 = c - 'A';\n            if(index\
    \ == index2) {\n                encodedMessage += c;\n            } else {\n \
    \               encodedMessage += tolower(c);\n            }\n        } else {\n\
    \            encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc9y5qk5h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n\
    \        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans += 'a';\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5bhwgixa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += 'a';\n        }\n        else if(c == 'B' || c == 'F' || c == 'J' ||\
    \ c == 'L' || c == 'N' || c == 'P' || c == 'R' || c == 'S' || c == 'T' || c ==\
    \ 'V' || c == 'W' || c == 'Y') {\n            ans += 'b';\n        }\n       \
    \ else if(c == 'C' || c == 'G' || c == 'K' || c == 'M' || c == 'O' || c == 'Q'\
    \ || c == 'S' || c == 'T' || c == 'X' || c == 'Z') {\n            ans += 'c';\n\
    \        }\n        else if(c == 'D' || c == 'H' || c == 'J' || c == 'L' || c\
    \ == 'N' || c == 'P' || c == 'R' || c == 'S' || c == 'T' || c == 'X' || c == 'Z')\
    \ {\n            ans += 'd';\n        }\n        else if(c == 'E' || c == 'F'\
    \ || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'O' || c\
    \ == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W'\
    \ || c == 'Y') {\n            ans += 'e';\n        }\n        else if(c == 'F'\
    \ || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'O' || c\
    \ == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W'\
    \ || c == 'Y') {\n            ans += 'f';\n        }\n        else if(c == 'G'\
    \ || c == 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'O' || c == 'P' || c\
    \ == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y')\
    \ {\n            ans += 'g';\n        }\n        else if(c == 'H' || c == 'I'\
    \ || c == 'J' || c == 'K' || c == 'M' || c == 'O' || c == 'P' || c == 'Q' || c\
    \ == 'R' || c == 'S' || c == 'T' || \n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyxv33n20.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char &c : message) {\n\
    \        c = toupper(c);\n        if (c >= 'A' && c <= 'Z') {\n            c =\
    \ tolower(c);\n        }\n        encoded = encoded + c;\n    }\n    for (char\
    \ &c : encoded) {\n        c = tolower(c);\n        if (c >= 'a' && c <= 'z')\
    \ {\n            c = toupper(c);\n        }\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzbnckwmh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o'\
    \ || message[i]=='u'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O'\
    \ || message[i]=='U'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='b' || message[i]=='c' || message[i]=='d' || message[i]=='f'\
    \ || message[i]=='g' || message[i]=='h' || message[i]=='j' || message[i]=='k'\
    \ || message[i]=='l' || message[i]=='m' || message[i]=='n' || message[i]=='p'\
    \ || message[i]=='q' || message[i]=='r' || message[i]=='s' || message[i]=='t'\
    \ || message[i]=='v' || message[i]=='w' || message[i]=='x' || message[i]=='y'\
    \ || message[i]=='z'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='B' || message[i]=='C' || message[i]=='D' || message[i]=='F'\
    \ || message[i]=='G' || message[i]=='H' || message[i]=='J' || message[i]=='K'\
    \ || message[i]=='L' || message[i]=='M' || message[i]=='N' || message[i]=='P'\
    \ || message[i]=='Q' || message[i]=='R' || message[i]=='S' || message[i]=='T'\
    \ || message[i]=='V' || message[i]=='W' || message[i]=='X' || message[i]=='Y'\
    \ || message[i]=='Z'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='0'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='1'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='2'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='3'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='4'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='5'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='6'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='7'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='8'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='9'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='.'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='-'){\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4jns2gu7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(isalpha(c)) {\n           \
    \ ans += toupper(c);\n        }\n        else {\n            ans += c;\n     \
    \   }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if(isalpha(c)) {\n            ans[i] = toupper(ans[i+1]);\n        }\n\
    \    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if(isalpha(c)) {\n            ans[i] = tolower(ans[i+1]);\n        }\n\
    \    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if(isalpha(c)) {\n            ans[i] = tolower(ans[i+1]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpovbxbeoz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_a0p7t7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (auto &c : message)\
    \ {\n        switch (c) {\n        case 'A':\n        case 'a':\n            encodedMessage\
    \ += \"a\";\n            break;\n        case 'B':\n        case 'b':\n      \
    \      encodedMessage += \"b\";\n            break;\n        case 'C':\n     \
    \   case 'c':\n            encodedMessage += \"c\";\n            break;\n    \
    \    case 'D':\n        case 'd':\n            encodedMessage += \"d\";\n    \
    \        break;\n        case 'E':\n        case 'e':\n            encodedMessage\
    \ += \"e\";\n            break;\n        case 'F':\n        case 'f':\n      \
    \      encodedMessage += \"f\";\n            break;\n        case 'G':\n     \
    \   case 'g':\n            encodedMessage += \"g\";\n            break;\n    \
    \    case 'H':\n        case 'h':\n            encodedMessage += \"h\";\n    \
    \        break;\n        case 'I':\n        case 'i':\n            encodedMessage\
    \ += \"i\";\n            break;\n        case 'J':\n        case 'j':\n      \
    \      encodedMessage += \"j\";\n            break;\n        case 'K':\n     \
    \   case 'k':\n            encodedMessage += \"k\";\n            break;\n    \
    \    case 'L':\n        case 'l':\n            encodedMessage += \"l\";\n    \
    \        break;\n        case 'M':\n        case 'm':\n            encodedMessage\
    \ += \"m\";\n            break;\n        case 'N':\n        case 'n':\n      \
    \      encodedMessage += \"n\";\n            break;\n        case 'O':\n     \
    \   case 'o':\n            encodedMessage += \"o\";\n            break;\n    \
    \    case 'P':\n        case 'p':\n            encodedMessage += \"p\";\n    \
    \        break;\n        case 'Q':\n        case 'q':\n            encodedMessage\
    \ += \"q\";\n            break;\n        case 'R':\n        case 'r':\n      \
    \      encodedMessage += \"r\";\n            break;\n        case 'S':\n     \
    \   case 's':\n            encodedMessage += \"s\";\n            break;\n    \
    \    case 'T':\n        case 't':\n            encodedMessage += \"t\";\n    \
    \        break;\n        case 'U':\n        case 'u':\n            encodedMessage\
    \ += \"u\";\n            break;\n        case 'V':\n        case 'v':\n      \
    \      encodedMessage += \"v\";\n            break;\n        case 'W':\n     \
    \   case 'w':\n            encodedMessage += \"w\";\n            break;\n    \
    \    case 'X':\n        case 'x':\n            encodedMessage += \"x\";\n    \
    \        break;\n        case 'Y':\n        case 'y':\n            encodedMessage\
    \ += \"y\";\n            break;\n        case 'Z':\n        case 'z':\n      \
    \      encodedMessage += \"z\";\n            break;\n        default:\n      \
    \      encodedMessage += c;\n        }\n    }\n    return encodedMessage;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmfky2vob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppk415g0z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n        }\n  \
    \  }\n    for (auto &c : ans) {\n        if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuo4xwz5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfbk92ukq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for(int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            encodedMessage += message[i];\n\
    \        }\n        else {\n            int index = c - 'a';\n            int\
    \ index2 = index - 2;\n            char temp;\n            if(index2 >= 0 && index2\
    \ < 26) {\n                temp = message[index];\n                message[index]\
    \ = message[index2];\n                message[index2] = temp;\n            }\n\
    \            encodedMessage += message[index];\n        }\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2cj7z13w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            ans += 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwoetl88g.cpp:69:61: warning: missing terminating ' character [enabled\
    \ by default]\n         } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O\n\
    \                                                             ^\n/tmp/tmpwoetl88g.cpp:69:9:\
    \ error: missing terminating ' character\n         } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O\n         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwoetl88g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skyl"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n            case 'a':\n                ans += \"A\";\n   \
    \             break;\n            case 'b':\n                ans += \"B\";\n \
    \               break;\n            case 'c':\n                ans += \"C\";\n\
    \                break;\n            case 'd':\n                ans += \"D\";\n\
    \                break;\n            case 'e':\n                ans += \"E\";\n\
    \                break;\n            case 'f':\n                ans += \"F\";\n\
    \                break;\n            case 'g':\n                ans += \"G\";\n\
    \                break;\n            case 'h':\n                ans += \"H\";\n\
    \                break;\n            case 'i':\n                ans += \"I\";\n\
    \                break;\n            case 'j':\n                ans += \"J\";\n\
    \                break;\n            case 'k':\n                ans += \"K\";\n\
    \                break;\n            case 'l':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n                ans += \"M\";\n\
    \                break;\n            case 'n':\n                ans += \"N\";\n\
    \                break;\n            case 'o':\n                ans += \"O\";\n\
    \                break;\n            case 'p':\n                ans += \"P\";\n\
    \                break;\n            case 'q':\n                ans += \"Q\";\n\
    \                break;\n            case 'r':\n                ans += \"R\";\n\
    \                break;\n            case 's':\n                ans += \"S\";\n\
    \                break;\n            case 't':\n                ans += \"T\";\n\
    \                break;\n            case 'u':\n                ans += \"U\";\n\
    \                break;\n            case 'v':\n                ans += \"V\";\n\
    \                break;\n            case 'w':\n                ans += \"W\";\n\
    \                break;\n            case 'x':\n                ans += \"X\";\n\
    \                break;\n            case 'y':\n                ans += \"Y\";\n\
    \                break;\n            case 'z':\n                ans += \"Z\";\n\
    \                break;\n            case 'A':\n                ans += \"a\";\n\
    \                break;\n            case 'B':\n                ans += \"b\";\n\
    \                break;\n            case 'C':\n                ans += \"c\";\n\
    \                break;\n            case 'D':\n                ans += \"d\";\n\
    \                break;\n            case 'E':\n                ans += \"e\";\n\
    \                break;\n            case 'F':\n                ans += \"f\";\n\
    \                break;\n            case 'G':\n                ans += \"g\";\n\
    \                break;\n            case 'H':\n                ans += \"h\";\n\
    \                break;\n            case 'I':\n                ans += \"i\";\n\
    \                break;\n            case 'J':\n                ans += \"j\";\n\
    \                break;\n            case 'K':\n                ans += \"k\";\n\
    \                break;\n            case 'L':\n                ans += \"l\";\n\
    \                break;\n            case 'M\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjrqi2p3.cpp:131:18: warning: missing terminating ' character [enabled\
    \ by default]\n             case 'M\n                  ^\n/tmp/tmpgjrqi2p3.cpp:131:13:\
    \ error: missing terminating ' character\n             case 'M\n             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgjrqi2p3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (isupper(c))\
    \ {\n            ans[i] = tolower(ans[i+1]);\n        }\n        if (islower(c))\
    \ {\n            ans[i] = toupper(ans[i+1]);\n        }\n    }\n    for (int i\
    \ = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (isupper(c))\
    \ {\n            ans[i] = tolower(ans[i+1]);\n        }\n        if (islower(c))\
    \ {\n            ans[i] = toupper(ans[i+1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjneecjkf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n     \
    \   temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp\
    \ - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n\
    \        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp\
    \ = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n     \
    \   temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp\
    \ - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n\
    \        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp\
    \ = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n     \
    \   temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp\
    \ - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n\
    \        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp\
    \ = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n     \
    \   temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp\
    \ - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n\
    \        temp = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp\
    \ = temp - 'A' + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n     \
    \   temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n        temp = temp\
    \ - 'a' + \n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgi9dux5l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n        case 'a':\n            ans += \"A\";\n           \
    \ break;\n        case 'b':\n            ans += \"B\";\n            break;\n \
    \       case 'c':\n            ans += \"C\";\n            break;\n        case\
    \ 'd':\n            ans += \"D\";\n            break;\n        case 'e':\n   \
    \         ans += \"E\";\n            break;\n        case 'f':\n            ans\
    \ += \"F\";\n            break;\n        case 'g':\n            ans += \"G\";\n\
    \            break;\n        case 'h':\n            ans += \"H\";\n          \
    \  break;\n        case 'i':\n            ans += \"I\";\n            break;\n\
    \        case 'j':\n            ans += \"J\";\n            break;\n        case\
    \ 'k':\n            ans += \"K\";\n            break;\n        case 'l':\n   \
    \         ans += \"L\";\n            break;\n        case 'm':\n            ans\
    \ += \"M\";\n            break;\n        case 'n':\n            ans += \"N\";\n\
    \            break;\n        case 'o':\n            ans += \"O\";\n          \
    \  break;\n        case 'p':\n            ans += \"P\";\n            break;\n\
    \        case 'q':\n            ans += \"Q\";\n            break;\n        case\
    \ 'r':\n            ans += \"R\";\n            break;\n        case 's':\n   \
    \         ans += \"S\";\n            break;\n        case 't':\n            ans\
    \ += \"T\";\n            break;\n        case 'u':\n            ans += \"U\";\n\
    \            break;\n        case 'v':\n            ans += \"V\";\n          \
    \  break;\n        case 'w':\n            ans += \"W\";\n            break;\n\
    \        case 'x':\n            ans += \"X\";\n            break;\n        case\
    \ 'y':\n            ans += \"Y\";\n            break;\n        case 'z':\n   \
    \         ans += \"Z\";\n            break;\n        case 'A':\n            ans\
    \ += \"a\";\n            break;\n        case 'B':\n            ans += \"b\";\n\
    \            break;\n        case 'C':\n            ans += \"c\";\n          \
    \  break;\n        case 'D':\n            ans += \"d\";\n            break;\n\
    \        case 'E':\n            ans += \"e\";\n            break;\n        case\
    \ 'F':\n            ans += \"f\";\n            break;\n        case 'G':\n   \
    \         ans += \"g\";\n            break;\n        case 'H':\n            ans\
    \ += \"h\";\n            break;\n        case 'I':\n            ans += \"i\";\n\
    \            break;\n        case 'J':\n            ans += \"j\";\n          \
    \  break;\n        case 'K':\n            ans += \"k\";\n            break;\n\
    \        case 'L':\n            ans += \"l\";\n            break;\n        case\
    \ 'M\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ild_uwr.cpp:131:14: warning: missing terminating ' character [enabled\
    \ by default]\n         case 'M\n              ^\n/tmp/tmp1ild_uwr.cpp:131:9:\
    \ error: missing terminating ' character\n         case 'M\n         ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ild_uwr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_tr"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c) ? toupper(c) : tolower(c));\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_bswycqr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if('A' <= c && c <= 'Z') {\n \
    \           ans += c;\n        } else if('a' <= c && c <= 'z') {\n           \
    \ ans += c;\n        } else if('0' <= c && c <= '9') {\n            ans += c;\n\
    \        } else if('!' <= c && c <= '@') {\n            ans += c;\n        } else\
    \ if('[' <= c && c <= '^') {\n            ans += c;\n        } else if('{' <=\
    \ c && c <= '~') {\n            ans += c;\n        } else if('|' <= c && c <=\
    \ '~') {\n            ans += c;\n        } else if('&' <= c && c <= '~') {\n \
    \           ans += c;\n        } else if('*' <= c && c <= '~') {\n           \
    \ ans += c;\n        } else if('!' <= c && c <= '@') {\n            ans += c;\n\
    \        } else if('[' <= c && c <= '^') {\n            ans += c;\n        } else\
    \ if('{' <= c && c <= '~') {\n            ans += c;\n        } else if('|' <=\
    \ c && c <= '~') {\n            ans += c;\n        } else if('&' <= c && c <=\
    \ '~') {\n            ans += c;\n        } else if('*' <= c && c <= '~') {\n \
    \           ans += c;\n        } else if('!' <= c && c <= '@') {\n           \
    \ ans += c;\n        } else if('[' <= c && c <= '^') {\n            ans += c;\n\
    \        } else if('{' <= c && c <= '~') {\n            ans += c;\n        } else\
    \ if('|' <= c && c <= '~') {\n            ans += c;\n        } else if('&' <=\
    \ c && c <= '~') {\n            ans += c;\n        } else if('*' <= c && c <=\
    \ '~') {\n            ans += c;\n        } else if('!' <= c && c <= '@') {\n \
    \           ans += c;\n        } else if('[' <= c && c <= '^') {\n           \
    \ ans += c;\n        } else if('{' <= c && c <= '~') {\n            ans += c;\n\
    \        } else if('|' <= c && c <= '~') {\n            ans += c;\n        \n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmj2x6pzi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (char c : message)\
    \ {\n        char newChar = c;\n        if (('a' <= c && c <= 'z') || ('A' <=\
    \ c && c <= 'Z')) {\n            newChar = c;\n        }\n        if (('a' <=\
    \ c && c <= 'z') || ('A' <= c && c <= 'Z')) {\n            newChar = c;\n    \
    \    }\n        encodedMessage += newChar;\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd7lxup6t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        ans += message[i];\n    }\n    for(int i=0;i<ans.length();i++) {\n  \
    \      char c = ans[i];\n        if(c>='a' && c<='z') {\n            ans[i] =\
    \ c-32;\n        }\n        else if(c>='A' && c<='Z') {\n            ans[i] =\
    \ c-48;\n        }\n        else if(c>='0' && c<='9') {\n            ans[i] =\
    \ c-48;\n        }\n        else if(c=='_') {\n            ans[i] = c-32;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2cw2e6v4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (char) tolower(c);\n    }\n    for (auto &c : ans) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            ans[ans.find(c) - 2] = toupper(c);\n \
    \       }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)\
    \ - 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            ans[ans.find(c) + 2] = tolower(c);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ql9mkzj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n        case 'a':\n            ans += \"A\";\n           \
    \ break;\n        case 'b':\n            ans += \"B\";\n            break;\n \
    \       case 'c':\n            ans += \"C\";\n            break;\n        case\
    \ 'd':\n            ans += \"D\";\n            break;\n        case 'e':\n   \
    \         ans += \"E\";\n            break;\n        case 'f':\n            ans\
    \ += \"F\";\n            break;\n        case 'g':\n            ans += \"G\";\n\
    \            break;\n        case 'h':\n            ans += \"H\";\n          \
    \  break;\n        case 'i':\n            ans += \"I\";\n            break;\n\
    \        case 'j':\n            ans += \"J\";\n            break;\n        case\
    \ 'k':\n            ans += \"K\";\n            break;\n        case 'l':\n   \
    \         ans += \"L\";\n            break;\n        case 'm':\n            ans\
    \ += \"M\";\n            break;\n        case 'n':\n            ans += \"N\";\n\
    \            break;\n        case 'o':\n            ans += \"O\";\n          \
    \  break;\n        case 'p':\n            ans += \"P\";\n            break;\n\
    \        case 'q':\n            ans += \"Q\";\n            break;\n        case\
    \ 'r':\n            ans += \"R\";\n            break;\n        case 's':\n   \
    \         ans += \"S\";\n            break;\n        case 't':\n            ans\
    \ += \"T\";\n            break;\n        case 'u':\n            ans += \"U\";\n\
    \            break;\n        case 'v':\n            ans += \"V\";\n          \
    \  break;\n        case 'w':\n            ans += \"W\";\n            break;\n\
    \        case 'x':\n            ans += \"X\";\n            break;\n        case\
    \ 'y':\n            ans += \"Y\";\n            break;\n        case 'z':\n   \
    \         ans += \"Z\";\n            break;\n        case 'A':\n            ans\
    \ += \"a\";\n            break;\n        case 'B':\n            ans += \"b\";\n\
    \            break;\n        case 'C':\n            ans += \"c\";\n          \
    \  break;\n        case 'D':\n            ans += \"d\";\n            break;\n\
    \        case 'E':\n            ans += \"e\";\n            break;\n        case\
    \ 'F':\n            ans += \"f\";\n            break;\n        case 'G':\n   \
    \         ans += \"g\";\n            break;\n        case 'H':\n            ans\
    \ += \"h\";\n            break;\n        case 'I':\n            ans += \"i\";\n\
    \            break;\n        case 'J':\n            ans += \"j\";\n          \
    \  break;\n        case 'K':\n            ans += \"k\";\n            break;\n\
    \        case 'L':\n            ans += \"l\";\n            break;\n        case\
    \ 'M\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnxn1tup5.cpp:131:14: warning: missing terminating ' character [enabled\
    \ by default]\n         case 'M\n              ^\n/tmp/tmpnxn1tup5.cpp:131:9:\
    \ error: missing terminating ' character\n         case 'M\n         ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxn1tup5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_tr"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n    for (auto\
    \ &c : ans) {\n        switch (c) {\n        case 'a':\n            ans += 'e';\n\
    \            break;\n        case 'e':\n            ans += 'a';\n            break;\n\
    \        case 'i':\n            ans += 'o';\n            break;\n        case\
    \ 'o':\n            ans += 'i';\n            break;\n        case 'u':\n     \
    \       ans += 'u';\n            break;\n        case 'y':\n            ans +=\
    \ 'a';\n            break;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    switch (c) {\n        case 'a':\n            ans += 'e';\n            break;\n\
    \        case 'e':\n            ans += 'a';\n            break;\n        case\
    \ 'i':\n            ans += 'o';\n            break;\n        case 'o':\n     \
    \       ans += 'i';\n            break;\n        case 'u':\n            ans +=\
    \ 'u';\n            break;\n        case 'y':\n            ans += 'a';\n     \
    \       break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvopjntpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] =\
    \ std::toupper(c);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvkkbvuw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppk415g0z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        temp = temp - 'a' + 26;\n        temp = temp + 'a';\n\
    \        ans += temp;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf4huo8at.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char &c: message) {\n    \
    \    c = toupper(c);\n        ans += c;\n    }\n    for (char &c: ans) {\n   \
    \     c = tolower(c);\n    }\n    for (char &c: ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c = toupper(c);\n\
    \        }\n    }\n    for (char &c: ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            c = tolower(c);\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphr8oq4xd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A') {\n            ans += 'B';\n        } else if\
    \ (c == 'E') {\n            ans += 'F';\n        } else if (c == 'I') {\n    \
    \        ans += 'J';\n        } else if (c == 'O') {\n            ans += 'M';\n\
    \        } else if (c == 'U') {\n            ans += 'N';\n        } else if (c\
    \ == 'Y') {\n            ans += 'P';\n        } else if (c == 'a') {\n       \
    \     ans += 'b';\n        } else if (c == 'e') {\n            ans += 'f';\n \
    \       } else if (c == 'i') {\n            ans += 'j';\n        } else if (c\
    \ == 'o') {\n            ans += 'm';\n        } else if (c == 'u') {\n       \
    \     ans += 'n';\n        } else if (c == 'y') {\n            ans += 'p';\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeqe_8sro.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char &c: message) {\n    \
    \    if (c >= 'a' && c <= 'z') {\n            ans += c;\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            ans += c;\n        } else if (c >= '0' &&\
    \ c <= '9') {\n            ans += c;\n        } else if (c == '.') {\n       \
    \     ans += c;\n        } else if (c == '!') {\n            ans += c;\n     \
    \   } else if (c == '?') {\n            ans += c;\n        } else if (c == '-')\
    \ {\n            ans += c;\n        } else if (c == '_') {\n            ans +=\
    \ c;\n        } else if (c == '/') {\n            ans += c;\n        } else if\
    \ (c == '\\\\') {\n            ans += c;\n        } else if (c == '(') {\n   \
    \         ans += c;\n        } else if (c == ')') {\n            ans += c;\n \
    \       } else if (c == '+') {\n            ans += c;\n        } else if (c ==\
    \ '=') {\n            ans += c;\n        } else if (c == '[') {\n            ans\
    \ += c;\n        } else if (c == ']') {\n            ans += c;\n        } else\
    \ if (c == '{') {\n            ans += c;\n        } else if (c == '}') {\n   \
    \         ans += c;\n        } else if (c == '<') {\n            ans += c;\n \
    \       } else if (c == '>') {\n            ans += c;\n        } else if (c ==\
    \ '%') {\n            ans += c;\n        } else if (c == '~') {\n            ans\
    \ += c;\n        } else if (c == '@') {\n            ans += c;\n        } else\
    \ if (c == '^') {\n            ans += c;\n        } else if (c == '&') {\n   \
    \         ans += c;\n        } else if (c == '*') {\n            ans += c;\n \
    \       } else if (c == '|') {\n            ans += c;\n        } else if (c ==\
    \ '~') {\n            ans += c;\n        } else if (c == '`') {\n            ans\
    \ += c;\n        } else if (c == '\"') {\n            ans += c;\n        } else\
    \ if (c == '$') {\n            ans += c;\n        } else if (c == '#') {\n   \
    \         ans += c;\n        } else if (c == '%') {\n            ans += c;\n \
    \       } else if (c == '&') {\n            ans += c;\n        } else if (c ==\
    \ '*') {\n            ans += c;\n        } else if (c == '(') {\n            ans\
    \ += c;\n        } else if (c == ')') {\n            ans += c;\n        } else\
    \ if (c == '+') {\n            ans += c;\n        } else if (c == '=') {\n   \
    \         ans += c;\n        } else if (c == '[') {\n            ans += c;\n \
    \       } else if (c == ']') {\n            ans += c;\n        } else if (c ==\
    \ '{') {\n            ans += c;\n        } else if (c == '}') {\n            ans\
    \ += c;\n        } else if (c == '<') {\n            ans += c;\n        } else\
    \ if (\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvc3owjvz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if ('A' <= c && c <= 'Z') {\n            ans += c;\n        } else {\n \
    \           ans += 'A' + (c - 'A' + 1) % 2 + 'a';\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'a' || c == 'A') {\n            ans[ans.size()\
    \ - 1] = 'A';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc9z2pfk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n      \
    \  else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n    \
    \        ans += c;\n        }\n        else if (c == 'y' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += 'a';\n        }\n        else if (c == 'Y'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n        }\n\
    \        else if (c == 'h' || c == 'e' || c == 'l' || c == 'l' || c == 'o' ||\
    \ c == 'r' || c == 't' || c == 'w' || c == 'y') {\n            ans += 'a';\n \
    \       }\n        else if (c == 'H' || c == 'E' || c == 'L' || c == 'L' || c\
    \ == 'O' || c == 'R' || c == 'T' || c == 'W' || c == 'Y') {\n            ans +=\
    \ 'A';\n        }\n        else if (c == 'z' || c == 'e' || c == 'l' || c == 'l'\
    \ || c == 'o' || c == 'r' || c == 't' || c == 'w' || c == 'y') {\n           \
    \ ans += 'a';\n        }\n        else if (c == 'Z' || c == 'E' || c == 'L' ||\
    \ c == 'L' || c == 'O' || c == 'R' || c == 'T' || c == 'W' || c == 'Y') {\n  \
    \          ans += 'A';\n        }\n        else if (c == 's' || c == 't' || c\
    \ == 'c' || c == 'g' || c == 'g' || c == 'h' || c == 'k' || c == 'm' || c == 's'\
    \ || c == 'c' || c == 'g' || c == 'g' || c == 'h' || c == 'k' || c == 'm' || c\
    \ == 's') {\n            ans += 'a';\n        }\n        else if (c == 'S' ||\
    \ c == 'T' || c == 'C' || c == 'G' || c == 'G' || c == 'H' || c == 'K' || c ==\
    \ 'M' || c == 'S') {\n            ans += 'A';\n        }\n        else if (c ==\
    \ 'd' || c == 'e' || c == 'f' || c == 'l' || c == 'l' || c == 'o' || c == 'r'\
    \ || c == 't' || c == 'w' || c == 'y') {\n            ans += 'a';\n        }\n\
    \        else if (c == 'D' || c == 'E' || c == 'F' || c == 'L' || c == 'L\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1koq5rb.cpp:50:71: warning: missing terminating ' character [enabled\
    \ by default]\n         else if (c == 'D' || c == 'E' || c == 'F' || c == 'L'\
    \ || c == 'L\n                                                               \
    \        ^\n/tmp/tmpw1koq5rb.cpp:50:9: error: missing terminating ' character\n\
    \         else if (c == 'D' || c == 'E' || c == 'F' || c == 'L' || c == 'L\n \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw1koq5rb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans += c;\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   ans += c + 1;\n        } else if (c >= '0' && c <= '9') {\n            ans\
    \ += c + 2;\n        } else {\n            ans += c;\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'a';\n        } else if (c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c\
    \ == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \            ans[i] = 'B';\n        } else if (c == 'B' || c == 'C' || c == 'D'\
    \ || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c\
    \ == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n           \
    \ ans[i] = 'b';\n        } else if (c == '0' || c == '1' || c == '2' || c == '3'\
    \ || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') {\n\
    \            ans[i] = '0';\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnv23b_nn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char &c : message) {\n\
    \        switch (c) {\n            case 'A':\n            case 'a':\n        \
    \        c += 'a' - 'A';\n                break;\n            case 'B':\n    \
    \        case 'b':\n                c += 'b' - 'A';\n                break;\n\
    \            case 'C':\n            case 'c':\n                c += 'c' - 'A';\n\
    \                break;\n            case 'D':\n            case 'd':\n      \
    \          c += 'd' - 'A';\n                break;\n            case 'E':\n  \
    \          case 'e':\n                c += 'e' - 'A';\n                break;\n\
    \            case 'F':\n            case 'f':\n                c += 'f' - 'A';\n\
    \                break;\n            case 'G':\n            case 'g':\n      \
    \          c += 'g' - 'A';\n                break;\n            case 'H':\n  \
    \          case 'h':\n                c += 'h' - 'A';\n                break;\n\
    \            case 'I':\n            case 'i':\n                c += 'i' - 'A';\n\
    \                break;\n            case 'J':\n            case 'j':\n      \
    \          c += 'j' - 'A';\n                break;\n            case 'K':\n  \
    \          case 'k':\n                c += 'k' - 'A';\n                break;\n\
    \            case 'L':\n            case 'l':\n                c += 'l' - 'A';\n\
    \                break;\n            case 'M':\n            case 'm':\n      \
    \          c += 'm' - 'A';\n                break;\n            case 'N':\n  \
    \          case 'n':\n                c += 'n' - 'A';\n                break;\n\
    \            case 'O':\n            case 'o':\n                c += 'o' - 'A';\n\
    \                break;\n            case 'P':\n            case 'p':\n      \
    \          c += 'p' - 'A';\n                break;\n            case 'Q':\n  \
    \          case 'q':\n                c += 'q' - 'A';\n                break;\n\
    \            case 'R':\n            case 'r':\n                c += 'r' - 'A';\n\
    \                break;\n            case 'S':\n            case 's':\n      \
    \          c += 's' - 'A';\n                break;\n            case 'T':\n  \
    \          case 't':\n                c += 't' - 'A';\n                break;\n\
    \            case 'U':\n            case 'u':\n                c += 'u' - 'A';\n\
    \                break;\n            case 'V':\n            case 'v':\n      \
    \          c += 'v' - 'A';\n                break;\n            case 'W':\n  \
    \          case 'w':\n                c += 'w' - 'A';\n                break;\n\
    \            case 'X':\n            case 'x':\n                c += 'x' - 'A';\n\
    \                break;\n            case 'Y':\n            case 'y':\n      \
    \          c += 'y' - 'A';\n                break;\n            case 'Z':\n  \
    \          case 'z':\n                c += 'z' - 'A';\n                break;\n\
    \            case '0':\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwth63caq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (char)(c + 1);\n    }\n    for (char c : ans) {\n        if (c ==\
    \ 'A') {\n            ans += 'B';\n        } else if (c == 'E') {\n          \
    \  ans += 'F';\n        } else if (c == 'I') {\n            ans += 'J';\n    \
    \    } else if (c == 'O') {\n            ans += 'M';\n        } else if (c ==\
    \ 'U') {\n            ans += 'N';\n        } else if (c == 'Y') {\n          \
    \  ans += 'R';\n        } else if (c == 'a') {\n            ans += 'b';\n    \
    \    } else if (c == 'e') {\n            ans += 'f';\n        } else if (c ==\
    \ 'i') {\n            ans += 'j';\n        } else if (c == 'o') {\n          \
    \  ans += 'm';\n        } else if (c == 'u') {\n            ans += 'n';\n    \
    \    } else if (c == 'y') {\n            ans += 'r';\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph7q_7xwa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        temp = temp - 'a' + 1;\n        if (temp > 'z')\
    \ {\n            temp = 'z' + temp - 'a';\n        }\n        ans += temp;\n \
    \   }\n    for (auto &c : ans) {\n        char temp = c;\n        temp = temp\
    \ - 'a' + 1;\n        if (temp > 'z') {\n            temp = 'z' + temp - 'a';\n\
    \        }\n        ans += temp;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpts2slkwc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        encodedMessage += toupper(c);\n\
    \    }\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        encodedMessage += tolower(c);\n    }\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        encodedMessage += toupper(c);\n\
    \    }\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        encodedMessage += tolower(c);\n    }\n    return encodedMessage;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq38dyf1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == 'A' || ans[i] == 'E' || ans[i] == 'I' || ans[i] == 'O' || ans[i] == 'U')\
    \ {\n            ans[i] = ans[ans.find(ans[i]) + 1];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu69updzv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n            case 'a':\n                ans += \"A\";\n   \
    \             break;\n            case 'b':\n                ans += \"B\";\n \
    \               break;\n            case 'c':\n                ans += \"C\";\n\
    \                break;\n            case 'd':\n                ans += \"D\";\n\
    \                break;\n            case 'e':\n                ans += \"E\";\n\
    \                break;\n            case 'f':\n                ans += \"F\";\n\
    \                break;\n            case 'g':\n                ans += \"G\";\n\
    \                break;\n            case 'h':\n                ans += \"H\";\n\
    \                break;\n            case 'i':\n                ans += \"I\";\n\
    \                break;\n            case 'j':\n                ans += \"J\";\n\
    \                break;\n            case 'k':\n                ans += \"K\";\n\
    \                break;\n            case 'l':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n                ans += \"M\";\n\
    \                break;\n            case 'n':\n                ans += \"N\";\n\
    \                break;\n            case 'o':\n                ans += \"O\";\n\
    \                break;\n            case 'p':\n                ans += \"P\";\n\
    \                break;\n            case 'q':\n                ans += \"Q\";\n\
    \                break;\n            case 'r':\n                ans += \"R\";\n\
    \                break;\n            case 's':\n                ans += \"S\";\n\
    \                break;\n            case 't':\n                ans += \"T\";\n\
    \                break;\n            case 'u':\n                ans += \"U\";\n\
    \                break;\n            case 'v':\n                ans += \"V\";\n\
    \                break;\n            case 'w':\n                ans += \"W\";\n\
    \                break;\n            case 'x':\n                ans += \"X\";\n\
    \                break;\n            case 'y':\n                ans += \"Y\";\n\
    \                break;\n            case 'z':\n                ans += \"Z\";\n\
    \                break;\n            case 'A':\n                ans += \"a\";\n\
    \                break;\n            case 'B':\n                ans += \"b\";\n\
    \                break;\n            case 'C':\n                ans += \"c\";\n\
    \                break;\n            case 'D':\n                ans += \"d\";\n\
    \                break;\n            case 'E':\n                ans += \"e\";\n\
    \                break;\n            case 'F':\n                ans += \"f\";\n\
    \                break;\n            case 'G':\n                ans += \"g\";\n\
    \                break;\n            case 'H':\n                ans += \"h\";\n\
    \                break;\n            case 'I':\n                ans += \"i\";\n\
    \                break;\n            case 'J':\n                ans += \"j\";\n\
    \                break;\n            case 'K':\n                ans += \"k\";\n\
    \                break;\n            case 'L':\n                ans += \"l\";\n\
    \                break;\n            case 'M\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjrqi2p3.cpp:131:18: warning: missing terminating ' character [enabled\
    \ by default]\n             case 'M\n                  ^\n/tmp/tmpgjrqi2p3.cpp:131:13:\
    \ error: missing terminating ' character\n             case 'M\n             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgjrqi2p3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n      \
    \      ans += 'A';\n        } else if (i == 'A' || i == 'E' || i == 'I' || i ==\
    \ 'O' || i == 'U') {\n            ans += 'a';\n        } else if (i == 'b' ||\
    \ i == 'c' || i == 'd' || i == 'f' || i == 'g' || i == 'h' || i == 'j' || i ==\
    \ 'k' || i == 'l' || i == 'm' || i == 'n' || i == 'p' || i == 'q' || i == 'r'\
    \ || i == 's' || i == 't' || i == 'v' || i == 'w' || i == 'x' || i == 'y' || i\
    \ == 'z') {\n            ans += 'B';\n        } else if (i == 'B' || i == 'C'\
    \ || i == 'D' || i == 'F' || i == 'G' || i == 'H' || i == 'J' || i == 'K' || i\
    \ == 'L' || i == 'M' || i == 'N' || i == 'P' || i == 'Q' || i == 'R' || i == 'S'\
    \ || i == 'T' || i == 'V' || i == 'W' || i == 'X' || i == 'Y' || i == 'Z') {\n\
    \            ans += 'b';\n        } else if (i == 'c' || i == 'd' || i == 'f'\
    \ || i == 'g' || i == 'h' || i == 'j' || i == 'k' || i == 'l' || i == 'm' || i\
    \ == 'n' || i == 'p' || i == 'q' || i == 'r' || i == 's' || i == 't' || i == 'v'\
    \ || i == 'w' || i == 'x' || i == 'y' || i == 'z') {\n            ans += 'c';\n\
    \        } else if (i == 'd' || i == 'f' || i == 'g' || i == 'h' || i == 'j' ||\
    \ i == 'k' || i == 'l' || i == 'm' || i == 'n' || i == 'p' || i == 'q' || i ==\
    \ 'r' || i == 's' || i == 't' || i == 'v' || i == 'w' || i == 'x' || i == 'y'\
    \ || i == 'z') {\n            ans += 'd';\n        } else if (i == 'f' || i ==\
    \ 'g' || i == 'h' || i == 'j' || i == 'k' || i == 'l' || i == 'm' || i == 'n'\
    \ || i == 'p' || i == 'q' || i == 'r' || i == 's' || i == 't' || i == 'v' || i\
    \ == 'w' || i == 'x' || i == 'y' || i == 'z') {\n            ans += 'f';\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx694olug.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += 'a';\n        }\n        else {\n            ans += c;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9g2ak_pq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char c : ans)\
    \ {\n        ans[ans.find(c) + 1] = tolower(c);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9bz4frj_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        } else\
    \ {\n            int index = c - 'A';\n            int index2 = c - 'A';\n   \
    \         int index3 = c - 'A';\n            int index4 = c - 'A';\n         \
    \   int index5 = c - 'A';\n            int index6 = c - 'A';\n            int\
    \ index7 = c - 'A';\n            int index8 = c - 'A';\n            int index9\
    \ = c - 'A';\n            int index10 = c - 'A';\n            int index11 = c\
    \ - 'A';\n            int index12 = c - 'A';\n            int index13 = c - 'A';\n\
    \            int index14 = c - 'A';\n            int index15 = c - 'A';\n    \
    \        int index16 = c - 'A';\n            int index17 = c - 'A';\n        \
    \    int index18 = c - 'A';\n            int index19 = c - 'A';\n            int\
    \ index20 = c - 'A';\n            int index21 = c - 'A';\n            int index22\
    \ = c - 'A';\n            int index23 = c - 'A';\n            int index24 = c\
    \ - 'A';\n            int index25 = c - 'A';\n            int index26 = c - 'A';\n\
    \            int index27 = c - 'A';\n            int index28 = c - 'A';\n    \
    \        int index29 = c - 'A';\n            int index30 = c - 'A';\n        \
    \    int index31 = c - 'A';\n            int index32 = c - 'A';\n            int\
    \ index33 = c - 'A';\n            int index34 = c - 'A';\n            int index35\
    \ = c - 'A';\n            int index36 = c - 'A';\n            int index37 = c\
    \ - 'A';\n            int index38 = c - 'A';\n            int index39 = c - 'A';\n\
    \            int index40 = c - 'A';\n            int index41 = c - 'A';\n    \
    \        int index42 = c - 'A';\n            int index43 = c - 'A';\n        \
    \    int index44 = c - 'A';\n            int index45 = c - 'A';\n            int\
    \ index46 = c - 'A';\n            int index47 = c - 'A';\n            int index48\
    \ = c - 'A';\n            int index49 = c - 'A';\n            int index\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprg6n99ru.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'a':\n            case 'e':\n           \
    \ case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += 'A';\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'n':\n            case 'r':\n            case 't':\n       \
    \         ans += 'B';\n                break;\n            case 'c':\n       \
    \     case 'd':\n            case 'g':\n            case 'h':\n            case\
    \ 'j':\n                ans += 'C';\n                break;\n            case\
    \ 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n\
    \            case 'k':\n                ans += 'E';\n                break;\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'j':\n                ans += 'F';\n                break;\n       \
    \     case 'g':\n            case 'h':\n            case 'j':\n              \
    \  ans += 'G';\n                break;\n            case 'h':\n            case\
    \ 'j':\n                ans += 'H';\n                break;\n            case\
    \ 'i':\n            case 'j':\n                ans += 'I';\n                break;\n\
    \            case 'k':\n                ans += 'K';\n                break;\n\
    \            case 'l':\n                ans += 'L';\n                break;\n\
    \            case 'm':\n                ans += 'M';\n                break;\n\
    \            case 'n':\n                ans += 'N';\n                break;\n\
    \            case 'o':\n                ans += 'O';\n                break;\n\
    \            case 'p':\n                ans += 'P';\n                break;\n\
    \            case 'q':\n                ans += 'Q';\n                break;\n\
    \            case 'r':\n                ans += 'R';\n                break;\n\
    \            case 's':\n                ans += 'S';\n                break;\n\
    \            case 't':\n                ans += 'T';\n                break;\n\
    \            case 'u':\n                ans += 'U';\n                break;\n\
    \            case 'v':\n                ans += 'V';\n                break;\n\
    \            case 'w':\n                ans += 'W';\n                break;\n\
    \            case 'x':\n                ans += 'X';\n                break;\n\
    \            case 'y':\n                ans += 'Y';\n                break;\n\
    \            case 'z':\n                ans += 'Z';\n                break;\n\
    \            default:\n                ans += c;\n                break;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5_a_zthd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     char c = i;\n        ans += (c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c\
    \ <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a'));\n    }\n    for (auto &i\
    \ : ans) {\n        char c = i;\n        ans += (c >= 'a' && c <= 'z') ? c : ((c\
    \ >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a'));\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa7iytz6j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        char nextLetter\
    \ = message[i+1];\n        char nextVowel = message[i+2];\n        char nextVowel2\
    \ = message[i+3];\n        char nextVowel3 = message[i+4];\n        char nextVowel4\
    \ = message[i+5];\n        char nextVowel5 = message[i+6];\n        char nextVowel6\
    \ = message[i+7];\n        char nextVowel7 = message[i+8];\n        char nextVowel8\
    \ = message[i+9];\n        char nextVowel9 = message[i+10];\n        char nextVowel10\
    \ = message[i+11];\n        char nextVowel11 = message[i+12];\n        char nextVowel12\
    \ = message[i+13];\n        char nextVowel13 = message[i+14];\n        char nextVowel14\
    \ = message[i+15];\n        char nextVowel15 = message[i+16];\n        char nextVowel16\
    \ = message[i+17];\n        char nextVowel17 = message[i+18];\n        char nextVowel18\
    \ = message[i+19];\n        char nextVowel19 = message[i+20];\n        char nextVowel20\
    \ = message[i+21];\n        char nextVowel21 = message[i+22];\n        char nextVowel22\
    \ = message[i+23];\n        char nextVowel23 = message[i+24];\n        char nextVowel24\
    \ = message[i+25];\n        char nextVowel25 = message[i+26];\n        char nextVowel26\
    \ = message[i+27];\n        char nextVowel27 = message[i+28];\n        char nextVowel28\
    \ = message[i+29];\n        char nextVowel29 = message[i+30];\n        char nextVowel30\
    \ = message[i+31];\n        char nextVowel31 = message[i+32];\n        char nextVowel32\
    \ = message[i+33];\n        char nextVowel33 = message[i+34];\n        char nextVowel34\
    \ = message[i+35];\n        char nextVowel35 = message[i+36];\n        char nextVowel36\
    \ = message[i+37];\n        char nextVowel37 = message[i+38];\n        char nextVowel38\
    \ = message[i+39];\n        char \n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw8ul08hz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n            case 'a':\n                ans += \"A\";\n   \
    \             break;\n            case 'b':\n                ans += \"B\";\n \
    \               break;\n            case 'c':\n                ans += \"C\";\n\
    \                break;\n            case 'd':\n                ans += \"D\";\n\
    \                break;\n            case 'e':\n                ans += \"E\";\n\
    \                break;\n            case 'f':\n                ans += \"F\";\n\
    \                break;\n            case 'g':\n                ans += \"G\";\n\
    \                break;\n            case 'h':\n                ans += \"H\";\n\
    \                break;\n            case 'i':\n                ans += \"I\";\n\
    \                break;\n            case 'j':\n                ans += \"J\";\n\
    \                break;\n            case 'k':\n                ans += \"K\";\n\
    \                break;\n            case 'l':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n                ans += \"M\";\n\
    \                break;\n            case 'n':\n                ans += \"N\";\n\
    \                break;\n            case 'o':\n                ans += \"O\";\n\
    \                break;\n            case 'p':\n                ans += \"P\";\n\
    \                break;\n            case 'q':\n                ans += \"Q\";\n\
    \                break;\n            case 'r':\n                ans += \"R\";\n\
    \                break;\n            case 's':\n                ans += \"S\";\n\
    \                break;\n            case 't':\n                ans += \"T\";\n\
    \                break;\n            case 'u':\n                ans += \"U\";\n\
    \                break;\n            case 'v':\n                ans += \"V\";\n\
    \                break;\n            case 'w':\n                ans += \"W\";\n\
    \                break;\n            case 'x':\n                ans += \"X\";\n\
    \                break;\n            case 'y':\n                ans += \"Y\";\n\
    \                break;\n            case 'z':\n                ans += \"Z\";\n\
    \                break;\n            case 'A':\n                ans += \"a\";\n\
    \                break;\n            case 'B':\n                ans += \"b\";\n\
    \                break;\n            case 'C':\n                ans += \"c\";\n\
    \                break;\n            case 'D':\n                ans += \"d\";\n\
    \                break;\n            case 'E':\n                ans += \"e\";\n\
    \                break;\n            case 'F':\n                ans += \"f\";\n\
    \                break;\n            case 'G':\n                ans += \"g\";\n\
    \                break;\n            case 'H':\n                ans += \"h\";\n\
    \                break;\n            case 'I':\n                ans += \"i\";\n\
    \                break;\n            case 'J':\n                ans += \"j\";\n\
    \                break;\n            case 'K':\n                ans += \"k\";\n\
    \                break;\n            case 'L':\n                ans += \"l\";\n\
    \                break;\n            case 'M\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjrqi2p3.cpp:131:18: warning: missing terminating ' character [enabled\
    \ by default]\n             case 'M\n                  ^\n/tmp/tmpgjrqi2p3.cpp:131:13:\
    \ error: missing terminating ' character\n             case 'M\n             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgjrqi2p3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char nextC = message[i+1];\n \
    \       char nextNextC = message[i+2];\n        char nextNextNextC = message[i+3];\n\
    \        char nextNextNextNextC = message[i+4];\n        char nextNextNextNextNextC\
    \ = message[i+5];\n        char nextNextNextNextNextNextC = message[i+6];\n  \
    \      char nextNextNextNextNextNextNextC = message[i+7];\n        char nextNextNextNextNextNextNextNextC\
    \ = message[i+8];\n        char nextNextNextNextNextNextNextNextC = message[i+9];\n\
    \        char nextNextNextNextNextNextNextNextNextC = message[i+10];\n       \
    \ char nextNextNextNextNextNextNextNextNextC = message[i+11];\n        char nextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+12];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+13];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+14];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+15];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+16];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+17];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+18];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+19];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+20];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+21];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+22];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+23];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+24];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+25];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+26];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+27];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+28];\n        char nextNextNextNextNextNextNextNextNextNextNextC\
    \ = message[i+29];\n        char next\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptjummj8x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     ans += (std::tolower(i) - 'a' + 2) % 26 + 'a';\n    }\n    for (auto &i\
    \ : ans) {\n        ans[i] = message[ans.find(i) + 1];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7llkfn_g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    for (char c :\
    \ ans) {\n        ans.replace(ans.find(c), 1, 1, ans.find(c) + 1);\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpikq1zmr1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char &c : message) {\n   \
    \     switch (c) {\n            case 'A':\n            case 'a':\n           \
    \     ans += \"a\";\n                break;\n            case 'B':\n         \
    \   case 'b':\n                ans += \"b\";\n                break;\n       \
    \     case 'C':\n            case 'c':\n                ans += \"c\";\n      \
    \          break;\n            case 'D':\n            case 'd':\n            \
    \    ans += \"d\";\n                break;\n            case 'E':\n          \
    \  case 'e':\n                ans += \"e\";\n                break;\n        \
    \    case 'F':\n            case 'f':\n                ans += \"f\";\n       \
    \         break;\n            case 'G':\n            case 'g':\n             \
    \   ans += \"g\";\n                break;\n            case 'H':\n           \
    \ case 'h':\n                ans += \"h\";\n                break;\n         \
    \   case 'I':\n            case 'i':\n                ans += \"i\";\n        \
    \        break;\n            case 'J':\n            case 'j':\n              \
    \  ans += \"j\";\n                break;\n            case 'K':\n            case\
    \ 'k':\n                ans += \"k\";\n                break;\n            case\
    \ 'L':\n            case 'l':\n                ans += \"l\";\n               \
    \ break;\n            case 'M':\n            case 'm':\n                ans +=\
    \ \"m\";\n                break;\n            case 'N':\n            case 'n':\n\
    \                ans += \"n\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                ans += \"o\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                ans += \"p\";\n\
    \                break;\n            case 'Q':\n            case 'q':\n      \
    \          ans += \"q\";\n                break;\n            case 'R':\n    \
    \        case 'r':\n                ans += \"r\";\n                break;\n  \
    \          case 'S':\n            case 's':\n                ans += \"s\";\n \
    \               break;\n            case 'T':\n            case 't':\n       \
    \         ans += \"t\";\n                break;\n            case 'U':\n     \
    \       case 'u':\n                ans += \"u\";\n                break;\n   \
    \         case 'V':\n            case 'v':\n                ans += \"v\";\n  \
    \              break;\n            case 'W':\n            case 'w':\n        \
    \        ans += \"w\";\n                break;\n            case 'X':\n      \
    \      case 'x':\n                ans += \"x\";\n                break;\n    \
    \        case 'Y':\n            case 'y':\n                ans += \"y\";\n   \
    \             break;\n            case 'Z':\n            case 'z':\n         \
    \       ans += \"z\";\n                break;\n            default:\n        \
    \        ans += c;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp04fiv4bv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        }\n\
    \        else if (std::isupper(c)) {\n            ans += std::tolower(c);\n  \
    \      }\n        else if (std::islower(c)) {\n            ans += c;\n       \
    \ }\n        else if (std::isdigit(c)) {\n            ans += c;\n        }\n \
    \       else if (c == '.') {\n            ans += c;\n        }\n        else if\
    \ (c == '?') {\n            ans += c;\n        }\n        else if (c == '!') {\n\
    \            ans += c;\n        }\n        else if (c == '-') {\n            ans\
    \ += c;\n        }\n        else if (c == '_') {\n            ans += c;\n    \
    \    }\n        else if (c == '/') {\n            ans += c;\n        }\n     \
    \   else if (c == '\\\\') {\n            ans += c;\n        }\n        else if\
    \ (c == '&') {\n            ans += c;\n        }\n        else if (c == '%') {\n\
    \            ans += c;\n        }\n        else if (c == '^') {\n            ans\
    \ += c;\n        }\n        else if (c == '~') {\n            ans += c;\n    \
    \    }\n        else if (c == '*') {\n            ans += c;\n        }\n     \
    \   else if (c == '(') {\n            ans += c;\n        }\n        else if (c\
    \ == ')') {\n            ans += c;\n        }\n        else if (c == '[') {\n\
    \            ans += c;\n        }\n        else if (c == ']') {\n            ans\
    \ += c;\n        }\n        else if (c == '{') {\n            ans += c;\n    \
    \    }\n        else if (c == '}') {\n            ans += c;\n        }\n     \
    \   else if (c == '|') {\n            ans += c;\n        }\n        else if (c\
    \ == '<') {\n            ans += c;\n        }\n        else if (c == '>') {\n\
    \            ans += c;\n        }\n        else if (c == '?') {\n            ans\
    \ += c;\n        }\n        else if (c == '!') {\n            ans += c;\n    \
    \    }\n        else if (c == '.') {\n            ans += c;\n        }\n     \
    \   else if (c == '-') {\n            ans += c;\n        }\n        else if (c\
    \ == '_') {\n            ans += c;\n        }\n        else if (c == '/') {\n\
    \            ans += c;\n        }\n        else if (c == '\\\\') {\n         \
    \   ans += c;\n        }\n        else if (c == '&') {\n            ans += c;\n\
    \        }\n        else if (c == '%') {\n            ans += c;\n        }\n \
    \       else if (c == '^') {\n            ans += c;\n        }\n        else if\
    \ (c == '~') {\n            ans += c;\n        }\n        else if (c == '*') {\n\
    \            ans += c;\n        }\n        else if (c == '(') {\n            ans\
    \ += \n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppn7t3ff9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n            case 'a':\n            case 'e':\n        \
    \    case 'i':\n            case 'o':\n            case 'u':\n               \
    \ encoded += 'A';\n                break;\n            case 'b':\n           \
    \ case 'f':\n            case 'k':\n            case 'p':\n            case 's':\n\
    \                encoded += 'B';\n                break;\n            case 'c':\n\
    \            case 'd':\n            case 'l':\n            case 'm':\n       \
    \     case 'n':\n                encoded += 'C';\n                break;\n   \
    \         case 'e':\n            case 'f':\n            case 'h':\n          \
    \  case 'j':\n            case 'k':\n            case 'l':\n            case 'n':\n\
    \                encoded += 'D';\n                break;\n            case 'g':\n\
    \            case 'h':\n            case 'j':\n            case 'k':\n       \
    \     case 'l':\n            case 'm':\n            case 'n':\n              \
    \  encoded += 'G';\n                break;\n            case 'h':\n          \
    \  case 'j':\n            case 'k':\n            case 'l':\n            case 'm':\n\
    \            case 'n':\n                encoded += 'H';\n                break;\n\
    \            case 'i':\n            case 'j':\n            case 'k':\n       \
    \     case 'l':\n            case 'm':\n            case 'n':\n              \
    \  encoded += 'I';\n                break;\n            case 'k':\n          \
    \  case 'l':\n            case 'm':\n            case 'n':\n                encoded\
    \ += 'K';\n                break;\n            case 'l':\n            case 'm':\n\
    \            case 'n':\n                encoded += 'L';\n                break;\n\
    \            case 'm':\n            case 'n':\n                encoded += 'M';\n\
    \                break;\n            case 'n':\n                encoded += 'N';\n\
    \                break;\n            case 'o':\n            case 'p':\n      \
    \      case 'q':\n            case 'r':\n            case 's':\n             \
    \   encoded += 'O';\n                break;\n            case 'p':\n         \
    \   case 'q':\n            case 'r':\n            case 's':\n                encoded\
    \ += 'P';\n                break;\n            case 'q':\n            case 'r':\n\
    \            case 's':\n                encoded += 'Q';\n                break;\n\
    \            case 'r':\n            case 's':\n                encoded += 'R';\n\
    \                break;\n            case 's':\n                encoded += 'S';\n\
    \                break;\n            case 't':\n            case 'u':\n      \
    \      case 'v':\n            case 'w':\n            case 'x':\n            case\
    \ 'y':\n            case 'z':\n                encoded += 'T';\n             \
    \   break;\n            case 'u':\n            case 'v':\n            case 'w':\n\
    \            case 'x':\n            case 'y':\n            case 'z':\n       \
    \         encoded += 'U';\n                break;\n            case 'v':\n   \
    \         case 'w':\n            case 'x':\n            case 'y':\n          \
    \  case 'z':\n                encoded += 'V';\n                break;\n      \
    \      case 'w':\n            case 'x':\n            case 'y':\n            case\
    \ '\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o0_hdst.cpp:142:18: warning: missing terminating ' character [enabled\
    \ by default]\n             case '\n                  ^\n/tmp/tmp7o0_hdst.cpp:142:13:\
    \ error: missing terminating ' character\n             case '\n             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7o0_hdst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __si"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += (tolower(c) - 'a' + 2)\
    \ % 26 + 'a';\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptvobc0fz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (char) tolower(c);\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a') {\n            ans[i] = 'e';\n        } else if\
    \ (ans[i] == 'e') {\n            ans[i] = 'i';\n        } else if (ans[i] == 'i')\
    \ {\n            ans[i] = 'o';\n        } else if (ans[i] == 'o') {\n        \
    \    ans[i] = 'u';\n        } else if (ans[i] == 'u') {\n            ans[i] =\
    \ 'A';\n        } else if (ans[i] == 'A') {\n            ans[i] = 'E';\n     \
    \   } else if (ans[i] == 'E') {\n            ans[i] = 'I';\n        } else if\
    \ (ans[i] == 'I') {\n            ans[i] = 'O';\n        } else if (ans[i] == 'O')\
    \ {\n            ans[i] = 'U';\n        } else if (ans[i] == 'U') {\n        \
    \    ans[i] = 'a';\n        } else if (ans[i] == 'a') {\n            ans[i] =\
    \ 'e';\n        } else if (ans[i] == 'e') {\n            ans[i] = 'i';\n     \
    \   } else if (ans[i] == 'i') {\n            ans[i] = 'o';\n        } else if\
    \ (ans[i] == 'o') {\n            ans[i] = 'u';\n        } else if (ans[i] == 'u')\
    \ {\n            ans[i] = 'A';\n        } else if (ans[i] == 'A') {\n        \
    \    ans[i] = 'E';\n        } else if (ans[i] == 'E') {\n            ans[i] =\
    \ 'I';\n        } else if (ans[i] == 'I') {\n            ans[i] = 'O';\n     \
    \   } else if (ans[i] == 'O') {\n            ans[i] = 'U';\n        } else if\
    \ (ans[i] == 'U') {\n            ans[i] = 'a';\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvu_v9a6k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c)) ? toupper(c) : tolower(c);\n    }\n    for (int i = 0;\
    \ i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i]\
    \ == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[ans.size() - 1 - i];\n        }\n    }\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e'\
    \ || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] =\
    \ ans[ans.size() - 1 - i];\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i]\
    \ == 'o' || ans[i] == 'u') {\n            ans[i] = ans[ans.size() - 1 - i];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[ans.size() - 1 - i];\n        }\n    }\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e'\
    \ || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] =\
    \ ans[ans.size() - 1 - i];\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i]\
    \ == 'o' || ans[i] == 'u') {\n            ans[i] = ans[ans.size() - 1 - i];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[ans.size() - 1 - i];\n        }\n    }\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e'\
    \ || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] =\
    \ ans[ans.size() - 1 - i];\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i]\
    \ == 'o' || ans[i] == 'u') {\n            ans[i] = ans[ans.size() - 1 - i\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmputbpj_fi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.size() - 2] = tolower(c);\n        }\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size()\
    \ - 2] = tolower(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.size() - 2] = toupper(c);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8veamncy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            ans[ans.find(c) - 2] = toupper(c);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps7uk1p33.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto c : message) {\n\
    \        auto pos = std::find(message.begin(), message.end(), c);\n        auto\
    \ pos2 = std::find(message.begin(), message.end(), c+1);\n        auto pos = std::find(message.begin(),\
    \ message.end(), c+2);\n        if (pos != message.end()) {\n            encoded\
    \ = encoded + c;\n        }\n        else if (pos2 != message.end()) {\n     \
    \       encoded = encoded + c;\n        }\n        else if (pos != message.end())\
    \ {\n            encoded = encoded + c;\n        }\n        else {\n         \
    \   encoded = encoded + c;\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiyj383ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c + 2;\n        } else {\n\
    \            encoded += c;\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvcl6gn68.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         encoded += c;\n        }\n        else if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            encoded += c;\n        }\n  \
    \      else if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c\
    \ == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c\
    \ == 'x' || c == 'y' || c == 'z') {\n            encoded += c;\n        }\n  \
    \      else if (c == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c\
    \ == 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c\
    \ == 'X' || c == 'Y' || c == 'Z') {\n            encoded += c;\n        }\n  \
    \      else if (c == '0' || c == '1') {\n            encoded += c;\n        }\n\
    \        else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' ||\
    \ c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c ==\
    \ '_' || c == '+' || c == '=' || c == '{' || c == '}' || c == ':' || c == '<'\
    \ || c == '>' || c == '/' || c == '?' || c == '[' || c == ']' || c == '|' || c\
    \ == '\\\\' || c == '~') {\n            encoded += c;\n        }\n        else\
    \ if (c == '~') {\n            encoded += c;\n        }\n        else if (c ==\
    \ '.') {\n            encoded += c;\n        }\n        else if (c == '?') {\n\
    \            encoded += c;\n        }\n        else if (c == '!') {\n        \
    \    encoded += c;\n        }\n        else if (c == '.') {\n            encoded\
    \ += c;\n        }\n        else if (c == '?') {\n            encoded += c;\n\
    \        }\n        else if (c == '!') {\n            encoded += c;\n        }\n\
    \        else if (c == '.') {\n            encoded += c;\n        }\n        else\
    \ if (c == '?') {\n            encoded += c;\n        }\n        else if (c ==\
    \ '!') {\n            encoded += c;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsq0v7a6g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c: message) {\n    \
    \    ans += (tolower(c) == c) ? toupper(c) : tolower(c);\n    }\n    for (auto\
    \ &c: ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)]\
    \ = tolower(ans[ans.find(c)]);\n        }\n    }\n    for (auto &c: ans) {\n \
    \       if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n        }\n  \
    \  }\n    for (auto &c: ans) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n        }\n    }\n    for\
    \ (auto &c: ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)]\
    \ = tolower(ans[ans.find(c)]);\n        }\n    }\n    for (auto &c: ans) {\n \
    \       if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n        }\n  \
    \  }\n    for (auto &c: ans) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n        }\n    }\n    for\
    \ (auto &c: ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)]\
    \ = tolower(ans[ans.find(c)]);\n        }\n    }\n    for (auto &c: ans) {\n \
    \       if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n        }\n  \
    \  }\n    for (auto &c: ans) {\n        if (c >= 'a\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6q7eel7k.cpp:74:18: warning: missing terminating ' character [enabled\
    \ by default]\n         if (c >= 'a\n                  ^\n/tmp/tmp6q7eel7k.cpp:74:9:\
    \ error: missing terminating ' character\n         if (c >= 'a\n         ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6q7eel7k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple "
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (char c : message)\
    \ {\n        char encodedChar = c;\n        if (c >= 'a' && c <= 'z') {\n    \
    \        encodedChar = c + 2;\n        }\n        else if (c >= 'A' && c <= 'Z')\
    \ {\n            encodedChar = c + 3;\n        }\n        else if (c >= '0' &&\
    \ c <= '9') {\n            encodedChar = c + 1;\n        }\n        encodedMessage\
    \ += encodedChar;\n    }\n    return encodedMessage;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp843h5d4h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char &c : message) {\n\
    \        switch (c) {\n            case 'a':\n                c = 'A';\n     \
    \           break;\n            case 'b':\n                c = 'B';\n        \
    \        break;\n            case 'c':\n                c = 'C';\n           \
    \     break;\n            case 'd':\n                c = 'D';\n              \
    \  break;\n            case 'e':\n                c = 'E';\n                break;\n\
    \            case 'f':\n                c = 'F';\n                break;\n   \
    \         case 'g':\n                c = 'G';\n                break;\n      \
    \      case 'h':\n                c = 'H';\n                break;\n         \
    \   case 'i':\n                c = 'I';\n                break;\n            case\
    \ 'j':\n                c = 'J';\n                break;\n            case 'k':\n\
    \                c = 'K';\n                break;\n            case 'l':\n   \
    \             c = 'L';\n                break;\n            case 'm':\n      \
    \          c = 'M';\n                break;\n            case 'n':\n         \
    \       c = 'N';\n                break;\n            case 'o':\n            \
    \    c = 'O';\n                break;\n            case 'p':\n               \
    \ c = 'P';\n                break;\n            case 'q':\n                c =\
    \ 'Q';\n                break;\n            case 'r':\n                c = 'R';\n\
    \                break;\n            case 's':\n                c = 'S';\n   \
    \             break;\n            case 't':\n                c = 'T';\n      \
    \          break;\n            case 'u':\n                c = 'U';\n         \
    \       break;\n            case 'v':\n                c = 'V';\n            \
    \    break;\n            case 'w':\n                c = 'W';\n               \
    \ break;\n            case 'x':\n                c = 'X';\n                break;\n\
    \            case 'y':\n                c = 'Y';\n                break;\n   \
    \         case 'z':\n                c = 'Z';\n                break;\n      \
    \      case 'A':\n                c = 'a';\n                break;\n         \
    \   case 'B':\n                c = 'b';\n                break;\n            case\
    \ 'C':\n                c = 'c';\n                break;\n            case 'D':\n\
    \                c = 'd';\n                break;\n            case 'E':\n   \
    \             c = 'e';\n                break;\n            case 'F':\n      \
    \          c = 'f';\n                break;\n            case 'G':\n         \
    \       c = 'g';\n                break;\n            case 'H':\n            \
    \    c = 'h';\n                break;\n            case 'I':\n               \
    \ c = 'i';\n                break;\n            case 'J':\n                c =\
    \ 'j';\n                break;\n            case 'K':\n                c = 'k';\n\
    \                break;\n            case 'L':\n                c = 'l';\n   \
    \             break;\n            case 'M':\n                c = 'm';\n      \
    \          break;\n            case 'N':\n                c = 'n';\n         \
    \       break;\n            case 'O':\n                c = 'o';\n            \
    \    break;\n            case 'P':\n                c = 'p';\n               \
    \ break;\n            case 'Q':\n                c = 'q';\n                break;\n\
    \            case 'R':\n                c = 'r';\n                break;\n   \
    \         case 'S':\n                c = 's';\n                break;\n      \
    \      case 'T\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_5yts5v.cpp:152:18: warning: missing terminating ' character [enabled\
    \ by default]\n             case 'T\n                  ^\n/tmp/tmp5_5yts5v.cpp:152:13:\
    \ error: missing terminating ' character\n             case 'T\n             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5_5yts5v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += c;\n        }\n        else {\n            ans += 'A' + message[i] -\
    \ 'a';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgbsexf75.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        char temp = c;\n        temp = temp - 'a' + 26;\n        temp = temp\
    \ + 'a';\n        encoded = encoded + temp;\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpipiukvxs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        char upperCase = c;\n        char lowerCase = c;\n        if (isupper(c))\
    \ {\n            upperCase = tolower(c);\n        }\n        if (islower(c)) {\n\
    \            lowerCase = toupper(c);\n        }\n        encoded = encoded + upperCase;\n\
    \        encoded = encoded + lowerCase;\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt3w7z4en.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n            case 'a':\n            case 'e':\n        \
    \    case 'i':\n            case 'o':\n            case 'u':\n               \
    \ encoded += c;\n                break;\n            case 'A':\n            case\
    \ 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n\
    \                encoded += c;\n                break;\n            default:\n\
    \                char vowel = c;\n                for (int i = 1; i < 2; i++)\
    \ {\n                    vowel = static_cast<char>(tolower(static_cast<unsigned\
    \ char>(vowel + i)));\n                    encoded += vowel;\n               \
    \ }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl30t23e0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += 'a';\n        }\n        else if(c == 'B' || c == 'F' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            ans += 'b';\n        }\n        else if(c\
    \ == 'C' || c == 'G' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ 'c';\n        }\n        else if(c == 'D' || c == 'H' || c == 'J' || c == 'K'\
    \ || c == 'L') {\n            ans += 'd';\n        }\n        else if(c == 'E'\
    \ || c == 'J' || c == 'K' || c == 'L' || c == 'M') {\n            ans += 'e';\n\
    \        }\n        else if(c == 'F' || c == 'K' || c == 'L' || c == 'M' || c\
    \ == 'N') {\n            ans += 'f';\n        }\n        else if(c == 'G' || c\
    \ == 'L' || c == 'M' || c == 'N' || c == 'O') {\n            ans += 'g';\n   \
    \     }\n        else if(c == 'H' || c == 'M' || c == 'N' || c == 'O' || c ==\
    \ 'P') {\n            ans += 'h';\n        }\n        else if(c == 'I' || c ==\
    \ 'N' || c == 'O' || c == 'P' || c == 'Q') {\n            ans += 'i';\n      \
    \  }\n        else if(c == 'J' || c == 'O' || c == 'P' || c == 'Q' || c == 'R')\
    \ {\n            ans += 'j';\n        }\n        else if(c == 'K' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S') {\n            ans += 'k';\n        }\n\
    \        else if(c == 'L' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c\
    \ == 'T') {\n            ans += 'l';\n        }\n        else if(c == 'M' || c\
    \ == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U') {\n    \
    \        ans += 'm';\n        }\n        else if(c == 'N' || c == 'P' || c ==\
    \ 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V') {\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9tbqhhc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    if ('A' <= c && c <= 'Z') {\n            ans += c;\n        } else {\n  \
    \          ans += 'A' + (c - 'A' + 1) % 2 + 'a';\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo811_skt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            encoded += c;\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n        } else if (c\
    \ >= '0' && c <= '9') {\n            encoded += c;\n        } else if (c == '.'\
    \ || c == '!' || c == '?' || c == '-' || c == '_' || c == '/' || c == '\\\\' ||\
    \ c == '^' || c == '+' || c == '*' || c == '(' || c == ')' || c == '[' || c ==\
    \ ']' || c == '{' || c == '}' || c == '|' || c == '~') {\n            encoded\
    \ += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            encoded += c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            encoded += c;\n        }\
    \ else if (c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5'\
    \ || c == '6' || c == '7' || c == '8' || c == '9') {\n            encoded += c;\n\
    \        } else {\n            assert(false);\n        }\n    }\n    for (char\
    \ c : encoded) {\n        if (c >= 'a' && c <= 'z') {\n            encoded +=\
    \ c;\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n\
    \        } else if (c >= '0' && c <= '9') {\n            encoded += c;\n     \
    \   } else if (c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c ==\
    \ '/' || c == '\\\\' || c == '^' || c == '+' || c == '*' || c == '(' || c == ')'\
    \ || c == '[' || c == ']' || c == '{' || c == '}' || c == '|' || c == '~') {\n\
    \            encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        } else if (c == '0' || c == '1' || c == '2' || c == '3' || c\
    \ == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') {\n    \
    \        encoded += c;\n        } else {\n            assert(false);\n       \
    \ }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxaej1ze7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppk415g0z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o'\
    \ || message[i]=='u'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O'\
    \ || message[i]=='U'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='b'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='c'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='d'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='e'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='f'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='g'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='h'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='i'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='j'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='k'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='l'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='m'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='n'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='o'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='p'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='q'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='r'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='s'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='t'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='u'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='v'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='w'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='x'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='y'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='z'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='A')\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp79s1ptm4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded += c;\n        } else if (c >= 'A' && c <= 'Z') {\n     \
    \       encoded += c;\n        } else if (c >= '0' && c <= '9') {\n          \
    \  encoded += c;\n        } else if (c == '.') {\n            encoded += c;\n\
    \        } else if (c == '!') {\n            encoded += c;\n        } else if\
    \ (c == '?') {\n            encoded += c;\n        } else if (c == '-') {\n  \
    \          encoded += c;\n        } else if (c == '+') {\n            encoded\
    \ += c;\n        } else if (c == '/') {\n            encoded += c;\n        }\
    \ else if (c == '(') {\n            encoded += c;\n        } else if (c == ')')\
    \ {\n            encoded += c;\n        } else if (c == '[') {\n            encoded\
    \ += c;\n        } else if (c == ']') {\n            encoded += c;\n        }\
    \ else if (c == '{') {\n            encoded += c;\n        } else if (c == '}')\
    \ {\n            encoded += c;\n        } else if (c == '<') {\n            encoded\
    \ += c;\n        } else if (c == '>') {\n            encoded += c;\n        }\
    \ else if (c == '%') {\n            encoded += c;\n        } else if (c == '&')\
    \ {\n            encoded += c;\n        } else if (c == '=') {\n            encoded\
    \ += c;\n        } else if (c == '|') {\n            encoded += c;\n        }\
    \ else if (c == '\\\\') {\n            encoded += c;\n        } else if (c ==\
    \ '^') {\n            encoded += c;\n        } else if (c == '~') {\n        \
    \    encoded += c;\n        } else if (c == '`') {\n            encoded += c;\n\
    \        } else if (c == '!') {\n            encoded += c;\n        } else if\
    \ (c == '@') {\n            encoded += c;\n        } else if (c == '#') {\n  \
    \          encoded += c;\n        } else if (c == '$') {\n            encoded\
    \ += c;\n        } else if (c == '%') {\n            encoded += c;\n        }\
    \ else if (c == '^') {\n            encoded += c;\n        } else if (c == '&')\
    \ {\n            encoded += c;\n        } else if (c == '*') {\n            encoded\
    \ += c;\n        } else if (c == '(') {\n            encoded += c;\n        }\
    \ else if (c == ')') {\n            encoded += c;\n        } else if (c == '[')\
    \ {\n            encoded += c;\n        } else if (c == ']') {\n            encoded\
    \ += c;\n        } else if (c == '{') {\n            encoded += c;\n        }\
    \ else if (c == '}') {\n            encoded += c;\n        } else if (c == '<')\
    \ {\n            encoded += c;\n        } else if (c == '>') {\n            encoded\
    \ += c;\n        } else if (c == '/') {\n            encoded += c;\n        }\
    \ else if (c == '?') {\n            encoded += c;\n        } else if (c == '!')\
    \ {\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg_cdvr28.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) - 'a') + 1;\n    }\n    for (auto &c : ans) {\n\
    \        ans[c - 'a'] = std::toupper(c);\n    }\n    for (auto &c : ans) {\n \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans[c - 'a'] = std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[c - 'a'] = std::toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[c - 'a'] = std::toupper(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n        }\n   \
    \ }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[c - 'a'] = std::toupper(c);\n\
    \        }\n    }\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphi51u06h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        ans.replace(ans.find(c), 2, tolower(c));\n    }\n    for (char\
    \ c : ans) {\n        ans.replace(ans.find(c), 1, toupper(c));\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpytc1jx5m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ua343so.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        char c = message[i];\n        if(c>='a' && c<='z') {\n            ans\
    \ += toupper(c);\n        }\n        else if(c>='A' && c<='Z') {\n           \
    \ ans += tolower(c);\n        }\n        else if(c>='a' && c<='z') {\n       \
    \     ans += toupper(c);\n        }\n        else if(c>='A' && c<='Z') {\n   \
    \         ans += tolower(c);\n        }\n        else if(c=='a') {\n         \
    \   ans += 'A';\n        }\n        else if(c=='A') {\n            ans += 'a';\n\
    \        }\n        else if(c=='e') {\n            ans += 'E';\n        }\n  \
    \      else if(c=='E') {\n            ans += 'e';\n        }\n        else if(c=='i')\
    \ {\n            ans += 'I';\n        }\n        else if(c=='I') {\n         \
    \   ans += 'i';\n        }\n        else if(c=='o') {\n            ans += 'O';\n\
    \        }\n        else if(c=='O') {\n            ans += 'o';\n        }\n  \
    \      else if(c=='u') {\n            ans += 'U';\n        }\n        else if(c=='U')\
    \ {\n            ans += 'u';\n        }\n        else if(c=='y') {\n         \
    \   ans += 'Y';\n        }\n        else if(c=='Y') {\n            ans += 'y';\n\
    \        }\n        else if(c=='o') {\n            ans += 'O';\n        }\n  \
    \      else if(c=='O') {\n            ans += 'o';\n        }\n        else if(c=='u')\
    \ {\n            ans += 'U';\n        }\n        else if(c=='U') {\n         \
    \   ans += 'u';\n        }\n        else if(c=='y') {\n            ans += 'Y';\n\
    \        }\n        else if(c=='Y') {\n            ans += 'y';\n        }\n  \
    \      else if(c=='i') {\n            ans += 'I';\n        }\n        else if(c=='I')\
    \ {\n            ans += 'i';\n        }\n        else if(c=='o') {\n         \
    \   ans += 'O';\n        }\n        else if(c=='O') {\n            ans += 'o';\n\
    \        }\n        else if(c=='u') {\n            ans += 'U';\n        }\n  \
    \      else if(c=='U') {\n            ans += 'u';\n        }\n        else if(c=='y')\
    \ {\n            ans += 'Y';\n        }\n        else if(c=='\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr9_9ffzl.cpp:104:20: warning: missing terminating ' character [enabled\
    \ by default]\n         else if(c=='\n                    ^\n/tmp/tmpr9_9ffzl.cpp:104:9:\
    \ error: missing terminating ' character\n         else if(c=='\n         ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr9_9ffzl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __s"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'A') {\n            c = 'E';\n        } else if (c\
    \ == 'E') {\n            c = 'A';\n        } else if (c == 'I') {\n          \
    \  c = 'O';\n        } else if (c == 'O') {\n            c = 'I';\n        } else\
    \ if (c == 'U') {\n            c = 'U';\n        } else if (c == 'Y') {\n    \
    \        c = 'Y';\n        } else if (c == 'a') {\n            c = 'e';\n    \
    \    } else if (c == 'e') {\n            c = 'a';\n        } else if (c == 'i')\
    \ {\n            c = 'o';\n        } else if (c == 'o') {\n            c = 'i';\n\
    \        } else if (c == 'u') {\n            c = 'u';\n        } else if (c ==\
    \ 'y') {\n            c = 'y';\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyi2ikv1d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i = 0; i < message.size(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += 'a';\n        }\n        else if(c == 'b' || c == 'c' || c == 'd' ||\
    \ c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \ ans += 'B';\n        }\n        else if(c == 'B' || c == 'C' || c == 'D' ||\
    \ c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c ==\
    \ 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n           \
    \ ans += 'b';\n        }\n        else {\n            ans += c;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhaamicn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         encoded += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            encoded += c;\n        } else if (c ==\
    \ 'b') {\n            encoded += \"k\";\n        } else if (c == 'c') {\n    \
    \        encoded += \"g\";\n        } else if (c == 'd') {\n            encoded\
    \ += \"s\";\n        } else if (c == 'f') {\n            encoded += \"c\";\n \
    \       } else if (c == 'g') {\n            encoded += \"k\";\n        } else\
    \ if (c == 'h') {\n            encoded += \"s\";\n        } else if (c == 'j')\
    \ {\n            encoded += \"s\";\n        } else if (c == 'k') {\n         \
    \   encoded += \"g\";\n        } else if (c == 'l') {\n            encoded +=\
    \ \"s\";\n        } else if (c == 'm') {\n            encoded += \"c\";\n    \
    \    } else if (c == 'n') {\n            encoded += \"g\";\n        } else if\
    \ (c == 'p') {\n            encoded += \"k\";\n        } else if (c == 'q') {\n\
    \            encoded += \"s\";\n        } else if (c == 'r') {\n            encoded\
    \ += \"c\";\n        } else if (c == 's') {\n            encoded += \"k\";\n \
    \       } else if (c == 't') {\n            encoded += \"s\";\n        } else\
    \ if (c == 'v') {\n            encoded += \"c\";\n        } else if (c == 'w')\
    \ {\n            encoded += \"k\";\n        } else if (c == 'x') {\n         \
    \   encoded += \"s\";\n        } else if (c == 'y') {\n            encoded +=\
    \ \"c\";\n        } else if (c == 'z') {\n            encoded += \"k\";\n    \
    \    } else {\n            encoded += c;\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptzjne95u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c)) ? (tolower(c)) : (toupper(c));\n    }\n    for (char\
    \ c : ans) {\n        ans.replace(ans.find(c), 2, tolower(c));\n    }\n    for\
    \ (char c : ans) {\n        ans.replace(ans.find(c), 1, toupper(c));\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3b5cav1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        if(message[i]=='A'||message[i]=='E'||message[i]=='I'||message[i]=='O'||message[i]=='U'){\n\
    \            ans+=\"A\";\n        }\n        else if(message[i]=='B'||message[i]=='F'||message[i]=='L'||message[i]=='R'||message[i]=='U'){\n\
    \            ans+=\"B\";\n        }\n        else if(message[i]=='C'||message[i]=='G'||message[i]=='M'||message[i]=='P'||message[i]=='S'||message[i]=='T'||message[i]=='V'){\n\
    \            ans+=\"C\";\n        }\n        else if(message[i]=='D'||message[i]=='H'||message[i]=='J'||message[i]=='K'||message[i]=='N'||message[i]=='X'){\n\
    \            ans+=\"D\";\n        }\n        else if(message[i]=='E'||message[i]=='I'||message[i]=='O'||message[i]=='U'){\n\
    \            ans+=\"E\";\n        }\n        else if(message[i]=='F'||message[i]=='L'||message[i]=='R'||message[i]=='U'){\n\
    \            ans+=\"F\";\n        }\n        else if(message[i]=='G'||message[i]=='M'||message[i]=='P'||message[i]=='S'||message[i]=='T'||message[i]=='V'){\n\
    \            ans+=\"G\";\n        }\n        else if(message[i]=='H'||message[i]=='J'||message[i]=='K'||message[i]=='N'||message[i]=='X'){\n\
    \            ans+=\"H\";\n        }\n        else if(message[i]=='I'||message[i]=='O'||message[i]=='U'){\n\
    \            ans+=\"I\";\n        }\n        else if(message[i]=='J'||message[i]=='K'||message[i]=='N'||message[i]=='X'){\n\
    \            ans+=\"J\";\n        }\n        else if(message[i]=='K'||message[i]=='N'||message[i]=='X'){\n\
    \            ans+=\"K\";\n        }\n        else if(message[i]=='L'||message[i]=='R'||message[i]=='U'){\n\
    \            ans+=\"L\";\n        }\n        else if(message[i]=='M'||message[i]=='P'||message[i]=='S'||message[i]=='T'||\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphs1mz408.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            ans[ans.find(c) + 2] = std::toupper(ans[ans.find(c)\
    \ + 2]);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c) + 1] = std::tolower(ans[ans.find(c) + 1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf9id_0rj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_e8ya_s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793401
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char &c : message) {\n\
    \        c = tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            c += tolower(message[message.size() - 2]);\n\
    \        }\n        encoded.append(1, c);\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1p3ta17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if ('a' <= c && c <= 'z') {\n            encoded += c;\n        }\n \
    \       else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \            encoded += c + 2;\n        }\n        else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            encoded += c - 2;\n    \
    \    }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprxuj1tth.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (auto &letter :\
    \ message) {\n        encodedMessage += toupper(letter);\n    }\n    for (auto\
    \ &letter : message) {\n        encodedMessage += tolower(letter);\n    }\n  \
    \  for (auto &letter : message) {\n        if (letter >= 'a' && letter <= 'z')\
    \ {\n            encodedMessage += letter - 'a' + 'A';\n        }\n        else\
    \ if (letter >= 'A' && letter <= 'Z') {\n            encodedMessage += letter\
    \ - 'A' + 'a';\n        }\n        else {\n            encodedMessage += letter;\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnfge_tas.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isalpha(c)) ? toupper(c) : tolower(c);\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1vc15jg3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if (std::isalpha(c)) {\n            char temp = c;\n            int index\
    \ = c - 'a';\n            int index2 = c - 'A';\n            if (index == index2)\
    \ {\n                temp = temp + 'a' - 'A';\n            }\n            encoded\
    \ = encoded + temp;\n        } else {\n            encoded = encoded + c;\n  \
    \      }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp75qb_dj7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n\
    \        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans += 'a';\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5bhwgixa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpup09uuwx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            ans += 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n\
    \        } else {\n            ans += c;\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || \n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclb6lfl2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans += c;\n        }\n        else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  ans += 'A';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += 'a';\n        }\n        else {\n\
    \            ans += c;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == 'A') {\n            ans[i] = 'a';\n        }\n\
    \        else if (ans[i] == 'a') {\n            ans[i] = 'A';\n        }\n   \
    \     else if (ans[i] == 'E') {\n            ans[i] = 'e';\n        }\n      \
    \  else if (ans[i] == 'e') {\n            ans[i] = 'E';\n        }\n        else\
    \ if (ans[i] == 'I') {\n            ans[i] = 'i';\n        }\n        else if\
    \ (ans[i] == 'i') {\n            ans[i] = 'I';\n        }\n        else if (ans[i]\
    \ == 'O') {\n            ans[i] = 'o';\n        }\n        else if (ans[i] ==\
    \ 'o') {\n            ans[i] = 'O';\n        }\n        else if (ans[i] == 'U')\
    \ {\n            ans[i] = 'u';\n        }\n        else if (ans[i] == 'u') {\n\
    \            ans[i] = 'U';\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpankhyepa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (auto &letter :\
    \ message) {\n        if (letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u') {\n            encodedMessage += letter;\n        }\
    \ else {\n            encodedMessage += letter + getVowel(letter);\n        }\n\
    \    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxjkk_yz2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::toupper(c));\n    }\n    for (char c : ans) {\n        if (c\
    \ == 'A') {\n            ans += 'B';\n        } else if (c == 'E') {\n       \
    \     ans += 'F';\n        } else if (c == 'I') {\n            ans += 'J';\n \
    \       } else if (c == 'O') {\n            ans += 'M';\n        } else if (c\
    \ == 'U') {\n            ans += 'N';\n        } else if (c == 'Y') {\n       \
    \     ans += 'P';\n        } else if (c == 'a') {\n            ans += 'b';\n \
    \       } else if (c == 'e') {\n            ans += 'f';\n        } else if (c\
    \ == 'i') {\n            ans += 'j';\n        } else if (c == 'o') {\n       \
    \     ans += 'm';\n        } else if (c == 'u') {\n            ans += 'n';\n \
    \       } else if (c == 'y') {\n            ans += 'p';\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnjg2sou3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A'\
    \ + 1;\n        ans += temp;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ntnxw9i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        } else {\n\
    \            ans += 'A' + (c - 'a');\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'A') {\n\
    \            ans[i] = 'a';\n        } else if (c == 'a') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'e') {\n            ans[i] = 'e';\n        }\
    \ else if (c == 'i') {\n            ans[i] = 'i';\n        } else if (c == 'o')\
    \ {\n            ans[i] = 'o';\n        } else if (c == 'u') {\n            ans[i]\
    \ = 'u';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcdic0d2n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        } else {\n\
    \            ans += 'A' + (c - 'a');\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'A') {\n\
    \            ans[i] = 'a';\n        } else if (c == 'a') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'e') {\n            ans[i] = 'e';\n        }\
    \ else if (c == 'i') {\n            ans[i] = 'i';\n        } else if (c == 'o')\
    \ {\n            ans[i] = 'o';\n        } else if (c == 'u') {\n            ans[i]\
    \ = 'u';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcdic0d2n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for\
    \ (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgolrgyli.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto c : message) {\n\
    \        char temp = c;\n        if (temp >= 'a' && temp <= 'z') {\n         \
    \   temp = temp - 'a' + 'A';\n        }\n        else if (temp >= 'A' && temp\
    \ <= 'Z') {\n            temp = temp - 'A' + 'a';\n        }\n        else if\
    \ (temp >= '0' && temp <= '9') {\n            temp = temp - '0' + '0';\n     \
    \   }\n        encoded = encoded + temp;\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1jys2_gj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += c;\n        }\n        else {\n            ans += tolower(c);\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0lwu7wbt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c\
    \ : ans) {\n        ans[ans.find(c) - 1] = (std::toupper(c) - 'A' + 2) % 26 +\
    \ 'A';\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8p1bl9ex.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        char temp = c;\n        if (temp >= 'a' && temp <= 'z') {\n         \
    \   temp = temp - 'a' + 26;\n        } else if (temp >= 'A' && temp <= 'Z') {\n\
    \            temp = temp - 'A' + 26;\n        } else if (temp >= '0' && temp <=\
    \ '9') {\n            temp = temp - '0' + 26;\n        }\n        encoded = encoded\
    \ + temp;\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1cu6755x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprgwf0zpp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char prev = message[i-1];\n  \
    \      if(isalpha(c)) {\n            if(c == prev) {\n                ans += c;\n\
    \            } else {\n                ans += toupper(c);\n            }\n   \
    \     } else {\n            ans += c;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgza9kgnt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += c;\n        }\n        else {\n            ans += 'A' + (message[i] -\
    \ 'a');\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7tt9sm6a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'a':\n            case 'e':\n           \
    \ case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += 'A';\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'k':\n            case 'p':\n            case 's':\n       \
    \         ans += 'B';\n                break;\n            case 'c':\n       \
    \     case 'd':\n            case 'g':\n            case 'j':\n            case\
    \ 'z':\n                ans += 'C';\n                break;\n            case\
    \ 'e':\n            case 'f':\n            case 'h':\n            case 'j':\n\
    \            case 'k':\n            case 'l':\n                ans += 'D';\n \
    \               break;\n            case 'f':\n            case 'g':\n       \
    \     case 'h':\n            case 'k':\n            case 'l':\n              \
    \  ans += 'E';\n                break;\n            case 'g':\n            case\
    \ 'h':\n            case 'j':\n            case 'k':\n            case 'l':\n\
    \                ans += 'F';\n                break;\n            case 'h':\n\
    \            case 'j':\n            case 'k':\n            case 'l':\n       \
    \         ans += 'G';\n                break;\n            case 'i':\n       \
    \     case 'j':\n            case 'k':\n            case 'l':\n              \
    \  ans += 'H';\n                break;\n            case 'j':\n            case\
    \ 'k':\n            case 'l':\n                ans += 'I';\n                break;\n\
    \            case 'k':\n            case 'l':\n                ans += 'J';\n \
    \               break;\n            case 'l':\n                ans += 'K';\n \
    \               break;\n            case 'm':\n            case 'n':\n       \
    \     case 'o':\n            case 'p':\n            case 'q':\n            case\
    \ 'r':\n            case 's':\n                ans += 'M';\n                break;\n\
    \            case 'n':\n            case 'o':\n            case 'p':\n       \
    \     case 'q':\n            case 'r':\n            case 's':\n              \
    \  ans += 'N';\n                break;\n            case 'o':\n            case\
    \ 'p':\n            case 'q':\n            case 'r':\n            case 's':\n\
    \                ans += 'O';\n                break;\n            case 'p':\n\
    \            case 'q':\n            case 'r':\n            case 's':\n       \
    \         ans += 'P';\n                break;\n            case 'q':\n       \
    \     case 'r':\n            case 's':\n                ans += 'Q';\n        \
    \        break;\n            case 'r':\n            case 's':\n              \
    \  ans += 'R';\n                break;\n            case 's':\n              \
    \  ans += 'S';\n                break;\n            case 't':\n            case\
    \ 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n\
    \            case 'y':\n            case 'z':\n                ans += 'T';\n \
    \               break;\n            case 'u':\n            case 'v':\n       \
    \     case 'w':\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuetborbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            ans += c;\n        }\n        else if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n    \
    \    else if (c == 'y' || c == 'i' || c == 'o' || c == 'u') {\n            ans\
    \ += 'Y';\n        }\n        else if (c == 'o' || c == 'u' || c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'y') {\n            ans += 'O';\n        }\n       \
    \ else if (c == 'h' || c == 'k' || c == 's' || c == 'c' || c == 'g' || c == 'g'\
    \ || c == 'h' || c == 'k' || c == 's') {\n            ans += 'H';\n        }\n\
    \        else if (c == 'm' || c == 'g' || c == 'g' || c == 's' || c == 'c' ||\
    \ c == 'g' || c == 'g' || c == 'h' || c == 'k' || c == 's') {\n            ans\
    \ += 'M';\n        }\n        else if (c == 't' || c == 'h' || c == 'k' || c ==\
    \ 's' || c == 'c' || c == 'g' || c == 'g' || c == 'h' || c == 'k' || c == 's')\
    \ {\n            ans += 'T';\n        }\n        else if (c == 'b' || c == 'd'\
    \ || c == 'f' || c == 'j' || c == 'l' || c == 'n' || c == 'p' || c == 's' || c\
    \ == 'v' || c == 'w' || c == 'y') {\n            ans += 'B';\n        }\n    \
    \    else if (c == 'r' || c == 'e' || c == 'f' || c == 'j' || c == 'l' || c ==\
    \ 'n' || c == 'p' || c == 's' || c == 'v' || c == 'w' || c == 'y') {\n       \
    \     ans += 'R';\n        }\n        else if (c == 'c' || c == 'f' || c == 'j'\
    \ || c == 'l' || c == 'n' || c == 'p' || c == 's' || c == 'v' || c == 'w' || c\
    \ == 'y') {\n            ans += 'C';\n        }\n        else if (c == 'f' ||\
    \ c == 'j' || c == 'l' || c == 'n' || c == 'p' || c == 's' || c == 'v' || c ==\
    \ 'w' || c == 'y') {\n            ans += 'F';\n        }\n        else if (c ==\
    \ 'j' || c == 'l' || c == 'n' || c == 'p' || c == 's' || c == 'v\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fpx1b0a.cpp:50:83: warning: missing terminating ' character [enabled\
    \ by default]\n         else if (c == 'j' || c == 'l' || c == 'n' || c == 'p'\
    \ || c == 's' || c == 'v\n                                                   \
    \                                ^\n/tmp/tmp5fpx1b0a.cpp:50:9: error: missing\
    \ terminating ' character\n         else if (c == 'j' || c == 'l' || c == 'n'\
    \ || c == 'p' || c == 's' || c == 'v\n         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5fpx1b0a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += (toupper(c));\n    }\n\
    \    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n     \
    \   if(c == 'A') {\n            ans[i] = 'E';\n        } else if(c == 'E') {\n\
    \            ans[i] = 'A';\n        } else if(c == 'I') {\n            ans[i]\
    \ = 'O';\n        } else if(c == 'O') {\n            ans[i] = 'I';\n        }\
    \ else if(c == 'U') {\n            ans[i] = 'U';\n        } else if(c == 'Y')\
    \ {\n            ans[i] = 'O';\n        } else if(c == 'a') {\n            ans[i]\
    \ = 'e';\n        } else if(c == 'e') {\n            ans[i] = 'a';\n        }\
    \ else if(c == 'i') {\n            ans[i] = 'o';\n        } else if(c == 'o')\
    \ {\n            ans[i] = 'i';\n        } else if(c == 'u') {\n            ans[i]\
    \ = 'u';\n        } else if(c == 'y') {\n            ans[i] = 'o';\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_6rfo7oe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n        case 'a':\n            encoded += \"A\";\n    \
    \        break;\n        case 'b':\n            encoded += \"B\";\n          \
    \  break;\n        case 'c':\n            encoded += \"C\";\n            break;\n\
    \        case 'd':\n            encoded += \"D\";\n            break;\n      \
    \  case 'e':\n            encoded += \"E\";\n            break;\n        case\
    \ 'f':\n            encoded += \"F\";\n            break;\n        case 'g':\n\
    \            encoded += \"G\";\n            break;\n        case 'h':\n      \
    \      encoded += \"H\";\n            break;\n        case 'i':\n            encoded\
    \ += \"I\";\n            break;\n        case 'j':\n            encoded += \"\
    J\";\n            break;\n        case 'k':\n            encoded += \"K\";\n \
    \           break;\n        case 'l':\n            encoded += \"L\";\n       \
    \     break;\n        case 'm':\n            encoded += \"M\";\n            break;\n\
    \        case 'n':\n            encoded += \"N\";\n            break;\n      \
    \  case 'o':\n            encoded += \"O\";\n            break;\n        case\
    \ 'p':\n            encoded += \"P\";\n            break;\n        case 'q':\n\
    \            encoded += \"Q\";\n            break;\n        case 'r':\n      \
    \      encoded += \"R\";\n            break;\n        case 's':\n            encoded\
    \ += \"S\";\n            break;\n        case 't':\n            encoded += \"\
    T\";\n            break;\n        case 'u':\n            encoded += \"U\";\n \
    \           break;\n        case 'v':\n            encoded += \"V\";\n       \
    \     break;\n        case 'w':\n            encoded += \"W\";\n            break;\n\
    \        case 'x':\n            encoded += \"X\";\n            break;\n      \
    \  case 'y':\n            encoded += \"Y\";\n            break;\n        case\
    \ 'z':\n            encoded += \"Z\";\n            break;\n        default:\n\
    \            assert(false);\n            break;\n        }\n    }\n    for (auto\
    \ &c : encoded) {\n        switch (c) {\n        case 'A':\n            c += 'a';\n\
    \            break;\n        case 'B':\n            c += 'b';\n            break;\n\
    \        case 'C':\n            c += 'c';\n            break;\n        case 'D':\n\
    \            c += 'd';\n            break;\n        case 'E':\n            c +=\
    \ 'e';\n            break;\n        case 'F':\n            c += 'f';\n       \
    \     break;\n        case 'G':\n            c += 'g';\n            break;\n \
    \       case 'H':\n            c += 'h';\n            break;\n        case 'I':\n\
    \            c += 'i';\n            break;\n        case 'J':\n            c +=\
    \ 'j';\n            break;\n        case 'K':\n            c += 'k';\n       \
    \     break;\n        case 'L':\n            c += 'l';\n            break;\n \
    \       case 'M':\n            c += 'm';\n            break;\n        case 'N':\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq3w52xor.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (char c : message)\
    \ {\n        char encodedChar = c;\n        if (c >= 'a' && c <= 'z') {\n    \
    \        encodedChar = c + 2;\n        } else if (c >= 'A' && c <= 'Z') {\n  \
    \          encodedChar = c + 1;\n        }\n        encodedMessage += encodedChar;\n\
    \    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1p3j14lq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     switch (i) {\n            case 'A':\n            case 'a':\n           \
    \     ans += 'A';\n                break;\n            case 'B':\n           \
    \ case 'b':\n                ans += 'B';\n                break;\n           \
    \ case 'C':\n            case 'c':\n                ans += 'C';\n            \
    \    break;\n            case 'D':\n            case 'd':\n                ans\
    \ += 'D';\n                break;\n            case 'E':\n            case 'e':\n\
    \                ans += 'E';\n                break;\n            case 'F':\n\
    \            case 'f':\n                ans += 'F';\n                break;\n\
    \            case 'G':\n            case 'g':\n                ans += 'G';\n \
    \               break;\n            case 'H':\n            case 'h':\n       \
    \         ans += 'H';\n                break;\n            case 'I':\n       \
    \     case 'i':\n                ans += 'I';\n                break;\n       \
    \     case 'J':\n            case 'j':\n                ans += 'J';\n        \
    \        break;\n            case 'K':\n            case 'k':\n              \
    \  ans += 'K';\n                break;\n            case 'L':\n            case\
    \ 'l':\n                ans += 'L';\n                break;\n            case\
    \ 'M':\n            case 'm':\n                ans += 'M';\n                break;\n\
    \            case 'N':\n            case 'n':\n                ans += 'N';\n \
    \               break;\n            case 'O':\n            case 'o':\n       \
    \         ans += 'O';\n                break;\n            case 'P':\n       \
    \     case 'p':\n                ans += 'P';\n                break;\n       \
    \     case 'Q':\n            case 'q':\n                ans += 'Q';\n        \
    \        break;\n            case 'R':\n            case 'r':\n              \
    \  ans += 'R';\n                break;\n            case 'S':\n            case\
    \ 's':\n                ans += 'S';\n                break;\n            case\
    \ 'T':\n            case 't':\n                ans += 'T';\n                break;\n\
    \            case 'U':\n            case 'u':\n                ans += 'U';\n \
    \               break;\n            case 'V':\n            case 'v':\n       \
    \         ans += 'V';\n                break;\n            case 'W':\n       \
    \     case 'w':\n                ans += 'W';\n                break;\n       \
    \     case 'X':\n            case 'x':\n                ans += 'X';\n        \
    \        break;\n            case 'Y':\n            case 'y':\n              \
    \  ans += 'Y';\n                break;\n            case 'Z':\n            case\
    \ 'z':\n                ans += 'Z';\n                break;\n            default:\n\
    \                ans += i;\n        }\n    }\n    for (auto &i : ans) {\n    \
    \    switch (i) {\n            case 'A':\n            case 'a':\n            \
    \    ans[i] = 'a';\n                break;\n            case 'B':\n          \
    \  case 'b':\n                ans[i] = 'b\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpile_nwjw.cpp:133:26: warning: missing terminating ' character [enabled\
    \ by default]\n                 ans[i] = 'b\n                          ^\n/tmp/tmpile_nwjw.cpp:133:17:\
    \ error: missing terminating ' character\n                 ans[i] = 'b\n     \
    \            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpile_nwjw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if ('a' <= c && c <= 'z') {\n            encoded += c;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  encoded += c + 2;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            encoded += c + 1;\n        }\n    }\n   \
    \ return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprcqigzmd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.size();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        } else {\n\
    \            ans += 'A' + c - 'a';\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp64wytmwi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        char upperCase = c;\n        char lowerCase = c;\n        char vowel\
    \ = 'A';\n        char vowel2 = 'A';\n        char vowel3 = 'A';\n        char\
    \ vowel4 = 'A';\n        char vowel5 = 'A';\n        char vowel6 = 'A';\n    \
    \    char vowel7 = 'A';\n        char vowel8 = 'A';\n        char vowel9 = 'A';\n\
    \        char vowel10 = 'A';\n        char vowel11 = 'A';\n        char vowel12\
    \ = 'A';\n        char vowel13 = 'A';\n        char vowel14 = 'A';\n        char\
    \ vowel15 = 'A';\n        char vowel16 = 'A';\n        char vowel17 = 'A';\n \
    \       char vowel18 = 'A';\n        char vowel19 = 'A';\n        char vowel20\
    \ = 'A';\n        char vowel21 = 'A';\n        char vowel22 = 'A';\n        char\
    \ vowel23 = 'A';\n        char vowel24 = 'A';\n        char vowel25 = 'A';\n \
    \       char vowel26 = 'A';\n        char vowel27 = 'A';\n        char vowel28\
    \ = 'A';\n        char vowel29 = 'A';\n        char vowel30 = 'A';\n        char\
    \ vowel31 = 'A';\n        char vowel32 = 'A';\n        char vowel33 = 'A';\n \
    \       char vowel34 = 'A';\n        char vowel35 = 'A';\n        char vowel36\
    \ = 'A';\n        char vowel37 = 'A';\n        char vowel38 = 'A';\n        char\
    \ vowel39 = 'A';\n        char vowel40 = 'A';\n        char vowel41 = 'A';\n \
    \       char vowel42 = 'A';\n        char vowel43 = 'A';\n        char vowel44\
    \ = 'A';\n        char vowel45 = 'A';\n        char vowel46 = 'A';\n        char\
    \ vowel47 = 'A';\n        char vowel48 = 'A';\n        char vowel49 = 'A';\n \
    \       char vowel50 = 'A';\n        char vowel51 = 'A';\n        char vowel52\
    \ = 'A';\n        char vowel53 = 'A';\n        char vowel54 = 'A';\n        char\
    \ vowel55 = 'A';\n        char vowel56 = 'A';\n        char vowel57 = 'A';\n \
    \       char vowel58 = 'A';\n        char vowel59 = 'A';\n        char vowel60\
    \ = 'A';\n        char vowel61 = 'A\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bnt6fan.cpp:78:24: warning: missing terminating ' character [enabled\
    \ by default]\n         char vowel61 = 'A\n                        ^\n/tmp/tmp3bnt6fan.cpp:78:9:\
    \ error: missing terminating ' character\n         char vowel61 = 'A\n       \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3bnt6fan.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       co"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            ans += c;\n        } else {\n            ans += 'A' + (c - 'A' +\
    \ 1) % 2 + 'a';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ps8u7gg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        char c = message[i];\n        if(c>='a' && c<='z') {\n            ans\
    \ += (char)(c-32);\n        }\n        else if(c>='A' && c<='Z') {\n         \
    \   ans += (char)(c+32);\n        }\n        else if(c>='a' && c<='z') {\n   \
    \         ans += (char)(c+32);\n        }\n        else if(c>='A' && c<='Z') {\n\
    \            ans += (char)(c-32);\n        }\n        else {\n            ans\
    \ += c;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkqx_99nc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'a':\n            case 'e':\n           \
    \ case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += 'A';\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'n':\n            case 'r':\n            case 't':\n       \
    \         ans += 'B';\n                break;\n            case 'c':\n       \
    \     case 'g':\n            case 'j':\n            case 'k':\n            case\
    \ 'm':\n                ans += 'C';\n                break;\n            case\
    \ 'd':\n            case 'h':\n            case 'j':\n            case 'k':\n\
    \            case 'n':\n                ans += 'D';\n                break;\n\
    \            case 'e':\n            case 'f':\n            case 'g':\n       \
    \     case 'h':\n            case 'i':\n            case 'j':\n            case\
    \ 'k':\n            case 'l':\n                ans += 'E';\n                break;\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n                ans += 'F';\n                break;\n            case\
    \ 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n\
    \            case 'k':\n            case 'l':\n                ans += 'G';\n \
    \               break;\n            case 'h':\n            case 'i':\n       \
    \     case 'j':\n            case 'k':\n            case 'l':\n              \
    \  ans += 'H';\n                break;\n            case 'i':\n            case\
    \ 'j':\n            case 'k':\n            case 'l':\n                ans += 'I';\n\
    \                break;\n            case 'j':\n            case 'k':\n      \
    \      case 'l':\n                ans += 'J';\n                break;\n      \
    \      case 'k':\n            case 'l':\n                ans += 'K';\n       \
    \         break;\n            case 'l':\n                ans += 'L';\n       \
    \         break;\n            case 'm':\n                ans += 'M';\n       \
    \         break;\n            case 'n':\n                ans += 'N';\n       \
    \         break;\n            case 'o':\n                ans += 'O';\n       \
    \         break;\n            case 'p':\n                ans += 'P';\n       \
    \         break;\n            case 'q':\n                ans += 'Q';\n       \
    \         break;\n            case 'r':\n                ans += 'R';\n       \
    \         break;\n            case 's':\n                ans += 'S';\n       \
    \         break;\n            case 't':\n                ans += 'T';\n       \
    \         break;\n            case 'u':\n                ans += 'U';\n       \
    \         break;\n            case 'v':\n                ans += 'V';\n       \
    \         break;\n            case 'w':\n                ans += 'W';\n       \
    \         break;\n            case 'x':\n                ans += 'X';\n       \
    \         break;\n            case 'y':\n                ans += '\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9tli7ir.cpp:134:24: warning: missing terminating ' character [enabled\
    \ by default]\n                 ans += '\n                        ^\n/tmp/tmpn9tli7ir.cpp:134:17:\
    \ error: missing terminating ' character\n                 ans += '\n        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn9tli7ir.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &i : message) {\n   \
    \     if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n      \
    \      ans += \"A\";\n        } else if (i == 'b' || i == 'c' || i == 'd' || i\
    \ == 'f' || i == 'g' || i == 'h' || i == 'j' || i == 'k' || i == 'l' || i == 'm'\
    \ || i == 'n' || i == 'p' || i == 'q' || i == 'r' || i == 's' || i == 't' || i\
    \ == 'v' || i == 'w' || i == 'x' || i == 'y' || i == 'z') {\n            ans +=\
    \ \"B\";\n        } else if (i == 'A' || i == 'B' || i == 'C' || i == 'D' || i\
    \ == 'E' || i == 'F' || i == 'G' || i == 'H' || i == 'I' || i == 'J' || i == 'K'\
    \ || i == 'L' || i == 'M' || i == 'N' || i == 'P' || i == 'Q' || i == 'R' || i\
    \ == 'S' || i == 'T' || i == 'V' || i == 'W' || i == 'X' || i == 'Y' || i == 'Z')\
    \ {\n            ans += \"C\";\n        } else if (i == '0' || i == '1' || i ==\
    \ '2' || i == '3' || i == '4' || i == '5' || i == '6' || i == '7' || i == '8'\
    \ || i == '9') {\n            ans += \"D\";\n        } else if (i == '!' || i\
    \ == '@' || i == '#' || i == '$' || i == '%' || i == '^' || i == '&' || i == '*'\
    \ || i == '(' || i == ')' || i == '_' || i == '+' || i == '=' || i == '[' || i\
    \ == ']' || i == '{' || i == '}' || i == '|' || i == '\\\\' || i == ';' || i ==\
    \ ':' || i == '<' || i == '>' || i == '?' || i == '/' || i == '>' || i == '<'\
    \ || i == '?' || i == '/' || i == '>' || i == '<' || i == '?' || i == '/' || i\
    \ == '>' || i == '<' || i == '?' || i == '/' || i == '>' || i == '<' || i == '?'\
    \ || i == '/' || i == '>' || i == '<' || i == '?' || i == '/' || i == '>' || i\
    \ == '<' || i == '?' || i == '/' || i == '>' || i == '<' || i == '?' || i == '/'\
    \ || i == '>' || i == '<' || i == '?\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69nqgvf_.cpp:24:686: warning: missing terminating ' character [enabled\
    \ by default]\n         } else if (i == '!' || i == '@' || i == '#' || i == '$'\
    \ || i == '%' || i == '^' || i == '&' || i == '*' || i == '(' || i == ')' || i\
    \ == '_' || i == '+' || i == '=' || i == '[' || i == ']' || i == '{' || i == '}'\
    \ || i == '|' || i == '\\\\' || i == ';' || i == ':' || i == '<' || i == '>' ||\
    \ i == '?' || i == '/' || i == '>' || i == '<' || i == '?' || i == '/' || i ==\
    \ '>' || i == '<' || i == '?' || i == '/' || i == '>' || i == '<' || i == '?'\
    \ || i == '/' || i == '>' || i == '<' || i == '?' || i == '/' || i == '>' || i\
    \ == '<' || i == '?' || i == '/' || i == '>' || i == '<' || i == '?' || i == '/'\
    \ || i == '>' || i == '<' || i == '?' || i == '/' || i == '>' || i == '<' || i\
    \ == '?\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          ^\n/tmp/tmp69nqgvf_.cpp:24:9: error: missing terminating ' character\n\
    \         } else if (i == '!' || i == '@' || i == '#' || i == '$' || i == '%'\
    \ || i == '^' || i == '&' || i == '*' || i == '(' || i == ')' || i == '_' || i\
    \ == '+' || i == '=' || i == '[' || i == ']' || i == '{' || i == '}' || i == '|'\
    \ || i == '\\\\' || i == ';' || i == ':' || i == '<' || i == '>' || i == '?' ||\
    \ i == '/' || i == '>' || i == '<' || i == '?' || i == '/' || i == '>' || i ==\
    \ '<' || i == '?' || i == '/' || i == '>' || i == '<' || i == '?' || i == '/'\
    \ || i == '>' || i == '<' || i == '?' || i == '/' || i"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c\
    \ : ans) {\n        ans[ans.find(c) - 2] = std::tolower(c);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpumle_rbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    switch (c) {\n            case 'A':\n            case 'E':\n            case\
    \ 'I':\n            case 'O':\n            case 'U':\n                ans[ans.find(c)\
    \ + 1] = 'E';\n                break;\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \                ans[ans.find(c) + 1] = 'e';\n                break;\n       \
    \     case 'B':\n            case 'F':\n            case 'I':\n            case\
    \ 'O':\n            case 'U':\n                ans[ans.find(c) + 1] = 'F';\n \
    \               break;\n            case 'b':\n            case 'f':\n       \
    \     case 'i':\n            case 'o':\n            case 'u':\n              \
    \  ans[ans.find(c) + 1] = 'f';\n                break;\n            case 'C':\n\
    \            case 'G':\n            case 'K':\n            case 'M':\n       \
    \     case 'S':\n            case 'T':\n                ans[ans.find(c) + 1] =\
    \ 'G';\n                break;\n            case 'c':\n            case 'g':\n\
    \            case 'k':\n            case 'm':\n            case 's':\n       \
    \     case 't':\n                ans[ans.find(c) + 1] = 'g';\n               \
    \ break;\n            case 'D':\n            case 'H':\n            case 'J':\n\
    \            case 'P':\n            case 'S':\n            case 'W':\n       \
    \         ans[ans.find(c) + 1] = 'H';\n                break;\n            case\
    \ 'd':\n            case 'h':\n            case 'j':\n            case 'p':\n\
    \            case 's':\n            case 'w':\n                ans[ans.find(c)\
    \ + 1] = 'h';\n                break;\n            case 'E':\n            case\
    \ 'I':\n            case 'O':\n            case 'U':\n                ans[ans.find(c)\
    \ + 1] = 'I';\n                break;\n            case 'e':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n                ans[ans.find(c)\
    \ + 1] = 'i';\n                break;\n            case 'F':\n            case\
    \ 'I':\n            case 'O':\n            case 'U':\n                ans[ans.find(c)\
    \ + 1] = 'O';\n                break;\n            case 'f':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n                ans[ans.find(c)\
    \ + 1] = 'o';\n                break;\n            case 'G':\n            case\
    \ 'K':\n            case 'M':\n            case 'S':\n            case 'T':\n\
    \                ans[ans.find(c) + 1] = 'K';\n                break;\n       \
    \     case 'g':\n            case 'k':\n\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgkgwfgb5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage;\n    for (auto &letter : message)\
    \ {\n        encodedMessage += letter;\n    }\n    for (auto &vowel : \"AEIOUaeiou\"\
    ) {\n        encodedMessage.replace(encodedMessage.find(vowel), vowel.size()+2,\
    \ vowel.at(vowel.size()-1));\n    }\n    return encodedMessage;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9tt5ci1t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        switch (c) {\n        case 'A':\n        case 'E':\n     \
    \   case 'I':\n        case 'O':\n        case 'U':\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n            break;\n        case 'a':\n\
    \        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n\
    \            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n         \
    \   break;\n        default:\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw_1aqcer.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c: message) {\n\
    \        switch (c) {\n        case 'A':\n            encoded += \"a\";\n    \
    \        break;\n        case 'B':\n            encoded += \"b\";\n          \
    \  break;\n        case 'C':\n            encoded += \"c\";\n            break;\n\
    \        case 'D':\n            encoded += \"d\";\n            break;\n      \
    \  case 'E':\n            encoded += \"e\";\n            break;\n        case\
    \ 'F':\n            encoded += \"f\";\n            break;\n        case 'G':\n\
    \            encoded += \"g\";\n            break;\n        case 'H':\n      \
    \      encoded += \"h\";\n            break;\n        case 'I':\n            encoded\
    \ += \"i\";\n            break;\n        case 'J':\n            encoded += \"\
    j\";\n            break;\n        case 'K':\n            encoded += \"k\";\n \
    \           break;\n        case 'L':\n            encoded += \"l\";\n       \
    \     break;\n        case 'M':\n            encoded += \"m\";\n            break;\n\
    \        case 'N':\n            encoded += \"n\";\n            break;\n      \
    \  case 'O':\n            encoded += \"o\";\n            break;\n        case\
    \ 'P':\n            encoded += \"p\";\n            break;\n        case 'Q':\n\
    \            encoded += \"q\";\n            break;\n        case 'R':\n      \
    \      encoded += \"r\";\n            break;\n        case 'S':\n            encoded\
    \ += \"s\";\n            break;\n        case 'T':\n            encoded += \"\
    t\";\n            break;\n        case 'U':\n            encoded += \"u\";\n \
    \           break;\n        case 'V':\n            encoded += \"v\";\n       \
    \     break;\n        case 'W':\n            encoded += \"w\";\n            break;\n\
    \        case 'X':\n            encoded += \"x\";\n            break;\n      \
    \  case 'Y':\n            encoded += \"y\";\n            break;\n        case\
    \ 'Z':\n            encoded += \"z\";\n            break;\n        case 'a':\n\
    \            encoded += \"a\";\n            break;\n        case 'b':\n      \
    \      encoded += \"b\";\n            break;\n        case 'c':\n            encoded\
    \ += \"c\";\n            break;\n        case 'd':\n            encoded += \"\
    d\";\n            break;\n        case 'e':\n            encoded += \"e\";\n \
    \           break;\n        case 'f':\n            encoded += \"f\";\n       \
    \     break;\n        case 'g':\n            encoded += \"g\";\n            break;\n\
    \        case 'h':\n            encoded += \"h\";\n            break;\n      \
    \  case 'i':\n            encoded += \"i\";\n            break;\n        case\
    \ 'j':\n            encoded += \"j\";\n            break;\n        case 'k':\n\
    \            encoded += \"k\";\n            break;\n        case 'l':\n      \
    \      encoded += \"l\";\n            break;\n        case 'm':\n            encoded\
    \ += \"m\";\n            break;\n        case 'n':\n            encoded += \"\
    n\";\n            break;\n        case 'o':\n            encoded += \"o\";\n \
    \           break;\n        case 'p':\n            \n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0j2js4wf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        } else {\n  \
    \          ans += 'A' + c - 'a';\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkw82s6hd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptmnvp2_w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n        case 'a':\n            encoded += \"A\";\n    \
    \        break;\n        case 'b':\n            encoded += \"B\";\n          \
    \  break;\n        case 'c':\n            encoded += \"C\";\n            break;\n\
    \        case 'd':\n            encoded += \"D\";\n            break;\n      \
    \  case 'e':\n            encoded += \"E\";\n            break;\n        case\
    \ 'f':\n            encoded += \"F\";\n            break;\n        case 'g':\n\
    \            encoded += \"G\";\n            break;\n        case 'h':\n      \
    \      encoded += \"H\";\n            break;\n        case 'i':\n            encoded\
    \ += \"I\";\n            break;\n        case 'j':\n            encoded += \"\
    J\";\n            break;\n        case 'k':\n            encoded += \"K\";\n \
    \           break;\n        case 'l':\n            encoded += \"L\";\n       \
    \     break;\n        case 'm':\n            encoded += \"M\";\n            break;\n\
    \        case 'n':\n            encoded += \"N\";\n            break;\n      \
    \  case 'o':\n            encoded += \"O\";\n            break;\n        case\
    \ 'p':\n            encoded += \"P\";\n            break;\n        case 'q':\n\
    \            encoded += \"Q\";\n            break;\n        case 'r':\n      \
    \      encoded += \"R\";\n            break;\n        case 's':\n            encoded\
    \ += \"S\";\n            break;\n        case 't':\n            encoded += \"\
    T\";\n            break;\n        case 'u':\n            encoded += \"U\";\n \
    \           break;\n        case 'v':\n            encoded += \"V\";\n       \
    \     break;\n        case 'w':\n            encoded += \"W\";\n            break;\n\
    \        case 'x':\n            encoded += \"X\";\n            break;\n      \
    \  case 'y':\n            encoded += \"Y\";\n            break;\n        case\
    \ 'z':\n            encoded += \"Z\";\n            break;\n        case 'A':\n\
    \            encoded += \"a\";\n            break;\n        case 'B':\n      \
    \      encoded += \"b\";\n            break;\n        case 'C':\n            encoded\
    \ += \"c\";\n            break;\n        case 'D':\n            encoded += \"\
    d\";\n            break;\n        case 'E':\n            encoded += \"e\";\n \
    \           break;\n        case 'F':\n            encoded += \"f\";\n       \
    \     break;\n        case 'G':\n            encoded += \"g\";\n            break;\n\
    \        case 'H':\n            encoded += \"h\";\n            break;\n      \
    \  case 'I':\n            encoded += \"i\";\n            break;\n        case\
    \ 'J':\n            encoded += \"j\";\n            break;\n        case 'K':\n\
    \            encoded += \"k\";\n            break;\n        case 'L':\n      \
    \      encoded += \"l\";\n            break;\n        case 'M':\n            encoded\
    \ += \"m\";\n            break;\n        case 'N':\n            encoded += \"\
    n\";\n            break;\n        case 'O':\n            encoded += \"o\";\n \
    \           break;\n        case 'P':\n\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppev81x3q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n\
    \        }\n        else if(message[i]>='A' && message[i]<='Z') {\n          \
    \  ans += message[i];\n        }\n        else if(message[i]>='a' && message[i]<='z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i]>='A'\
    \ && message[i]<='Z') {\n            ans += message[i];\n        }\n        else\
    \ if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n \
    \       }\n        else if(message[i]>='A' && message[i]<='Z') {\n           \
    \ ans += message[i];\n        }\n        else if(message[i]>='a' && message[i]<='z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i]>='A'\
    \ && message[i]<='Z') {\n            ans += message[i];\n        }\n        else\
    \ if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n \
    \       }\n        else if(message[i]>='A' && message[i]<='Z') {\n           \
    \ ans += message[i];\n        }\n        else if(message[i]>='a' && message[i]<='z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i]>='A'\
    \ && message[i]<='Z') {\n            ans += message[i];\n        }\n        else\
    \ if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n \
    \       }\n        else if(message[i]>='A' && message[i]<='Z') {\n           \
    \ ans += message[i];\n        }\n        else if(message[i]>='a' && message[i]<='z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i]>='A'\
    \ && message[i]<='Z') {\n            ans += message[i];\n        }\n        else\
    \ if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n \
    \       }\n        else if(message[i]>='A' && message[i]<='Z') {\n           \
    \ ans += message[i];\n        }\n        else if(message[i]>='a' && message[i]<='z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i]>='A'\
    \ && message[i]<='Z') {\n            ans += message[i];\n        }\n        else\
    \ if(message[i]>='a' && message[i]<='z') {\n            ans += message[i];\n \
    \       }\n        else if(message[i]>='A' && message[i]<='Z') {\n\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdty9zdme.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto c : message) {\n\
    \        char newC = c;\n        if (newC == 'a' || newC == 'e' || newC == 'i'\
    \ || newC == 'o' || newC == 'u') {\n            newC = newC + 2;\n        }\n\
    \        encoded = encoded + newC;\n    }\n    for (auto c : encoded) {\n    \
    \    char newC = c;\n        if (newC == 'A' || newC == 'E' || newC == 'I' ||\
    \ newC == 'O' || newC == 'U') {\n            newC = newC - 2;\n        }\n   \
    \     encoded = encoded + newC;\n    }\n    return encoded;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8g9j1ljw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            ans += 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwtz3mp25.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U' || c == 'Y') {\n            ans += 'A';\n        } else\
    \ {\n            ans += 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U' || c == 'Y') {\n            ans[i] = 'A';\n        } else\
    \ {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U' || c == 'Y') {\n            ans[i] = 'A';\n        } else\
    \ {\n            ans[i] = 'a';\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptcknl9gs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += tolower(c);\n        }\n    }\n    for(int i = 0; i <\
    \ ans.length(); i++) {\n        char c = ans[i];\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = tolower(ans[i+1]);\n\
    \        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[i] = toupper(ans[i+1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2pmvby7g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += (c >= 'a' && c <= 'z')\
    \ ? c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c + 2 : c));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdjctqgtc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppk415g0z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793400
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else {\n \
    \           ans += 'a' + (c - 'a');\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else\
    \ {\n            ans += 'a' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcnk6mkee.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        char c=message[i];\n        if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<='Z'){\n            ans.push_back((c-'A')+'a');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='a' && c<='z'){\n            ans.push_back((c-'a')+'A');\n\
    \        }\n        else if(c>='A' && c<\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl53t0uj4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n    for (auto\
    \ &c : ans) {\n        switch (c) {\n        case 'a':\n            ans += 'e';\n\
    \            break;\n        case 'e':\n            ans += 'a';\n            break;\n\
    \        case 'i':\n            ans += 'o';\n            break;\n        case\
    \ 'o':\n            ans += 'i';\n            break;\n        case 'u':\n     \
    \       ans += 'u';\n            break;\n        case 'y':\n            ans +=\
    \ 'a';\n            break;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    switch (c) {\n        case 'a':\n            ans += 'e';\n            break;\n\
    \        case 'e':\n            ans += 'a';\n            break;\n        case\
    \ 'i':\n            ans += 'o';\n            break;\n        case 'o':\n     \
    \       ans += 'i';\n            break;\n        case 'u':\n            ans +=\
    \ 'u';\n            break;\n        case 'y':\n            ans += 'a';\n     \
    \       break;\n        }\n    }\n    for (auto &c : ans) {\n        switch (c)\
    \ {\n        case 'a':\n            ans += 'e';\n            break;\n        case\
    \ 'e':\n            ans += 'a';\n            break;\n        case 'i':\n     \
    \       ans += 'o';\n            break;\n        case 'o':\n            ans +=\
    \ 'i';\n            break;\n        case 'u':\n            ans += 'u';\n     \
    \       break;\n        case 'y':\n            ans += 'a';\n            break;\n\
    \        }\n    }\n    for (auto &c : ans) {\n        switch (c) {\n        case\
    \ 'a':\n            ans += 'e';\n            break;\n        case 'e':\n     \
    \       ans += 'a';\n            break;\n        case 'i':\n            ans +=\
    \ 'o';\n            break;\n        case 'o':\n            ans += 'i';\n     \
    \       break;\n        case 'u':\n            ans += 'u';\n            break;\n\
    \        case 'y':\n            ans += 'a';\n            break;\n        }\n \
    \   }\n    for (auto &c : ans) {\n        switch (c) {\n        case 'a':\n  \
    \          ans += 'e';\n            break;\n        case 'e':\n            ans\
    \ += 'a';\n            break;\n        case 'i':\n            ans += 'o';\n  \
    \          break;\n        case 'o':\n            ans += 'i';\n            break;\n\
    \        case 'u':\n            ans += 'u';\n            break;\n        case\
    \ 'y':\n            ans += 'a';\n            break;\n        }\n    }\n    for\
    \ (auto &c : ans) {\n\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfal5gp93.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans)\
    \ {\n        ans[ans.find(c) - 1] = tolower(c);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppo_6d0m1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n            case 'a':\n            case 'e':\n        \
    \    case 'i':\n            case 'o':\n            case 'u':\n               \
    \ encoded += 'A';\n                break;\n            case 'b':\n           \
    \ case 'f':\n            case 'k':\n            case 'p':\n            case 's':\n\
    \                encoded += 'B';\n                break;\n            case 'c':\n\
    \            case 'd':\n            case 'g':\n            case 'j':\n       \
    \     case 'z':\n                encoded += 'C';\n                break;\n   \
    \         case 'e':\n            case 'h':\n            case 'l':\n          \
    \  case 'n':\n            case 'q':\n            case 'x':\n                encoded\
    \ += 'E';\n                break;\n            case 'f':\n            case 'h':\n\
    \            case 'k':\n            case 'p':\n            case 's':\n       \
    \         encoded += 'F';\n                break;\n            case 'g':\n   \
    \         case 'j':\n            case 'z':\n                encoded += 'G';\n\
    \                break;\n            case 'h':\n            case 'k':\n      \
    \      case 'p':\n            case 's':\n                encoded += 'H';\n   \
    \             break;\n            case 'i':\n            case 'l':\n         \
    \   case 'n':\n            case 'q':\n            case 'x':\n                encoded\
    \ += 'I';\n                break;\n            case 'j':\n            case 'z':\n\
    \                encoded += 'J';\n                break;\n            case 'k':\n\
    \            case 'p':\n            case 's':\n                encoded += 'K';\n\
    \                break;\n            case 'l':\n            case 'n':\n      \
    \      case 'q':\n            case 'x':\n                encoded += 'L';\n   \
    \             break;\n            case 'm':\n            case 'n':\n         \
    \   case 'q':\n            case 'x':\n                encoded += 'M';\n      \
    \          break;\n            case 'o':\n            case 'p':\n            case\
    \ 's':\n                encoded += 'O';\n                break;\n            case\
    \ 'q':\n            case 'x':\n                encoded += 'Q';\n             \
    \   break;\n            case 'r':\n            case 's':\n                encoded\
    \ += 'R';\n                break;\n            case 't':\n            case 'u':\n\
    \            case 'v':\n                encoded += 'T';\n                break;\n\
    \            case 'v':\n            case 'w':\n            case 'x':\n       \
    \         encoded += 'V';\n                break;\n            case 'w':\n   \
    \         case 'x':\n                encoded += 'W';\n                break;\n\
    \            case 'x':\n                encoded += 'X';\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpun3rg39d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            c = std::toupper(c);\n        }\n   \
    \ }\n    for (auto &c : ans) {\n        if (std::isupper(c)) {\n            c\
    \ = std::tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (std::isupper(c)) {\n            c = std::tolower(c);\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpknm56twa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    if ('A' <= c && c <= 'Z') {\n            ans += c;\n        } else if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ 'A';\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans += 'a';\n        }\n    }\n    for (char c : ans) {\n\
    \        if ('A' <= c && c <= 'Z') {\n            ans += c;\n        } else if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans\
    \ += 'A';\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            ans += 'a';\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa70x1s5y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (int i =\
    \ 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isupper(c))\
    \ {\n            ans[i] = tolower(ans[i+1]);\n        }\n        if (islower(c))\
    \ {\n            ans[i] = toupper(ans[i+1]);\n        }\n    }\n    for (int i\
    \ = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isupper(c))\
    \ {\n            ans[i] = tolower(ans[i+1]);\n        }\n        if (islower(c))\
    \ {\n            ans[i] = toupper(ans[i+1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv8221u53.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.size();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= '0' && message[i] <= '9') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == '.' || message[i] == '!' || message[i] ==\
    \ '?' || message[i] == '-' || message[i] == '_' || message[i] == '*' || message[i]\
    \ == '(' || message[i] == ')' || message[i] == '/' || message[i] == '\\\\' ||\
    \ message[i] == '$' || message[i] == '%' || message[i] == '^' || message[i] ==\
    \ '&' || message[i] == '*' || message[i] == '+' || message[i] == ',' || message[i]\
    \ == '<' || message[i] == '>' || message[i] == '|' || message[i] == '{' || message[i]\
    \ == '}' || message[i] == '~' || message[i] == '`' || message[i] == '\"' || message[i]\
    \ == '~') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '0' || message[i] == '1' || message[i] == '2' || message[i] == '3' || message[i]\
    \ == '4' || message[i] == '5' || message[i] == '6' || message[i] == '7' || message[i]\
    \ == '8' || message[i] == '9') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == '.' || message[i] == '!' || message[i] ==\
    \ '?' || message[i] == '-' || message[i] == '_' || message[i] == '*' || message[i]\
    \ == '(' || message[i] == ')' || message[i] == '/' || message[i] == '\\\\' ||\
    \ message[i] == '$' || message[i] == '%' || message[i] == '^' || message[i] ==\
    \ '&' || message[i] == '*' || message[i] == '+' || message[i] == ',' || message[i]\
    \ == '<' || message[i] == '>' || message[i] == '|' || message[i] == '{' || message[i]\
    \ == '}' || message[i] == '~' || message[i] == '`' || message[i] == '\"' || message[i]\
    \ == '~') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            \n}\nint main() {\n    auto candidate = encode;\n   \
    \ assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkntorihe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c\
    \ : ans) {\n        ans[ans.find(c) - 1] = (std::toupper(c) - 'A' + 2) % 26 +\
    \ 'A';\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8p1bl9ex.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793402
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    for (auto &c\
    \ : ans) {\n        if (std::tolower(c) == 'a') {\n            ans[ans.size()\
    \ - 1] = 'e';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpol9sqzbq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793403
