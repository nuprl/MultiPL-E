language: cpp
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (int i =\
    \ 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'A';\n\
    \        }\n        else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[i] = 'E';\n        }\n        else if (c == 'o' || c == 'u')\
    \ {\n            ans[i] = 'O';\n        }\n        else if (c == 'i' || c == 'u')\
    \ {\n            ans[i] = 'I';\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        char c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n        }\n        else\
    \ if (c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'e';\n\
    \        }\n        else if (c == 'O' || c == 'U') {\n            ans[i] = 'o';\n\
    \        }\n        else if (c == 'I' || c == 'U') {\n            ans[i] = 'i';\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        char c\
    \ = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        }\n        else if (c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'E';\n        }\n  \
    \      else if (c == 'o' || c == 'u') {\n            ans[i] = 'O';\n        }\n\
    \        else if (c == 'i' || c == 'u') {\n            ans[i] = 'I';\n       \
    \ }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         ans[i] = 'a';\n        }\n        else if (c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'e';\n        }\n        else if\
    \ (c == 'O' || c == 'U') {\n            ans[i] = 'o';\n        }\n        else\
    \ if (c == 'I' || c == 'U') {\n            ans[i] = 'i';\n        }\n    }\n \
    \   for (int i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n       \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  ans[i] = 'A\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63zcyxmj.cpp:81:22: warning: missing terminating ' character [enabled\
    \ by default]\n             ans[i] = 'A\n                      ^\n/tmp/tmp63zcyxmj.cpp:81:13:\
    \ error: missing terminating ' character\n             ans[i] = 'A\n         \
    \    ^\n/tmp/tmp63zcyxmj.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp63zcyxmj.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmp63zcyxmj.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmp63zcyxmj.cpp:82:1: error: expected\
    \ primary-expression before '}' token\n }\n ^\n/tmp/tmp63zcyxmj.cpp:82:1: error:\
    \ expected ';' before '}' token\n/tmp/tmp63zcyxmj.cpp:83:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmp63zcyxmj.cpp:90:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmp63zcyxmj.cpp:90:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (char)(c + 1);\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n\
    \        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o'\
    \ || ans[i] == 'u') {\n            ans[i] = ans[i - 1]\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58_u6_xt.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp58_u6_xt.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp58_u6_xt.cpp:71:1:\
    \ error: expected ';' before '}' token\n }\n ^\n/tmp/tmp58_u6_xt.cpp:72:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmp58_u6_xt.cpp:79:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp58_u6_xt.cpp:79:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto c :\
    \ ans) {\n        ans.replace(ans.find(c), 2, tolower(c));\n    }\n    for (auto\
    \ c : ans) {\n        ans.replace(ans.find(c), 2, toupper(c));\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdt5is8g6.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpdt5is8g6.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : message) {\n               ^\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected ';'\
    \ before 'for'\n     for (auto c : ans) {\n     ^\n/tmp/tmpdt5is8g6.cpp:18:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:18:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdt5is8g6.cpp:18:15: error: 'c' does not name a type\n\
    \     for (auto c : ans) {\n               ^\n/tmp/tmpdt5is8g6.cpp:21:5: error:\
    \ expected ';' before 'for'\n     for (auto c : ans) {\n     ^\n/tmp/tmpdt5is8g6.cpp:21:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdt5is8g6.cpp:21:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdt5is8g6.cpp:21:15: error: 'c' does not name a type\n\
    \     for (auto c : ans) {\n               ^\n/tmp/tmpdt5is8g6.cpp:24:5: error:\
    \ expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpdt5is8g6.cpp:24:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdt5is8g6.cpp:24:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdt5is8g6.cpp: In function 'int main()':\n/tmp/tmpdt5is8g6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdt5is8g6.cpp:2:\n/tmp/tmpdt5is8g6.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans;\n    for(int i=0;i<message.length();i++) {\n\
    \        char c = message[i];\n        if(c>='a' && c<='z') {\n            ans\
    \ += (char)(c + 32);\n        }\n        else if(c>='A' && c<='Z') {\n       \
    \     ans += (char)(c + 32);\n        }\n        else if(c>='a' && c<='z') {\n\
    \            ans += (char)(c + 32);\n        }\n        else if(c>='A' && c<='Z')\
    \ {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a' &&\
    \ c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<='Z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='a'\
    \ && c<='z') {\n            ans += (char)(c + 32);\n        }\n        else if(c>='A'\
    \ && c<\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7eshl5ms.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp7eshl5ms.cpp:81:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmp7eshl5ms.cpp:81:1: error: expected ')' before '}' token\n/tmp/tmp7eshl5ms.cpp:81:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmp7eshl5ms.cpp:81:1:\
    \ error: expected ';' before '}' token\n/tmp/tmp7eshl5ms.cpp:82:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmp7eshl5ms.cpp:89:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (char c : message)\
    \ {\n        encodedMessage += toupper(c);\n    }\n    for (int i = 0; i < encodedMessage.length();\
    \ i++) {\n        char c = encodedMessage[i];\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            char nextLetter = encodedMessage[(i\
    \ + 2) % encodedMessage.length()];\n            encodedMessage[i] = nextLetter;\n\
    \        }\n    }\n    for (int i = 0; i < encodedMessage.length(); i++) {\n \
    \       char c = encodedMessage[i];\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            char nextLetter = encodedMessage[(i\
    \ + 2) % encodedMessage.length()];\n            encodedMessage[i] = nextLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5yy1y2z.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp_5yy1y2z.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp_5yy1y2z.cpp:\
    \ In function 'int main()':\n/tmp/tmp_5yy1y2z.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5yy1y2z.cpp:2:\n/tmp/tmp_5yy1y2z.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (std::find(vowels.begin(), vowels.end(), c) != vowels.end())\
    \ {\n            ans.replace(vowels.find(c), 2, vowels[vowels.find(c) + 1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyx4lsl7.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpfyx4lsl7.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpfyx4lsl7.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpfyx4lsl7.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpfyx4lsl7.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpfyx4lsl7.cpp:19:23: error: 'vowels' was not declared\
    \ in this scope\n         if (std::find(vowels.begin(), vowels.end(), c) != vowels.end())\
    \ {\n                       ^\n/tmp/tmpfyx4lsl7.cpp: In function 'int main()':\n\
    /tmp/tmpfyx4lsl7.cpp:26:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyx4lsl7.cpp:2:\n/tmp/tmpfyx4lsl7.cpp:27:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c) ? toupper(c) : tolower(c));\n    }\n    for (char c :\
    \ ans) {\n        ans[ans.find(c) + 2] = tolower(c);\n    }\n    for (char c :\
    \ ans) {\n        ans[ans.find(c) - 2] = toupper(c);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzn4pt29q.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpzn4pt29q.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpzn4pt29q.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpzn4pt29q.cpp:21:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmpzn4pt29q.cpp: In function 'int main()':\n/tmp/tmpzn4pt29q.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzn4pt29q.cpp:2:\n/tmp/tmpzn4pt29q.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (char\
    \ c : ans) {\n        if (isalpha(c)) {\n            char prev = ans[ans.length()\
    \ - 1];\n            if (isupper(c)) {\n                ans[ans.length() - 1]\
    \ = tolower(c);\n            } else if (islower(c)) {\n                ans[ans.length()\
    \ - 1] = toupper(c);\n            } else if (prev == 'A' || prev == 'E' || prev\
    \ == 'I' || prev == 'O' || prev == 'U') {\n                ans[ans.length() -\
    \ 1] = c;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsupqedy.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpwsupqedy.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpwsupqedy.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpwsupqedy.cpp: In function 'int main()':\n\
    /tmp/tmpwsupqedy.cpp:33:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsupqedy.cpp:2:\n/tmp/tmpwsupqedy.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (c >= 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i]\
    \ = 'a';\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] =\
    \ 'e';\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans[i] = 'E';\n        }\n    }\n    for (int i\
    \ = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'i';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'I';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'o';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'O';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'u';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'U';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'A';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxfcrpgv.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpwxfcrpgv.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpwxfcrpgv.cpp:75:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpwxfcrpgv.cpp:82:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n        ans += (toupper(c)\
    \ - 'A');\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        ans[i] = tolower(c);\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n        }\n    }\n  \
    \  for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n       \
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \ ans[i] = 'A';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfscizwr.cpp: In function 'int main()':\n/tmp/tmpjfscizwr.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjfscizwr.cpp:2:\n/tmp/tmpjfscizwr.cpp:40:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (c >= 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i]\
    \ = 'a';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = 'a';\n        }\n        else if (c == 'o') {\n\
    \            ans[i] = 'e';\n        }\n        else if (c == 'i') {\n        \
    \    ans[i] = 'e';\n        }\n        else if (c == 'u') {\n            ans[i]\
    \ = 'e';\n        }\n        else if (c == 'y') {\n            ans[i] = 'a';\n\
    \        }\n        else if (c == 'o') {\n            ans[i] = 'e';\n        }\n\
    \        else if (c == 'i') {\n            ans[i] = 'e';\n        }\n        else\
    \ if (c == 'u') {\n            ans[i] = 'e';\n        }\n        else if (c ==\
    \ 'y') {\n            ans[i] = '\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp14ct8pkg.cpp:108:22: warning: missing terminating ' character [enabled\
    \ by default]\n             ans[i] = '\n                      ^\n/tmp/tmp14ct8pkg.cpp:108:13:\
    \ error: missing terminating ' character\n             ans[i] = '\n          \
    \   ^\n/tmp/tmp14ct8pkg.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp14ct8pkg.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp14ct8pkg.cpp:109:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmp14ct8pkg.cpp:109:1:\
    \ error: expected ';' before '}' token\n/tmp/tmp14ct8pkg.cpp:110:12: error: a\
    \ function-definition is not allowed here before '{' token\n int main() {\n  \
    \          ^\n/tmp/tmp14ct8pkg.cpp:117:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp14ct8pkg.cpp:117:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (int i\
    \ = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (isalpha(c))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqoru5fqq.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpqoru5fqq.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpqoru5fqq.cpp:\
    \ In function 'int main()':\n/tmp/tmpqoru5fqq.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqoru5fqq.cpp:2:\n/tmp/tmpqoru5fqq.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for(char &c: message)\
    \ {\n        c = toupper(c);\n        encodedMessage += c;\n    }\n    for(char\
    \ &c: encodedMessage) {\n        c = tolower(c);\n        for(char &d: c) {\n\
    \            d = toupper(d);\n        }\n    }\n    for(char &c: encodedMessage)\
    \ {\n        c = tolower(c);\n        for(char &d: c) {\n            d = tolower(d);\n\
    \        }\n    }\n    return encodedMessage;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppe0epgel.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmppe0epgel.cpp:15:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(char &c: message) {\n                  ^\n/tmp/tmppe0epgel.cpp:19:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(char\
    \ &c: encodedMessage) {\n                  ^\n/tmp/tmppe0epgel.cpp:21:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for(char &d:\
    \ c) {\n                      ^\n/tmp/tmppe0epgel.cpp:25:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(char &c: encodedMessage)\
    \ {\n                  ^\n/tmp/tmppe0epgel.cpp:27:22: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for(char &d: c) {\n          \
    \            ^\n/tmp/tmppe0epgel.cpp: In function 'int main()':\n/tmp/tmppe0epgel.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppe0epgel.cpp:2:\n/tmp/tmppe0epgel.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     char temp = c;\n        if (temp >= 'a' && temp <= 'z') {\n            ans\
    \ += temp - 'a' + 2;\n        } else if (temp >= 'A' && temp <= 'Z') {\n     \
    \       ans += temp - 'A' + 2;\n        } else {\n            ans += temp;\n \
    \       }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.find(c)] = c + 2;\n        } else if (c >= 'A' && c <=\
    \ 'Z') {\n            ans[ans.find(c)] = c + 2;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdtfouzh.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmprdtfouzh.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmprdtfouzh.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmprdtfouzh.cpp:25:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmprdtfouzh.cpp:25:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmprdtfouzh.cpp: In function 'int main()':\n/tmp/tmprdtfouzh.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprdtfouzh.cpp:2:\n/tmp/tmprdtfouzh.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char a = c;\n        char b =\
    \ c;\n        char d = c;\n        char e = c;\n        char f = c;\n        char\
    \ g = c;\n        char h = c;\n        char j = c;\n        char k = c;\n    \
    \    char l = c;\n        char m = c;\n        char n = c;\n        char o = c;\n\
    \        char p = c;\n        char q = c;\n        char r = c;\n        char s\
    \ = c;\n        char t = c;\n        char u = c;\n        char v = c;\n      \
    \  char w = c;\n        char x = c;\n        char y = c;\n        char z = c;\n\
    \        char A = c;\n        char B = c;\n        char C = c;\n        char D\
    \ = c;\n        char E = c;\n        char F = c;\n        char G = c;\n      \
    \  char H = c;\n        char I = c;\n        char J = c;\n        char K = c;\n\
    \        char L = c;\n        char M = c;\n        char N = c;\n        char O\
    \ = c;\n        char P = c;\n        char Q = c;\n        char R = c;\n      \
    \  char S = c;\n        char T = c;\n        char U = c;\n        char V = c;\n\
    \        char W = c;\n        char X = c;\n        char Y = c;\n        char Z\
    \ = c;\n        char a1 = c;\n        char a2 = c;\n        char a3 = c;\n   \
    \     char a4 = c;\n        char a5 = c;\n        char a6 = c;\n        char a7\
    \ = c;\n        char a8 = c;\n        char a9 = c;\n        char a10 = c;\n  \
    \      char a11 = c;\n        char a12 = c;\n        char a13 = c;\n        char\
    \ a14 = c;\n        char a15 = c;\n        char a16 = c;\n        char a17 = c;\n\
    \        char a18 = c;\n        char a19 = c;\n        char a20 = c;\n       \
    \ char a21 = c;\n        char a22 = c;\n        char a23 = c;\n        char a24\
    \ = c;\n        char a25 = c;\n        char a26 = c;\n        char a27 = c;\n\
    \        char a28 = c;\n        char a29 = c;\n        char a30 = c;\n       \
    \ char a31 = c;\n        char a32 = c;\n        char a33 = c;\n        char a34\
    \ = c;\n        char a35 = c;\n        char \n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ejpwof8.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp0ejpwof8.cpp:103:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp0ejpwof8.cpp:104:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmp0ejpwof8.cpp:111:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans += c;\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   ans += c + 1;\n        } else if (c >= '0' && c <= '9') {\n            ans\
    \ += c + 2;\n        } else {\n            ans += c;\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i] ==\
    \ 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'a' || ans[i]\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs6350so.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmphs6350so.cpp:74:1: error: expected ')' before '}' token\n }\n ^\n/tmp/tmphs6350so.cpp:74:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmphs6350so.cpp:74:1:\
    \ error: expected ';' before '}' token\n/tmp/tmphs6350so.cpp:75:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmphs6350so.cpp:82:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : std::tolower(c);\n   \
    \ }\n    for (auto &c : ans) {\n        std::transform(c.begin(), c.end(), c.begin(),\
    \ ::toupper);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n    }\n    for (auto &c : ans) {\n        std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpls5p6it9.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpls5p6it9.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpls5p6it9.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpls5p6it9.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpls5p6it9.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpls5p6it9.cpp:19:26: error: request for member 'begin'\
    \ in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n                          ^\n/tmp/tmpls5p6it9.cpp:19:37:\
    \ error: request for member 'end' in 'c', which is of non-class type 'int'\n \
    \        std::transform(c.begin(), c.end(), c.begin(), ::toupper);\n         \
    \                            ^\n/tmp/tmpls5p6it9.cpp:19:46: error: request for\
    \ member 'begin' in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n                                          \
    \    ^\n/tmp/tmpls5p6it9.cpp:21:16: error: ISO C++ forbids declaration of 'c'\
    \ with no type [-fpermissive]\n     for (auto &c : ans) {\n                ^\n\
    /tmp/tmpls5p6it9.cpp:21:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpls5p6it9.cpp:22:26:\
    \ error: request for member 'begin' in 'c', which is of non-class type 'int'\n\
    \         std::transform(c.begin(), c.end(), c.begin(), ::tolower);\n        \
    \                  ^\n/tmp/tmpls5p6it9.cpp:22:37: error: request for member 'end'\
    \ in 'c', which is of non-class type 'int'\n         std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n                                     ^\n/tmp/tmpls5p6it9.cpp:22:46:\
    \ error: request for member 'begin' in 'c', which is of non-class type 'in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char currentChar = message[i];\n        char\
    \ nextChar = message[i+1];\n        if (currentChar == 'a' || currentChar == 'e'\
    \ || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n     \
    \       encodedMessage += nextChar;\n        }\n        else if (currentChar ==\
    \ 'A' || currentChar == 'E' || currentChar == 'I' || currentChar == 'O' || currentChar\
    \ == 'U') {\n            encodedMessage += nextChar;\n        }\n        else\
    \ {\n            encodedMessage += currentChar;\n        }\n    }\n    return\
    \ encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8tf84xe.cpp: In function 'int main()':\n/tmp/tmpn8tf84xe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn8tf84xe.cpp:2:\n/tmp/tmpn8tf84xe.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'A':\n            case 'a':\n           \
    \     ans += \"a\";\n                break;\n            case 'B':\n         \
    \   case 'b':\n                ans += \"b\";\n                break;\n       \
    \     case 'C':\n            case 'c':\n                ans += \"c\";\n      \
    \          break;\n            case 'D':\n            case 'd':\n            \
    \    ans += \"d\";\n                break;\n            case 'E':\n          \
    \  case 'e':\n                ans += \"e\";\n                break;\n        \
    \    case 'F':\n            case 'f':\n                ans += \"f\";\n       \
    \         break;\n            case 'G':\n            case 'g':\n             \
    \   ans += \"g\";\n                break;\n            case 'H':\n           \
    \ case 'h':\n                ans += \"h\";\n                break;\n         \
    \   case 'I':\n            case 'i':\n                ans += \"i\";\n        \
    \        break;\n            case 'J':\n            case 'j':\n              \
    \  ans += \"j\";\n                break;\n            case 'K':\n            case\
    \ 'k':\n                ans += \"k\";\n                break;\n            case\
    \ 'L':\n            case 'l':\n                ans += \"l\";\n               \
    \ break;\n            case 'M':\n            case 'm':\n                ans +=\
    \ \"m\";\n                break;\n            case 'N':\n            case 'n':\n\
    \                ans += \"n\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                ans += \"o\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                ans += \"p\";\n\
    \                break;\n            case 'Q':\n            case 'q':\n      \
    \          ans += \"q\";\n                break;\n            case 'R':\n    \
    \        case 'r':\n                ans += \"r\";\n                break;\n  \
    \          case 'S':\n            case 's':\n                ans += \"s\";\n \
    \               break;\n            case 'T':\n            case 't':\n       \
    \         ans += \"t\";\n                break;\n            case 'U':\n     \
    \       case 'u':\n                ans += \"u\";\n                break;\n   \
    \         case 'V':\n            case 'v':\n                ans += \"v\";\n  \
    \              break;\n            case 'W':\n            case 'w':\n        \
    \        ans += \"w\";\n                break;\n            case 'X':\n      \
    \      case 'x':\n                ans += \"x\";\n                break;\n    \
    \        case 'Y':\n            case 'y':\n                ans += \"y\";\n   \
    \             break;\n            case 'Z':\n            case 'z':\n         \
    \       ans += \"z\";\n                break;\n            default:\n        \
    \        ans += c;\n        }\n    }\n    for (auto &c : ans) {\n        switch\
    \ (c) {\n            case 'a':\n            case 'A':\n                ans[ans.size()\
    \ - 2] = 'A';\n                break;\n            case 'b':\n            case\
    \ 'B':\n                an\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqpy6s830.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpqpy6s830.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpqpy6s830.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpqpy6s830.cpp:125:16: error:\
    \ ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto\
    \ &c : ans) {\n                ^\n/tmp/tmpqpy6s830.cpp:125:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpqpy6s830.cpp:133:17: error: 'an' was not declared\
    \ in this scope\n                 an\n                 ^\n/tmp/tmpqpy6s830.cpp:134:1:\
    \ error: expected ';' before '}' token\n }\n ^\n/tmp/tmpqpy6s830.cpp:135:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmpqpy6s830.cpp:142:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpqpy6s830.cpp:142:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char nextC = message[i+1];\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans += nextC;\n        }\n        else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n            ans += nextC;\n        }\n     \
    \   else {\n            ans += c;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz77zm67j.cpp: In function 'int main()':\n/tmp/tmpz77zm67j.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz77zm67j.cpp:2:\n/tmp/tmpz77zm67j.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
