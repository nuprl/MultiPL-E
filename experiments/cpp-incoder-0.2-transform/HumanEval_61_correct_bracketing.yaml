name: HumanEval_61_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  (\" and \")\".\n// return True if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
  ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\"\
  )(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
  ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
  )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
  )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
  ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
  (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
  \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
completions: ["    int opening_brackets = 0;\n    int closing_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n\
    \            opening_brackets++;\n        } else if (brackets[i] == ')') {\n \
    \           closing_brackets++;\n        }\n    }\n    if (opening_brackets ==\
    \ closing_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++opening_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    int len = brackets.size();\n    for (int i = 0;\
    \ i < len; ++i) {\n        if (brackets[i] == '(') {\n            if (brackets[i\
    \ + 1] != '(') {\n                return false;\n            }\n        } else\
    \ if (brackets[i] == ')') {\n            if (brackets[i + 1] != ')') {\n     \
    \           return false;\n            }\n        }\n    }\n    return true;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; i++) {\n     \
    \   if (brackets[i] == '(') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] == ')') {\n            close_brackets++;\n        }\n    }\n  \
    \  if (open_brackets == close_brackets) {\n        return true;\n    } else {\n\
    \        return false;\n    }", "    bool result = true;\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n        \
    \    if (brackets[i + 1] != '(') {\n                result = false;\n        \
    \    }\n        }\n        if (brackets[i] == ')') {\n            if (brackets[i\
    \ + 1] != ')') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool correct = true;\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == ')') {\n            close_brackets++;\n     \
    \   }\n        if (open_brackets != close_brackets) {\n            correct = false;\n\
    \        }\n    }\n    return correct;", "    int open_brackets = 0;\n    int\
    \ close_brackets = 0;\n    for (int i = 0; i < brackets.length(); ++i) {\n   \
    \     if (brackets[i] == '(') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == ')') {\n            ++close_brackets;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c == '(') {\n            result &= (brackets.find('(')\
    \ != brackets.find(')'));\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (auto c : brackets) {\n        if\
    \ (c == '(') {\n            open_brackets++;\n        } else if (c == ')') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    size_t opening_brackets = brackets.size();\n    size_t\
    \ closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n\
    \        if (brackets[i] == '(') {\n            ++opening_brackets;\n        }\
    \ else if (brackets[i] == ')') {\n            ++closing_brackets;\n        }\n\
    \    }\n    return opening_brackets == closing_brackets;", "    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            if (brackets[i + 1] != ')') {\n                result\
    \ = false;\n                break;\n            }\n            i += 2;\n     \
    \   } else if (brackets[i] == ')') {\n            if (brackets[i + 1] != '(')\
    \ {\n                result = false;\n                break;\n            }\n\
    \            i += 2;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '(') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == ')') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;", "   \
    \ size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i\
    \ = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '(') {\n      \
    \      open_brackets++;\n        } else if (brackets[i] == ')') {\n          \
    \  close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == ')') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == ')') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '(') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == ')') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;", "   \
    \ size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i\
    \ = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '(') {\n      \
    \      ++open_brackets;\n        } else if (brackets[i] == ')') {\n          \
    \  ++close_brackets;\n        }\n    }\n    return open_brackets == close_brackets;"]
stop_tokens:
- "\n}"
