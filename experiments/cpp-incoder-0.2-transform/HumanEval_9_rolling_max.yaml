name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2,\
  \ (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    long max_value = numbers[0];\n \
    \   long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n     \
    \   if (numbers[i] > max_value) {\n            max_value = numbers[i];\n     \
    \       max_pos = i;\n        }\n    }\n    result.push_back(max_value);\n   \
    \ result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_value = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long number\
    \ : numbers) {\n        if (number > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = number;\n        } else {\n            current_element\
    \ = number;\n        }\n    }\n    result.push_back(current_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_max = max_element;\n    long current_min = max_element;\n\
    \    for (long i : numbers) {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else if (i < current_min) {\n       \
    \     result.push_back(current_min);\n            current_min = i;\n        }\
    \ else {\n            current_max = i;\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_element_index]);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long current_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > current_element)\
    \ {\n            result.push_back(current_element);\n            current_element\
    \ = i;\n        } else {\n            current_element = i;\n        }\n      \
    \  if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_value =\
    \ numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    result.push_back(max_value);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_element_index]);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long current_element\
    \ = numbers[0];\n    long current_max = numbers[0];\n    long current_min = numbers[0];\n\
    \    long current_sum = 0;\n    long current_count = 0;\n    long current_sum2\
    \ = 0;\n    long current_count2 = 0;\n    long current_sum3 = 0;\n    long current_count3\
    \ = 0;\n    long current_sum4 = 0;\n    long current_count4 = 0;\n    long current_sum5\
    \ = 0;\n    long current_count5 = 0;\n    long current_sum6 = 0;\n    long current_count6\
    \ = 0;\n    long current_sum7 = 0;\n    long current_count7 = 0;\n    long current_sum8\
    \ = 0;\n    long current_count8 = 0;\n    long current_sum9 = 0;\n    long current_count9\
    \ = 0;\n    long current_sum10 = 0;\n    long current_count10 = 0;\n    long current_sum11\
    \ = 0;\n    long current_count11 = 0;\n    long current_sum12 = 0;\n    long current_count12\
    \ = 0;\n    long current_sum13 = 0;\n    long current_count13 = 0;\n    long current_sum14\
    \ = 0;\n    long current_count14 = 0;\n    long current_sum15 = 0;\n    long current_count15\
    \ = 0;\n    long current_sum16 = 0;\n    long current_count16 = 0;\n    long current_sum17\
    \ = 0;\n    long current_count17 = 0;\n    long current_sum18 = 0;\n    long current_count18\
    \ = 0;\n    long current_sum19 = 0;\n    long current_count19 = 0;\n    long current_sum20\
    \ = 0;\n    long current_count20 = 0;\n    long current_sum21 = 0;\n    long current_count21\
    \ = 0;\n    long current_sum22 = 0;\n    long current_count22 = 0;\n    long current_sum23\
    \ = 0;\n    long current_count23 = 0;\n    long current_sum24 = 0;\n    long current_count24\
    \ = 0;\n    long current_sum25 = 0;\n    long current_count25 = 0;\n    long current_sum26\
    \ = 0;\n    long current_count26 = 0;\n    long current_sum27 = 0;\n    long current_count27\
    \ = 0;\n    long current_sum28 = 0;\n    long current_count28 = 0;\n    long current_sum29\
    \ = 0;\n    long current_count29 = 0;\n    long current_sum30 = 0;\n    long current_count30\
    \ = 0;\n    long current_sum31 = 0;\n    long current_count31 = 0;\n    long current_sum32\
    \ = 0;\n    long current_count32 = 0;\n    long current_sum33 = 0;\n    long current_count33\
    \ = 0;\n    long current_sum34 = 0;\n    long current_count34 = 0;\n    long current_sum35\
    \ = 0;\n    long current_count35 = 0;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n      \
    \      max_element = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    result.push_back(max_element);\n    for (size_t i = max_index + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_element = numbers[0];\n    for (long i : numbers) {\n      \
    \  if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_val = numbers[0];\n    long max_pos\
    \ = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_val) {\n            max_val = numbers[i];\n            max_pos = i;\n\
    \        }\n    }\n    result.push_back(max_val);\n    for (long i = max_pos +\
    \ 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n        }\n    }\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n \
    \           result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_value = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_value) {\n            result.push_back(max_value);\n\
    \            max_value = i;\n        } else {\n            max_value = std::max(max_value,\
    \ i);\n        }\n    }\n    result.push_back(max_value);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long current_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > current_element) {\n            current_element = numbers[i];\n        }\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_idx = 1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n  \
    \      if (numbers[i] > max_val) {\n            max_val = numbers[i];\n      \
    \      max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(numbers[max_idx]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = number;\n        } else {\n            max_element\
    \ = std::max(max_element, number);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            max_element = max(max_element, numbers[i]);\n \
    \       }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_element) {\n            max_element\
    \ = number;\n        }\n    }\n    for (long i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_val) {\n  \
    \          result.push_back(max_val);\n            max_val = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    result.push_back(max_val);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); ++i) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    result.push_back(max_value);\n    return result;", "  \
    \  std::vector<long> result;\n    long max_element = numbers[0];\n    long current_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > current_element) {\n            result.push_back(current_element);\n     \
    \       current_element = numbers[i];\n        } else {\n            current_element\
    \ = numbers[i];\n        }\n        if (current_element > max_element) {\n   \
    \         result.push_back(current_element);\n            max_element = current_element;\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_value = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_value) {\n            result.push_back(max_value);\n\
    \            max_value = i;\n        } else {\n            max_value = std::max(max_value,\
    \ i);\n        }\n    }\n    result.push_back(max_value);\n    return result;",
  "    std::vector<long> result;\n    long max_value = numbers[0];\n    long max_pos\
    \ = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_value) {\n            max_value = numbers[i];\n            max_pos = i;\n\
    \        }\n    }\n    result.push_back(max_value);\n    for (long i = max_pos\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            result.push_back(max_element);\n            max_element\
    \ = numbers[i];\n        } else {\n            max_element = max(max_element,\
    \ numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        max_element = number;\n        }\n    }\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = number;\n        } else {\n            max_element\
    \ = max(max_element, number);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_element = numbers[0];\n    long current_max_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        current_element = numbers[i];\n\
    \        if (current_element > max_element) {\n            max_element = current_element;\n\
    \            current_max_element = current_element;\n        } else {\n      \
    \      current_max_element = std::max(current_max_element, current_element);\n\
    \        }\n        result.push_back(current_max_element);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_so_far) {\n     \
    \       result.push_back(max_so_far);\n            max_so_far = number;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, number);\n      \
    \  }\n    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(numbers[max_pos]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > current_element) {\n  \
    \          current_element = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_element) {\n            max_element = numbers[i];\n        }\n    }\n  \
    \  result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > current_element)\
    \ {\n            current_element = numbers[i];\n        }\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    for (long i : numbers) {\n    \
    \    if (i > max_val) {\n            max_val = i;\n        }\n    }\n    for (long\
    \ i = max_val; i > 0; i--) {\n        result.push_back(i);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        max_element = number;\n        }\n    }\n    for (long i = numbers.size();\
    \ i > 0; i--) {\n        if (numbers[i - 1] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i - 1];\n        } else {\n            result.push_back(numbers[i\
    \ - 1]);\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long max_element = numbers[0];\n    long max_index = -1;\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n\
    \            max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    for (size_t i = max_index + 1;\
    \ i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n \
    \   return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_so_far) {\n     \
    \       result.push_back(max_so_far);\n            max_so_far = number;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, number);\n      \
    \  }\n    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    result.push_back(max_value);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        result.push_back(max_element);\n            max_element = number;\n \
    \       } else {\n            max_element = max(max_element, number);\n      \
    \  }\n    }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    for (long\
    \ i = max_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    long max_so_far_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    long current_max = numbers[0];\n    for (long i : numbers) {\n        if\
    \ (i > current_element) {\n            result.push_back(current_max);\n      \
    \      current_element = i;\n            current_max = i;\n        } else {\n\
    \            current_max = std::max(current_max, i);\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_element) {\n            max_element\
    \ = number;\n        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n        \
    \    max_element = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    result.push_back(max_element);\n    for (long i = max_index + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (long i = max_index; i\
    \ < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = 0;\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_element)\
    \ {\n            result.push_back(max_element);\n            max_element = number;\n\
    \        } else {\n            max_element = max(max_element, number);\n     \
    \   }\n    }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_element)\
    \ {\n            result.push_back(max_element);\n            max_element = number;\n\
    \        } else {\n            max_element = std::max(max_element, number);\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_value)\
    \ {\n            max_value = number;\n        }\n    }\n    for (long i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] > max_value) {\n          \
    \  result.push_back(max_value);\n            max_value = numbers[i];\n       \
    \ }\n    }\n    result.push_back(max_value);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        current_element = numbers[i];\n\
    \        if (current_element > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = current_element;\n        } else {\n            max_element\
    \ = max(max_element, current_element);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_value = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_value) {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    result.push_back(max_value);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    for (long\
    \ i = max_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (long i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = max_so_far + number;\n        }\n\
    \    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    long max_index =\
    \ 0;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > current_element) {\n            current_element = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    result.push_back(current_element);\n\
    \    max_element = numbers[max_index];\n    for (size_t i = max_index + 1; i <\
    \ numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n          \
    \  max_element = numbers[i];\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    for (long\
    \ i = max_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    result.push_back(max_element);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element)\
    \ {\n            result.push_back(max_element);\n            max_element = i;\n\
    \        } else {\n            max_element = max(max_element, i);\n        }\n\
    \    }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_value = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_value) {\n            max_value = numbers[i];\n    \
    \        max_pos = i;\n        }\n    }\n    result.push_back(max_value);\n  \
    \  result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_element_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_element = numbers[0];\n    long current_max_element = numbers[0];\n\
    \    long current_max_index = -1;\n    long current_max_value = numbers[0];\n\
    \    long current_max_index2 = 0;\n    long current_max_value2 = 0;\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        current_element = numbers[i];\n \
    \       if (current_element > current_max_value) {\n            current_max_value\
    \ = current_element;\n            current_max_index2 = i;\n        }\n       \
    \ if (current_element > max_element) {\n            max_element = current_element;\n\
    \            current_max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[current_max_index]);\n    result.push_back(numbers[current_max_index2]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] >= current_element)\
    \ {\n            current_element = numbers[i];\n        } else {\n           \
    \ result.push_back(current_element);\n            current_element = numbers[i];\n\
    \        }\n        if (current_element > max_element) {\n            max_element\
    \ = current_element;\n            max_element_index = i;\n        }\n    }\n \
    \   result.push_back(current_element);\n    result.push_back(max_element);\n \
    \   return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = 0;\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    for (size_t i = 0;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] == max_element) {\n     \
    \       result.push_back(numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            max_element = i;\n        }\n    }\n    for (long i = max_element;\
    \ i > 0; i--) {\n        result.push_back(i);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_element) {\n            max_element\
    \ = number;\n        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        result.push_back(max_element);\n        max_element = std::max(max_element,\
    \ numbers[i]);\n    }\n    return result;", "    std::vector<long> result;\n \
    \   long max_element = numbers[0];\n    long max_index = -1;\n    for (long i\
    \ = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n \
    \           max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    for (long i = max_index + 1; i\
    \ < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    long current_max_element = max_element;\n    long current_max_element_index\
    \ = max_element_index;\n    long current_max_element_index2 = -1;\n    for (long\
    \ i = numbers.size(); i > 0; i--) {\n        if (numbers[i - 1] > current_max_element)\
    \ {\n            current_max_element = numbers[i - 1];\n            current_max_element_index\
    \ = i - 1;\n            current_max_element_index2 = i;\n        }\n    }\n  \
    \  result.push_back(current_max_element);\n    long current_max_element_index3\
    \ = current_max_element_index;\n    long current_max_element_index4 = current_max_element_index2;\n\
    \    for (long i = numbers.size(); i > 0; i--) {\n        if (numbers[i - 1] >\
    \ current_max_element) {\n            current_max_element = numbers[i - 1];\n\
    \            current_max_element_index = i - 1;\n            current_max_element_index2\
    \ = i;\n            current_max_element_index3 = current_max_element_index;\n\
    \            current_max_element_index4 = current_max_element_index2;\n      \
    \  }\n    }\n    result.push_back(current_max_element);\n    long current_max_element_index5\
    \ = current_max_element_index3;\n    long current_max_element_index6 = current_max_element_index4;\n\
    \    for (long i = numbers.size(); i > 0; i--) {\n        if (numbers[i - 1] >\
    \ current_max_element) {\n            current_max_element = numbers[i - 1];\n\
    \            current_max_element_index = i - 1;\n            current_max_element_index2\
    \ = i;\n            current_max_element_index3 = current_max_element_index;\n\
    \            current_max_element_index4 = current_max_element_index2;\n      \
    \      current_max_element_index5 = current_max_element_index3;\n            current_max_element_index6\
    \ = current_max_element_index4;\n        }\n    }\n    result.push_back(current_max_element);\n\
    \    long current_max_element_index7 = current_max_element_index5;\n    long current_max_element_index8\
    \ = current_max_element_index6;\n    for (long i = numbers.size(); i > 0; i--)\
    \ {\n        if (numbers[i - 1] > current_max_element) {\n            current_max_element\
    \ = numbers[i - 1];\n            current_max_element_index = i - 1;\n        \
    \    current_max_element_index2 = i;\n            current_max_element_index3 =\
    \ current_max_element_index;\n            current_max_element_index4 = current_max_element_index2;\n\
    \            current_max_element_index5 = current_max_element_index3;\n      \
    \      current_max_element_index6 = current_max_element_index4;\n            current_max_element_index7\
    \ = current_max_element_index5;\n            current_max_element_index8 = current_max_element_index6;\n\
    \        }\n    }\n    result.push_back(current_max_element);\n    long current_max_element_index9\
    \ = current_max_element_", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_element_index\
    \ = 0;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_element_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_element_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_element = numbers[0];\n    for (long i : numbers) {\n      \
    \  if (current_element > i) {\n            current_element = i;\n        }\n \
    \       if (current_element > max_element) {\n            max_element = current_element;\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_element)\
    \ {\n            max_element = number;\n        }\n    }\n    for (long i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n      \
    \      result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            result.push_back(numbers[i]);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        result.push_back(max_element);\n            max_element = number;\n \
    \       } else {\n            max_element = max(max_element, number);\n      \
    \  }\n    }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < current_element)\
    \ {\n            result.push_back(current_element);\n            current_element\
    \ = numbers[i];\n        } else {\n            result.push_back(current_element);\n\
    \            current_element = numbers[i];\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = 0;\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    long current_element = numbers[max_element_index];\n    for (long i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(current_element);\n\
    \        current_element = numbers[i];\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    for (long number : numbers) {\n        if (number\
    \ > max_element) {\n            result.push_back(max_element);\n            max_element\
    \ = number;\n        } else {\n            max_element = max(max_element, number);\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_val = numbers[0];\n    long max_pos\
    \ = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_val) {\n            max_val = numbers[i];\n            max_pos = i;\n\
    \        }\n    }\n    result.push_back(max_val);\n    for (long i = max_pos +\
    \ 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_element)\
    \ {\n            max_element = number;\n        }\n    }\n    for (long i = numbers.size();\
    \ i > 0; i--) {\n        result.push_back(max_element);\n        max_element =\
    \ std::max(max_element, numbers[i - 1]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    long current_element = 0;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        current_element = numbers[i];\n        if (current_element > max_element)\
    \ {\n            max_element = current_element;\n            max_element_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_element_index + 1; i < numbers.size(); i++) {\n        current_element\
    \ = numbers[i];\n        result.push_back(current_element);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_index = i;\n\
    \        }\n    }\n    result.push_back(max_so_far);\n    result.push_back(numbers[max_so_far_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        max_element = number;\n        }\n    }\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    long max_index = -1;\n    for (long i = 0; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n        \
    \    max_element = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    result.push_back(max_element);\n    for (long i = max_index + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long current_value = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_value) {\n            result.push_back(current_value);\n\
    \            current_value = i;\n        } else {\n            current_value =\
    \ i;\n        }\n        if (current_value > max_value) {\n            result.push_back(current_value);\n\
    \            max_value = current_value;\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = 0;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            result.push_back(numbers[max_index]);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_value = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_value) {\n            result.push_back(max_value);\n\
    \            max_value = i;\n        } else {\n            max_value = std::max(max_value,\
    \ i);\n        }\n    }\n    result.push_back(max_value);\n    return result;",
  "    std::vector<long> result;\n    long max_value = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_value) {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    result.push_back(max_value);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = -1;\n    for (size_t i = 1; i <\
    \ numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n          \
    \  max_element = numbers[i];\n            max_element_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_element_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    long current_element = numbers[0];\n  \
    \  long current_element_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < current_element) {\n            current_element\
    \ = numbers[i];\n            current_element_index = i;\n        }\n        if\
    \ (numbers[i] > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = numbers[i];\n            current_element_index\
    \ = i;\n        }\n    }\n    if (current_element > max_element) {\n        result.push_back(current_element);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_element) {\n            max_element = number;\n\
    \        }\n    }\n    for (long i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] > max_element) {\n            result.push_back(max_element);\n \
    \           max_element = numbers[i];\n        } else {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    long current_element = numbers[0];\n    long\
    \ current_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n     \
    \   if (numbers[i] > current_element) {\n            current_element = numbers[i];\n\
    \            current_index = i;\n        }\n    }\n    result.push_back(current_element);\n\
    \    while (current_index > 0) {\n        result.push_back(numbers[current_index]);\n\
    \        current_index--;\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    long index = max_index;\n\
    \    while (max_index > 0) {\n        result.push_back(numbers[index]);\n    \
    \    max_index--;\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long max_element = numbers[0];\n    long max_index = -1;\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element) {\n\
    \            max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    for (size_t i = max_index + 1;\
    \ i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n    }\n \
    \   return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = -1;\n    for (size_t i = 1; i <\
    \ numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n          \
    \  max_element = numbers[i];\n            max_element_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_idx = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n \
    \       if (numbers[i] > max_val) {\n            max_val = numbers[i];\n     \
    \       max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n    for\
    \ (size_t i = max_idx; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        max_so_far = std::max(max_so_far,\
    \ number);\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            max_element = i;\n        }\n    }\n    for (long i = max_element;\
    \ i > 0; i--) {\n        result.push_back(i);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 0; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
