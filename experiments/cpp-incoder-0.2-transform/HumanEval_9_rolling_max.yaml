name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2,\
  \ (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    long max_value = numbers[0];\n \
    \   long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n     \
    \   if (numbers[i] > max_value) {\n            max_value = numbers[i];\n     \
    \       max_pos = i;\n        }\n    }\n    result.push_back(max_value);\n   \
    \ result.push_back(numbers[max_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_value = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long number\
    \ : numbers) {\n        if (number > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = number;\n        } else {\n            current_element\
    \ = number;\n        }\n    }\n    result.push_back(current_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    for (long i = max_pos + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_max = max_element;\n    long current_min = max_element;\n\
    \    for (long i : numbers) {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else if (i < current_min) {\n       \
    \     result.push_back(current_min);\n            current_min = i;\n        }\
    \ else {\n            current_max = i;\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_element_index]);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long current_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > current_element)\
    \ {\n            result.push_back(current_element);\n            current_element\
    \ = i;\n        } else {\n            current_element = i;\n        }\n      \
    \  if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;"]
stop_tokens:
- "\n}"
