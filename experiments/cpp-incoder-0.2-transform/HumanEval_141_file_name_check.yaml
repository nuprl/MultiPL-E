name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"\
  1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1); \n    std::string file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n\
    \    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of",
  "    // Your code here\n    \n    // Write your code here\n    \n    return file_name;",
  "    // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n", "    // Your code goes here\n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of('.') + 1);\n    std::string\
    \ file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of('.'));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of", "    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n", "    std::string file_extension;\n    std::string file_content;\n\
    \    std::string file_content2;\n    std::string file_content3;\n    std::string\
    \ file_content4;\n    std::string file_content5;\n    std::string file_content6;\n\
    \    std::string file_content7;\n    std::string file_content8;\n    std::string\
    \ file_content9;\n    std::string file_content10;\n    std::string file_content11;\n\
    \    std::string file_content12;\n    std::string file_content13;\n    std::string\
    \ file_content14;\n    std::string file_content15;\n    std::string file_content16;\n\
    \    std::string file_content17;\n    std::string file_content18;\n    std::string\
    \ file_content19;\n    std::string file_content20;\n    std::string file_content21;\n\
    \    std::string file_content22;\n    std::string file_content23;\n    std::string\
    \ file_content24;\n    std::string file_content25;\n    std::string file_content26;\n\
    \    std::string file_content27;\n    std::string file_content28;\n    std::string\
    \ file_content29;\n    std::string file_content30;\n    std::string file_content31;\n\
    \    std::string file_content32;\n    std::string file_content33;\n    std::string\
    \ file_content34;\n    std::string file_content35;\n    std::string file_content36;\n\
    \    std::string file_content37;\n    std::string file_content38;\n    std::string\
    \ file_content39;\n    std::string file_content40;\n    std::string file_content41;\n\
    \    std::string file_content42;\n    std::string file_content43;\n    std::string\
    \ file_content44;\n    std::string file_content45;\n    std::string file_content46;\n\
    \    std::string file_content47;\n    std::string file_content48;\n    std::string\
    \ file_content49;\n    std::string file_content50;\n    std::string file_content51;\n\
    \    std::string file_content52;\n    std::string file_content53;\n    std::string\
    \ file_content54;\n    std::string file_content55;\n    std::string file_content56;\n\
    \    std::string file_content57;\n    std::string file_content58;\n    std::string\
    \ file_content59;\n    std::string file_content60;\n    std::string file_content61;\n\
    \    std::string file_content62;\n    std::string file_content63;\n    std::string\
    \ file_content64;\n    std::string file_content65;\n    std::string file_content66;\n\
    \    std::string file_content67;\n    std::string file_content68;\n    std::string\
    \ file_content69;\n    std::string file_content70;\n    std::string file_content71;\n\
    \    std::string file_content72;\n    std::string file_content73;\n    std::string\
    \ file_content74;\n    std::string file_content75;\n    ", "    // Your code goes\
    \ here\n    std::string file_name_check;\n    if (file_name.size() > 3 || file_name.find(\"\
    .\") == std::string::npos) {\n        file_name_check = \"No\";\n    }\n    else\
    \ if (file_name.find(\".\") == std::string::npos) {\n        file_name_check =\
    \ \"No\";\n    }\n    else if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        file_name_check = \"No\";\n    }\n    else if (file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"txt\" &&\n             file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"exe\" &&\n             file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"dll\") {\n        file_name_check = \"No\";\n    }\n    else {\n\
    \        file_name_check = \"Yes\";\n    }\n    return file_name_check;", "  \
    \  // Your code here\n    std::string file_extension;\n    std::string file_extension_check;\n\
    \    file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n \
    \   file_extension_check = file_extension;\n    if (file_extension_check == \"\
    txt\" || file_extension_check == \"exe\" || file_extension_check == \"dll\") {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "    //\
    \ Your code here\n    std::string file_name_check;\n    if (file_name.size() >\
    \ 3 || file_name.find(\".\") != 0 || file_name[0] != 'a' || file_name[0] != 'z'\
    \ || file_name[0] != 'A' || file_name[0] != 'Z') {\n        file_name_check =\
    \ \"No\";\n    } else {\n        file_name_check = \"Yes\";\n    }\n    return\
    \ file_name_check;", "    // Your code here\n    \n    // Your code here\n   \
    \ \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // ", "    // Your code\
    \ goes here\n    std::string file_name = file_name;\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_of(\".\"));\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_not_of(\"0123456789\"));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_of(\"aA\"));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_of(\"aZ\"));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_of(\"zA\"));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_of(\"zZ\"));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of(\"0123456789\"));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_of(\".txt\"\
    ));\n    std::string file_name = file_name.substr(0, file_name.find_first_of(\"\
    .exe\"));\n    std::string file_name = file_name.substr(0, file_name.find_first_of(\"\
    .dll\"));\n    return file_name;", "    // Your code goes here\n    std::string\
    \ file_extension;\n    int counter = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            counter++;\n       \
    \ }\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n    if (counter\
    \ == 1) {\n        if (file_name[0] == 'a' || file_name[0] == 'A') {\n       \
    \     return \"No\";\n        }\n    }\n    if (counter == 2) {\n        if (file_name[0]\
    \ == 'a' || file_name[0] == 'A') {\n            return \"No\";\n        }\n  \
    \  }\n    if (counter == 3) {\n        if (file_name[0] == 'a' || file_name[0]\
    \ == 'A') {\n            return \"No\";\n        }\n    }\n    if (file_name[0]\
    \ == 'a' || file_name[0] == 'A') {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ == '0' || file_name[0] == '1' || file_name[0] == '2' || file_name[0] == '3'\
    \ || file_name[0] == '4' || file_name[0] == '5' || file_name[0] == '6' || file_name[0]\
    \ == '7' || file_name[0] == '8' || file_name[0] == '9') {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";", "    // Your code goes here\n    std::string file_extension;\n\
    \    int counter = 0;\n    std::string file_extension_check;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        counter++;\n        }\n    }\n    if (counter == 1) {\n        file_extension\
    \ = file_name.substr(0, file_name.length() - 1);\n        if (file_extension ==\
    \ \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n     \
    \       file_extension_check = file_extension;\n        } else {\n           \
    \ file_extension_check = \"No\";\n        }\n    } else {\n        file_extension_check\
    \ = \"No\";\n    }\n    return file_extension_check;", "    // Your code here\n\
    \    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.size() > 3 && file_name.find_last_of(\".\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z' || file_name.substr(0, 1) < 'A' || file_name.substr(0, 1) > 'Z') {\n\
    \        return \"No\";\n    }\n    \n    if (file_name.find_last_of(\".\") >\
    \ 0) {\n        return \"No\";\n    }\n    \n    return \"Yes\";", "    // Your\
    \ code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    0123456789\"));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    aA\"));\n    if (file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n        if (file_prefix == \"0\" || file_prefix == \"1\" || file_prefix\
    \ == \"2\" || file_prefix == \"3\" || file_prefix == \"4\" || file_prefix == \"\
    5\" || file_prefix == \"6\" || file_prefix == \"7\" || file_prefix == \"8\" ||\
    \ file_prefix == \"9\" || file_prefix == \"A\" || file_prefix == \"B\" || file_prefix\
    \ == \"C\" || file_prefix == \"D\" || file_prefix == \"E\" || file_prefix == \"\
    F\" || file_prefix == \"G\" || file_prefix == \"H\" || file_prefix == \"I\" ||\
    \ file_prefix == \"J\" || file_prefix == \"K\" || file_prefix == \"L\" || file_prefix\
    \ == \"M\" || file_prefix == \"N\" || file_prefix == \"O\" || file_prefix == \"\
    P\" || file_prefix == \"Q\" || file_prefix == \"R\" || file_prefix == \"S\" ||\
    \ file_prefix == \"T\" || file_prefix == \"U\" || file_prefix == \"V\" || file_prefix\
    \ == \"W\" || file_prefix == \"X\" || file_prefix == \"Y\" || file_prefix == \"\
    Z\") {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        return \"No\";\n    }", "    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n", "    // Your code goes here\n    std::string file_name = file_name;\n\
    \    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] == '.') {\n            count++;\n        }\n    }\n    if\
    \ (count > 3) {\n        return \"No\";\n    }\n    if (file_name[0] == 'a' ||\
    \ file_name[0] == 'A') {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ == '0' || file_name[0] == '9') {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ == '.') {\n        std::string file_name = file_name.substr(1);\n        for\
    \ (int i = 0; i < file_name.length(); i++) {\n            if (file_name[i] ==\
    \ '.') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name[0] == 'a'\
    \ || file_name[0] == 'A') {\n            return \"No\";\n        }\n        if\
    \ (file_name[0] == '0' || file_name[0] == '9') {\n            return \"No\";\n\
    \        }\n    }\n    return \"Yes\";", "    // Your code goes here\n    \n \
    \   // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n", " \
    \   // Your code goes here\n    \n    std::string file_name_copy = file_name;\n\
    \    \n    std::string file_name_before_dot = file_name_copy.substr(0, file_name_copy.find_first_of(\"\
    .\"));\n    \n    std::string file_name_after_dot = file_name_copy.substr(file_name_copy.find_last_of(\"\
    .\") + 1);\n    \n    std::string file_name_extension = file_name_after_dot.substr(0,\
    \ file_name_after_dot.find_first_of(\".\"));\n    \n    std::string file_name_extension_lowercase\
    \ = file_name_extension.substr(0, 1);\n    \n    std::string file_name_extension_lowercase2\
    \ = file_name_extension.substr(0, 2);\n    \n    std::string file_name_extension_lowercase3\
    \ = file_name_extension.substr(0, 3);\n    \n    std::string file_name_extension_lowercase4\
    \ = file_name_extension.substr(0, 4);\n    \n    std::string file_name_extension_lowercase5\
    \ = file_name_extension.substr(0, 5);\n    \n    std::string file_name_extension_lowercase6\
    \ = file_name_extension.substr(0, 6);\n    \n    std::string file_name_extension_lowercase7\
    \ = file_name_extension.substr(0, 7);\n    \n    std::string file_name_extension_lowercase8\
    \ = file_name_extension.substr(0, 8);\n    \n    std::string file_name_extension_lowercase9\
    \ = file_name_extension.substr(0, 9);\n    \n    std::string file_name_extension_lowercase10\
    \ = file_name_extension.substr(0, 10);\n    \n    std::string file_name_extension_lowercase11\
    \ = file_name_extension.substr(0, 11);\n    \n    std::string file_name_extension_lowercase12\
    \ = file_name_extension.substr(0, 12);\n    \n    std::string file_name_extension_lowercase13\
    \ = file_name_extension.substr(0, 13);\n    \n    std::string file_name_extension_lowercase14\
    \ = file_name_extension.substr(0, 14);\n    \n    std::string file_name_extension_lowercase15\
    \ = file_name_extension.substr(0, 15);\n    \n    std::string file_name_extension_lowercase16\
    \ = file_name_extension.substr(0, 16);\n    \n    std::string file_name_extension_lowercase17\
    \ = file_name_extension.substr(0, 17);\n    \n    std::string file_name_extension_lowercase18\
    \ = file_name_extension.substr(0, 18);\n    \n    std::string file_name_extension_lowercase19\
    \ = file_name_extension.substr(0, 19);\n    \n    std::string file_name_extension_lowercase20\
    \ = file_name_extension.substr(0, 20);\n    \n    std::string file_name_extension_lowercase21\
    \ = file_name_extension.substr(0, 21);\n    \n    std::string file_name_extension_lowercase22\
    \ = file_name_extension.substr(0, 22);\n    \n    std::string file_name_extension_lowercase23\
    \ = ", "    // Your code here\n    \n    return file_name;"]
stop_tokens:
- "\n}"
