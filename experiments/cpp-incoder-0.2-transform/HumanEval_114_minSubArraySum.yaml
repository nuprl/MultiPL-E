name: HumanEval_114_minSubArraySum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
  // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
  \ (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2,\
  \ (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
  \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10,\
  \ (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
  \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
  \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n  \
  \  assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
completions: ["    long ans = nums[0];\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(i + 1, nums.size()\
    \ - i)));\n    }\n    return ans;", "    long ans = nums[0];\n    for (long i\
    \ = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i] + nums[i - 1]);\n\
    \    }\n    return ans;", "    long ans = nums[0];\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans)\n            ans = sum;\n    }\n    return ans;", "    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;", "    // Your code here\n    long sum = 0;\n    long min\
    \ = INT_MAX;\n    long max = INT_MIN;\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n\
    \        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n\
    \    return max;", "    long ans = INT_MAX;\n    long sum = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;", "    // Write\
    \ your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min)\n            min = sum;\n        if (sum > max)\n         \
    \   max = sum;\n    }\n    return max;", "    long ans = nums[0];\n    for (long\
    \ i = 1; i < nums.size(); i++) {\n        long curr = nums[i];\n        ans =\
    \ std::min(ans, curr + nums[i - 1]);\n    }\n    return ans;", "    long ans =\
    \ INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n \
    \       }\n    }\n    return ans;", "    long ans = INT_MAX;\n    long sum = 0;\n\
    \    long cur = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \       if (sum > 0) {\n            cur += nums[i];\n        }\n    }\n    return\
    \ ans;", "    long ans = nums[0];\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(i + 1)));\n\
    \    }\n    return ans;", "    // Your code here\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    long minSumIndex = 0;\n    for\
    \ (size_t i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < minSum) {\n            minSum = sum;\n            minSumIndex = i;\n\
    \        }\n    }\n    return minSum;", "    long ans = INT_MAX;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long j =\
    \ 0; j < nums.size(); j++) {\n            if (i != j && nums[j] >= nums[i]) {\n\
    \                sum += nums[j];\n            }\n        }\n        if (sum <\
    \ ans) {\n            ans = sum;\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i\
    \ = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;", "    long ans\
    \ = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n \
    \       }\n    }\n    return ans;", "    // Write your code here\n    long sum\
    \ = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min) {\n\
    \            min = sum;\n        }\n    }\n    return min;", "    // Your code\
    \ here\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i : nums) {\n\
    \        sum += i;\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;", "    // Write your code here\n    long sum = 0;\n\
    \    long min = INT_MAX;\n    for(long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if(sum < min) {\n            min = sum;\n        }\n\
    \    }\n    return min;", "    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;", "    long\
    \ ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n\
    \        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
