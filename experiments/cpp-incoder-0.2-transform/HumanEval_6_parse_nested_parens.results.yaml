language: cpp
name: HumanEval_6_parse_nested_parens
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string curr_level;\n\
    \    long curr_depth = 0;\n    for (size_t i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            curr_depth++;\n        } else if (paren_string[i] == ')') {\n\
    \            curr_depth--;\n            if (curr_depth == 0) {\n             \
    \   levels.push_back(curr_level.length());\n            }\n        }\n    }\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzbgg8s47: /tmp/tmpzbgg8s47.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            assert(paren_level\
    \ >= 0);\n            paren_levels.push_back(paren_level);\n        } else {\n\
    \            assert(paren_level == 0);\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6jr8tz95: /tmp/tmp6jr8tz95.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp16ik0pwk: /tmp/tmp16ik0pwk.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n            assert(level >= 0);\n\
    \            paren_levels.push_back(level);\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzknpb_nl: /tmp/tmpzknpb_nl.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpz3qg5nq6: /tmp/tmpz3qg5nq6.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n        } else if (c == ')') {\n            is_open = false;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(level);\n \
    \           level++;\n        }\n    }\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpr7f0m8bm: /tmp/tmpr7f0m8bm.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.push_back(0);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg20f4377: /tmp/tmpg20f4377.cpp:86: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of('(')).split(' ');\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    long paren_levels_size\
    \ = paren_levels_temp.size();\n    long paren_levels_index = 0;\n    long paren_levels_index_temp\
    \ = 0;\n    long paren_levels_index_temp2 = 0;\n    long paren_levels_index_temp3\
    \ = 0;\n    long paren_levels_index_temp4 = 0;\n    long paren_levels_index_temp5\
    \ = 0;\n    long paren_levels_index_temp6 = 0;\n    long paren_levels_index_temp7\
    \ = 0;\n    long paren_levels_index_temp8 = 0;\n    long paren_levels_index_temp9\
    \ = 0;\n    long paren_levels_index_temp10 = 0;\n    long paren_levels_index_temp11\
    \ = 0;\n    long paren_levels_index_temp12 = 0;\n    long paren_levels_index_temp13\
    \ = 0;\n    long paren_levels_index_temp14 = 0;\n    long paren_levels_index_temp15\
    \ = 0;\n    long paren_levels_index_temp16 = 0;\n    long paren_levels_index_temp17\
    \ = 0;\n    long paren_levels_index_temp18 = 0;\n    long paren_levels_index_temp19\
    \ = 0;\n    long paren_levels_index_temp20 = 0;\n    long paren_levels_index_temp21\
    \ = 0;\n    long paren_levels_index_temp22 = 0;\n    long paren_levels_index_temp23\
    \ = 0;\n    long paren_levels_index_temp24 = 0;\n    long paren_levels_index_temp25\
    \ = 0;\n    long paren_levels_index_temp26 = 0;\n    long paren_levels_index_temp27\
    \ = 0;\n    long paren_levels_index_temp28 = 0;\n    long paren_levels_index_temp29\
    \ = 0;\n    long paren_levels_index_temp30 = 0;\n    long paren_levels_index_temp31\
    \ = 0;\n    long paren_levels_index_temp32 = 0;\n    long paren_levels_index_temp33\
    \ = 0;\n    long paren_levels_index_temp34 = 0;\n    long paren_levels_index_temp35\
    \ = 0;\n    long paren_levels_index_temp36 = 0;\n    long paren_levels_index_temp37\
    \ = 0;\n    long paren_levels_index_temp38 = 0;\n    long paren_levels_index_temp39\
    \ = 0;\n    long paren_levels_index_temp\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvulnim3v.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpvulnim3v.cpp:10:76: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of('(')).split(' ');\n      |                      \
    \                                                      ^~~~~\n/tmp/tmpvulnim3v.cpp:55:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   55 | }\n      | ^\n\
    /tmp/tmpvulnim3v.cpp:55:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long paren_level =\
    \ 0;\n    bool is_open = false;\n    std::string current_paren_string = \"\";\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            current_paren_string = c;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            current_paren_string\
    \ = \"\";\n            paren_level--;\n        } else if (is_open) {\n       \
    \     current_paren_string = current_paren_string + c;\n        }\n    }\n   \
    \ paren_levels[paren_level - 1]++;\n    return paren_levels;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(0,\
    \ i);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsey5_l1s: /tmp/tmpsey5_l1s.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        char c = paren_string[i];\n\
    \        if (c == '(') {\n            is_open = true;\n        } else if (c ==\
    \ ')') {\n            is_closed = true;\n        } else if (c == ' ') {\n    \
    \        if (is_open && !is_closed) {\n                paren_levels.push_back(level);\n\
    \                is_open = false;\n                is_closed = false;\n      \
    \          level++;\n            }\n        } else {\n            is_open = false;\n\
    \            is_closed = false;\n        }\n    }\n    if (is_open && !is_closed)\
    \ {\n        paren_levels.push_back(level);\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp_kmi6r48: /tmp/tmp_kmi6r48.cpp:39: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  long level = 0;\n  std::string\
    \ current_paren = \"\";\n  for (size_t i = 0; i < paren_string.size(); ++i) {\n\
    \    if (paren_string[i] == '(') {\n      current_paren = paren_string[i];\n \
    \     ++level;\n    } else if (paren_string[i] == ')') {\n      --level;\n   \
    \   if (level == 0) {\n        result.push_back(std::stoll(current_paren));\n\
    \      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoll\n"
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpk284u08m: /tmp/tmpk284u08m.cpp:85: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n        char c = paren_string[i];\n       \
    \ if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp25jel6yr: /tmp/tmp25jel6yr.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    long current_level_size = 0;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            current_level = current_level + c;\n          \
    \  current_level_size++;\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1);\n            current_level_size--;\n\
    \        } else {\n            current_level = current_level + c;\n        }\n\
    \        if (current_level_size > 0) {\n            levels.push_back(current_level_size);\n\
    \        }\n    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp8ucovne7: /tmp/tmp8ucovne7.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_t;\n\
    \    paren_levels_t.clear();\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr48tcwuf.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpr48tcwuf.cpp:10:5: error: \u2018paren_levels_t\u2019 was not declared\
    \ in this scope; did you mean \u2018paren_levels\u2019?\n   10 |     paren_levels_t\
    \ paren_levels_t;\n      |     ^~~~~~~~~~~~~~\n      |     paren_levels\n/tmp/tmpr48tcwuf.cpp:12:30:\
    \ error: \u2018paren_levels_t\u2019 is not a class, namespace, or enumeration\n\
    \   12 |     paren_levels_t.push_back(paren_levels_t::level0);\n      |      \
    \                        ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:13:30: error: \u2018\
    paren_levels_t\u2019 is not a class, namespace, or enumeration\n   13 |     paren_levels_t.push_back(paren_levels_t::level0);\n\
    \      |                              ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:14:30:\
    \ error: \u2018paren_levels_t\u2019 is not a class, namespace, or enumeration\n\
    \   14 |     paren_levels_t.push_back(paren_levels_t::level0);\n      |      \
    \                        ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:15:30: error: \u2018\
    paren_levels_t\u2019 is not a class, namespace, or enumeration\n   15 |     paren_levels_t.push_back(paren_levels_t::level0);\n\
    \      |                              ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:16:30:\
    \ error: \u2018paren_levels_t\u2019 is not a class, namespace, or enumeration\n\
    \   16 |     paren_levels_t.push_back(paren_levels_t::level0);\n      |      \
    \                        ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:17:30: error: \u2018\
    paren_levels_t\u2019 is not a class, namespace, or enumeration\n   17 |     paren_levels_t.push_back(paren_levels_t::level0);\n\
    \      |                              ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:18:30:\
    \ error: \u2018paren_levels_t\u2019 is not a class, namespace, or enumeration\n\
    \   18 |     paren_levels_t.push_back(paren_levels_t::level0);\n      |      \
    \                        ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:19:30: error: \u2018\
    paren_levels_t\u2019 is not a class, namespace, or enumeration\n   19 |     paren_levels_t.push_back(paren_levels_t::level0);\n\
    \      |                              ^~~~~~~~~~~~~~\n/tmp/tmpr48tcwuf.cpp:20:30:\
    \ error: \u2018par"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpyfnvbax5: /tmp/tmpyfnvbax5.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    std::string current_paren;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n            current_paren = \"\";\n        } else if (c\
    \ == ')') {\n            is_closed = true;\n            current_paren = \"\";\n\
    \        } else if (c == ' ') {\n            if (is_open && !is_closed) {\n  \
    \              paren_levels.push_back(level);\n            }\n            current_paren\
    \ = \"\";\n        } else {\n            current_paren += c;\n        }\n    }\n\
    \    if (is_open && !is_closed) {\n        paren_levels.push_back(level);\n  \
    \  }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpdbrxw50l: /tmp/tmpdbrxw50l.cpp:39: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string current_paren_level;\n    for (auto &c : paren_string) {\n  \
    \      if (c == '(') {\n            current_paren_level = c;\n        } else if\
    \ (c == ')') {\n            paren_levels.push_back(std::stoll(current_paren_level));\n\
    \            current_paren_level.clear();\n        } else {\n            current_paren_level\
    \ += c;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoll\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    std::vector<long> paren_levels_temp2;\n    std::vector<long>\
    \ paren_levels_temp3;\n    std::vector<long> paren_levels_temp4;\n    std::vector<long>\
    \ paren_levels_temp5;\n    std::vector<long> paren_levels_temp6;\n    std::vector<long>\
    \ paren_levels_temp7;\n    std::vector<long> paren_levels_temp8;\n    std::vector<long>\
    \ paren_levels_temp9;\n    std::vector<long> paren_levels_temp10;\n    std::vector<long>\
    \ paren_levels_temp11;\n    std::vector<long> paren_levels_temp12;\n    std::vector<long>\
    \ paren_levels_temp13;\n    std::vector<long> paren_levels_temp14;\n    std::vector<long>\
    \ paren_levels_temp15;\n    std::vector<long> paren_levels_temp16;\n    std::vector<long>\
    \ paren_levels_temp17;\n    std::vector<long> paren_levels_temp18;\n    std::vector<long>\
    \ paren_levels_temp19;\n    std::vector<long> paren_levels_temp20;\n    std::vector<long>\
    \ paren_levels_temp21;\n    std::vector<long> paren_levels_temp22;\n    std::vector<long>\
    \ paren_levels_temp23;\n    std::vector<long> paren_levels_temp24;\n    std::vector<long>\
    \ paren_levels_temp25;\n    std::vector<long> paren_levels_temp26;\n    std::vector<long>\
    \ paren_levels_temp27;\n    std::vector<long> paren_levels_temp28;\n    std::vector<long>\
    \ paren_levels_temp29;\n    std::vector<long> paren_levels_temp30;\n    std::vector<long>\
    \ paren_levels_temp31;\n    std::vector<long> paren_levels_temp32;\n    std::vector<long>\
    \ paren_levels_temp33;\n    std::vector<long> paren_levels_temp34;\n    std::vector<long>\
    \ paren_levels_temp35;\n    std::vector<long> paren_levels_temp36;\n    std::vector<long>\
    \ paren_levels_temp37;\n    std::vector<long> paren_levels_temp38;\n    std::vector<long>\
    \ paren_levels_temp39;\n    std::vector<long> paren_levels_temp40;\n    std::vector<long>\
    \ paren_levels_temp41;\n    std::vector<long> paren_levels_temp42;\n    std::vector<long>\
    \ paren_levels_temp43;\n    std::vector<long> paren_\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpko045wv4.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpko045wv4.cpp:54:1: error: expected initializer before \u2018}\u2019\
    \ token\n   54 | }\n      | ^\n/tmp/tmpko045wv4.cpp:54:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool paren_found = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_found = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_found = false;\n          \
    \  paren_level--;\n        }\n        if (paren_found) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpib_kwwk6: /tmp/tmpib_kwwk6.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(level);\n            level++;\n        }\n  \
    \  }\n    paren_levels.push_back(level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzpwzc7qx: /tmp/tmpzpwzc7qx.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(level);\n            level++;\n        }\n  \
    \  }\n    paren_levels.push_back(level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzpwzc7qx: /tmp/tmpzpwzc7qx.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level;\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n          \
    \  paren_level = std::to_string(paren_level_count);\n        } else {\n      \
    \      paren_level += c;\n        }\n    }\n    paren_level_count = 0;\n    for\
    \ (auto c : paren_level) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n        }\n\
    \    }\n    paren_level_count = 0;\n    for (auto c : paren_level) {\n       \
    \ if (c == '(') {\n            paren_level_count++;\n        } else if (c == ')')\
    \ {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (auto c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (auto c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (auto c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (auto c : \n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi633pvrz.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpi633pvrz.cpp:97:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   97 | }\n      | ^\n/tmp/tmpi633pvrz.cpp:96:18: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   96 |     for (auto c :\n      |\
    \         ~        ^\n      |                  )\n   97 | }\n      | ~       \
    \          \n/tmp/tmpi633pvrz.cpp:97:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmpi633pvrz.cpp:97:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    for (long i = 0; i\
    \ < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            max_level\
    \ = paren_levels_temp[i];\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.push_back(max_level);\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            paren_levels_temp2.push_back(max_level);\n\
    \        } else {\n            paren_levels_temp2.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.push_back(max_level);\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i]\
    \ > max_level) {\n            paren_levels_temp3.push_back(max_level);\n     \
    \   } else {\n            paren_levels_temp3.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.push_back(max_level);\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i]\
    \ > max_level) {\n            paren_levels_temp4.push_back(max_level);\n     \
    \   } else {\n            paren_levels_temp4.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.push_back(max_level);\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i]\
    \ > max_level) {\n            paren_levels_temp5.push_back(max_level);\n     \
    \   } else {\n            paren_levels_temp5.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.push_back(max_level);\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i]\
    \ > max_level) {\n            paren_levels_temp6.push_back(max_level);\n     \
    \   } else {\n            paren_levels_temp6.push_back(paren_levels_temp[i]);\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpap0dleky.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpap0dleky.cpp:10:77: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n      |                \
    \                                                             ^~~~~\n/tmp/tmpap0dleky.cpp:66:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   66 | int main() {\n      |            ^\n/tmp/tmpap0dleky.cpp:71:1: error:\
    \ expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmpap0dleky.cpp:60:57:\
    \ note: to match this \u2018{\u2019\n   60 |     for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n      |                                                         ^\n\
    /tmp/tmpap0dleky.cpp:71:1: error: expected \u2018}\u2019 at end of input\n   71\
    \ | }\n      | ^\n/tmp/tmpap0dleky.cpp:8:65: note: to match this \u2018{\u2019\
    \n    8 | std::vector<long> parse_nested_parens(std::string paren_string) {\n\
    \      |                                                                 ^\n/tmp/tmpap0dleky.cpp:71:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   71 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpyfnvbax5: /tmp/tmpyfnvbax5.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpk284u08m: /tmp/tmpk284u08m.cpp:85: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_string2 = paren_string;\n    std::string paren_string3\
    \ = paren_string;\n    std::string paren_string4 = paren_string;\n    std::string\
    \ paren_string5 = paren_string;\n    std::string paren_string6 = paren_string;\n\
    \    std::string paren_string7 = paren_string;\n    std::string paren_string8\
    \ = paren_string;\n    std::string paren_string9 = paren_string;\n    std::string\
    \ paren_string10 = paren_string;\n    std::string paren_string11 = paren_string;\n\
    \    std::string paren_string12 = paren_string;\n    std::string paren_string13\
    \ = paren_string;\n    std::string paren_string14 = paren_string;\n    std::string\
    \ paren_string15 = paren_string;\n    std::string paren_string16 = paren_string;\n\
    \    std::string paren_string17 = paren_string;\n    std::string paren_string18\
    \ = paren_string;\n    std::string paren_string19 = paren_string;\n    std::string\
    \ paren_string20 = paren_string;\n    std::string paren_string21 = paren_string;\n\
    \    std::string paren_string22 = paren_string;\n    std::string paren_string23\
    \ = paren_string;\n    std::string paren_string24 = paren_string;\n    std::string\
    \ paren_string25 = paren_string;\n    std::string paren_string26 = paren_string;\n\
    \    std::string paren_string27 = paren_string;\n    std::string paren_string28\
    \ = paren_string;\n    std::string paren_string29 = paren_string;\n    std::string\
    \ paren_string30 = paren_string;\n    std::string paren_string31 = paren_string;\n\
    \    std::string paren_string32 = paren_string;\n    std::string paren_string33\
    \ = paren_string;\n    std::string paren_string34 = paren_string;\n    std::string\
    \ paren_string35 = paren_string;\n    std::string paren_string36 = paren_string;\n\
    \    std::string paren_string37 = paren_string;\n    std::string paren_string38\
    \ = paren_string;\n    std::string paren_string39 = paren_string;\n    std::string\
    \ paren_string40 = paren_string;\n    std::string paren_string41 = paren_string;\n\
    \    std::string paren_string42 = paren_string;\n    std::string paren_string43\
    \ = paren_string;\n    std::string paren_string44 = paren_string;\n    std::string\
    \ paren_string45 = paren_string;\n    std::string paren_string46 = paren_string;\n\
    \    std::string paren_string47 = paren_string;\n    std::string paren_string48\
    \ = paren_string;\n    std::string paren_string49 = paren_string;\n    std::string\
    \ paren_string50 = paren_string;\n    std::string paren_string51 = paren_string;\n\
    \    std::string paren_string52 = paren\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprgw9i8c6.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmprgw9i8c6.cpp:61:34: error: \u2018paren\u2019 was not declared in this\
    \ scope\n   61 |     std::string paren_string52 = paren\n      |             \
    \                     ^~~~~\n/tmp/tmprgw9i8c6.cpp:62:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmprgw9i8c6.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    bool is_open = false;\n    for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         is_open = true;\n            current_level++;\n        } else if (paren_string[i]\
    \ == ')') {\n            is_open = false;\n            current_level--;\n    \
    \    } else if (is_open) {\n            current_level++;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpaycvyrva: /tmp/tmpaycvyrva.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113082
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_level;\n\
    \    for (auto &c : paren_string) {\n        if (c == '(') {\n            paren_level\
    \ = c;\n        } else if (c == ')') {\n            levels[levels.size() - 1]++;\n\
    \            paren_level = c;\n        } else {\n            levels[levels.size()\
    \ - 1]++;\n        }\n    }\n    return levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphw4ay0hl: /tmp/tmphw4ay0hl.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113003
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_level;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            paren_level = paren_string.substr(0, i);\n          \
    \  levels.push_back(std::stoi(paren_level));\n        } else if (paren_string[i]\
    \ == ')') {\n            long level_of_nesting = std::stoi(paren_level);\n   \
    \         if (level_of_nesting > levels.size()) {\n                levels.resize(level_of_nesting\
    \ + 1);\n            }\n            levels[level_of_nesting]++;\n            paren_level\
    \ = paren_string.substr(i + 1, paren_string.size() - i - 1);\n        }\n    }\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  std::string paren_level;\n  long paren_level_count = 0;\n  for (char c : paren_string)\
    \ {\n    if (c == '(') {\n      paren_level = paren_level + c;\n      paren_level_count++;\n\
    \    } else if (c == ')') {\n      paren_level = paren_level.substr(0, paren_level.size()\
    \ - 1);\n      paren_level_count--;\n      if (paren_level_count == 0) {\n   \
    \     paren_levels.push_back(std::stoi(paren_level));\n      }\n    }\n  }\n \
    \ return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_level_string;\n    std::string paren_level_char;\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    bool paren_level_found\
    \ = false;\n    for (auto c : paren_string) {\n        paren_level_string = paren_level_char;\n\
    \        paren_level_char = c; // Store the character for later use\n        if\
    \ (c == '(') {\n            paren_level++;\n            paren_level_string = paren_level_char;\n\
    \            paren_level_found = true;\n        }\n        else if (c == ')')\
    \ {\n            paren_level--;\n            paren_level_string = paren_level_char;\n\
    \            paren_level_found = true;\n        }\n        else if (paren_level_found)\
    \ {\n            paren_level_string = paren_level_char;\n            paren_level_found\
    \ = false;\n        }\n        paren_level_string = std::to_string(paren_level);\n\
    \        paren_level_string = paren_level_string + paren_level_string;\n     \
    \   paren_level_string = paren_level_string + paren_level_string;\n        paren_level_string\
    \ = paren_level_string + paren_level_string;\n        paren_level_string = paren_level_string\
    \ + paren_level_string;\n        paren_level_string = paren_level_string + paren_level_string;\n\
    \        paren_level_string = paren_level_string + paren_level_string;\n     \
    \   paren_level_string = paren_level_string + paren_level_string;\n        paren_level_string\
    \ = paren_level_string + paren_level_string;\n        paren_level_string = paren_level_string\
    \ + paren_level_string;\n        paren_level_string = paren_level_string + paren_level_string;\n\
    \        paren_level_string = paren_level_string + paren_level_string;\n     \
    \   paren_level_string = paren_level_string + paren_level_string;\n        paren_level_string\
    \ = paren_level_string + paren_level_string;\n        paren_level_string = paren_level_string\
    \ + paren_level_string;\n        paren_level_string = paren_level_string + paren_level_string;\n\
    \        paren_level_string = paren_level_string + paren_level_string;\n     \
    \   paren_level_string = paren_level_string + paren_level_string;\n        paren_level_string\
    \ = paren_level_string + paren_level_string;\n        paren_level_string = paren_level_string\
    \ \n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3athsj1.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpk3athsj1.cpp:52:48: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   52 |         paren_level_string = paren_level_string\n      |    \
    \                                            ^\n      |                      \
    \                          ;\n   53 | }\n      | ~                           \
    \                    \n/tmp/tmpk3athsj1.cpp:54:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   54 | int main() {\n     \
    \ |            ^\n/tmp/tmpk3athsj1.cpp:59:1: error: expected \u2018}\u2019 at\
    \ end of input\n   59 | }\n      | ^\n/tmp/tmpk3athsj1.cpp:8:65: note: to match\
    \ this \u2018{\u2019\n    8 | std::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n      |                                                   \
    \              ^\n/tmp/tmpk3athsj1.cpp:59:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   59 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        if (paren_levels[i]\
    \ == \"(\") {\n            paren_levels_temp.push_back(i);\n        } else if\
    \ (paren_levels[i] == \")\") {\n            long paren_levels_size = paren_levels_temp.size();\n\
    \            if (paren_levels_size == 0) {\n                paren_levels_temp.push_back(i);\n\
    \            } else {\n                long paren_levels_max_size = paren_levels_temp[paren_levels_size\
    \ - 1];\n                long paren_levels_max_index = paren_levels_temp[paren_levels_size\
    \ - 2];\n                if (paren_levels_max_index > i) {\n                 \
    \   paren_levels_temp.push_back(i);\n                }\n            }\n      \
    \  }\n    }\n    return paren_levels_temp;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s4irnj7.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp2s4irnj7.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmp2s4irnj7.cpp:14:32: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   14 |         if (paren_levels[i]\
    \ == \"(\") {\n      |                                ^~~\n/tmp/tmp2s4irnj7.cpp:16:39:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         } else if (paren_levels[i] == \")\") {\n      |             \
    \                          ^~~\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy = paren_levels.begin();\n\
    \    long paren_level = 0;\n    long paren_level_copy = 0;\n    long paren_level_copy2\
    \ = 0;\n    long paren_level_copy3 = 0;\n    long paren_level_copy4 = 0;\n   \
    \ long paren_level_copy5 = 0;\n    long paren_level_copy6 = 0;\n    long paren_level_copy7\
    \ = 0;\n    long paren_level_copy8 = 0;\n    long paren_level_copy9 = 0;\n   \
    \ long paren_level_copy10 = 0;\n    long paren_level_copy11 = 0;\n    long paren_level_copy12\
    \ = 0;\n    long paren_level_copy13 = 0;\n    long paren_level_copy14 = 0;\n \
    \   long paren_level_copy15 = 0;\n    long paren_level_copy16 = 0;\n    long paren_level_copy17\
    \ = 0;\n    long paren_level_copy18 = 0;\n    long paren_level_copy19 = 0;\n \
    \   long paren_level_copy20 = 0;\n    long paren_level_copy21 = 0;\n    long paren_level_copy22\
    \ = 0;\n    long paren_level_copy23 = 0;\n    long paren_level_copy24 = 0;\n \
    \   long paren_level_copy25 = 0;\n    long paren_level_copy26 = 0;\n    long paren_level_copy27\
    \ = 0;\n    long paren_level_copy28 = 0;\n    long paren_level_copy29 = 0;\n \
    \   long paren_level_copy30 = 0;\n    long paren_level_copy31 = 0;\n    long paren_level_copy32\
    \ = 0;\n    long paren_level_copy33 = 0;\n    long paren_level_copy34 = 0;\n \
    \   long paren_level_copy35 = 0;\n    long paren_level_copy36 = 0;\n    long paren_level_copy37\
    \ = 0;\n    long paren_level_copy38 = 0;\n    long paren_level_copy39 = 0;\n \
    \   long paren_level_copy40 = 0;\n    long paren_level_copy41 = 0;\n    long paren_level_copy42\
    \ = 0;\n    long paren_level_copy43 = 0;\n    long paren_level_copy44 = 0;\n \
    \   long paren_level_copy45 = 0;\n    long paren_level_copy46 = 0;\n    long paren_level_copy47\
    \ = 0;\n    long paren_level_copy48 = 0;\n    long paren_level_copy49 = 0;\n \
    \   long paren_level_copy50 = 0;\n    long paren_level_copy51 = 0;\n    long paren_level_copy52\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7vo707_.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpp7vo707_.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpp7vo707_.cpp:12:44: error: no match for \u2018\
    operator=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   12 |     paren_levels_copy = paren_levels.begin();\n\
    \      |                                            ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp7vo707_.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp7vo707_.cpp:2:\n/usr/include/c++/9/bits/stl_vector"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level_string = paren_level_string.empty() ? \"\" :\
    \ paren_level_string + \" \";\n            paren_level_string = paren_level_string\
    \ + std::to_string(paren_level);\n            paren_level++;\n        } else if\
    \ (c == ')') {\n            paren_level_string = paren_level_string + std::to_string(paren_level);\n\
    \            paren_level--;\n            paren_level_string = paren_level_string\
    \ + std::to_string(paren_level);\n            paren_level_string = paren_level_string\
    \ + \" \";\n            paren_level_string = paren_level_string + std::to_string(paren_level);\n\
    \            paren_level_string = paren_level_string + \" \";\n            paren_level_string\
    \ = paren_level_string + std::to_string(paren_level);\n            paren_level_string\
    \ = paren_level_string + \" \";\n            paren_level_string = paren_level_string\
    \ + std::to_string(paren_level);\n            paren_level_string = paren_level_string\
    \ + \" \";\n            paren_level_string = paren_level_string + std::to_string(paren_level);\n\
    \            paren_level_string = paren_level_string + \" \";\n            paren_level_string\
    \ = paren_level_string + std::to_string(paren_level);\n            paren_level_string\
    \ = paren_level_string + \" \";\n            paren_level_string = paren_level_string\
    \ + std::to_string(paren_level);\n            paren_level_string = paren_level_string\
    \ + \" \";\n            paren_level_string = paren_level_string + std::to_string(paren_level);\n\
    \            paren_level_string = paren_level_string + \" \";\n            paren_level_string\
    \ = paren_level_string + std::to_string(paren_level);\n            paren_level_string\
    \ = paren_level_string + \" \";\n            paren_level_string = paren_level_string\
    \ + std::to_string(paren_level);\n            paren_level_string = paren_level_string\
    \ + \" \";\n            paren_level_string = paren_level_string + std::to_string(paren_level);\n\
    \            paren_level_string = paren_level_string + \" \";\n            paren_level_string\
    \ = paren_level_string + std::to_string(paren_level);\n            paren_level_string\
    \ = paren_level_string + \" \";\n            paren_level_string = paren_level_string\
    \ + std::\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqh6vls0.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpfqh6vls0.cpp:45:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   45 | }\n      | ^\n/tmp/tmpfqh6vls0.cpp:46:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   46 | int main() {\n     \
    \ |            ^\n/tmp/tmpfqh6vls0.cpp:51:1: error: expected \u2018}\u2019 at\
    \ end of input\n   51 | }\n      | ^\n/tmp/tmpfqh6vls0.cpp:12:33: note: to match\
    \ this \u2018{\u2019\n   12 |     for (char c : paren_string) {\n      |     \
    \                            ^\n/tmp/tmpfqh6vls0.cpp:51:1: error: expected \u2018\
    }\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpfqh6vls0.cpp:8:65: note:\
    \ to match this \u2018{\u2019\n    8 | std::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n      |                                                   \
    \              ^\n/tmp/tmpfqh6vls0.cpp:51:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   51 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpz6xf669m: /tmp/tmpz6xf669m.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    for (auto &c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level = paren_level + c;\n        } else if\
    \ (c == ')') {\n            paren_level = paren_level.substr(0, paren_level.size()\
    \ - 1);\n            paren_levels.push_back(std::stoi(paren_level));\n       \
    \     paren_level = c;\n        } else {\n            paren_level = paren_level\
    \ + c;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113005
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_level = std::to_string(level);\n            level++;\n\
    \        } else if (c == ')') {\n            level--;\n            levels[level]\
    \ = std::stoi(paren_level);\n        }\n    }\n    return levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            assert(paren_level\
    \ >= 0);\n            paren_levels.push_back(paren_level);\n        } else {\n\
    \            assert(paren_level == 0);\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp1oor_3pa: /tmp/tmp1oor_3pa.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    size_t paren_level_count = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level_count++;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level_count--;\n\
    \            assert(paren_level_count >= 0);\n            paren_levels.push_back(paren_level);\n\
    \            assert(paren_level_count);\n        } else {\n            assert(paren_string[i]\
    \ == ' ');\n        }\n        if (paren_level_count == 0) {\n            paren_level++;\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpksvq3rtv: /tmp/tmpksvq3rtv.cpp:21: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_level_count'' failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool in_paren = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            in_paren\
    \ = true;\n        } else if (c == ')') {\n            paren_level--;\n      \
    \      in_paren = false;\n        } else if (c == ' ') {\n            if (in_paren)\
    \ {\n                paren_levels.push_back(paren_level);\n            }\n   \
    \     }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnvinn7ty: /tmp/tmpnvinn7ty.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n  for (int i = 0; i < paren_levels.size();\
    \ i++) {\n    paren_levels[i] = std::stoll(paren_levels[i]);\n  }\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86boo_cz.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86boo_cz.cpp:10:74: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |   paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n      |                    \
    \                                                      ^~~~~\n/tmp/tmp86boo_cz.cpp:12:49:\
    \ error: no matching function for call to \u2018stoll(__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   12 |     paren_levels[i] = std::stoll(paren_levels[i]);\n\
    \      |                                                 ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp86boo_cz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6521:3: note:\
    \ candidate: \u2018long long int std::__cxx11::stoll(const string&, std::size_t*,\
    \ int)\u2019\n 6521 |   stoll(const string& __str, size_t* __idx = 0, int __base\
    \ = 10)\n      |   ^~~~~\n/usr/include/c++/9/bits/basic_string.h:6521:23: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6521\
    \ |   stoll(const string& __str, size_t* __idx = 0, int __base = 10)\n      |\
    \         ~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6627:3:\
    \ note: candidate: \u2018long long int std::__cxx11::stoll(const wstring&, std::size_t*,\
    \ int)\u2019\n 6627 |   stoll(const wstring& __str, size_t* __idx = 0, int __base\
    \ = 10)\n  "
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_level_string = paren_level_string.empty() ? \"(\"\
    \ : paren_level_string;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            paren_level_string = paren_level_string.empty() ? \")\"\
    \ : paren_level_string;\n        } else if (is_open && is_closed) {\n        \
    \    paren_level_string = paren_level_string.empty() ? \"\" : paren_level_string;\n\
    \            paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3hqbprm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpf3hqbprm.cpp:47:24: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   47 |             paren_level\n      |                        ^\n \
    \     |                        ;\n   48 | }\n      | ~                       \n\
    /tmp/tmpf3hqbprm.cpp:49:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   49 | int main() {\n      |            ^\n/tmp/tmpf3hqbprm.cpp:54:1:\
    \ error: expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmpf3hqbprm.cpp:14:33:\
    \ note: to match this \u2018{\u2019\n   14 |     for (char c : paren_string) {\n\
    \      |                                 ^\n/tmp/tmpf3hqbprm.cpp:54:1: error:\
    \ expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmpf3hqbprm.cpp:8:65:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n      |                                                   \
    \              ^\n/tmp/tmpf3hqbprm.cpp:54:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   54 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string curr_level;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            curr_level = curr_level + c;\n        } else if (c == ')') {\n\
    \            curr_level = curr_level.substr(0, curr_level.size() - 1);\n     \
    \       levels[level++] = std::stoi(curr_level);\n            curr_level.clear();\n\
    \        } else {\n            curr_level = curr_level + c;\n        }\n    }\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    for (auto &c : paren_string) {\n        if (c == '(') {\n            current_level\
    \ = current_level + \"(\";\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1) + \")\";\n        } else\
    \ {\n            current_level = current_level + c;\n        }\n    }\n    long\
    \ current_level_length = current_level.size();\n    for (auto &c : current_level)\
    \ {\n        if (c == '(') {\n            levels.push_back(current_level_length);\n\
    \        } else if (c == ')') {\n            levels.push_back(levels[levels.size()\
    \ - 1]);\n        }\n    }\n    return levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdgq5qvym: /tmp/tmpdgq5qvym.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_level++;\n        } else {\n\
    \            paren_level--;\n        }\n        if (paren_level == level) {\n\
    \            paren_levels[paren_level - 1]++;\n        } else {\n            paren_levels.push_back(level);\n\
    \            paren_level = 1;\n            level = paren_level;\n        }\n \
    \   }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmporh461a9: /tmp/tmporh461a9.cpp:37: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n        } else\
    \ if (c == ')') {\n            paren_levels.pop_back();\n        }\n        paren_level++;\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp9ac9nmrc: /tmp/tmp9ac9nmrc.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    bool is_open = false;\n\
    \    bool is_close = false;\n    for (size_t i = 0; i < paren_string.size(); i++)\
    \ {\n        char c = paren_string[i];\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_level++;\n        }\n        else if (c == ')') {\n\
    \            is_close = true;\n            paren_level--;\n        }\n       \
    \ else if (is_open) {\n            paren_level++;\n        }\n        else if\
    \ (is_close) {\n            paren_level--;\n        }\n        if (paren_level\
    \ == current_level) {\n            paren_levels.push_back(paren_level);\n    \
    \    }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3qhhs27s: /tmp/tmp3qhhs27s.cpp:39: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_level = \"\";\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            curr_paren_level += c;\n        } else if\
    \ (c == ')') {\n            curr_paren_level += c;\n            paren_levels.push_back(std::stoll(curr_paren_level));\n\
    \            curr_paren_level = \"\";\n        } else {\n            curr_paren_level\
    \ += c;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoll\n"
  stdout: ''
  timestamp: 1660113082
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::vector<long> paren_levels_temp;\n    std::string paren_levels_temp_str;\n\
    \    std::string paren_levels_temp_str_temp;\n    std::string paren_levels_temp_str_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp;\n    std::string paren_levels_temp_str_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp;\n    std::string\
    \ paren_levels_temp_str_temp_temp_temp_temp_temp_temp;\n    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqmn7n3e.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpyqmn7n3e.cpp:22:17: error: redeclaration of \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   22 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyqmn7n3e.cpp:21:17: note: \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   21 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyqmn7n3e.cpp:25:17: error: redeclaration of \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   25 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyqmn7n3e.cpp:24:17: note: \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   24 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyqmn7n3e.cpp:27:17: error: redeclaration of \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   27 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyqmn7n3e.cpp:26:17: note: \u2018std::string paren_levels_temp_str_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   26 |     std::string paren_levels_temp_str_temp_temp_temp_temp_temp_tem"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto it = paren_string.begin(); it != paren_string.end();\
    \ ++it) {\n        if (*it == '(') {\n            ++level;\n        } else if\
    \ (*it == ')') {\n            --level;\n        }\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpl1_9l7y9: /tmp/tmpl1_9l7y9.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string current_paren_level;\n    for (auto c : paren_string) {\n   \
    \     if (c == '(') {\n            current_paren_level = \"(\";\n        } else\
    \ if (c == ')') {\n            current_paren_level = \")\";\n        } else if\
    \ (c == ' ') {\n            current_paren_level = \" \";\n        } else {\n \
    \           paren_levels.push_back(std::stoi(current_paren_level));\n        \
    \    current_paren_level = c;\n        }\n    }\n    paren_levels.push_back(std::stoi(current_paren_level));\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels = paren_string.split(\"\
    \ \");\n  std::vector<long> paren_levels_temp;\n  paren_levels_temp.push_back(1);\n\
    \  for (int i = 0; i < paren_levels.size(); i++) {\n    if (paren_levels[i] ==\
    \ \"(\") {\n      paren_levels_temp.push_back(paren_levels_temp.back() + 1);\n\
    \    } else if (paren_levels[i] == \")\") {\n      paren_levels_temp.push_back(paren_levels_temp.back()\
    \ - 1);\n    }\n  }\n  std::vector<long> paren_levels_temp_reverse;\n  paren_levels_temp_reverse\
    \ = paren_levels_temp;\n  std::reverse(paren_levels_temp_reverse.begin(), paren_levels_temp_reverse.end());\n\
    \  std::vector<long> paren_levels_temp_reverse_temp;\n  paren_levels_temp_reverse_temp.push_back(1);\n\
    \  for (int i = 0; i < paren_levels_temp_reverse.size(); i++) {\n    if (paren_levels_temp_reverse[i]\
    \ == paren_levels_temp_reverse.back()) {\n      paren_levels_temp_reverse_temp.push_back(paren_levels_temp_reverse_temp.back()\
    \ + 1);\n    } else {\n      paren_levels_temp_reverse_temp.push_back(paren_levels_temp_reverse_temp.back()\
    \ - 1);\n    }\n  }\n  std::vector<long> paren_levels_temp_reverse_temp_reverse;\n\
    \  paren_levels_temp_reverse_temp_reverse = paren_levels_temp_reverse_temp;\n\
    \  std::reverse(paren_levels_temp_reverse_temp_reverse.begin(), paren_levels_temp_reverse_temp_reverse.end());\n\
    \  std::vector<long> paren_levels_temp_reverse_temp_reverse_temp;\n  paren_levels_temp_reverse_temp_reverse_temp.push_back(1);\n\
    \  for (int i = 0; i < paren_levels_temp_reverse_temp_reverse.size(); i++) {\n\
    \    if (paren_levels_temp_reverse_temp_reverse[i] == paren_levels_temp_reverse_temp_reverse.back())\
    \ {\n      paren_levels_temp_reverse_temp_reverse_temp.push_back(paren_levels_temp_reverse_temp_reverse_temp.back()\
    \ + 1);\n    } else {\n      paren_levels_temp_reverse_temp_reverse_temp.push_back(paren_levels_temp_reverse_temp_reverse_temp.back()\
    \ - 1);\n    }\n  }\n  std::vector<long> paren_levels_temp_reverse_temp_reverse_temp_reverse;\n\
    \  paren_levels_temp_reverse_temp_reverse_temp_reverse = paren_levels_temp_reverse_temp_reverse_temp;\n\
    \  std::reverse(\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_ezz2va.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpf_ezz2va.cpp:10:31: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |   paren_levels = paren_string.split(\" \");\n      |               \
    \                ^~~~~\n/tmp/tmpf_ezz2va.cpp:14:28: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   14 |     if (paren_levels[i]\
    \ == \"(\") {\n      |                            ^~~\n/tmp/tmpf_ezz2va.cpp:16:35:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |     } else if (paren_levels[i] == \")\") {\n      |                 \
    \                  ^~~\n/tmp/tmpf_ezz2va.cpp:47:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpf_ezz2va.cpp:47:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::vector<long> paren_levels_temp;\n    std::string paren_string_temp;\n\
    \    long paren_levels_temp_index = 0;\n    long paren_levels_temp_size = 0;\n\
    \    long paren_levels_temp_index2 = 0;\n    long paren_levels_temp_size2 = 0;\n\
    \    long paren_levels_temp_index3 = 0;\n    long paren_levels_temp_size3 = 0;\n\
    \    long paren_levels_temp_index4 = 0;\n    long paren_levels_temp_size4 = 0;\n\
    \    long paren_levels_temp_index5 = 0;\n    long paren_levels_temp_size5 = 0;\n\
    \    long paren_levels_temp_index6 = 0;\n    long paren_levels_temp_size6 = 0;\n\
    \    long paren_levels_temp_index7 = 0;\n    long paren_levels_temp_size7 = 0;\n\
    \    long paren_levels_temp_index8 = 0;\n    long paren_levels_temp_size8 = 0;\n\
    \    long paren_levels_temp_index9 = 0;\n    long paren_levels_temp_size9 = 0;\n\
    \    long paren_levels_temp_index10 = 0;\n    long paren_levels_temp_size10 =\
    \ 0;\n    long paren_levels_temp_index11 = 0;\n    long paren_levels_temp_size11\
    \ = 0;\n    long paren_levels_temp_index12 = 0;\n    long paren_levels_temp_size12\
    \ = 0;\n    long paren_levels_temp_index13 = 0;\n    long paren_levels_temp_size13\
    \ = 0;\n    long paren_levels_temp_index14 = 0;\n    long paren_levels_temp_size14\
    \ = 0;\n    long paren_levels_temp_index15 = 0;\n    long paren_levels_temp_size15\
    \ = 0;\n    long paren_levels_temp_index16 = 0;\n    long paren_levels_temp_size16\
    \ = 0;\n    long paren_levels_temp_index17 = 0;\n    long paren_levels_temp_size17\
    \ = 0;\n    long paren_levels_temp_index18 = 0;\n    long paren_levels_temp_size18\
    \ = 0;\n    long paren_levels_temp_index19 = 0;\n    long paren_levels_temp_size19\
    \ = 0;\n    long paren_levels_temp_index20 = 0;\n    long paren_levels_temp_size20\
    \ = 0;\n    long paren_levels_temp_index21 = 0;\n    long paren_levels_temp_size21\
    \ = 0;\n    long paren_levels_temp_index22 = 0;\n    long paren_levels_temp_size22\
    \ = 0;\n    long paren_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz4ue3vu7.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpz4ue3vu7.cpp:58:1: error: expected initializer before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n/tmp/tmpz4ue3vu7.cpp:58:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          paren_level--;\n        }\n    }\n    paren_levels.push_back(paren_level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp6oymiai9: /tmp/tmp6oymiai9.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzmdnv_46: /tmp/tmpzmdnv_46.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n            paren_level_string.push_back(c);\n\
    \        }\n        paren_levels.push_back(std::stoi(paren_level_string));\n \
    \   }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp_qk306jh: /tmp/tmp_qk306jh.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyrgz7ym.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmppyrgz7ym.cpp:66:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmppyrgz7ym.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n        }\n        paren_levels.push_back(paren_level_string);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5zpkk9_.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmps5zpkk9_.cpp:22:50: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   22 |         paren_levels.push_back(paren_level_string);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5zpkk9_.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660113081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    std::string paren_level = \"\";\n    size_t paren_level_count = 0;\n    for\
    \ (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            paren_level_count++;\n            paren_level += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level_count--;\n\
    \            paren_level += paren_string[i];\n            if (paren_level_count\
    \ == 0) {\n                paren_levels.push_back(std::stoi(paren_level));\n \
    \               paren_level = \"\";\n            }\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level\
    \ = \"\";\n    std::string paren_level_token = \"\";\n    long paren_level_count\
    \ = 0;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n        \
    \    paren_level_token += c;\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level += paren_level_token;\n           \
    \ paren_level_token = \"\";\n            paren_level_count--;\n            if\
    \ (paren_level_count == 0) {\n                paren_level_count = 0;\n       \
    \         paren_level += c;\n                paren_level_count++;\n          \
    \  }\n        } else if (c == ' ') {\n            paren_level += c;\n        }\n\
    \    }\n    paren_level += paren_level_token;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n    paren_level_count--;\n\
    \    paren_level_count--;\n    paren_level_count--;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4mx6llky: /tmp/tmp4mx6llky.cpp:86: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_string_reversed = paren_string;\n    std::reverse(paren_string_reversed.begin(),\
    \ paren_string_reversed.end());\n    size_t paren_string_reversed_size = paren_string_reversed.size();\n\
    \    size_t paren_string_reversed_index = 0;\n    size_t paren_string_reversed_index_end\
    \ = 0;\n    size_t paren_string_reversed_index_start = 0;\n    size_t paren_string_reversed_index_count\
    \ = 0;\n    bool paren_string_reversed_index_is_open = false;\n    bool paren_string_reversed_index_is_closed\
    \ = false;\n    bool paren_string_reversed_index_is_opening_paren = false;\n \
    \   bool paren_string_reversed_index_is_closing_paren = false;\n    bool paren_string_reversed_index_is_opening_paren_or_closing\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening =\
    \ false;\n    bool paren_string_reversed_index_is_opening_paren_or_closing_paren\
    \ = false;\n    bool paren_string_reversed_index_is_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren\
    \ = false;\n    bool paren_string_reversed_index_is_closing_paren_or_opening_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeevwweko.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpeevwweko.cpp:36:1: error: expected initializer before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpeevwweko.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ');\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(1);\n    long max_level = 1;\n    for (long i\
    \ = 0; i < paren_levels.size(); i++) {\n        long current_level = paren_levels[i];\n\
    \        long current_level_temp = paren_levels_temp[i];\n        while (current_level\
    \ > max_level) {\n            max_level = current_level;\n            paren_levels_temp.push_back(current_level_temp);\n\
    \            current_level++;\n        }\n    }\n    return paren_levels_temp;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprjvml8v4.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmprjvml8v4.cpp:10:67: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ');\n      |                               \
    \                                    ^~~~~\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_string = paren_string;\n    size_t paren_level = 0;\n \
    \   size_t paren_level_count = 0;\n    size_t paren_level_count_max = 0;\n   \
    \ size_t paren_level_count_min = 0;\n    size_t paren_level_count_sum = 0;\n \
    \   size_t paren_level_count_sum_max = 0;\n    size_t paren_level_count_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_min = 0;\n    size_t paren_level_count_sum_sum_sum\
    \ = 0;\n    size_t paren_level_count_sum_sum_max = 0;\n    size_t paren_level_count_sum_sum_min\
    \ = 0;\n    size_t paren_level_count_sum_sum_sum = 0;\n    size_t paren_level_count_sum_sum_max\
    \ = 0;\n    size_t paren_level_count_sum_sum_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpclk96ft0.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpclk96ft0.cpp:11:17: error: declaration of \u2018std::string paren_string\u2019\
    \ shadows a parameter\n   11 |     std::string paren_string = paren_string;\n\
    \      |                 ^~~~~~~~~~~~\n/tmp/tmpclk96ft0.cpp:23:12: error: redeclaration\
    \ of \u2018size_t paren_level_count_sum_sum_max\u2019\n   23 |     size_t paren_level_count_sum_sum_max\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpclk96ft0.cpp:20:12:\
    \ note: \u2018size_t paren_level_count_sum_sum_max\u2019 previously declared here\n\
    \   20 |     size_t paren_level_count_sum_sum_max = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpclk96ft0.cpp:24:12: error: redeclaration of \u2018size_t paren_level_count_sum_sum_min\u2019\
    \n   24 |     size_t paren_level_count_sum_sum_min = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpclk96ft0.cpp:21:12: note: \u2018size_t paren_level_count_sum_sum_min\u2019\
    \ previously declared here\n   21 |     size_t paren_level_count_sum_sum_min =\
    \ 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpclk96ft0.cpp:25:12:\
    \ error: redeclaration of \u2018size_t paren_level_count_sum_sum_sum\u2019\n \
    \  25 |     size_t paren_level_count_sum_sum_sum = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpclk96ft0.cpp:22:12: note: \u2018size_t paren_level_count_sum_sum_sum\u2019\
    \ previously declared here\n   22 |     size_t paren_level_count_sum_sum_sum =\
    \ 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpclk96ft0.cpp:26:12:\
    \ error: redeclaration of \u2018size_t paren_level_count_sum_sum_max\u2019\n \
    \  26 |     size_t paren_level_count_sum_sum_max = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpclk96ft0.cpp:20:12: note: \u2018size_t paren_level_count_sum_sum_max\u2019\
    \ previously declared here\n   20 |     size_t paren_level_count_sum_sum_max =\
    \ 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpclk96ft0.cpp:27:12:\
    \ error: redeclaration of \u2018size_t paren_level_count_sum_sum_min\u2019\n \
    \  27 |     size_t paren_level_count_sum_sum_min = 0;\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_t;\n\
    \    paren_levels_t.size = 0;\n    paren_levels_t.max_level = 0;\n    paren_levels_t.max_level_size\
    \ = 0;\n    paren_levels_t.max_level_num = 0;\n    paren_levels_t.max_level_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num = 0;\n    paren_levels_t.max_level_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num = 0;\n    paren_levels_t.max_level_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num = 0;\n    paren_levels_t.max_level_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num = 0;\n    paren_levels_t.max_level_num_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num = 0;\n    paren_levels_t.max_level_num_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num = 0;\n  \
    \  paren_levels_t.max_level_num_num_num_num_num_num_num_num_size = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num =\
    \ 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_size\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_num_num_num_num_num\
    \ = 0;\n    paren_levels_t.max_level_num_num_num_num_num_num_num_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3p5r7e8u.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp3p5r7e8u.cpp:10:5: error: \u2018paren_levels_t\u2019 was not declared\
    \ in this scope; did you mean \u2018paren_levels\u2019?\n   10 |     paren_levels_t\
    \ paren_levels_t;\n      |     ^~~~~~~~~~~~~~\n      |     paren_levels\n/tmp/tmp3p5r7e8u.cpp:41:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   41 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n      assert(level >= 0);\n      paren_levels.push_back(level);\n\
    \    }\n  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpo22p7645: /tmp/tmpo22p7645.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  std::string curr_paren_level = \"\";\n  for (size_t i = 0; i < paren_string.size();\
    \ ++i) {\n    if (paren_string[i] == '(') {\n      curr_paren_level += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \      curr_paren_level = \"\";\n    } else {\n      curr_paren_level += paren_string[i];\n\
    \    }\n  }\n  paren_levels.push_back(std::stoi(curr_paren_level));\n  return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_level++;\n        } else if (c == ')') {\n      \
    \      is_closed = true;\n            paren_level--;\n        } else if (c ==\
    \ ' ') {\n            if (is_open && is_closed) {\n                paren_levels.push_back(paren_level);\n\
    \            }\n            is_open = false;\n            is_closed = false;\n\
    \        }\n    }\n    if (is_open && is_closed) {\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmph__8dtqe: /tmp/tmph__8dtqe.cpp:36: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    bool is_open = false;\n    bool is_closed = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_closed = true;\n        } else if (is_open && is_closed)\
    \ {\n            paren_levels.push_back(level);\n            is_open = false;\n\
    \            is_closed = false;\n        } else if (is_open) {\n            level++;\n\
    \        } else if (is_closed) {\n            level--;\n        }\n    }\n   \
    \ return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpac58v341: /tmp/tmpac58v341.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string current_paren_string\
    \ = \"\";\n    long current_paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            current_paren_level++;\n           \
    \ current_paren_string += c;\n        } else if (c == ')') {\n            current_paren_level--;\n\
    \            current_paren_string += c;\n        } else {\n            current_paren_string\
    \ += c;\n        }\n        if (current_paren_level > 0) {\n            paren_levels.push_back(current_paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz14g7ga3: /tmp/tmpz14g7ga3.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level = paren_levels[paren_level_count];\n            paren_level_count++;\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_levels[paren_level_count];\n        } else if\
    \ (paren_string[i] == ' ') {\n            paren_level_count = 0;\n        } else\
    \ {\n            paren_level_count = 0;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_pplgdu.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp7_pplgdu.cpp:25:43: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   25 |         paren_levels.push_back(paren_level);\n\
    \      |                                           ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7_pplgdu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long paren_level =\
    \ 0;\n    bool is_open = false;\n    bool is_closed = false;\n    for (auto c\
    \ : paren_string) {\n        if (c == '(') {\n            is_open = true;\n  \
    \          paren_level++;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            paren_level--;\n        } else if (is_open && is_closed)\
    \ {\n            paren_levels[paren_level - 1]++;\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.back() == 0);\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmppmp6lhr5: /tmp/tmppmp6lhr5.cpp:20: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_levels.back() == 0'' failed.

    '
  stdout: ''
  timestamp: 1660113003
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i <\
    \ paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            max_level\
    \ = paren_levels_temp[i];\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(paren_levels_temp.size());\n    for (long i =\
    \ 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i] ==\
    \ max_level) {\n            paren_levels_temp2.push_back(max_level);\n       \
    \ } else {\n            paren_levels_temp2.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    return paren_levels_temp2;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy661lfao.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpy661lfao.cpp:10:77: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n      |                \
    \                                                             ^~~~~\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_levels.push_back(paren_level);\n        } else if\
    \ (c == ')') {\n            is_closed = true;\n            paren_level = paren_levels.back();\n\
    \        } else if (c == ' ') {\n            if (is_open && is_closed) {\n   \
    \             paren_level = paren_levels.back();\n            }\n        } else\
    \ {\n            is_open = false;\n            is_closed = false;\n        }\n\
    \    }\n    if (paren_levels.size() == 0) {\n        paren_levels.push_back(1);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpmrsjrc2l: /tmp/tmpmrsjrc2l.cpp:37: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n            paren_level_string.push_back(c);\n\
    \        }\n        paren_levels.push_back(std::stoi(paren_level_string));\n \
    \   }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp_qk306jh: /tmp/tmp_qk306jh.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_level_string;\n    std::string paren_level_char;\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    bool paren_level_found\
    \ = false;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n        paren_level_found\
    \ = false;\n        paren_level_counter = 0;\n        paren_level_string = \"\"\
    ;\n        paren_level_char = \"\";\n        paren_level = 0;\n        while (i\
    \ < paren_string.size() && !paren_level_found) {\n            paren_level_char\
    \ = paren_string[i];\n            if (paren_level_char == '(') {\n           \
    \     paren_level_found = true;\n                paren_level++;\n            \
    \    paren_level_string += paren_level_char;\n            } else if (paren_level_char\
    \ == ')') {\n                paren_level_found = true;\n                paren_level--;\n\
    \                paren_level_string += paren_level_char;\n            } else if\
    \ (paren_level_char == ' ') {\n                paren_level_string += paren_level_char;\n\
    \            }\n            i++;\n        }\n        if (paren_level_found) {\n\
    \            paren_levels[paren_level_counter] = paren_level;\n        }\n   \
    \ }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjflhyc2o.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpjflhyc2o.cpp:24:34: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   24 |             if (paren_level_char == '(') {\n\
    \      |                 ~~~~~~~~~~~~~~~~ ^~ ~~~\n      |                 |  \
    \                 |\n      |                 |                   char\n      |\
    \                 std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjflhyc2o.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjflhyc2o.cpp:24:37:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   24\
    \ |             if (paren_level_char == '(') {\n      |                      \
    \               ^~~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpjflhyc2o.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpjflhyc2o.cpp:24:37: note: "
  stdout: ''
  timestamp: 1660113083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    long paren_level = 1;\n    long paren_level_temp = 1;\n    long paren_level_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp = 1;\n    long\
    \ paren_level_temp_temp_temp_temp_temp_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr35kqf37.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpr35kqf37.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpr35kqf37.cpp:27:10: error: redeclaration of\
    \ \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   27 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr35kqf37.cpp:26:10: note: \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   26 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr35kqf37.cpp:32:10: error: redeclaration of \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   32 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr35kqf37.cpp:31:10: note: \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   31 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr35kqf37.cpp:35:10: error: redeclaration of \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   35 |     long paren_leve"
  stdout: ''
  timestamp: 1660113083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long current_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level++;\n        } else if (c == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp3k0p6po3: /tmp/tmp3k0p6po3.cpp:23: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string curr_level;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            curr_level = curr_level + c;\n            level++;\n        }\
    \ else if (c == ')') {\n            level--;\n            curr_level = curr_level.substr(0,\
    \ curr_level.size() - 1);\n            levels[level - 1]++;\n        }\n    }\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level_string = paren_level_string.empty() ? c : paren_level_string;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_string\
    \ = paren_level_string.empty() ? c : paren_level_string;\n            paren_level--;\n\
    \            if (paren_level == 0) {\n                paren_level_string = paren_level_string.empty()\
    \ ? c : paren_level_string;\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren_level_string.substr(0,\
    \ paren_level_string.size() - 1);\n                paren_level_string = paren\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ecthnvl.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp2ecthnvl.cpp:14:61: error: operands to ?: have different types \u2018\
    char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   14 |             paren_level_string = paren_level_string.empty() ? c : paren_level_string;\n\
    \      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2ecthnvl.cpp:17:61: error: operands to ?: have different types \u2018\
    char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   17 |             paren_level_string = paren_level_string.empty() ? c : paren_level_string;\n\
    \      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2ecthnvl.cpp:20:65: error: operands to ?: have different types \u2018\
    char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   20 |                 paren_level_string = paren_level_string.empty() ? c\
    \ : paren_level_string;\n      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2ecthnvl.cpp:39:38: error: \u2018paren\u2019 was not declared in this\
    \ scope\n   39 |                 paren_level_string = paren\n      |         \
    \                             ^~~~~\n/tmp/tmp2ecthnvl.cpp:41:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   41 | int main() {\n     \
    \ |            ^\n/tmp/tmp2ecthnvl.cpp:46:1: error: expected \u2018}\u2019 at\
    \ end of input\n   46 | }\n      | ^\n/tmp/tmp2ecthnvl.cpp:16:30: note: to match\
    \ this \u2018{\u2019\n   16 |         } else if (c == ')') {\n      |        \
    \                      ^\n/tmp/tmp2ecthnvl.cpp:46:1: error: expected \u2018}\u2019\
    \ at end of input\n   46 | }\n      | ^\n/tmp/tmp2ecthnvl.cpp:12:33: note: to\
    \ match this \u2018{\u2019\n   12 |     for (auto c : paren_string) {\n      |\
    \                                 ^\n/tmp/tmp2ecthnvl.cpp:46:1: error: expected\
    \ \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmp2ecthnvl.cpp:8:65:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> "
  stdout: ''
  timestamp: 1660113083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (auto &level : paren_levels) {\n        paren_levels_temp.push_back(level);\n\
    \    }\n    long max_level = 0;\n    for (auto &level : paren_levels_temp) {\n\
    \        if (level > max_level) {\n            max_level = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.reserve(paren_levels_temp.size());\n\
    \    for (auto &level : paren_levels_temp) {\n        paren_levels_temp2.push_back(level);\n\
    \    }\n    long max_level2 = 0;\n    for (auto &level : paren_levels_temp2) {\n\
    \        if (level > max_level2) {\n            max_level2 = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(paren_levels_temp2.size());\n\
    \    for (auto &level : paren_levels_temp2) {\n        paren_levels_temp3.push_back(level);\n\
    \    }\n    long max_level3 = 0;\n    for (auto &level : paren_levels_temp3) {\n\
    \        if (level > max_level3) {\n            max_level3 = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.reserve(paren_levels_temp3.size());\n\
    \    for (auto &level : paren_levels_temp3) {\n        paren_levels_temp4.push_back(level);\n\
    \    }\n    long max_level4 = 0;\n    for (auto &level : paren_levels_temp4) {\n\
    \        if (level > max_level4) {\n            max_level4 = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.reserve(paren_levels_temp4.size());\n\
    \    for (auto &level : paren_levels_temp4) {\n        paren_levels_temp5.push_back(level);\n\
    \    }\n    long max_level5 = 0;\n    for (auto &level : paren_levels_temp5) {\n\
    \        if (level > max_level5) {\n            max_level5 = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.reserve(paren_levels_temp5.size());\n\
    \    for (auto &level : paren_levels_temp5) {\n        paren_level\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2v8oa7_d.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp2v8oa7_d.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmp2v8oa7_d.cpp:69:9: error: \u2018paren_level\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   69\
    \ |         paren_level\n      |         ^~~~~~~~~~~\n      |         paren_levels\n\
    /tmp/tmp2v8oa7_d.cpp:71:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   71 | int main() {\n      |            ^\n/tmp/tmp2v8oa7_d.cpp:76:1:\
    \ error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmp2v8oa7_d.cpp:8:65:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n      |                                                   \
    \              ^\n/tmp/tmp2v8oa7_d.cpp:76:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long max_level = 0;\n\
    \    long current_level = 0;\n    long level = 0;\n    bool is_open = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            current_level++;\n        } else if (c == ')') {\n    \
    \        is_open = false;\n            current_level--;\n        } else if (is_open)\
    \ {\n            level++;\n            if (level > max_level) {\n            \
    \    max_level = level;\n            }\n        }\n    }\n    paren_levels.push_back(max_level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpeulzwsc7: /tmp/tmpeulzwsc7.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    long paren_level = 1;\n    long paren_level_temp = 1;\n    long paren_level_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp = 1;\n    long\
    \ paren_level_temp_temp_temp_temp_temp_temp_temp_temp = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n    long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplqh8z44g.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmplqh8z44g.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmplqh8z44g.cpp:27:10: error: redeclaration of\
    \ \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   27 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplqh8z44g.cpp:26:10: note: \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   26 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplqh8z44g.cpp:29:10: error: redeclaration of \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   29 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplqh8z44g.cpp:28:10: note: \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   28 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplqh8z44g.cpp:32:10: error: redeclaration of \u2018long int paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   32 |     long paren_level_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            current_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            current_level--;\n\
    \        } else if (is_open) {\n            current_level++;\n        } else {\n\
    \            paren_levels.push_back(current_level);\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpil58ya1e: /tmp/tmpil58ya1e.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count++;\n        } else if (c == ')') {\n          \
    \  paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \        } else if (c == ' ') {\n            paren_level_count = 0;\n        }\
    \ else {\n            assert(false);\n        }\n        paren_levels.push_back(std::stoi(paren_level));\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp002y4z3d: /tmp/tmp002y4z3d.cpp:31: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level_count++;\n            paren_level = paren_levels[paren_level_count];\n\
    \            paren_levels[paren_level_count] = i;\n        } else if (paren_string[i]\
    \ == ')') {\n            paren_level_count--;\n            paren_level = paren_levels[paren_level_count];\n\
    \            paren_levels[paren_level_count] = i;\n        } else {\n        \
    \    paren_level = paren_levels[paren_level_count];\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpkxrv1njv: /tmp/tmpkxrv1njv.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (auto &level : paren_levels) {\n        paren_levels_temp.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp2 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp3 = paren_levels_temp2;\n    std::vector<long> paren_levels_temp4\
    \ = paren_levels_temp3;\n    std::vector<long> paren_levels_temp5 = paren_levels_temp4;\n\
    \    std::vector<long> paren_levels_temp6 = paren_levels_temp5;\n    std::vector<long>\
    \ paren_levels_temp7 = paren_levels_temp6;\n    std::vector<long> paren_levels_temp8\
    \ = paren_levels_temp7;\n    std::vector<long> paren_levels_temp9 = paren_levels_temp8;\n\
    \    std::vector<long> paren_levels_temp10 = paren_levels_temp9;\n    std::vector<long>\
    \ paren_levels_temp11 = paren_levels_temp10;\n    std::vector<long> paren_levels_temp12\
    \ = paren_levels_temp11;\n    std::vector<long> paren_levels_temp13 = paren_levels_temp12;\n\
    \    std::vector<long> paren_levels_temp14 = paren_levels_temp13;\n    std::vector<long>\
    \ paren_levels_temp15 = paren_levels_temp14;\n    std::vector<long> paren_levels_temp16\
    \ = paren_levels_temp15;\n    std::vector<long> paren_levels_temp17 = paren_levels_temp16;\n\
    \    std::vector<long> paren_levels_temp18 = paren_levels_temp17;\n    std::vector<long>\
    \ paren_levels_temp19 = paren_levels_temp18;\n    std::vector<long> paren_levels_temp20\
    \ = paren_levels_temp19;\n    std::vector<long> paren_levels_temp21 = paren_levels_temp20;\n\
    \    std::vector<long> paren_levels_temp22 = paren_levels_temp21;\n    std::vector<long>\
    \ paren_levels_temp23 = paren_levels_temp22;\n    std::vector<long> paren_levels_temp24\
    \ = paren_levels_temp23;\n    std::vector<long> paren_levels_temp25 = paren_levels_temp24;\n\
    \    std::vector<long> paren_levels_temp26 = paren_levels_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9jj434m.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpf9jj434m.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpf9jj434m.cpp:40:45: error: \u2018paren_levels_\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   40\
    \ |     std::vector<long> paren_levels_temp26 = paren_levels_\n      |       \
    \                                      ^~~~~~~~~~~~~\n      |                \
    \                             paren_levels\n/tmp/tmpf9jj434m.cpp:41:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   41 |\
    \ }\n      | ^\n/tmp/tmpf9jj434m.cpp:41:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            if (current_level.empty())\
    \ {\n                levels.push_back(0);\n                current_level = c;\n\
    \            } else {\n                levels.push_back(levels.size());\n    \
    \            current_level = c;\n            }\n        } else if (c == ')') {\n\
    \            if (current_level.empty()) {\n                throw std::runtime_error(\"\
    Invalid parenthesis string\");\n            }\n            levels.push_back(levels.size());\n\
    \            current_level = c;\n        } else {\n            current_level +=\
    \ c;\n        }\n    }\n    return levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf4s2vf2q: /tmp/tmpf4s2vf2q.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n    long max_level = 0;\n  \
    \  for (long level : paren_levels) {\n        max_level = std::max(max_level,\
    \ level);\n    }\n    std::vector<long> max_level_paren_levels;\n    for (long\
    \ level : paren_levels) {\n        max_level_paren_levels.push_back(max_level);\n\
    \    }\n    return max_level_paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4q0i_y_.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpn4q0i_y_.cpp:10:76: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n      |                    \
    \                                                        ^~~~~\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(0);\n    paren_levels.push_back(0);\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx6hl1aoj: /tmp/tmpx6hl1aoj.cpp:85: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    long paren_level = 0;\n    bool in_paren = false;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            in_paren = true;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            in_paren = false;\n        } else if (c == ' ' && in_paren) {\n \
    \           paren_levels[paren_level - 1]++;\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpuhxgwq57: /tmp/tmpuhxgwq57.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long current_level = 0;\n  for (char c : paren_string) {\n    if (c == '(')\
    \ {\n      current_level++;\n    } else if (c == ')') {\n      current_level--;\n\
    \    }\n    paren_levels.push_back(current_level);\n  }\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpsnj83nz1: /tmp/tmpsnj83nz1.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_char;\n\
    \    long level = 0;\n    for (auto &c : paren_string) {\n        if (c == '(')\
    \ {\n            level++;\n            paren_char = \"(\";\n        } else if\
    \ (c == ')') {\n            level--;\n            paren_char = \")\";\n      \
    \  } else if (c == ' ') {\n            level = 0;\n        } else {\n        \
    \    paren_char = c; // Keep the original char\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpl89jev0t: /tmp/tmpl89jev0t.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    for (auto &c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level = paren_level + c;\n        } else if\
    \ (c == ')') {\n            paren_level = paren_level.substr(0, paren_level.size()\
    \ - 1);\n            paren_levels.push_back(std::stoi(paren_level));\n       \
    \     paren_level = c;\n        } else {\n            paren_level = paren_level\
    \ + c;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n        }\n        paren_levels.push_back(std::stoi(paren_level_string));\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpscm9xp0a: /tmp/tmpscm9xp0a.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    bool is_open = false;\n    bool is_closed = false;\n    long opening_paren_level\
    \ = 0;\n    long closing_paren_level = 0;\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            is_open = true;\n            opening_paren_level\
    \ = level;\n            level++;\n        } else if (c == ')') {\n           \
    \ is_closed = true;\n            closing_paren_level = level;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        } else if (is_closed)\
    \ {\n            level--;\n        }\n        if (level == opening_paren_level\
    \ && level == closing_paren_level) {\n            paren_levels.push_back(level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf9u_3lag: /tmp/tmpf9u_3lag.cpp:37: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            current_level\
    \ = current_level + \"(\";\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1) + \")\";\n        } else\
    \ {\n            current_level = current_level + c;\n        }\n        if (current_level.find(\"\
    (\") == std::string::npos) {\n            levels.push_back(std::stoi(current_level));\n\
    \            current_level.clear();\n        }\n    }\n    return levels;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp3p8ctwx5: /tmp/tmp3p8ctwx5.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.assign(paren_levels_temp.begin(),\
    \ paren_levels_temp.end());\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.assign(paren_levels_temp2.begin(),\
    \ paren_levels_temp2.end());\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.assign(paren_levels_temp3.begin(),\
    \ paren_levels_temp3.end());\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.assign(paren_levels_temp4.begin(),\
    \ paren_levels_temp4.end());\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.assign(paren_levels_temp5.begin(),\
    \ paren_levels_temp5.end());\n    std::vector<long> paren_levels_temp7;\n    paren_levels_temp7.assign(paren_levels_temp6.begin(),\
    \ paren_levels_temp6.end());\n    std::vector<long> paren_levels_temp8;\n    paren_levels_temp8.assign(paren_levels_temp7.begin(),\
    \ paren_levels_temp7.end());\n    std::vector<long> paren_levels_temp9;\n    paren_levels_temp9.assign(paren_levels_temp8.begin(),\
    \ paren_levels_temp8.end());\n    std::vector<long> paren_levels_temp10;\n   \
    \ paren_levels_temp10.assign(paren_levels_temp9.begin(), paren_levels_temp9.end());\n\
    \    std::vector<long> paren_levels_temp11;\n    paren_levels_temp11.assign(paren_levels_temp10.begin(),\
    \ paren_levels_temp10.end());\n    std::vector<long> paren_levels_temp12;\n  \
    \  paren_levels_temp12.assign(paren_levels_temp11.begin(), paren_levels_temp11.end());\n\
    \    std::vector<long> paren_levels_temp13;\n    paren_levels_temp13.assign(paren_levels_temp12.begin(),\
    \ paren_levels_temp12.end());\n    std::vector<long> paren_levels_temp14;\n  \
    \  paren_levels_temp14.assign(paren_levels_temp13.begin(), paren_levels_temp\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wj6z8ie.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp8wj6z8ie.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmp8wj6z8ie.cpp:38:78: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   38 |     paren_levels_temp14.assign(paren_levels_temp13.begin(),\
    \ paren_levels_temp\n      |                               ~                 \
    \                             ^\n      |                                     \
    \                                         )\n   39 | }\n      | ~            \
    \                                                                 \n/tmp/tmp8wj6z8ie.cpp:39:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   39 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113083
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels.size());\n\
    \    long max_level = 0;\n    for (long i = 0; i < paren_levels.size(); i++) {\n\
    \        long current_level = paren_levels_temp[i];\n        long current_paren_level\
    \ = 0;\n        for (long j = 0; j < paren_levels[i].size(); j++) {\n        \
    \    if (paren_levels[i][j] == '(') {\n                current_paren_level++;\n\
    \            } else if (paren_levels[i][j] == ')') {\n                current_paren_level--;\n\
    \            }\n            if (current_paren_level > max_level) {\n         \
    \       max_level = current_paren_level;\n            }\n        }\n        paren_levels_temp.push_back(max_level);\n\
    \    }\n    return paren_levels_temp;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgwzfgxb.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpxgwzfgxb.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpxgwzfgxb.cpp:17:46: error: request for member\
    \ \u2018size\u2019 in \u2018paren_levels.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   17 |      \
    \   for (long j = 0; j < paren_levels[i].size(); j++) {\n      |             \
    \                                 ^~~~\n/tmp/tmpxgwzfgxb.cpp:18:34: error: invalid\
    \ types \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\
    \ {aka long int}[long int]\u2019 for array subscript\n   18 |             if (paren_levels[i][j]\
    \ == '(') {\n      |                                  ^\n/tmp/tmpxgwzfgxb.cpp:20:41:\
    \ error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type {aka long int}[long int]\u2019 for array subscript\n \
    \  20 |             } else if (paren_levels[i][j] == ')') {\n      |         \
    \                                ^\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpk284u08m: /tmp/tmpk284u08m.cpp:85: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    long max_level = 0;\n  \
    \  long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n \
    \   bool is_opening = false;\n    bool is_closing = false;\n    bool is_opening_or_closing\
    \ = false;\n    bool is_opening_or_closed = false;\n    bool is_opening_or_opening\
    \ = false;\n    bool is_opening_or_opening_or_closing = false;\n    bool is_opening_or_opening_or_closed\
    \ = false;\n    bool is_opening_or_opening_or_opening = false;\n    bool is_opening_or_opening_or_opening_or_closing\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_closed = false;\n   \
    \ bool is_opening_or_opening_or_opening_or_opening = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_closing\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_closed = false;\n\
    \    bool is_opening_or_opening_or_opening_or_opening_or_opening = false;\n  \
    \  bool is_opening_or_opening_or_opening_or_opening_or_opening_or_closing = false;\n\
    \    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_closed = false;\n\
    \    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening =\
    \ false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closing\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closed\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closing\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closed\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closing\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_closed\
    \ = false;\n    bool is_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_opening_or_open\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kd_b7i1.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp2kd_b7i1.cpp:40:1: error: expected initializer before \u2018}\u2019\
    \ token\n   40 | }\n      | ^\n/tmp/tmp2kd_b7i1.cpp:40:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n        } else if (c == ')') {\n            is_open = false;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(level);\n \
    \           level++;\n        }\n    }\n    paren_levels.push_back(level);\n \
    \   return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg0u07xum: /tmp/tmpg0u07xum.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (is_open) {\n            paren_level += c;\n            if (paren_level\
    \ == \"(\") {\n                is_open = false;\n                level++;\n  \
    \          } else if (paren_level == \")\") {\n                is_open = false;\n\
    \                level--;\n            }\n        } else {\n            if (c\
    \ == '(') {\n                is_open = true;\n                level++;\n     \
    \       } else if (c == ')') {\n                is_open = true;\n            \
    \    level--;\n            }\n        }\n    }\n    levels.push_back(level);\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnpbssfzr: /tmp/tmpnpbssfzr.cpp:38: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_levels.push_back(paren_level);\n      paren_level++;\n    } else\
    \ if (c == ')') {\n      paren_level--;\n      assert(paren_level >= 0);\n   \
    \   paren_levels.push_back(paren_level);\n    }\n  }\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpkk8ngf0p: /tmp/tmpkk8ngf0p.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    bool is_open = false;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            is_open = true;\n        } else if (c == ')') {\n      \
    \      is_open = false;\n        } else if (is_open) {\n            paren_levels.push_back(level);\n\
    \            level++;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp5e249imt: /tmp/tmp5e249imt.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4wwxrtqf: /tmp/tmp4wwxrtqf.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpld92jj0d: /tmp/tmpld92jj0d.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    long max_level = 0;\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        if (paren_levels[i]\
    \ > max_level) {\n            max_level = paren_levels[i];\n        }\n    }\n\
    \    long max_level_temp = max_level;\n    for (long i = 0; i < paren_levels.size();\
    \ i++) {\n        if (paren_levels[i] > max_level) {\n            paren_levels_temp.push_back(paren_levels[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp2;\n    for (long i\
    \ = 0; i < paren_levels_temp.size(); i++) {\n        paren_levels_temp2.push_back(paren_levels_temp[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp3;\n    for (long i = 0; i < paren_levels_temp2.size();\
    \ i++) {\n        paren_levels_temp3.push_back(paren_levels_temp2[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp4;\n    for (long i = 0; i < paren_levels_temp3.size();\
    \ i++) {\n        paren_levels_temp4.push_back(paren_levels_temp3[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp5;\n    for (long i = 0; i < paren_levels_temp4.size();\
    \ i++) {\n        paren_levels_temp5.push_back(paren_levels_temp4[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp6;\n    for (long i = 0; i < paren_levels_temp5.size();\
    \ i++) {\n        paren_levels_temp6.push_back(paren_levels_temp5[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp7;\n    for (long i = 0; i < paren_levels_temp6.size();\
    \ i++) {\n        paren_levels_temp7.push_back(paren_levels_temp6[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp8;\n    for (long i = 0; i < paren_levels_temp7.size();\
    \ i++) {\n        paren_levels_temp8.push_back(paren_levels_temp7[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp9;\n    for (long i = 0; i < paren_levels_temp8.size();\
    \ i++) {\n        paren_levels_temp9.push_back(paren_levels_temp8[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp10;\n    for (long i = 0; i < paren_levels_temp9.size();\
    \ i++) {\n        paren_levels_temp10.push_back(paren_levels_temp9[i]);\n    }\n\
    \    std::vector<long> paren_levels_temp\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0acggue.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpd0acggue.cpp:10:76: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n      |                    \
    \                                                        ^~~~~\n/tmp/tmpd0acggue.cpp:62:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   62 | }\n      | ^\n\
    /tmp/tmpd0acggue.cpp:62:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_level_string;\n    std::string paren_level_char;\n    long\
    \ paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3\
    \ = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n\
    \    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long\
    \ paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10\
    \ = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12 =\
    \ 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n\
    \    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n  \
    \  long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n    long\
    \ paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21\
    \ = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23 =\
    \ 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n\
    \    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n  \
    \  long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n    long\
    \ paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32\
    \ = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34 =\
    \ 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n\
    \    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n  \
    \  long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n    long\
    \ paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43\
    \ = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45 =\
    \ 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n\
    \    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n  \
    \  long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n    long\
    \ paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54\
    \ = 0;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp1tpcmo6l: /tmp/tmp1tpcmo6l.cpp:70: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    long max_level = 0;\n  \
    \  long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            level++;\n        }\n        else if (c == ')') {\n   \
    \         is_closed = true;\n            level--;\n        }\n        else if\
    \ (is_open && is_closed) {\n            if (level > max_level) {\n           \
    \     max_level = level;\n            }\n        }\n        else if (is_open)\
    \ {\n            is_open = false;\n        }\n        else if (is_closed) {\n\
    \            is_closed = false;\n        }\n    }\n    if (max_level > 0) {\n\
    \        result.push_back(max_level);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpav22he4e: /tmp/tmpav22he4e.cpp:42: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long max_level = 0;\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    long\
    \ paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_count_max\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_max_index2\
    \ = 0;\n    long paren_level_count_max_index3 = 0;\n    long paren_level_count_max_index4\
    \ = 0;\n    long paren_level_count_max_index5 = 0;\n    long paren_level_count_max_index6\
    \ = 0;\n    long paren_level_count_max_index7 = 0;\n    long paren_level_count_max_index8\
    \ = 0;\n    long paren_level_count_max_index9 = 0;\n    long paren_level_count_max_index10\
    \ = 0;\n    long paren_level_count_max_index11 = 0;\n    long paren_level_count_max_index12\
    \ = 0;\n    long paren_level_count_max_index13 = 0;\n    long paren_level_count_max_index14\
    \ = 0;\n    long paren_level_count_max_index15 = 0;\n    long paren_level_count_max_index16\
    \ = 0;\n    long paren_level_count_max_index17 = 0;\n    long paren_level_count_max_index18\
    \ = 0;\n    long paren_level_count_max_index19 = 0;\n    long paren_level_count_max_index20\
    \ = 0;\n    long paren_level_count_max_index21 = 0;\n    long paren_level_count_max_index22\
    \ = 0;\n    long paren_level_count_max_index23 = 0;\n    long paren_level_count_max_index24\
    \ = 0;\n    long paren_level_count_max_index25 = 0;\n    long paren_level_count_max_index26\
    \ = 0;\n    long paren_level_count_max_index27 = 0;\n    long paren_level_count_max_index28\
    \ = 0;\n    long paren_level_count_max_index29 = 0;\n    long paren_level_count_max_index30\
    \ = 0;\n    long paren_level_count_max_index31 = 0;\n    long paren_level_count_max_index32\
    \ = 0;\n    long paren_level_count_max_index33 = 0;\n    long paren_level_count_max_index34\
    \ = 0;\n    long paren_level_count_max_index35 = 0;\n    long paren_level_count_max_index36\
    \ = 0;\n    long paren_level_count_max_index37 = 0;\n    long paren_level_count_max_index38\
    \ = 0;\n    long paren_level_count_max_index39 = 0;\n    long paren_level_count_max_index40\
    \ = 0;\n    long paren_level_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu9ccmsci.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpu9ccmsci.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpu9ccmsci.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_level++;\n        } else if (c == ')') {\n    \
    \        paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmprmykx6hi: /tmp/tmprmykx6hi.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long paren_level =\
    \ 0;\n    long paren_level_count = 0;\n    std::string paren_string_reversed =\
    \ paren_string;\n    paren_string_reversed.rbegin();\n    paren_string_reversed.rend();\n\
    \    for (char c : paren_string_reversed) {\n        if (c == '(') {\n       \
    \     paren_level++;\n            paren_level_count++;\n        } else if (c ==\
    \ ')') {\n            paren_level--;\n            paren_level_count--;\n     \
    \   }\n        if (paren_level == 0 && paren_level_count == 0) {\n           \
    \ paren_levels.push_back(paren_level);\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpw6gtq278: /tmp/tmpw6gtq278.cpp:31: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    std::vector<long> paren_levels_temp_temp;\n    std::vector<long>\
    \ paren_levels_temp_temp_temp;\n    std::vector<long> paren_levels_temp_temp_temp_temp;\n\
    \    long paren_levels_temp_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp\
    \ = 0;\n    long paren_levels_temp = 0;\n    long paren_levels = 0;\n    long\
    \ paren_levels_temp_temp = 0;\n    long paren_levels_temp_temp_temp = 0;\n   \
    \ long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n \
    \   long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphnchbu2e.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmphnchbu2e.cpp:15:10: error: conflicting declaration \u2018long int paren_levels_temp_temp_temp_temp\u2019\
    \n   15 |     long paren_levels_temp_temp_temp_temp = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphnchbu2e.cpp:13:23: note: previous declaration as \u2018std::vector<long\
    \ int> paren_levels_temp_temp_temp_temp\u2019\n   13 |     std::vector<long> paren_levels_temp_temp_temp_temp;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:16:10:\
    \ error: conflicting declaration \u2018long int paren_levels_temp_temp_temp\u2019\
    \n   16 |     long paren_levels_temp_temp_temp = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphnchbu2e.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> paren_levels_temp_temp_temp\u2019\n   12 |     std::vector<long> paren_levels_temp_temp_temp;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:17:10:\
    \ error: conflicting declaration \u2018long int paren_levels_temp_temp\u2019\n\
    \   17 |     long paren_levels_temp_temp = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphnchbu2e.cpp:11:23: note: previous declaration as \u2018std::vector<long\
    \ int> paren_levels_temp_temp\u2019\n   11 |     std::vector<long> paren_levels_temp_temp;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:18:10:\
    \ error: conflicting declaration \u2018long int paren_levels_temp\u2019\n   18\
    \ |     long paren_levels_temp = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:10:23:\
    \ note: previous declaration as \u2018std::vector<long int> paren_levels_temp\u2019\
    \n   10 |     std::vector<long> paren_levels_temp;\n      |                  \
    \     ^~~~~~~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:19:10: error: conflicting declaration\
    \ \u2018long int paren_levels\u2019\n   19 |     long paren_levels = 0;\n    \
    \  |          ^~~~~~~~~~~~\n/tmp/tmphnchbu2e.cpp:9:23: note: previous declaration\
    \ as \u2018std::vector<long int> paren_levels\u2019\n    9 |     std::vector<long>\
    \ paren_levels;\n      "
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level = paren_levels[paren_levels.size() - 1];\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n            paren_level =\
    \ paren_levels[paren_levels.size() - 1];\n        } else if (c == ' ') {\n   \
    \         paren_levels[paren_levels.size() - 1] += paren_level_count;\n      \
    \  }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpgo02tbns: /tmp/tmpgo02tbns.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            level++;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            level--;\n        } else if (c == ' ') {\n            if\
    \ (is_open && is_closed) {\n                paren_levels.push_back(level);\n \
    \           }\n            is_open = false;\n            is_closed = false;\n\
    \        } else {\n            is_open = false;\n            is_closed = false;\n\
    \        }\n    }\n    if (is_open && is_closed) {\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpyozcfn_t: /tmp/tmpyozcfn_t.cpp:39: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    for (auto it = paren_string.begin(); it !=\
    \ paren_string.end(); ++it) {\n        if (*it == '(') {\n            paren_level\
    \ = *it;\n        } else if (*it == ')') {\n            paren_level += *it;\n\
    \            paren_levels.push_back(std::stoll(paren_level));\n            paren_level.clear();\n\
    \        } else {\n            paren_level += *it;\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoll\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpoi57am02: /tmp/tmpoi57am02.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    long max_level = 0;\n  \
    \  long level = 0;\n    long pos = 0;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n\
    \    bool is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren_or_space = false;\n    bool is_closing_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren_or_space_or_space = false;\n    bool is_closing_paren_or_space_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space_or_space = false;\n\
    \    bool is_closing_curly_bracket_or_paren_or_space_or_space = false;\n    bool\
    \ is_opening_square_bracket_or_paren_or_space_or_space = false;\n    bool is_closing_square_bracket_or_paren_or_space_or_space\
    \ = false;\n    bool is_opening_paren_or_space_or_space_or_space = false;\n  \
    \  bool is_closing_paren_or_space_or_space_or_space = false;\n    bool is_opening_curly_bracket_or_paren_or_space_or_space_or_space\
    \ = false;\n    bool is_closing_curly_bracket_or_paren_or_space_or_space_or_space\
    \ = false;\n    bool is_opening_square_bracket_or_paren_or_space_or_space_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space_or_space_or_space\
    \ = false;\n    bool is_opening_paren_or_space_or_space_or_space_or_space = false;\n\
    \    bool is_closing_paren_or_space_or_space_or_space_or_space = false;\n    bool\
    \ is_opening_curly_bracket_or_paren_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpakv0el0i.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpakv0el0i.cpp:27:10: error: redeclaration of \u2018bool is_opening_curly_bracket_or_paren_or_space\u2019\
    \n   27 |     bool is_opening_curly_bracket_or_paren_or_space = false;\n     \
    \ |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:21:10:\
    \ note: \u2018bool is_opening_curly_bracket_or_paren_or_space\u2019 previously\
    \ declared here\n   21 |     bool is_opening_curly_bracket_or_paren_or_space =\
    \ false;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:28:10:\
    \ error: redeclaration of \u2018bool is_closing_curly_bracket_or_paren_or_space\u2019\
    \n   28 |     bool is_closing_curly_bracket_or_paren_or_space = false;\n     \
    \ |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:22:10:\
    \ note: \u2018bool is_closing_curly_bracket_or_paren_or_space\u2019 previously\
    \ declared here\n   22 |     bool is_closing_curly_bracket_or_paren_or_space =\
    \ false;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:29:10:\
    \ error: redeclaration of \u2018bool is_opening_square_bracket_or_paren_or_space\u2019\
    \n   29 |     bool is_opening_square_bracket_or_paren_or_space = false;\n    \
    \  |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:23:10:\
    \ note: \u2018bool is_opening_square_bracket_or_paren_or_space\u2019 previously\
    \ declared here\n   23 |     bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:30:10:\
    \ error: redeclaration of \u2018bool is_closing_square_bracket_or_paren_or_space\u2019\
    \n   30 |     bool is_closing_square_bracket_or_paren_or_space = false;\n    \
    \  |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:24:10:\
    \ note: \u2018bool is_closing_square_bracket_or_paren_or_space\u2019 previously\
    \ declared here\n   24 |     bool is_closing_square_bracket_or_paren_or_space\
    \ = false;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakv0el0i.cpp:46:1:\
    \ error"
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpnkhwnfhm: /tmp/tmpnkhwnfhm.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::string paren_char;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        paren_char = paren_string[i];\n        if (paren_char == '(') {\n   \
    \         level++;\n        } else if (paren_char == ')') {\n            level--;\n\
    \        }\n        result.push_back(level);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvgrnukl.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpuvgrnukl.cpp:14:24: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   14 |         if (paren_char == '(') {\n      |   \
    \          ~~~~~~~~~~ ^~ ~~~\n      |             |             |\n      |   \
    \          |             char\n      |             std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpuvgrnukl.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpuvgrnukl.cpp:14:27:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   14\
    \ |         if (paren_char == '(') {\n      |                           ^~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpuvgrnukl.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpuvgrnukl.cpp:14:27: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ "
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp6ziiba6o: /tmp/tmp6ziiba6o.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            current_level++;\n\
    \        } else if (paren_string[i] == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp92x5ursw: /tmp/tmp92x5ursw.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long level = 0;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_level++;\n        } else {\n\
    \            paren_level--;\n        }\n        if (paren_level == level) {\n\
    \            paren_levels[paren_levels.size() - 1]++;\n        } else {\n    \
    \        paren_levels.push_back(1);\n        }\n        level++;\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp1o52dqq1: /tmp/tmp1o52dqq1.cpp:36: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(paren_level);\n            paren_level++;\n \
    \       }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp1j1mgrn5: /tmp/tmp1j1mgrn5.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    long paren_level_count = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n            paren_level_count++;\n        } else if (c\
    \ == ')') {\n            is_closed = true;\n            paren_level_count--;\n\
    \        } else if (c == ' ' && is_open && !is_closed) {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level = 0;\n        } else if (c == ' ' && is_open && is_closed)\
    \ {\n            paren_level_count--;\n        } else if (c == ' ' && is_open\
    \ && !is_closed) {\n            paren_level_count++;\n        } else if (c ==\
    \ ' ' && is_open && is_closed) {\n            paren_level_count++;\n        }\
    \ else if (c == ' ') {\n            paren_level_count++;\n        } else if (c\
    \ == ')') {\n            paren_level_count--;\n        }\n        paren_level\
    \ += 1;\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmplraexpv9: /tmp/tmplraexpv9.cpp:44: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level;\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n          \
    \  paren_level = std::to_string(paren_level_count);\n        } else {\n      \
    \      paren_level += c;\n        }\n        if (paren_level_count == 0) {\n \
    \           paren_level_count = std::stoi(paren_level);\n            paren_levels.push_back(paren_level_count);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3wn1ooc_: /tmp/tmp3wn1ooc_.cpp:31: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level = paren_string.substr(0, i);\n            paren_level_count++;\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level_count--;\n\
    \            if (paren_level_count == 0) {\n                paren_levels.push_back(paren_level);\n\
    \            }\n        }\n    }\n    return paren_levels;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6lw_v70.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpl6lw_v70.cpp:20:51: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   20 |                \
    \ paren_levels.push_back(paren_level);\n      |                              \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6lw_v70.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpld92jj0d: /tmp/tmpld92jj0d.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (auto &i : paren_levels) {\n        long paren_level = 0;\n        for\
    \ (auto &j : i) {\n            if (j == '(') {\n                paren_level++;\n\
    \            } else if (j == ')') {\n                paren_level--;\n        \
    \    }\n        }\n        paren_levels_temp.push_back(paren_level);\n    }\n\
    \    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.reserve(paren_levels_temp.size());\n\
    \    for (auto &i : paren_levels_temp) {\n        if (i == 0) {\n            paren_levels_temp2.push_back(0);\n\
    \        } else {\n            paren_levels_temp2.push_back(i);\n        }\n \
    \   }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(paren_levels_temp2.size());\n\
    \    for (auto &i : paren_levels_temp2) {\n        paren_levels_temp3.push_back(i);\n\
    \    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.reserve(paren_levels_temp3.size());\n\
    \    for (auto &i : paren_levels_temp3) {\n        paren_levels_temp4.push_back(i);\n\
    \    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.reserve(paren_levels_temp4.size());\n\
    \    for (auto &i : paren_levels_temp4) {\n        paren_levels_temp5.push_back(i);\n\
    \    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.reserve(paren_levels_temp5.size());\n\
    \    for (auto &i : paren_levels_temp5) {\n        paren_levels_temp6.push_back(i);\n\
    \    }\n    std::vector<long> paren_levels_temp7;\n    paren_levels_temp7.reserve(paren_levels_temp6.size());\n\
    \    for (auto &i : paren_levels_temp6) {\n        paren_levels_temp7.push_back(i);\n\
    \    }\n    std::vector<long> paren_levels_temp8;\n    paren_levels_temp8.reserve(paren_levels_temp7.size());\n\
    \    for (auto &i : paren_levels_temp7) {\n        paren_levels_temp8.push_back(i);\n\
    \    }\n    std::vector<\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps03ead35.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmps03ead35.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmps03ead35.cpp:15:24: error: \u2018begin\u2019\
    \ was not declared in this scope\n   15 |         for (auto &j : i) {\n      |\
    \                        ^\n/tmp/tmps03ead35.cpp:15:24: note: suggested alternatives:\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmps03ead35.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   \u2018std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n\
    \      |     ^~~~~\nIn file included from /usr/include/c++/9/filesystem:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmps03ead35.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3:\
    \ note:   \u2018std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmps03ead35.cpp:15:24: error: \u2018\
    end\u2019 was not declared in this scope\n   15 |         for (auto &j : i) {\n\
    \      |                        ^\n/tmp/tmps03ead35.cpp:15:24: note: suggested\
    \ alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmps03ead35.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmps03ead35.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n/tmp/tmps03ead35.cpp:63:16: error: template argument\
    \ 1 is invalid\n   63 |     std::vector<\n      |                ^\n/tmp/tmps03ead35.cpp:63:16:\
    \ error: "
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    size_t paren_start = 0;\n    size_t paren_end\
    \ = 0;\n    size_t paren_end_paren = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_start = i;\n\
    \        } else if (paren_string[i] == ')') {\n            paren_end = i;\n  \
    \          paren_end_paren = i;\n        } else if (paren_string[i] == ' ') {\n\
    \            paren_level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          paren_level--;\n        }\n        if (paren_level == 0) {\n      \
    \      paren_levels.push_back(paren_end - paren_start);\n        }\n    }\n  \
    \  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp_1kosvi9: /tmp/tmp_1kosvi9.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    paren_levels.push_back(paren_levels.size());\n    long paren_level = 0;\n\
    \    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpar9yug9p.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpar9yug9p.cpp:67:1: error: expected initializer before \u2018}\u2019\
    \ token\n   67 | }\n      | ^\n/tmp/tmpar9yug9p.cpp:67:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_string = paren_string.substr(0, paren_string.find_first_of(\"\
    )\"));\n    std::string paren_level_string = paren_string;\n    std::string paren_level_char;\n\
    \    long paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2\
    \ = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n\
    \    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long\
    \ paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9\
    \ = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11 =\
    \ 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n\
    \    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n  \
    \  long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n    long\
    \ paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20\
    \ = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22 =\
    \ 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n\
    \    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n  \
    \  long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n    long\
    \ paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31\
    \ = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33 =\
    \ 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n\
    \    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n  \
    \  long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n    long\
    \ paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42\
    \ = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44 =\
    \ 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n\
    \    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n  \
    \  long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n    long\
    \ paren_level_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n \
    \   assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzcc_5co.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmphzcc_5co.cpp:11:17: error: declaration of \u2018std::string paren_string\u2019\
    \ shadows a parameter\n   11 |     std::string paren_string = paren_string.substr(0,\
    \ paren_string.find_first_of(\")\"));\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmphzcc_5co.cpp:66:1: error: expected initializer before \u2018}\u2019 token\n\
    \   66 | }\n      | ^\n/tmp/tmphzcc_5co.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_temp;\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_level\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr87qugxw.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpr87qugxw.cpp:10:5: error: \u2018paren_levels_t\u2019 was not declared\
    \ in this scope; did you mean \u2018paren_levels\u2019?\n   10 |     paren_levels_t\
    \ paren_levels_temp;\n      |     ^~~~~~~~~~~~~~\n      |     paren_levels\n/tmp/tmpr87qugxw.cpp:11:5:\
    \ error: \u2018paren_levels_temp\u2019 was not declared in this scope; did you\
    \ mean \u2018paren_levels\u2019?\n   11 |     paren_levels_temp.push_back(1);\n\
    \      |     ^~~~~~~~~~~~~~~~~\n      |     paren_levels\n/tmp/tmpr87qugxw.cpp:65:5:\
    \ error: \u2018paren_level\u2019 was not declared in this scope; did you mean\
    \ \u2018paren_levels\u2019?\n   65 |     paren_level\n      |     ^~~~~~~~~~~\n\
    \      |     paren_levels\n/tmp/tmpr87qugxw.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpoi57am02: /tmp/tmpoi57am02.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  std::string current_paren_string = paren_string;\n  long current_paren_level\
    \ = 0;\n  while (current_paren_string.size() > 0) {\n    long current_paren_level\
    \ = std::count(current_paren_string.begin(), current_paren_string.end(), ')');\n\
    \    current_paren_string = current_paren_string.substr(0, current_paren_string.size()\
    \ - current_paren_level);\n    paren_levels.push_back(current_paren_level);\n\
    \  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660113092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    std::string current_paren_string = \"\";\n   \
    \ std::string current_paren_group = \"\";\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            paren_level++;\n            current_paren_group\
    \ += c;\n        } else if (c == ')') {\n            paren_level--;\n        \
    \    current_paren_group += c;\n            current_paren_string = current_paren_group;\n\
    \            paren_levels.push_back(paren_level);\n            current_paren_group.clear();\n\
    \        } else {\n            current_paren_string += c;\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpakytmncy: /tmp/tmpakytmncy.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpyfnvbax5: /tmp/tmpyfnvbax5.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level;\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level_count++;\n            paren_level = paren_level\
    \ + c;\n        } else if (c == ')') {\n            paren_level_count--;\n   \
    \         paren_level = paren_level.substr(0, paren_level.size() - 1);\n     \
    \       paren_level_count = paren_level_count < 0 ? 0 : paren_level_count;\n \
    \           paren_levels.push_back(paren_level_count);\n            paren_level\
    \ = c;\n        } else {\n            paren_level = paren_level + c;\n       \
    \ }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpfjwx_lt2: /tmp/tmpfjwx_lt2.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    long paren_level =\
    \ 1;\n    for (auto &paren_levels_itr : paren_levels_temp) {\n        paren_levels_itr\
    \ = paren_level;\n        paren_level++;\n    }\n    std::vector<long> paren_levels_itr;\n\
    \    for (auto &paren_levels_itr : paren_levels_temp) {\n        paren_levels_itr.push_back(paren_levels_itr);\n\
    \    }\n    std::vector<long> paren_levels_itr_temp;\n    paren_levels_itr_temp.push_back(paren_levels_itr);\n\
    \    for (long paren_levels_itr_temp_index = 0; paren_levels_itr_temp_index <\
    \ paren_levels_temp.size(); paren_levels_itr_temp_index++) {\n        std::vector<long>\
    \ paren_levels_itr_temp;\n        paren_levels_itr_temp.push_back(paren_levels_itr_temp_index);\n\
    \        for (long paren_levels_itr_temp_index_2 = 0; paren_levels_itr_temp_index_2\
    \ < paren_levels_itr_temp[paren_levels_itr_temp_index].size(); paren_levels_itr_temp_index_2++)\
    \ {\n            paren_levels_itr_temp.push_back(paren_levels_itr_temp[paren_levels_itr_temp_index][paren_levels_itr_temp_index_2]);\n\
    \        }\n        paren_levels_itr_temp.push_back(paren_levels_itr_temp[paren_levels_itr_temp_index].size());\n\
    \        paren_levels_itr_temp_temp.push_back(paren_levels_itr_temp);\n    }\n\
    \    std::vector<long> paren_levels_itr_temp_temp;\n    paren_levels_itr_temp_temp.push_back(paren_levels_itr_temp);\n\
    \    for (long paren_levels_itr_temp_temp_index = 0; paren_levels_itr_temp_temp_index\
    \ < paren_levels_temp.size() - 1; paren_levels_itr_temp_temp_index++) {\n    \
    \    std::vector<long> paren_levels_itr_temp_temp;\n        paren_levels_itr_temp_temp.push_back(paren_levels_itr_temp_temp_index);\n\
    \        for (long paren_levels_itr_temp_temp_index_2 = 0; paren_levels_itr_temp_temp_index_2\
    \ < paren_levels_itr_temp_temp[paren_levels_itr_temp_temp_index].size() - 1; paren_levels_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtxe00ie.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpwtxe00ie.cpp:10:77: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\" \");\n      |                 \
    \                                                            ^~~~~\n/tmp/tmpwtxe00ie.cpp:20:26:\
    \ error: request for member \u2018push_back\u2019 in \u2018paren_levels_itr\u2019\
    , which is of non-class type \u2018long int\u2019\n   20 |         paren_levels_itr.push_back(paren_levels_itr);\n\
    \      |                          ^~~~~~~~~\n/tmp/tmpwtxe00ie.cpp:23:53: error:\
    \ no matching function for call to \u2018std::vector<long int>::push_back(std::vector<long\
    \ int>&)\u2019\n   23 |     paren_levels_itr_temp.push_back(paren_levels_itr);\n\
    \      |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwtxe00ie.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _A"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_level = \"\";\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            curr_paren_level += c;\n        } else if\
    \ (c == ')') {\n            curr_paren_level += c;\n            paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \            curr_paren_level = \"\";\n        } else {\n            curr_paren_level\
    \ += c;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    long current_level = 0;\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        }\n        else if (c == ')') {\n            is_open = false;\n     \
    \       level--;\n        }\n        else if (is_open) {\n            level++;\n\
    \        }\n        else {\n            result.push_back(level);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpbsiir20p: /tmp/tmpbsiir20p.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    long paren_level = 0;\n    bool is_open = false;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_level++;\n        } else if (c == ')') {\n      \
    \      is_open = false;\n            paren_level--;\n        } else if (is_open)\
    \ {\n            paren_levels.push_back(paren_level);\n        }\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmph9k2shia: /tmp/tmph9k2shia.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    for (auto c :\
    \ paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n          \
    \  if (paren_level_count == 0) {\n                paren_levels.push_back(paren_level);\n\
    \                paren_level_count = 0;\n            }\n        }\n        paren_level++;\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmps60yola2: /tmp/tmps60yola2.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_level++;\n        } else if (c == ')') {\n    \
    \        paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmprmykx6hi: /tmp/tmprmykx6hi.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4laxqzzj: /tmp/tmp4laxqzzj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112998
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        } else {\n     \
    \       level--;\n        }\n        paren_levels.push_back(level);\n    }\n \
    \   return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpka5ey2ti: /tmp/tmpka5ey2ti.cpp:31: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_t;\n\
    \    paren_levels_t.clear();\n    paren_levels_t.push_back(paren_levels);\n  \
    \  paren_levels_t paren_levels_t1;\n    paren_levels_t1.clear();\n    paren_levels_t1.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t2;\n    paren_levels_t2.clear();\n    paren_levels_t2.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t3;\n    paren_levels_t3.clear();\n    paren_levels_t3.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t4;\n    paren_levels_t4.clear();\n    paren_levels_t4.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t5;\n    paren_levels_t5.clear();\n    paren_levels_t5.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t6;\n    paren_levels_t6.clear();\n    paren_levels_t6.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t7;\n    paren_levels_t7.clear();\n    paren_levels_t7.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t8;\n    paren_levels_t8.clear();\n    paren_levels_t8.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t9;\n    paren_levels_t9.clear();\n    paren_levels_t9.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t10;\n    paren_levels_t10.clear();\n    paren_levels_t10.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t11;\n    paren_levels_t11.clear();\n    paren_levels_t11.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t12;\n    paren_levels_t12.clear();\n    paren_levels_t12.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t13;\n    paren_levels_t13.clear();\n    paren_levels_t13.push_back(paren_levels);\n\
    \    paren_levels_t paren_levels_t14;\n    paren_levels_t14.\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohdnf_vw.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpohdnf_vw.cpp:10:5: error: \u2018paren_levels_t\u2019 was not declared\
    \ in this scope; did you mean \u2018paren_levels\u2019?\n   10 |     paren_levels_t\
    \ paren_levels_t;\n      |     ^~~~~~~~~~~~~~\n      |     paren_levels\n/tmp/tmpohdnf_vw.cpp:13:19:\
    \ error: expected \u2018;\u2019 before \u2018paren_levels_t1\u2019\n   13 |  \
    \   paren_levels_t paren_levels_t1;\n      |                   ^~~~~~~~~~~~~~~~\n\
    \      |                   ;\n/tmp/tmpohdnf_vw.cpp:14:5: error: \u2018paren_levels_t1\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   14\
    \ |     paren_levels_t1.clear();\n      |     ^~~~~~~~~~~~~~~\n      |     paren_levels\n\
    /tmp/tmpohdnf_vw.cpp:16:19: error: expected \u2018;\u2019 before \u2018paren_levels_t2\u2019\
    \n   16 |     paren_levels_t paren_levels_t2;\n      |                   ^~~~~~~~~~~~~~~~\n\
    \      |                   ;\n/tmp/tmpohdnf_vw.cpp:17:5: error: \u2018paren_levels_t2\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   17\
    \ |     paren_levels_t2.clear();\n      |     ^~~~~~~~~~~~~~~\n      |     paren_levels\n\
    /tmp/tmpohdnf_vw.cpp:19:19: error: expected \u2018;\u2019 before \u2018paren_levels_t3\u2019\
    \n   19 |     paren_levels_t paren_levels_t3;\n      |                   ^~~~~~~~~~~~~~~~\n\
    \      |                   ;\n/tmp/tmpohdnf_vw.cpp:20:5: error: \u2018paren_levels_t3\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   20\
    \ |     paren_levels_t3.clear();\n      |     ^~~~~~~~~~~~~~~\n      |     paren_levels\n\
    /tmp/tmpohdnf_vw.cpp:22:19: error: expected \u2018;\u2019 before \u2018paren_levels_t4\u2019\
    \n   22 |     paren_levels_t paren_levels_t4;\n      |                   ^~~~~~~~~~~~~~~~\n\
    \      |                   ;\n/tmp/tmpohdnf_vw.cpp:23:5: error: \u2018paren_levels_t4\u2019\
    \ was not declared in this scope; did you mean \u2018paren_levels\u2019?\n   23\
    \ |     paren_levels_t4.clear();\n      |     ^~~~~~~~~~~~~~~\n      |     paren_levels\n\
    /tmp/tmpohdnf_vw.cpp:25:19: error: expected \u2018;\u2019 before \u2018paren_levels_t5\u2019\
    \n   25 |     paren_levels_t p"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n      assert(level >= 0);\n      paren_levels.push_back(level);\n\
    \    }\n  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp0evd49or: /tmp/tmp0evd49or.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4wwxrtqf: /tmp/tmp4wwxrtqf.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113085
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string current_paren_string = paren_string;\n    long current_paren_level\
    \ = 0;\n    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_opening_paren\
    \ = true;\n            current_paren_level++;\n        }\n        else if (c ==\
    \ ')') {\n            is_closing_paren = true;\n            current_paren_level--;\n\
    \        }\n        else if (c == ' ') {\n            if (is_opening_paren &&\
    \ is_closing_paren) {\n                paren_levels.push_back(current_paren_level);\n\
    \            }\n            current_paren_string = \"\";\n        }\n        else\
    \ if (c == '(' || c == '[' || c == '{') {\n            current_paren_string +=\
    \ c;\n        }\n        else if (c == ']' || c == '}') {\n            current_paren_string\
    \ += c;\n        }\n    }\n    if (current_paren_string.empty()) {\n        paren_levels.push_back(current_paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpk3opd09z: /tmp/tmpk3opd09z.cpp:44: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    long current_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level++;\n        } else if (c == ')') {\n            current_level--;\n\
    \        }\n        if (current_level > 0) {\n            paren_levels.push_back(current_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmppgu4gxoe: /tmp/tmppgu4gxoe.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    for (long i = 1; i < paren_levels.size(); i++) {\n        long paren_level\
    \ = paren_levels[i];\n        long paren_levels_temp_size = paren_levels_temp.size();\n\
    \        long paren_levels_temp_size = paren_levels_temp_size + 1;\n        if\
    \ (paren_levels_temp_size >= paren_level) {\n            paren_levels_temp[paren_levels_temp_size]\
    \ = paren_levels_temp[paren_levels_temp_size] + 1;\n        } else {\n       \
    \     paren_levels_temp.push_back(1);\n        }\n    }\n    return paren_levels_temp;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9haya85.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpo9haya85.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpo9haya85.cpp:16:14: error: redeclaration of\
    \ \u2018long int paren_levels_temp_size\u2019\n   16 |         long paren_levels_temp_size\
    \ = paren_levels_temp_size + 1;\n      |              ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo9haya85.cpp:15:14: note: \u2018long int paren_levels_temp_size\u2019\
    \ previously declared here\n   15 |         long paren_levels_temp_size = paren_levels_temp.size();\n\
    \      |              ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n   \
    \   level++;\n    } else if (c == ')') {\n      level--;\n    }\n    paren_levels.push_back(level);\n\
    \  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpmaldvpsw: /tmp/tmpmaldvpsw.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    long current_level_size = 1;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n            current_level = c;\n            current_level_size\
    \ = 1;\n        } else if (c == ')') {\n            is_closed = true;\n      \
    \      current_level = c;\n            current_level_size = 1;\n        } else\
    \ if (c == ' ') {\n            if (is_open) {\n                current_level +=\
    \ c;\n                current_level_size += 1;\n            } else if (is_closed)\
    \ {\n                levels.push_back(current_level_size);\n                current_level_size\
    \ = 1;\n            }\n        } else {\n            current_level += c;\n   \
    \         current_level_size += 1;\n        }\n    }\n    levels.push_back(current_level_size);\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpo9obbecb: /tmp/tmpo9obbecb.cpp:41: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    long paren_levels_sum = 0;\n    for (long i = 0; i\
    \ < paren_levels_temp.size(); i++) {\n        paren_levels_sum += paren_levels_temp[i];\n\
    \    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    long paren_levels_sum2 = 0;\n    for (long i = 0;\
    \ i < paren_levels_temp2.size(); i++) {\n        paren_levels_sum2 += paren_levels_temp2[i];\n\
    \    }\n    long paren_levels_sum3 = paren_levels_sum - paren_levels_sum2;\n \
    \   long paren_levels_sum4 = paren_levels_sum2 - paren_levels_sum3;\n    long\
    \ paren_levels_sum5 = paren_levels_sum3 - paren_levels_sum4;\n    long paren_levels_sum6\
    \ = paren_levels_sum4 - paren_levels_sum5;\n    long paren_levels_sum7 = paren_levels_sum5\
    \ - paren_levels_sum6;\n    long paren_levels_sum8 = paren_levels_sum6 - paren_levels_sum7;\n\
    \    long paren_levels_sum9 = paren_levels_sum7 - paren_levels_sum8;\n    long\
    \ paren_levels_sum10 = paren_levels_sum8 - paren_levels_sum9;\n    long paren_levels_sum11\
    \ = paren_levels_sum9 - paren_levels_sum10;\n    long paren_levels_sum12 = paren_levels_sum10\
    \ - paren_levels_sum11;\n    long paren_levels_sum13 = paren_levels_sum11 - paren_levels_sum12;\n\
    \    long paren_levels_sum14 = paren_levels_sum12 - paren_levels_sum13;\n    long\
    \ paren_levels_sum15 = paren_levels_sum13 - paren_levels_sum14;\n    long paren_levels_sum16\
    \ = paren_levels_sum14 - paren_levels_sum15;\n    long paren_levels_sum17 = paren_levels_sum15\
    \ - paren_levels_sum16;\n    long paren_levels_sum18 = paren_levels_sum16 - paren_levels_sum17;\n\
    \    long paren_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4j1nmqh.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpm4j1nmqh.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmpm4j1nmqh.cpp:40:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   40 | }\n      | ^\n/tmp/tmpm4j1nmqh.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    size_t paren_level_count = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level_count++;\n        } else if (paren_string[i] == ')')\
    \ {\n            paren_level_count--;\n        }\n        if (paren_level_count\
    \ == 0) {\n            paren_levels.push_back(paren_level);\n            paren_level_count\
    \ = 0;\n            paren_level++;\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpl6w0sn5b: /tmp/tmpl6w0sn5b.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    std::vector<long> paren_levels_temp_temp;\n    long\
    \ paren_levels_temp_temp_temp;\n    long paren_levels_temp_temp2;\n    long paren_levels_temp_temp3;\n\
    \    long paren_levels_temp_temp4;\n    long paren_levels_temp_temp5;\n    long\
    \ paren_levels_temp_temp6;\n    long paren_levels_temp_temp7;\n    long paren_levels_temp_temp8;\n\
    \    long paren_levels_temp_temp9;\n    long paren_levels_temp_temp10;\n    long\
    \ paren_levels_temp_temp11;\n    long paren_levels_temp_temp12;\n    long paren_levels_temp_temp13;\n\
    \    long paren_levels_temp_temp14;\n    long paren_levels_temp_temp15;\n    long\
    \ paren_levels_temp_temp16;\n    long paren_levels_temp_temp17;\n    long paren_levels_temp_temp18;\n\
    \    long paren_levels_temp_temp19;\n    long paren_levels_temp_temp20;\n    long\
    \ paren_levels_temp_temp21;\n    long paren_levels_temp_temp22;\n    long paren_levels_temp_temp23;\n\
    \    long paren_levels_temp_temp24;\n    long paren_levels_temp_temp25;\n    long\
    \ paren_levels_temp_temp26;\n    long paren_levels_temp_temp27;\n    long paren_levels_temp_temp28;\n\
    \    long paren_levels_temp_temp29;\n    long paren_levels_temp_temp30;\n    long\
    \ paren_levels_temp_temp31;\n    long paren_levels_temp_temp32;\n    long paren_levels_temp_temp33;\n\
    \    long paren_levels_temp_temp34;\n    long paren_levels_temp_temp35;\n    long\
    \ paren_levels_temp_temp36;\n    long paren_levels_temp_temp37;\n    long paren_levels_temp_temp38;\n\
    \    long paren_levels_temp_temp39;\n    long paren_levels_temp_temp40;\n    long\
    \ paren_levels_temp_temp41;\n    long paren_levels_temp_temp42;\n    long paren_levels_temp_temp43;\n\
    \    long paren_levels_temp_temp44;\n    long paren_levels_temp_temp45;\n    long\
    \ paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7oru54pm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp7oru54pm.cpp:58:1: error: expected initializer before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n/tmp/tmp7oru54pm.cpp:58:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string current_level;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            current_level\
    \ = current_level + \"(\";\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.length() - 1) + \")\";\n        } else\
    \ {\n            current_level = current_level + c;\n        }\n        if (current_level.length()\
    \ == 0) {\n            levels.push_back(std::stoi(current_level));\n         \
    \   current_level.clear();\n        }\n    }\n    return levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpj__9kho7: /tmp/tmpj__9kho7.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (auto &level : paren_levels) {\n        paren_levels_temp.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse;\n    paren_levels_temp_reverse.reserve(paren_levels_temp.size());\n\
    \    for (auto &level : paren_levels_temp) {\n        paren_levels_temp_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp;\n    paren_levels_temp_reverse_temp.reserve(paren_levels_temp_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse) {\n        paren_levels_temp_reverse_temp.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse;\n    paren_levels_temp_reverse_temp_reverse.reserve(paren_levels_temp_reverse_temp.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_temp) {\n        paren_levels_temp_reverse_temp_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse_temp;\n \
    \   paren_levels_temp_reverse_temp_reverse_temp.reserve(paren_levels_temp_reverse_temp_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_temp_reverse) {\n        paren_levels_temp_reverse_temp_reverse_temp.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse_temp_reverse;\n\
    \    paren_levels_temp_reverse_temp_reverse_temp_reverse.reserve(paren_levels_temp_reverse_temp_reverse_temp.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_temp_reverse_temp) {\n     \
    \   paren_levels_temp_reverse_temp_reverse_temp_reverse.push_back(level);\n  \
    \  }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse_temp_reverse_temp;\n\
    \    paren_levels_temp_reverse_temp_reverse_temp_reverse_temp.reserve(paren_levels_temp_reverse_temp_reverse_temp_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_temp_reverse_temp_reverse) {\n\
    \        paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n \
    \   assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ggv49f9.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp8ggv49f9.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n/tmp/tmp8ggv49f9.cpp:44:9: error: \u2018paren\u2019\
    \ was not declared in this scope\n   44 |         paren\n      |         ^~~~~\n\
    /tmp/tmp8ggv49f9.cpp:46:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   46 | int main() {\n      |            ^\n/tmp/tmp8ggv49f9.cpp:51:1:\
    \ error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmp8ggv49f9.cpp:8:65:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n      |                                                   \
    \              ^\n/tmp/tmp8ggv49f9.cpp:51:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   51 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n  for (auto &level : paren_levels)\
    \ {\n    level = level.substr(0, level.find_first_of('('));\n  }\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpias5df89.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpias5df89.cpp:10:74: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |   paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(')')).split(\")\");\n      |                    \
    \                                                      ^~~~~\n/tmp/tmpias5df89.cpp:12:19:\
    \ error: request for member \u2018substr\u2019 in \u2018level\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   12 |     level = level.substr(0,\
    \ level.find_first_of('('));\n      |                   ^~~~~~\n/tmp/tmpias5df89.cpp:12:35:\
    \ error: request for member \u2018find_first_of\u2019 in \u2018level\u2019, which\
    \ is of non-class type \u2018long int\u2019\n   12 |     level = level.substr(0,\
    \ level.find_first_of('('));\n      |                                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n            paren_levels.push_back(std::stoi(paren_level_string));\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyh6l8tbx: /tmp/tmpyh6l8tbx.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string curr_paren_string\
    \ = paren_string;\n    long curr_paren_level = 0;\n    bool is_first_paren = true;\n\
    \    while (curr_paren_string != \"\") {\n        if (curr_paren_string[0] ==\
    \ '(') {\n            curr_paren_level++;\n        } else if (curr_paren_string[0]\
    \ == ')') {\n            curr_paren_level--;\n        }\n        curr_paren_string\
    \ = curr_paren_string.substr(1);\n        if (curr_paren_level == 0) {\n     \
    \       paren_levels.push_back(curr_paren_level);\n        }\n        is_first_paren\
    \ = true;\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkvcbp2c2: /tmp/tmpkvcbp2c2.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  long paren_level_counter = 1;\n  long paren_level_counter_reset\
    \ = 1;\n  long paren_level_counter_reset_reset = 1;\n  for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      paren_levels.push_back(paren_level);\n\
    \      paren_level++;\n      paren_level_counter++;\n      paren_level_counter_reset++;\n\
    \      paren_level_counter_reset_reset++;\n    } else if (paren_string[i] == ')')\
    \ {\n      paren_level--;\n      paren_level_counter--;\n      paren_level_counter_reset--;\n\
    \      paren_level_counter_reset_reset--;\n      if (paren_level == 0) {\n   \
    \     paren_levels.push_back(paren_level);\n      }\n    }\n  }\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpowoede7k: /tmp/tmpowoede7k.cpp:36: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp433ca1p9: /tmp/tmp433ca1p9.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\")\")).split(\")\");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        paren_levels_temp.push_back(level.length());\n    }\n    std::vector<long>\
    \ paren_levels_temp2 = paren_levels_temp;\n    paren_levels_temp2.push_back(paren_levels_temp2.back());\n\
    \    long max_level = 0;\n    for (auto &level : paren_levels_temp2) {\n     \
    \   if (level > max_level) {\n            max_level = level;\n        }\n    }\n\
    \    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(max_level\
    \ + 1);\n    for (auto &level : paren_levels_temp2) {\n        if (level == max_level)\
    \ {\n            paren_levels_temp3.push_back(level);\n        } else {\n    \
    \        paren_levels_temp3.push_back(level + 1);\n        }\n    }\n    return\
    \ paren_levels_temp3;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1alssrf.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpk1alssrf.cpp:10:76: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\")\")).split(\")\");\n      |                  \
    \                                                          ^~~~~\n/tmp/tmpk1alssrf.cpp:14:43:\
    \ error: request for member \u2018length\u2019 in \u2018level\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   14 |         paren_levels_temp.push_back(level.length());\n\
    \      |                                           ^~~~~~\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_level;\n    for (size_t i = 0; i < paren_string.size();\
    \ ++i) {\n        if (paren_string[i] == '(') {\n            curr_paren_level\
    \ = paren_levels.size();\n            paren_levels.push_back(curr_paren_level);\n\
    \        } else if (paren_string[i] == ')') {\n            long curr_level = curr_paren_level;\n\
    \            while (curr_level > 0) {\n                --curr_level;\n       \
    \         paren_levels.push_back(curr_level);\n            }\n        }\n    }\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplk4ynak1.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmplk4ynak1.cpp:15:52: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   15 |             paren_levels.push_back(curr_paren_level);\n\
    \      |                                                    ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplk4ynak1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmplk4ynak1.cpp:17:31: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (paren_string[i] == ')') {\n            is_open = false;\n\
    \            paren_level--;\n        } else if (is_open) {\n            paren_level++;\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpj55vt9gq: /tmp/tmpj55vt9gq.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    std::string paren_level;\n\
    \    long paren_level_count = 0;\n    bool paren_level_found = false;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level = std::to_string(paren_level_count);\n            paren_level_count\
    \ = 0;\n            paren_level_found = true;\n        } else if (c == ')') {\n\
    \            paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n            paren_level_found = true;\n \
    \       } else if (c == ' ') {\n            if (paren_level_found) {\n       \
    \         paren_level += c;\n            }\n        } else {\n            assert(false);\n\
    \        }\n    }\n    if (paren_level_found) {\n        paren_level_count--;\n\
    \        paren_level = std::to_string(paren_level_count);\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == ' ') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == ')') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == ' ') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == ')') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == ' ') {\n         \
    \   if (paren_level_found) {\n                paren_level += c;\n            }\n\
    \        } else {\n            assert(false);\n        }\n    }\n    paren_level\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lyy6i7l.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp0lyy6i7l.cpp:106:16: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  106 |     paren_level\n      |                ^\n      |          \
    \      ;\n  107 | }\n      | ~               \n/tmp/tmp0lyy6i7l.cpp:107:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  107 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp16ik0pwk: /tmp/tmp16ik0pwk.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> levels;\n    std::string curr_paren_string\
    \ = paren_string;\n    long curr_level = 0;\n    bool is_first_paren = true;\n\
    \    bool is_last_paren = true;\n    bool is_last_level_of_parens = false;\n \
    \   long last_paren_level = 0;\n    long last_paren_level_of_parens = 0;\n   \
    \ long last_paren_level_of_parens_count = 0;\n    long last_paren_level_of_parens_count_of_parens\
    \ = 0;\n    long last_paren_level_of_parens_count_of_parens_count = 0;\n    long\
    \ paren_level_of_parens_count_of_parens = 0;\n    long paren_level_of_parens_count_of_parens_count\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens = 0;\n\
    \    long paren_level_of_parens_count_of_parens_count_of_parens_count = 0;\n \
    \   long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n    long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2gaaxznq.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp2gaaxznq.cpp:30:10: error: redeclaration of \u2018long int paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\u2019\
    \n   30 |     long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2gaaxznq.cpp:29:10: note: \u2018long int paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\u2019\
    \ previously declared here\n   29 |     long paren_level_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens_count_of_parens\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2gaaxznq.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmp2gaaxznq.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpoi57am02: /tmp/tmpoi57am02.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113004
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy = paren_levels;\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        long paren_level\
    \ = paren_levels[i];\n        long paren_level_count = 0;\n        long paren_level_count_copy\
    \ = 0;\n        for (long j = 0; j < paren_levels_copy.size(); j++) {\n      \
    \      if (paren_levels_copy[j] == paren_level) {\n                paren_level_count++;\n\
    \                paren_level_count_copy++;\n            }\n        }\n       \
    \ if (paren_level_count_copy == 0) {\n            paren_levels_copy.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels_copy;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgyrjj6f.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpbgyrjj6f.cpp:10:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   10 |     paren_levels = paren_string.split(\" \");\n      |             \
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1660113087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvzctdgob: /tmp/tmpvzctdgob.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660112999
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ');\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i <\
    \ paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long paren_levels_size = paren_levels_temp.size();\n    long paren_levels_max_size\
    \ = paren_levels_temp[paren_levels_size - 1];\n    long paren_levels_max_size_index\
    \ = 0;\n    for (long i = 0; i < paren_levels_size; i++) {\n        if (paren_levels_temp[i]\
    \ > paren_levels_max_size) {\n            paren_levels_max_size = paren_levels_temp[i];\n\
    \            paren_levels_max_size_index = i;\n        }\n    }\n    long paren_levels_max_size_index_temp\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp2 =\
    \ paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp3 = paren_levels_max_size_index;\n\
    \    long paren_levels_max_size_index_temp4 = paren_levels_max_size_index;\n \
    \   long paren_levels_max_size_index_temp5 = paren_levels_max_size_index;\n  \
    \  long paren_levels_max_size_index_temp6 = paren_levels_max_size_index;\n   \
    \ long paren_levels_max_size_index_temp7 = paren_levels_max_size_index;\n    long\
    \ paren_levels_max_size_index_temp8 = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp9\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp10\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp11\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp12\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp13\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp14\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp15\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp16\
    \ = paren_levels_max_size_index;\n    long paren_levels_max_size_index_temp17\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggeeen_n.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpggeeen_n.cpp:10:67: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   10 |     paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ');\n      |                               \
    \                                    ^~~~~\n/tmp/tmpggeeen_n.cpp:42:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   42 | }\n      | ^\n/tmp/tmpggeeen_n.cpp:42:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113087
