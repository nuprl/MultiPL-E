language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(),\
    \ sorted_numbers.end());\n    return sorted_numbers;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdal_0goz.cpp: In function 'int main()':\n/tmp/tmpdal_0goz.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdal_0goz.cpp:2:\n/tmp/tmpdal_0goz.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    std::string\
    \ temp;\n    for(int i = 0; i < numbers.size(); i++){\n        temp = numbers[i];\n\
    \        for(int j = i+1; j < numbers.size(); j++){\n            if(temp < numbers[j]){\n\
    \                temp = numbers[j];\n            }\n        }\n        ans +=\
    \ temp + \" \";\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0jf8dk1.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpd0jf8dk1.cpp:15:21: error: no match for 'operator<' (operand types are\
    \ 'std::string {aka std::basic_string<char>}' and 'char')\n             if(temp\
    \ < numbers[j]){\n                     ^\n/tmp/tmpd0jf8dk1.cpp:15:21: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpd0jf8dk1.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type>\
    \ std::operator<(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(<,\
    \ __less)\n ^\n/usr/include/c++/4.8.2/valarray:1181:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpd0jf8dk1.cpp:15:32: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'char'\n             if(temp < numbers[j]){\n\
    \                                ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpd0jf8dk1.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type>\
    \ std::operator<(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(<,\
    \ __less)\n ^\n/usr/include/c++/4.8.2/valarray:1181:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpd0jf8dk1.cpp:15:32: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \             if(temp < numbers[j]){\n                                ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpd0jf8dk1.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type>\
    \ s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    std::string\
    \ temp;\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]==\"zero\"\
    ){\n            ans += \"zero\";\n        }\n        else if(numbers[i]==\"one\"\
    ){\n            ans += \"one\";\n        }\n        else if(numbers[i]==\"two\"\
    ){\n            ans += \"two\";\n        }\n        else if(numbers[i]==\"three\"\
    ){\n            ans += \"three\";\n        }\n        else if(numbers[i]==\"four\"\
    ){\n            ans += \"four\";\n        }\n        else if(numbers[i]==\"five\"\
    ){\n            ans += \"five\";\n        }\n        else if(numbers[i]==\"six\"\
    ){\n            ans += \"six\";\n        }\n        else if(numbers[i]==\"seven\"\
    ){\n            ans += \"seven\";\n        }\n        else if(numbers[i]==\"eight\"\
    ){\n            ans += \"eight\";\n        }\n        else if(numbers[i]==\"nine\"\
    ){\n            ans += \"nine\";\n        }\n        else{\n            temp =\
    \ numbers[i];\n            for(int j=i+1;j<numbers.length();j++){\n          \
    \      if(numbers[j]==\"zero\"){\n                    ans += \"zero\";\n     \
    \           }\n                else if(numbers[j]==\"one\"){\n               \
    \     ans += \"one\";\n                }\n                else if(numbers[j]==\"\
    two\"){\n                    ans += \"two\";\n                }\n            \
    \    else if(numbers[j]==\"three\"){\n                    ans += \"three\";\n\
    \                }\n                else if(numbers[j]==\"four\"){\n         \
    \           ans += \"four\";\n                }\n                else if(numbers[j]==\"\
    five\"){\n                    ans += \"five\";\n                }\n          \
    \      else if(numbers[j]==\"six\"){\n                    ans += \"six\";\n  \
    \              }\n                else if(numbers[j]==\"seven\"){\n          \
    \          ans += \"seven\";\n                }\n                else if(numbers[j]==\"\
    eight\"){\n                    ans += \"eight\";\n                }\n        \
    \        else if(numbers[j]==\"nine\"){\n                    ans += \"nine\";\n\
    \                }\n                else{\n                    if(numbers[j]<temp){\n\
    \                        temp = numbers[j];\n                    }\n         \
    \       }\n            }\n            ans += temp;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkittktr3.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpkittktr3.cpp:13:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i]==\"zero\"){\n           \
    \             ^\n/tmp/tmpkittktr3.cpp:16:29: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         else if(numbers[i]==\"\
    one\"){\n                             ^\n/tmp/tmpkittktr3.cpp:19:29: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n        \
    \ else if(numbers[i]==\"two\"){\n                             ^\n/tmp/tmpkittktr3.cpp:22:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"three\"){\n                             ^\n/tmp/tmpkittktr3.cpp:25:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"four\"){\n                             ^\n/tmp/tmpkittktr3.cpp:28:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"five\"){\n                             ^\n/tmp/tmpkittktr3.cpp:31:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"six\"){\n                             ^\n/tmp/tmpkittktr3.cpp:34:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"seven\"){\n                             ^\n/tmp/tmpkittktr3.cpp:37:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"eight\"){\n                             ^\n/tmp/tmpkittktr3.cpp:40:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"nine\"){\n                             ^\n/tmp/tmpkittktr3.cpp:46:32:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \                 if(numbers[j]==\"zero\"){\n                                ^\n\
    /tmp/tmpkittktr3.cpp:49:37: error: ISO C++ forbids comparison b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    int count = 0;\n    for(int i = 0; i < numbers.size(); i++)\
    \ {\n        if(numbers[i] == \" \") {\n            count++;\n        } else {\n\
    \            temp = temp + numbers[i];\n        }\n        if(count == 3) {\n\
    \            ans = ans + temp + \" \";\n            count = 0;\n            temp\
    \ = \"\";\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3h14q_q.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpy3h14q_q.cpp:14:26: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i] == \" \") {\n           \
    \               ^\n/tmp/tmpy3h14q_q.cpp: In function 'int main()':\n/tmp/tmpy3h14q_q.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy3h14q_q.cpp:2:\n/tmp/tmpy3h14q_q.cpp:29:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    \n    std::string ans = \"\";\n\
    \    \n    for(int i = 0; i < numbers.size(); i++) {\n        \n        for(int\
    \ j = i; j < numbers.size(); j++) {\n            \n            if(numbers[j] <\
    \ numbers[i]) {\n                \n                std::string temp = numbers[j];\n\
    \                numbers[j] = numbers[i];\n                numbers[i] = temp;\n\
    \                \n            }\n        }\n    }\n    \n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        \n        ans += numbers[i];\n        \n \
    \   }\n    \n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqcnfcr7.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpkqcnfcr7.cpp:19:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[j];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpkqcnfcr7.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpkqcnfcr7.cpp:21:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[i]\
    \ = temp;\n                            ^\n/tmp/tmpkqcnfcr7.cpp: In function 'int\
    \ main()':\n/tmp/tmpkqcnfcr7.cpp:36:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkqcnfcr7.cpp:2:\n/tmp/tmpkqcnfcr7.cpp:37:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    int count = 0;\n    for(int i = 0; i < numbers.size(); i++){\n\
    \        if(numbers[i] == \" \"){\n            count++;\n        }\n        if(count\
    \ == 2){\n            temp = temp + numbers[i];\n            count = 0;\n    \
    \    }\n        else if(count == 1){\n            temp = temp + \" \" + numbers[i];\n\
    \            count = 0;\n        }\n        else if(numbers[i] == \"nine\"){\n\
    \            temp = temp + numbers[i];\n            count = 0;\n        }\n  \
    \      else if(numbers[i] == \"zero\"){\n            temp = temp + numbers[i];\n\
    \            count = 0;\n        }\n        else if(numbers[i] == \"one\"){\n\
    \            temp = temp + \" \" + numbers[i];\n            count = 0;\n     \
    \   }\n        else if(numbers[i] == \"two\"){\n            temp = temp + \" \"\
    \ + numbers[i];\n            count = 0;\n        }\n        else if(numbers[i]\
    \ == \"three\"){\n            temp = temp + \" \" + numbers[i];\n            count\
    \ = 0;\n        }\n        else if(numbers[i] == \"four\"){\n            temp\
    \ = temp + \" \" + numbers[i];\n            count = 0;\n        }\n        else\
    \ if(numbers[i] == \"five\"){\n            temp = temp + \" \" + numbers[i];\n\
    \            count = 0;\n        }\n        else if(numbers[i] == \"six\"){\n\
    \            temp = temp + \" \" + numbers[i];\n            count = 0;\n     \
    \   }\n        else if(numbers[i] == \"seven\"){\n            temp = temp + \"\
    \ \" + numbers[i];\n            count = 0;\n        }\n        else if(numbers[i]\
    \ == \"eight\"){\n            temp = temp + \" \" + numbers[i];\n            count\
    \ = 0;\n        }\n        else if(numbers[i] == \"nine\"){\n            temp\
    \ = temp + \" \" + numbers[i];\n            count = 0;\n        }\n    }\n   \
    \ for(int i = 0; i < temp.size(); i++){\n        ans = ans + temp[i];\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4bhys004.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp4bhys004.cpp:14:26: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i] == \" \"){\n            \
    \              ^\n/tmp/tmp4bhys004.cpp:25:31: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         else if(numbers[i] == \"\
    nine\"){\n                               ^\n/tmp/tmp4bhys004.cpp:29:31: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n    \
    \     else if(numbers[i] == \"zero\"){\n                               ^\n/tmp/tmp4bhys004.cpp:33:31:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i] == \"one\"){\n                               ^\n\
    /tmp/tmp4bhys004.cpp:37:31: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         else if(numbers[i] == \"two\"){\n     \
    \                          ^\n/tmp/tmp4bhys004.cpp:41:31: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n         else if(numbers[i]\
    \ == \"three\"){\n                               ^\n/tmp/tmp4bhys004.cpp:45:31:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i] == \"four\"){\n                               ^\n\
    /tmp/tmp4bhys004.cpp:49:31: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         else if(numbers[i] == \"five\"){\n    \
    \                           ^\n/tmp/tmp4bhys004.cpp:53:31: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n         else if(numbers[i]\
    \ == \"six\"){\n                               ^\n/tmp/tmp4bhys004.cpp:57:31:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i] == \"seven\"){\n                               ^\n\
    /tmp/tmp4bhys004.cpp:61:31: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         else if(numbers[i] == \"eight\"){\n   \
    \                            ^\n/tmp/tmp4bhys004.cpp:65:31: "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++){\n        for(int j = i+1; j < numbers.size();\
    \ j++){\n            if(numbers[i] > numbers[j]){\n                std::string\
    \ temp = numbers[i];\n                numbers[i] = numbers[j];\n             \
    \   numbers[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++){\n        ans += numbers[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bnvjo_s.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp8bnvjo_s.cpp:14:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[i];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp8bnvjo_s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmp8bnvjo_s.cpp:16:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[j]\
    \ = temp;\n                            ^\n/tmp/tmp8bnvjo_s.cpp: In function 'int\
    \ main()':\n/tmp/tmp8bnvjo_s.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8bnvjo_s.cpp:2:\n/tmp/tmp8bnvjo_s.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++){\n        for(int j = i + 1; j < numbers.size();\
    \ j++){\n            if(numbers[i] > numbers[j]){\n                std::string\
    \ temp = numbers[i];\n                numbers[i] = numbers[j];\n             \
    \   numbers[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++){\n        ans += numbers[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9iggtxjy.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp9iggtxjy.cpp:14:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[i];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp9iggtxjy.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmp9iggtxjy.cpp:16:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[j]\
    \ = temp;\n                            ^\n/tmp/tmp9iggtxjy.cpp: In function 'int\
    \ main()':\n/tmp/tmp9iggtxjy.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9iggtxjy.cpp:2:\n/tmp/tmp9iggtxjy.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] >= '0' && numbers[i]\
    \ <= '9') {\n            ans += numbers[i];\n        }\n    }\n    for(int i =\
    \ 0; i < numbers.size(); i++) {\n        if(numbers[i] >= '0' && numbers[i] <=\
    \ '9') {\n            ans += numbers[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8q3dd3hu.cpp: In function 'int main()':\n/tmp/tmp8q3dd3hu.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8q3dd3hu.cpp:2:\n/tmp/tmp8q3dd3hu.cpp:25:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string ans = \"\";\n    std::string num;\n    int count\
    \ = 0;\n    for(int i = 0; i < numbers.size(); i++) {\n        if(numbers[i] ==\
    \ ' ') {\n            ans += num;\n            count = 0;\n            num = \"\
    \";\n        } else {\n            num = num + numbers[i];\n            count++;\n\
    \        }\n    }\n    ans += num;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt10eox0_.cpp: In function 'int main()':\n/tmp/tmpt10eox0_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt10eox0_.cpp:2:\n/tmp/tmpt10eox0_.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Your code here\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    std::string temp3 = \"\";\n\
    \    std::string temp4 = \"\";\n    std::string temp5 = \"\";\n    std::string\
    \ temp6 = \"\";\n    std::string temp7 = \"\";\n    std::string temp8 = \"\";\n\
    \    std::string temp9 = \"\";\n    std::string temp10 = \"\";\n    std::string\
    \ temp11 = \"\";\n    std::string temp12 = \"\";\n    std::string temp13 = \"\"\
    ;\n    std::string temp14 = \"\";\n    std::string temp15 = \"\";\n    std::string\
    \ temp16 = \"\";\n    std::string temp17 = \"\";\n    std::string temp18 = \"\"\
    ;\n    std::string temp19 = \"\";\n    std::string temp20 = \"\";\n    std::string\
    \ temp21 = \"\";\n    std::string temp22 = \"\";\n    std::string temp23 = \"\"\
    ;\n    std::string temp24 = \"\";\n    std::string temp25 = \"\";\n    std::string\
    \ temp26 = \"\";\n    std::string temp27 = \"\";\n    std::string temp28 = \"\"\
    ;\n    std::string temp29 = \"\";\n    std::string temp30 = \"\";\n    std::string\
    \ temp31 = \"\";\n    std::string temp32 = \"\";\n    std::string temp33 = \"\"\
    ;\n    std::string temp34 = \"\";\n    std::string temp35 = \"\";\n    std::string\
    \ temp36 = \"\";\n    std::string temp37 = \"\";\n    std::string temp38 = \"\"\
    ;\n    std::string temp39 = \"\";\n    std::string temp40 = \"\";\n    std::string\
    \ temp41 = \"\";\n    std::string temp42 = \"\";\n    std::string temp43 = \"\"\
    ;\n    std::string temp44 = \"\";\n    std::string temp45 = \"\";\n    std::string\
    \ temp46 = \"\";\n    std::string temp47 = \"\";\n    std::string temp48 = \"\"\
    ;\n    std::string temp49 = \"\";\n    std::string temp50 = \"\";\n    std::string\
    \ temp51 = \"\";\n    std::string temp52 = \"\";\n    std::string temp53 = \"\"\
    ;\n    std::string temp54 = \"\";\n    std::string temp55 = \"\";\n    std::string\
    \ temp56 = \"\";\n    std::string temp57 = \"\";\n    std::string temp58 = \"\"\
    ;\n    std::string temp59 = \"\";\n    std::string temp60 = \"\";\n    std::string\
    \ temp61 = \"\";\n    std::string temp62 = \"\";\n    std::string temp63 = \"\"\
    ;\n    std::string temp64 = \"\";\n    std::string temp65 = \"\";\n    std::string\
    \ temp66 = \"\";\n    std::string temp67 = \"\";\n    std::string temp68 = \"\"\
    ;\n    std::string temp69 = \"\";\n    std::string temp70 = \"\";\n    std::string\
    \ temp71 = \"\";\n    std::string temp72 = \"\";\n    std::string temp73 = \"\"\
    ;\n    std::string temp74 = \"\";\n    std::string temp75 = \"\";\n    std::string\
    \ temp76 = \"\";\n    std::string temp77 = \"\";\n    std::string temp78 = \"\"\
    ;\n    std::string temp79 = \"\";\n    std::string temp80 = \"\";\n    std::string\
    \ temp81 = \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhi14mxv.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpqhi14mxv.cpp:92:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpqhi14mxv.cpp:92:1: error: expected ',' or ';' before '}' token\n\
    /tmp/tmpqhi14mxv.cpp: In function 'int main()':\n/tmp/tmpqhi14mxv.cpp:94:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_numbers;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqhi14mxv.cpp:2:\n/tmp/tmpqhi14mxv.cpp:95:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Your code here\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    std::string temp3 = \"\";\n\
    \    int count = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] == \" \") {\n            count++;\n            if (count == 3) {\n\
    \                ans += temp;\n                temp = \"\";\n                count\
    \ = 0;\n            } else if (count == 1) {\n                ans += temp2;\n\
    \                temp2 = \"\";\n                count = 0;\n            } else\
    \ if (count == 2) {\n                ans += temp3;\n                temp3 = \"\
    \";\n                count = 0;\n            }\n        } else {\n           \
    \ temp += numbers[i];\n        }\n    }\n    if (count != 0) {\n        ans +=\
    \ temp;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvtu0fzc.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpcvtu0fzc.cpp:16:27: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if (numbers[i] == \" \") {\n          \
    \                 ^\n/tmp/tmpcvtu0fzc.cpp: In function 'int main()':\n/tmp/tmpcvtu0fzc.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcvtu0fzc.cpp:2:\n/tmp/tmpcvtu0fzc.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n   \
    \ std::string temp86;\n    std::string temp87;\n    std::string temp88;\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6i9rsz9.cpp: In function 'int main()':\n/tmp/tmph6i9rsz9.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph6i9rsz9.cpp:2:\n/tmp/tmph6i9rsz9.cpp:101:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == \"zero\") {\n  \
    \          ans += \"zero\";\n        } else if(numbers[i] == \"one\") {\n    \
    \        ans += \"one\";\n        } else if(numbers[i] == \"two\") {\n       \
    \     ans += \"two\";\n        } else if(numbers[i] == \"three\") {\n        \
    \    ans += \"three\";\n        } else if(numbers[i] == \"four\") {\n        \
    \    ans += \"four\";\n        } else if(numbers[i] == \"five\") {\n         \
    \   ans += \"five\";\n        } else if(numbers[i] == \"six\") {\n           \
    \ ans += \"six\";\n        } else if(numbers[i] == \"seven\") {\n            ans\
    \ += \"seven\";\n        } else if(numbers[i] == \"eight\") {\n            ans\
    \ += \"eight\";\n        } else if(numbers[i] == \"nine\") {\n            ans\
    \ += \"nine\";\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuv5m_t0.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpkuv5m_t0.cpp:12:26: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i] == \"zero\") {\n        \
    \                  ^\n/tmp/tmpkuv5m_t0.cpp:14:33: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         } else if(numbers[i] ==\
    \ \"one\") {\n                                 ^\n/tmp/tmpkuv5m_t0.cpp:16:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"two\") {\n                               \
    \  ^\n/tmp/tmpkuv5m_t0.cpp:18:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         } else if(numbers[i] == \"three\") {\n\
    \                                 ^\n/tmp/tmpkuv5m_t0.cpp:20:33: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n         } else\
    \ if(numbers[i] == \"four\") {\n                                 ^\n/tmp/tmpkuv5m_t0.cpp:22:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"five\") {\n                              \
    \   ^\n/tmp/tmpkuv5m_t0.cpp:24:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         } else if(numbers[i] == \"six\") {\n  \
    \                               ^\n/tmp/tmpkuv5m_t0.cpp:26:33: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n         } else\
    \ if(numbers[i] == \"seven\") {\n                                 ^\n/tmp/tmpkuv5m_t0.cpp:28:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"eight\") {\n                             \
    \    ^\n/tmp/tmpkuv5m_t0.cpp:30:33: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n         } else if(numbers[i] == \"nine\"\
    ) {\n                                 ^\n/tmp/tmpkuv5m_t0.cpp: In function 'int\
    \ main()':\n/tmp/tmpkuv5m_t0.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    int count = 0;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] == \" \") {\n    \
    \        ans += temp;\n            temp = \"\";\n            count++;\n      \
    \  } else {\n            temp += numbers[i];\n        }\n    }\n    ans += temp;\n\
    \    ans = ans.substr(0, ans.size() - 1);\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n            ans = ans.substr(0, i) +\
    \ ans.substr(i + 1, ans.size());\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (ans[i] == \" \") {\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibf6wxqg.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpibf6wxqg.cpp:15:27: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if (numbers[i] == \" \") {\n          \
    \                 ^\n/tmp/tmpibf6wxqg.cpp:26:23: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         if (ans[i] == \" \") {\n\
    \                       ^\n/tmp/tmpibf6wxqg.cpp:31:23: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n         if (ans[i] ==\
    \ \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:36:23: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n         if (ans[i]\
    \ == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:41:23: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n        \
    \ if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:46:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:51:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:56:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:61:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:66:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:71:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:76:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         if (ans[i] == \" \") {\n                       ^\n/tmp/tmpibf6wxqg.cpp:81:23:\
    \ error: ISO C++ fo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    std::string temp3 = \"\";\n\
    \    std::string temp4 = \"\";\n    std::string temp5 = \"\";\n    std::string\
    \ temp6 = \"\";\n    std::string temp7 = \"\";\n    std::string temp8 = \"\";\n\
    \    std::string temp9 = \"\";\n    std::string temp10 = \"\";\n    std::string\
    \ temp11 = \"\";\n    std::string temp12 = \"\";\n    std::string temp13 = \"\"\
    ;\n    std::string temp14 = \"\";\n    std::string temp15 = \"\";\n    std::string\
    \ temp16 = \"\";\n    std::string temp17 = \"\";\n    std::string temp18 = \"\"\
    ;\n    std::string temp19 = \"\";\n    std::string temp20 = \"\";\n    std::string\
    \ temp21 = \"\";\n    std::string temp22 = \"\";\n    std::string temp23 = \"\"\
    ;\n    std::string temp24 = \"\";\n    std::string temp25 = \"\";\n    std::string\
    \ temp26 = \"\";\n    std::string temp27 = \"\";\n    std::string temp28 = \"\"\
    ;\n    std::string temp29 = \"\";\n    std::string temp30 = \"\";\n    std::string\
    \ temp31 = \"\";\n    std::string temp32 = \"\";\n    std::string temp33 = \"\"\
    ;\n    std::string temp34 = \"\";\n    std::string temp35 = \"\";\n    std::string\
    \ temp36 = \"\";\n    std::string temp37 = \"\";\n    std::string temp38 = \"\"\
    ;\n    std::string temp39 = \"\";\n    std::string temp40 = \"\";\n    std::string\
    \ temp41 = \"\";\n    std::string temp42 = \"\";\n    std::string temp43 = \"\"\
    ;\n    std::string temp44 = \"\";\n    std::string temp45 = \"\";\n    std::string\
    \ temp46 = \"\";\n    std::string temp47 = \"\";\n    std::string temp48 = \"\"\
    ;\n    std::string temp49 = \"\";\n    std::string temp50 = \"\";\n    std::string\
    \ temp51 = \"\";\n    std::string temp52 = \"\";\n    std::string temp53 = \"\"\
    ;\n    std::string temp54 = \"\";\n    std::string temp55 = \"\";\n    std::string\
    \ temp56 = \"\";\n    std::string temp57 = \"\";\n    std::string temp58 = \"\"\
    ;\n    std::string temp59 = \"\";\n    std::string temp60 = \"\";\n    std::string\
    \ temp61 = \"\";\n    std::string temp62 = \"\";\n    std::string temp63 = \"\"\
    ;\n    std::string temp64 = \"\";\n    std::string temp65 = \"\";\n    std::string\
    \ temp66 = \"\";\n    std::string temp67 = \"\";\n    std::string temp68 = \"\"\
    ;\n    std::string temp69 = \"\";\n    std::string temp70 = \"\";\n    std::string\
    \ temp71 = \"\";\n    std::string temp72 = \"\";\n    std::string temp73 = \"\"\
    ;\n    std::string temp74 = \"\";\n    std::string temp75 = \"\";\n    std::string\
    \ temp76 = \"\";\n    std::string temp77 = \"\";\n    std::string temp78 = \"\"\
    ;\n    std::string temp79 = \"\";\n    std::string temp80 = \"\";\n    std::string\
    \ temp81 = \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylo_jggs.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpylo_jggs.cpp:92:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpylo_jggs.cpp:92:1: error: expected ',' or ';' before '}' token\n\
    /tmp/tmpylo_jggs.cpp: In function 'int main()':\n/tmp/tmpylo_jggs.cpp:94:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_numbers;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylo_jggs.cpp:2:\n/tmp/tmpylo_jggs.cpp:95:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gd_i3t9.cpp: In function 'int main()':\n/tmp/tmp4gd_i3t9.cpp:266:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4gd_i3t9.cpp:2:\n/tmp/tmp4gd_i3t9.cpp:267:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n   \
    \ std::string temp86;\n    std::string temp87;\n    std::string temp88;\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6i9rsz9.cpp: In function 'int main()':\n/tmp/tmph6i9rsz9.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph6i9rsz9.cpp:2:\n/tmp/tmph6i9rsz9.cpp:101:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        for(int j = i + 1; j < numbers.size();\
    \ j++) {\n            if(numbers[i] > numbers[j]) {\n                std::string\
    \ temp = numbers[i];\n                numbers[i] = numbers[j];\n             \
    \   numbers[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        ans += numbers[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5tprcmx.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpn5tprcmx.cpp:14:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[i];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpn5tprcmx.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpn5tprcmx.cpp:16:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[j]\
    \ = temp;\n                            ^\n/tmp/tmpn5tprcmx.cpp: In function 'int\
    \ main()':\n/tmp/tmpn5tprcmx.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn5tprcmx.cpp:2:\n/tmp/tmpn5tprcmx.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::string num;\n    std::istringstream\
    \ iss(numbers);\n    while (std::getline(iss, num, ' ')) {\n        nums.push_back(std::move(num));\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (auto &num : nums) {\n        result += num + \" \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfl4wuruq.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpfl4wuruq.cpp:13:24: error: 'move' is not a member of 'std'\n         nums.push_back(std::move(num));\n\
    \                        ^\n/tmp/tmpfl4wuruq.cpp:17:16: error: ISO C++ forbids\
    \ declaration of 'num' with no type [-fpermissive]\n     for (auto &num : nums)\
    \ {\n                ^\n/tmp/tmpfl4wuruq.cpp:17:22: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &num : nums) {\n             \
    \         ^\n/tmp/tmpfl4wuruq.cpp: In function 'int main()':\n/tmp/tmpfl4wuruq.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfl4wuruq.cpp:2:\n/tmp/tmpfl4wuruq.cpp:24:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
