name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["    long count = 0;\n    long start = 1;\n    long end = 1;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      end = end * 10;\n        n /= 10;\n    }\n    return count;", "    long\
    \ count = 0;\n    long mod = pow(10, n);\n    for (long i = 1; i <= n; i++) {\n\
    \        if (i % mod == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long remain = n;\n    while (remain > 0)\
    \ {\n        if (remain % 10 == 1) {\n            count++;\n        }\n      \
    \  remain /= 10;\n    }\n    return count;", "    long count = 0;\n    while (n\
    \ > 0) {\n        if (n % 10 == 1) count++;\n        n /= 10;\n    }\n    return\
    \ count;", "    long count = 0;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ count++;\n        n /= 10;\n    }\n    return count;", "    long count = 0;\n\
    \    while (n > 0) {\n        long remainder = n % 10;\n        if (remainder\
    \ == 1)\n            count++;\n        n /= 10;\n    }\n    return count;", " \
    \   long count = 0;\n    long remain = n;\n    while (remain > 0) {\n        if\
    \ (remain % 10 == 1) {\n            count++;\n        }\n        remain /= 10;\n\
    \    }\n    return count;", "    long count = 0;\n    long limit = n;\n    while\
    \ (limit > 1) {\n        if (limit % 10 == 1) {\n            count++;\n      \
    \  }\n        limit /= 10;\n    }\n    return count;", "    long count = 0;\n\
    \    long start = 1, end = n;\n    while (start <= end) {\n        if (n % 10\
    \ == 1) {\n            count++;\n        }\n        n /= 10;\n        start++;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \            end = end * 10;\n        }\n        n /= 10;\n    }\n    if (n ==\
    \ 0) {\n        count++;\n        end = end * 10;\n    }\n    return count;",
  "    long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n != 0)\
    \ {\n        if (n & 1) {\n            count++;\n        }\n        n >>= 1;\n\
    \        if (n & 1) {\n            end = end * 10;\n        }\n        n >>= 1;\n\
    \        if (n & 1) {\n            start = start * 10;\n        }\n        n >>=\
    \ 1;\n    }\n    return count;", "    long count = 0;\n    long cur = 1;\n   \
    \ while (cur <= n) {\n        if (cur % 10 == 1) {\n            count++;\n   \
    \     }\n        cur *= 10;\n    }\n    return count;", "    long count = 0;\n\
    \    long curr = n;\n    while (curr != 0) {\n        if (curr % 10 == 1) {\n\
    \            count++;\n        }\n        curr /= 10;\n    }\n    return count;",
  "    long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n > 0)\
    \ {\n        if (n % 10 == 1) {\n            count++;\n            end = end *\
    \ 10;\n        } else {\n            start = start * 10;\n        }\n        n\
    \ = n / 10;\n    }\n    return count;", "    long count = 0;\n    long i = 1;\n\
    \    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n    \
    \    }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        if (limit % 10 == 1) {\n      \
    \      count++;\n        }\n        limit /= 10;\n    }\n    return count;", " \
    \   long count = 0;\n    long curr = n;\n    while (curr != 0) {\n        curr--;\n\
    \        if (curr == 1)\n            count++;\n    }\n    return count;", "  \
    \  long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n != 0)\
    \ {\n        if (n / 10 == 1) {\n            count++;\n        }\n        end\
    \ = end * 10;\n        n /= 10;\n    }\n    return count;", "    long count =\
    \ 0;\n    long i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n    \
    \        count++;\n        }\n        i++;\n    }\n    return count;", "    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    while (n != 0) {\n \
    \       if (n % 10 == 1) {\n            count++;\n            end = n * 10 + end;\n\
    \        } else {\n            start = n * 10 + start;\n        }\n        n /=\
    \ 10;\n    }\n    return count;"]
stop_tokens:
- "\n}"
