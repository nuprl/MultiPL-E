language: cpp
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        if(g > 3.0) {\n            letter_grades.push_back(\"B+\");\n       \
    \ } else if(g > 2.7) {\n            letter_grades.push_back(\"B\");\n        }\
    \ else if(g > 2.3) {\n            letter_grades.push_back(\"B-\");\n        }\
    \ else if(g > 2.0) {\n            letter_grades.push_back(\"C+\");\n        }\
    \ else if(g > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else\
    \ if(g > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else\
    \ if(g > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else\
    \ if(g > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(g\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpk_iob_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpgpk_iob_.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmpgpk_iob_.cpp: In function 'int\
    \ main()':\n/tmp/tmpgpk_iob_.cpp:53:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgpk_iob_.cpp:2:\n/tmp/tmpgpk_iob_.cpp:54:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpgpk_iob_.cpp:54:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpgpk_iob_.cpp:54:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpgpk_iob_.cpp:54:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgpk_iob_.cpp:54:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgpk_iob_.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(int i = 0; i < grades.size();\
    \ i++) {\n        if(grades[i] >= 4.0) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if(grades[i] >= 3.7) {\n            letter_grades.push_back(std::string(\"\
    A\"));\n        } else if(grades[i] >= 3.3) {\n            letter_grades.push_back(std::string(\"\
    A-\"));\n        } else if(grades[i] >= 3.0) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if(grades[i] >= 2.7) {\n            letter_grades.push_back(std::string(\"\
    B\"));\n        } else if(grades[i] >= 2.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grades[i] >= 2.0) {\n            letter_grades.push_back(std::string(\"\
    C+\"));\n        } else if(grades[i] >= 1.7) {\n            letter_grades.push_back(std::string(\"\
    C\"));\n        } else if(grades[i] >= 1.3) {\n            letter_grades.push_back(std::string(\"\
    C-\"));\n        } else if(grades[i] >= 1.0) {\n            letter_grades.push_back(std::string(\"\
    D+\"));\n        } else if(grades[i] >= 0.7) {\n            letter_grades.push_back(std::string(\"\
    D\"));\n        } else if(grades[i] >= 0.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else {\n            letter_grades.push_back(std::string(\"\
    E\"));\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjdqb790.cpp: In function 'int main()':\n/tmp/tmpjjdqb790.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjdqb790.cpp:2:\n/tmp/tmpjjdqb790.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpjjdqb790.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpjjdqb790.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjjdqb790.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjjdqb790.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjjdqb790.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    // Write your code here\n    std::vector<std::string> grades_letter;\n\
    \    for(float grade : grades) {\n        if(grade >= 3.0) {\n            grades_letter.push_back(std::string(\"\
    A+\"));\n        } else if(grade >= 2.7) {\n            grades_letter.push_back(std::string(\"\
    B+\"));\n        } else if(grade >= 2.3) {\n            grades_letter.push_back(std::string(\"\
    B-\"));\n        } else if(grade >= 2.0) {\n            grades_letter.push_back(std::string(\"\
    C+\"));\n        } else if(grade >= 1.7) {\n            grades_letter.push_back(std::string(\"\
    C\"));\n        } else if(grade >= 1.3) {\n            grades_letter.push_back(std::string(\"\
    C-\"));\n        } else if(grade >= 1.0) {\n            grades_letter.push_back(std::string(\"\
    D+\"));\n        } else if(grade >= 0.7) {\n            grades_letter.push_back(std::string(\"\
    D\"));\n        } else if(grade >= 0.0) {\n            grades_letter.push_back(std::string(\"\
    D-\"));\n        } else {\n            grades_letter.push_back(std::string(\"\
    E\"));\n        }\n    }\n    return grades_letter;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyts00716.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpyts00716.cpp:28:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ grade : grades) {\n                       ^\n/tmp/tmpyts00716.cpp: In function\
    \ 'int main()':\n/tmp/tmpyts00716.cpp:54:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = numerical_letter_grade;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyts00716.cpp:2:\n/tmp/tmpyts00716.cpp:55:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpyts00716.cpp:55:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpyts00716.cpp:55:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyts00716.cpp:55:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyts00716.cpp:55:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyts00716.cpp:2:\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        if(g > 3.0 && g < 3.7) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if(g > 3.7 && g < 3.3) {\n            letter_grades.push_back(std::string(\"\
    A\"));\n        } else if(g > 3.3 && g < 3.0) {\n            letter_grades.push_back(std::string(\"\
    A-\"));\n        } else if(g > 3.0 && g < 2.7) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if(g > 2.7 && g < 2.3) {\n            letter_grades.push_back(std::string(\"\
    B\"));\n        } else if(g > 2.3 && g < 2.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grades.push_back(std::string(\"\
    C+\"));\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grades.push_back(std::string(\"\
    C\"));\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grades.push_back(std::string(\"\
    C-\"));\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grades.push_back(std::string(\"\
    D+\"));\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grades.push_back(std::string(\"\
    D\"));\n        } else {\n            letter_grades.push_back(std::string(\"E\"\
    ));\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpudh1xrtn.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpudh1xrtn.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmpudh1xrtn.cpp: In function 'int\
    \ main()':\n/tmp/tmpudh1xrtn.cpp:57:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpudh1xrtn.cpp:2:\n/tmp/tmpudh1xrtn.cpp:58:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpudh1xrtn.cpp:58:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpudh1xrtn.cpp:58:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpudh1xrtn.cpp:58:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpudh1xrtn.cpp:58:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpudh1xrtn.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        if(g > 3.0) {\n            letter_grades.push_back(\"B+\");\n       \
    \ }\n        else if(g > 2.7) {\n            letter_grades.push_back(\"B\");\n\
    \        }\n        else if(g > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(g > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(g > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9nvy8y0a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmp9nvy8y0a.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmp9nvy8y0a.cpp: In function 'int\
    \ main()':\n/tmp/tmp9nvy8y0a.cpp:62:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9nvy8y0a.cpp:2:\n/tmp/tmp9nvy8y0a.cpp:63:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp9nvy8y0a.cpp:63:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp9nvy8y0a.cpp:63:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9nvy8y0a.cpp:63:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9nvy8y0a.cpp:63:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9nvy8y0a.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    for (float grade : grades) {\n        float difference\
    \ = grade - average;\n        if (difference < 0) {\n            difference =\
    \ difference * -1;\n        }\n        if (difference > 2) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (difference > 1) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (difference > 0.5) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (difference > 0.2) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (difference > 0.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (difference > -0.2) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (difference > -0.5) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (difference > -0.8) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (difference > -1.0) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -1.2) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (difference > -1.5) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (difference > -1.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -2.0) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -2.2) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -2.4) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -2.6) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -2.8) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -3.2) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -3.4) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -3.6) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -3.8) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -4.0) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -4.2) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -4.4) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -4.6) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -4.8) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -5.0) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (difference > -5.2) {\n            letter_grades.push_back(\"\
    A\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxavuar0_.cpp:94:37: warning: missing terminating \" character [enabled\
    \ by default]\n             letter_grades.push_back(\"A\n                    \
    \                 ^\n/tmp/tmpxavuar0_.cpp:94:13: error: missing terminating \"\
    \ character\n             letter_grades.push_back(\"A\n             ^\n/tmp/tmpxavuar0_.cpp:\
    \ In function 'std::vector<std::basic_string<char> > numerical_letter_grade(std::vector<float>)':\n\
    /tmp/tmpxavuar0_.cpp:28:24: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float grade : grades) {\n                        ^\n/tmp/tmpxavuar0_.cpp:32:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpxavuar0_.cpp:95:1: error:\
    \ expected primary-expression before '}' token\n }\n ^\n/tmp/tmpxavuar0_.cpp:95:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpxavuar0_.cpp:96:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpxavuar0_.cpp:104:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmpxavuar0_.cpp:104:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        float gpa = g;\n        float gpa_diff = gpa - 4.0;\n        if(gpa_diff\
    \ > 3.7) {\n            letter_grades.push_back(\"A+\");\n        }\n        else\
    \ if(gpa_diff > 3.3) {\n            letter_grades.push_back(\"A\");\n        }\n\
    \        else if(gpa_diff > 3.0) {\n            letter_grades.push_back(\"A-\"\
    );\n        }\n        else if(gpa_diff > 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(gpa_diff > 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(gpa_diff > 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(gpa_diff > 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(gpa_diff > 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(gpa_diff > 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(gpa_diff > 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(gpa_diff > 0.3) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(gpa_diff > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphxxc7fwc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmphxxc7fwc.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmphxxc7fwc.cpp: In function 'int\
    \ main()':\n/tmp/tmphxxc7fwc.cpp:73:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphxxc7fwc.cpp:2:\n/tmp/tmphxxc7fwc.cpp:74:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmphxxc7fwc.cpp:74:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmphxxc7fwc.cpp:74:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphxxc7fwc.cpp:74:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphxxc7fwc.cpp:74:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphxxc7fwc.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        if(g > 3.0) {\n            letter_grades.push_back(\"A+\");\n       \
    \ } else if(g > 2.7) {\n            letter_grades.push_back(\"B+\");\n       \
    \ } else if(g > 2.3) {\n            letter_grades.push_back(\"B-\");\n       \
    \ } else if(g > 2.0) {\n            letter_grades.push_back(\"C+\");\n       \
    \ } else if(g > 1.7) {\n            letter_grades.push_back(\"C\");\n        }\
    \ else if(g > 1.3) {\n            letter_grades.push_back(\"C-\");\n        }\
    \ else if(g > 1.0) {\n            letter_grades.push_back(\"D+\");\n        }\
    \ else if(g > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else\
    \ if(g > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else\
    \ {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return\
    \ letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp19ivx9ij.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmp19ivx9ij.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmp19ivx9ij.cpp: In function 'int\
    \ main()':\n/tmp/tmp19ivx9ij.cpp:53:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp19ivx9ij.cpp:2:\n/tmp/tmp19ivx9ij.cpp:54:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmp19ivx9ij.cpp:54:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmp19ivx9ij.cpp:54:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp19ivx9ij.cpp:54:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp19ivx9ij.cpp:54:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp19ivx9ij.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    for (float grade : grades) {\n        float difference\
    \ = grade - average;\n        if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    D\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    C-\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    C\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    A-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    A\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if (difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpueeedv5p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpueeedv5p.cpp:28:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpueeedv5p.cpp:32:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmpueeedv5p.cpp:89:12: error: a\
    \ function-definition is not allowed here before '{' token\n int main() {\n  \
    \          ^\n/tmp/tmpueeedv5p.cpp:97:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpueeedv5p.cpp:97:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    float standard_deviation = 0;\n    for (float grade\
    \ : grades) {\n        standard_deviation += pow(grade - average, 2);\n    }\n\
    \    float variance = standard_deviation / grades.size();\n    float standard_deviation_of_grades\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades\
    \ += pow(grade - average, 2);\n    }\n    float variance_of_grades = standard_deviation_of_grades\
    \ / grades.size();\n    float standard_deviation_of_grades_squared = pow(variance_of_grades,\
    \ 2);\n    float variance_of_grades_square_root = sqrt(variance_of_grades_squared);\n\
    \    float standard_deviation_of_grades_square_root_of_grades = pow(standard_deviation_of_grades_squared,\
    \ 0.5);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades, 2);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades, 2);\n  \
    \  float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades,\
    \ 2);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades,\
    \ 2);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades,\
    \ 2);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades,\
    \ 2);\n    float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_\n}\n\
    int main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3oz81i_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpj3oz81i_.cpp:28:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpj3oz81i_.cpp:33:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmpj3oz81i_.cpp:38:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (float grade : grades) {\n\
    \                        ^\n/tmp/tmpj3oz81i_.cpp:43:49: error: 'variance_of_grades_squared'\
    \ was not declared in this scope\n     float variance_of_grades_square_root =\
    \ sqrt(variance_of_grades_squared);\n                                        \
    \         ^\n/tmp/tmpj3oz81i_.cpp:49:11: error: redeclaration of 'float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades'\n\
    \     float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades,\
    \ 2);\n           ^\n/tmp/tmpj3oz81i_.cpp:48:11: error: 'float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades'\
    \ previously declared here\n     float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades,\
    \ 2);\n           ^\n/tmp/tmpj3oz81i_.cpp:51:128: error: 'standard_deviation_of_grades_square_root_of_grades_of_grades_of_'\
    \ was not declared in this scope\n     float standard_deviation_of_grades_square_root_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades_of_grades\
    \ = pow(standard_deviation_of_grades_square_root_of_grades_of_grades_of_\n   \
    \                                                                            \
    \                                                 ^\n/tmp/tmpj3oz81i_.cpp:52:1:\
    \ error: expected ',' or ';' before '}' token\n }\n ^\n/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    // Your code goes here\n    std::vector<std::string> letter_grades;\n\
    \    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0f){\n       \
    \     letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7f){\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3f){\n\
    \            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0f){\n\
    \            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7f){\n\
    \            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3f){\n\
    \            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0f){\n\
    \            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7f){\n\
    \            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3f){\n\
    \            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0f){\n\
    \            letter_grades.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7f){\n\
    \            letter_grades.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0f){\n\
    \            letter_grades.push_back(\"D-\");\n        }\n        else if(grades[i]==0.0f){\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjsvybwsg.cpp: In function 'int main()':\n/tmp/tmpjsvybwsg.cpp:72:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjsvybwsg.cpp:2:\n/tmp/tmpjsvybwsg.cpp:73:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpjsvybwsg.cpp:73:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpjsvybwsg.cpp:73:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjsvybwsg.cpp:73:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjsvybwsg.cpp:73:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjsvybwsg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n\
    \        if(g >= 3.0) {\n            letter_grades.push_back(\"A+\");\n      \
    \  } else if(g >= 3.3) {\n            letter_grades.push_back(\"A\");\n      \
    \  } else if(g >= 3.7) {\n            letter_grades.push_back(\"A-\");\n     \
    \   } else if(g >= 4.0) {\n            letter_grades.push_back(\"B+\");\n    \
    \    } else if(g >= 4.3) {\n            letter_grades.push_back(\"B\");\n    \
    \    } else if(g >= 4.7) {\n            letter_grades.push_back(\"B-\");\n   \
    \     } else if(g >= 5.0) {\n            letter_grades.push_back(\"C+\");\n  \
    \      } else if(g >= 5.3) {\n            letter_grades.push_back(\"C\");\n  \
    \      } else if(g >= 5.7) {\n            letter_grades.push_back(\"C-\");\n \
    \       } else if(g >= 6.0) {\n            letter_grades.push_back(\"D+\");\n\
    \        } else if(g >= 6.3) {\n            letter_grades.push_back(\"D\");\n\
    \        } else if(g >= 6.7) {\n            letter_grades.push_back(\"D-\");\n\
    \        } else if(g >= 7.0) {\n            letter_grades.push_back(\"E\");\n\
    \        } else {\n            letter_grades.push_back(\"D-\");\n        }\n \
    \   }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpusk2wnm3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpusk2wnm3.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(float\
    \ g : grades) {\n                   ^\n/tmp/tmpusk2wnm3.cpp: In function 'int\
    \ main()':\n/tmp/tmpusk2wnm3.cpp:61:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpusk2wnm3.cpp:2:\n/tmp/tmpusk2wnm3.cpp:62:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpusk2wnm3.cpp:62:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpusk2wnm3.cpp:62:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpusk2wnm3.cpp:62:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpusk2wnm3.cpp:62:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpusk2wnm3.cpp:2:\n/usr/inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    // Write your code here\n    std::vector<std::string> grade_list;\n \
    \   float sum = 0;\n    for (float grade : grades) {\n        sum += grade;\n\
    \    }\n    float average = sum / grades.size();\n    float standard_deviation\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation += pow(grade\
    \ - average, 2);\n    }\n    float variance = standard_deviation / grades.size();\n\
    \    float standard_error = sqrt(variance);\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_of_mode\
    \ = (mode - standard_deviation) / standard_error;\n    float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n    float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n    float standard_error_\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphlh7j_t8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmphlh7j_t8.cpp:29:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmphlh7j_t8.cpp:34:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmphlh7j_t8.cpp:40:39: error: 'median'\
    \ was not declared in this scope\n     float standard_error_of_median = (median\
    \ - standard_deviation) / standard_error;\n                                  \
    \     ^\n/tmp/tmphlh7j_t8.cpp:41:37: error: 'mode' was not declared in this scope\n\
    \     float standard_error_of_mode = (mode - standard_deviation) / standard_error;\n\
    \                                     ^\n/tmp/tmphlh7j_t8.cpp:42:11: error: redeclaration\
    \ of 'float standard_error_of_mean'\n     float standard_error_of_mean = (average\
    \ - standard_deviation) / standard_error;\n           ^\n/tmp/tmphlh7j_t8.cpp:39:11:\
    \ error: 'float standard_error_of_mean' previously declared here\n     float standard_error_of_mean\
    \ = (average - standard_deviation) / standard_error;\n           ^\n/tmp/tmphlh7j_t8.cpp:43:11:\
    \ error: redeclaration of 'float standard_error_of_median'\n     float standard_error_of_median\
    \ = (median - standard_deviation) / standard_error;\n           ^\n/tmp/tmphlh7j_t8.cpp:40:11:\
    \ error: 'float standard_error_of_median' previously declared here\n     float\
    \ standard_error_of_median = (median - standard_deviation) / standard_error;\n\
    \           ^\n/tmp/tmphlh7j_t8.cpp:44:11: error: redeclaration of 'float standard_error_of_mode'\n\
    \     float standard_error_of_mode = (mode - standard_deviation) / standard_error;\n\
    \           ^\n/tmp/tmphlh7j_t8.cpp:41:11: error: 'float standard_error_of_mode'\
    \ previously declared here\n     float standard_error_of_mode = (mode - standard_deviation)\
    \ / standard_error;\n           ^\n/tmp/tmphlh7j_t8.cpp:45:11: error: redeclaration\
    \ of 'float standard_error_of_mean'\n     float standard_error_of_mean = (averag"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    for (float grade : grades) {\n        letter_grades.push_back(std::to_string(average\
    \ - grade));\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpum15dhpv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpum15dhpv.cpp:28:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpum15dhpv.cpp:32:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmpum15dhpv.cpp:33:33: error: 'to_string'\
    \ is not a member of 'std'\n         letter_grades.push_back(std::to_string(average\
    \ - grade));\n                                 ^\n/tmp/tmpum15dhpv.cpp: In function\
    \ 'int main()':\n/tmp/tmpum15dhpv.cpp:38:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = numerical_letter_grade;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpum15dhpv.cpp:2:\n/tmp/tmpum15dhpv.cpp:39:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpum15dhpv.cpp:39:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpum15dhpv.cpp:39:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpum15dhpv.cpp:39:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<br"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    float\
    \ average = 0;\n    float standard_deviation = 0;\n    float standard_deviation_squared\
    \ = 0;\n    float standard_deviation_cubed = 0;\n    float standard_deviation_root\
    \ = 0;\n    float standard_deviation_root_squared = 0;\n    float standard_deviation_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_squared = 0;\n    float standard_deviation_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_squared = 0;\n    float standard_deviation_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_squared = 0;\n    float\
    \ standard_deviation_root_root_root_root_cubed = 0;\n    float standard_deviation_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_cubed = 0;\n   \
    \ float standard_deviation_root_root_root_root_root_root_root_squared = 0;\n \
    \   float standard_deviation_root_root_root_root_root_root_cubed = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_squared = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_cubed = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared = 0;\n  \
    \  float standard_deviation_root_root_root_root_root_root_root_root_cubed = 0;\n\
    \    float standard_deviation_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv0w9rdwd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpv0w9rdwd.cpp:45:11:\
    \ error: redeclaration of 'float standard_deviation_root_root_root_root_root_root_root_squared'\n\
    \     float standard_deviation_root_root_root_root_root_root_root_squared = 0;\n\
    \           ^\n/tmp/tmpv0w9rdwd.cpp:43:11: error: 'float standard_deviation_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpv0w9rdwd.cpp:49:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared'\n     float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared = 0;\n  \
    \         ^\n/tmp/tmpv0w9rdwd.cpp:47:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpv0w9rdwd.cpp:50:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_cubed'\n     float\
    \ standard_deviation_root_root_root_root_root_root_root_root_cubed = 0;\n    \
    \       ^\n/tmp/tmpv0w9rdwd.cpp:48:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_cubed'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n           ^\n/tmp/tmpv0w9rdwd.cpp:55:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_root_root_squared'\n\
    \     float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpv0w9rdwd.cpp:53:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpv0w9rdwd.cpp:57:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    float standard_deviation = 0;\n    for (float grade\
    \ : grades) {\n        standard_deviation += pow(grade - average, 2);\n    }\n\
    \    float variance = standard_deviation / grades.size();\n    float standard_deviation_of_grades\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades\
    \ / grades.size();\n    float standard_deviation_of_grades_squared = 0;\n    for\
    \ (float grade : grades) {\n        standard_deviation_of_grades_squared += pow(grade\
    \ - average, 2);\n    }\n    float variance = standard_deviation_of_grades_squared\
    \ / grades.size();\n    float standard_deviation_of_grades_squared_root = 0;\n\
    \    for (float grade : grades) {\n        standard_deviation_of_grades_squared_root\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades_squared_root\
    \ / grades.size();\n    float standard_deviation_of_grades_squared_root_of_grades\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades_squared_root_of_grades\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades_squared_root_of_grades\
    \ / grades.size();\n    float standard_deviation_of_grades_squared_root_of_grades_squared\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades_squared_root_of_grades_squared\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades_squared_root_of_grades_squared\
    \ / grades.size();\n    float standard_deviation_of_grades_squared_root_of_grades_squared_root\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades_squared_root_of_grades_squared_root\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades_squared_root_of_grades_squared_root\
    \ / grades.size();\n    float standard_deviation_of_grades_squared_root_of_grades_squared_root_of_grades\
    \ = 0;\n    for (float grade : grades) {\n        standard_deviation_of_grades_squared_root_of_grades_squared_root_of_grades\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation_of_grades_\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhym0v6e.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpfhym0v6e.cpp:28:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpfhym0v6e.cpp:33:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmpfhym0v6e.cpp:38:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (float grade : grades) {\n\
    \                        ^\n/tmp/tmpfhym0v6e.cpp:41:11: error: redeclaration of\
    \ 'float variance'\n     float variance = standard_deviation_of_grades / grades.size();\n\
    \           ^\n/tmp/tmpfhym0v6e.cpp:36:11: error: 'float variance' previously\
    \ declared here\n     float variance = standard_deviation / grades.size();\n \
    \          ^\n/tmp/tmpfhym0v6e.cpp:43:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (float grade : grades) {\n                 \
    \       ^\n/tmp/tmpfhym0v6e.cpp:46:11: error: redeclaration of 'float variance'\n\
    \     float variance = standard_deviation_of_grades_squared / grades.size();\n\
    \           ^\n/tmp/tmpfhym0v6e.cpp:36:11: error: 'float variance' previously\
    \ declared here\n     float variance = standard_deviation / grades.size();\n \
    \          ^\n/tmp/tmpfhym0v6e.cpp:48:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (float grade : grades) {\n                 \
    \       ^\n/tmp/tmpfhym0v6e.cpp:51:11: error: redeclaration of 'float variance'\n\
    \     float variance = standard_deviation_of_grades_squared_root / grades.size();\n\
    \           ^\n/tmp/tmpfhym0v6e.cpp:36:11: error: 'float variance' previously\
    \ declared here\n     float variance = standard_deviation / grades.size();\n \
    \          ^\n/tmp/tmpfhym0v6e.cpp:53:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (float grade : grades) {\n                 \
    \       ^\n/tmp/tmpfhym0v6e.cpp:56:11: error: redeclaration of 'float variance'\n\
    \     float variance = standard_deviation_of_grades_s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    float\
    \ average = 0;\n    float standard_deviation = 0;\n    float standard_deviation_squared\
    \ = 0;\n    float standard_deviation_cubed = 0;\n    float standard_deviation_root\
    \ = 0;\n    float standard_deviation_root_squared = 0;\n    float standard_deviation_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_squared = 0;\n    float standard_deviation_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_squared = 0;\n    float standard_deviation_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_squared = 0;\n    float\
    \ standard_deviation_root_root_root_root_cubed = 0;\n    float standard_deviation_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_cubed = 0;\n   \
    \ float standard_deviation_root_root_root_root_root_root_root_squared = 0;\n \
    \   float standard_deviation_root_root_root_root_root_root_cubed = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_squared = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_cubed = 0;\n    float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared = 0;\n  \
    \  float standard_deviation_root_root_root_root_root_root_root_root_cubed = 0;\n\
    \    float standard_deviation_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n    float standard_deviation_root_root_root_root_root_root_\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7jke5i2.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpr7jke5i2.cpp:45:11:\
    \ error: redeclaration of 'float standard_deviation_root_root_root_root_root_root_root_squared'\n\
    \     float standard_deviation_root_root_root_root_root_root_root_squared = 0;\n\
    \           ^\n/tmp/tmpr7jke5i2.cpp:43:11: error: 'float standard_deviation_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpr7jke5i2.cpp:49:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared'\n     float\
    \ standard_deviation_root_root_root_root_root_root_root_root_squared = 0;\n  \
    \         ^\n/tmp/tmpr7jke5i2.cpp:47:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpr7jke5i2.cpp:50:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_cubed'\n     float\
    \ standard_deviation_root_root_root_root_root_root_root_root_cubed = 0;\n    \
    \       ^\n/tmp/tmpr7jke5i2.cpp:48:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_cubed'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_cubed\
    \ = 0;\n           ^\n/tmp/tmpr7jke5i2.cpp:57:11: error: redeclaration of 'float\
    \ standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared'\n\
    \     float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpr7jke5i2.cpp:55:11: error: 'float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared'\
    \ previously declared here\n     float standard_deviation_root_root_root_root_root_root_root_root_root_root_root_squared\
    \ = 0;\n           ^\n/tmp/tmpr7jke5i2.cpp:58:11: error: redeclaration of 'float\
    \ standard_deviation_root"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    float standard_deviation = 0;\n    for (float grade\
    \ : grades) {\n        float difference = grade - average;\n        standard_deviation\
    \ += pow(difference, 2);\n    }\n    float variance = standard_deviation / grades.size();\n\
    \    float standard_deviation_of_grades = 0;\n    for (float grade : grades) {\n\
    \        float difference = grade - average;\n        standard_deviation_of_grades\
    \ += pow(difference, 2);\n    }\n    float standard_deviation_of_grades_squared\
    \ = standard_deviation_of_grades * (standard_deviation_of_grades - 1);\n    float\
    \ standard_deviation_of_grades_cubed = standard_deviation_of_grades_squared *\
    \ standard_deviation_of_grades_squared;\n    float standard_deviation_of_grades_cubed2\
    \ = standard_deviation_of_grades_cubed * standard_deviation_of_grades_cubed;\n\
    \    float standard_deviation_of_grades_cubed3 = standard_deviation_of_grades_cubed2\
    \ * standard_deviation_of_grades_cubed2;\n    float standard_deviation_of_grades_cubed4\
    \ = standard_deviation_of_grades_cubed3 * standard_deviation_of_grades_cubed3;\n\
    \    float standard_deviation_of_grades_cubed5 = standard_deviation_of_grades_cubed4\
    \ * standard_deviation_of_grades_cubed4;\n    float standard_deviation_of_grades_cubed6\
    \ = standard_deviation_of_grades_cubed5 * standard_deviation_of_grades_cubed5;\n\
    \    float standard_deviation_of_grades_cubed7 = standard_deviation_of_grades_cubed6\
    \ * standard_deviation_of_grades_cubed6;\n    float standard_deviation_of_grades_cubed8\
    \ = standard_deviation_of_grades_cubed7 * standard_deviation_of_grades_cubed7;\n\
    \    float standard_deviation_of_grades_cubed9 = standard_deviation_of_grades_cubed8\
    \ * standard_deviation_of_grades_cubed8;\n    float standard_deviation_of_grades_cubed10\
    \ = standard_deviation_of_grades_cubed9 * standard_deviation_of_grades_cubed9;\n\
    \    float standard_deviation_of_grades_cubed11 = standard_deviation_of_grades_cubed10\
    \ * standard_deviation_of_grades_cubed10;\n    float standard_deviation_of_grades_cubed12\
    \ = standard_deviation_of_grades_cubed11 * standard_deviation_of_grades_cubed\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcg2jifrf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpcg2jifrf.cpp:28:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ grade : grades) {\n                        ^\n/tmp/tmpcg2jifrf.cpp:33:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (float grade\
    \ : grades) {\n                        ^\n/tmp/tmpcg2jifrf.cpp:39:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (float grade : grades) {\n\
    \                        ^\n/tmp/tmpcg2jifrf.cpp:56:1: error: expected ',' or\
    \ ';' before '}' token\n }\n ^\n/tmp/tmpcg2jifrf.cpp: In function 'int main()':\n\
    /tmp/tmpcg2jifrf.cpp:58:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = numerical_letter_grade;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcg2jifrf.cpp:2:\n/tmp/tmpcg2jifrf.cpp:59:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpcg2jifrf.cpp:59:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpcg2jifrf.cpp:59:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcg2jifrf.cpp:59:98: error: no matching "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    // Write your code here\n    std::vector<std::string> letter_grades;\n\
    \    for (float g : grades) {\n        if (g > 3.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (g > 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (g > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (g > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (g > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (g > 1.3) {\n            letter_grades.push_back(\"C-\"\
    );\n        } else if (g > 1.0) {\n            letter_grades.push_back(\"D+\"\
    );\n        } else if (g > 0.7) {\n            letter_grades.push_back(\"D\");\n\
    \        } else if (g > 0.0) {\n            letter_grades.push_back(\"D-\");\n\
    \        } else {\n            letter_grades.push_back(\"E\");\n        }\n  \
    \  }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpngiuu_dj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)':\n/tmp/tmpngiuu_dj.cpp:28:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (float\
    \ g : grades) {\n                    ^\n/tmp/tmpngiuu_dj.cpp: In function 'int\
    \ main()':\n/tmp/tmpngiuu_dj.cpp:54:10: error: 'candidate' does not name a type\n\
    \     auto candidate = numerical_letter_grade;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpngiuu_dj.cpp:2:\n/tmp/tmpngiuu_dj.cpp:55:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpngiuu_dj.cpp:55:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpngiuu_dj.cpp:55:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpngiuu_dj.cpp:55:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpngiuu_dj.cpp:55:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpngiuu_dj.cpp:2:\n/usr/i"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n    std::vector<std::string> letter_grades;\n    for(int i = 0; i < grades.size();\
    \ i++) {\n        if(grades[i] >= 4.0) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if(grades[i] >= 3.7) {\n            letter_grades.push_back(std::string(\"\
    A\"));\n        } else if(grades[i] >= 3.3) {\n            letter_grades.push_back(std::string(\"\
    A-\"));\n        } else if(grades[i] >= 3.0) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if(grades[i] >= 2.7) {\n            letter_grades.push_back(std::string(\"\
    B\"));\n        } else if(grades[i] >= 2.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grades[i] >= 2.0) {\n            letter_grades.push_back(std::string(\"\
    C+\"));\n        } else if(grades[i] >= 1.7) {\n            letter_grades.push_back(std::string(\"\
    C\"));\n        } else if(grades[i] >= 1.3) {\n            letter_grades.push_back(std::string(\"\
    C-\"));\n        } else if(grades[i] >= 1.0) {\n            letter_grades.push_back(std::string(\"\
    D+\"));\n        } else if(grades[i] >= 0.7) {\n            letter_grades.push_back(std::string(\"\
    D\"));\n        } else if(grades[i] >= 0.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else {\n            letter_grades.push_back(std::string(\"\
    E\"));\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjdqb790.cpp: In function 'int main()':\n/tmp/tmpjjdqb790.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = numerical_letter_grade;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjdqb790.cpp:2:\n/tmp/tmpjjdqb790.cpp:60:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)4.0, (float)3,\
    \ (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                         ^\n/tmp/tmpjjdqb790.cpp:60:98:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n                                                                  \
    \                                ^\n/tmp/tmpjjdqb790.cpp:60:98: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjjdqb790.cpp:60:98: error: no matching function for call to\
    \ 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjjdqb790.cpp:60:98:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjjdqb790.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4"
  stdout: ''
