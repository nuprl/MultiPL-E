name: HumanEval_143_words_in_sentence
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing\
  \ a sentence,\n// the sentence contains some words separated by a space,\n// and\
  \ you have to return a string that contains the words from the original sentence,\n\
  // whose lengths are prime numbers,\n// the order of the words in the new string\
  \ should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"\
  This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets\
  \ go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence)\
  \ <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string\
  \ sentence) {\n"
tests: "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
  This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
  )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
  )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
  \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
  ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
  \ is\")) == (\"is\"));\n}\n"
completions: ["    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n   \
    \     if(isPrime(sentence[i])){\n            ans += sentence[i];\n        }\n\
    \    }\n    return ans;", "    // write your code here\n    std::string ans =\
    \ \"\";\n    for(int i = 0; i < sentence.size(); i++) {\n        for(int j = i\
    \ + 1; j < sentence.size(); j++) {\n            int n = sqrt(sentence.size())\
    \ + 1;\n            int m = sqrt(j) + 1;\n            if((n % m) == 0) {\n   \
    \             ans += sentence[i];\n                ans += \" \";\n           \
    \     ans += sentence[j];\n                ans += \" \";\n            }\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            int n = 1;\n            for(int k = i; k < j; k++) {\n \
    \               if(sentence[i] == sentence[k]) {\n                    n++;\n \
    \               }\n            }\n            if(n == 2) {\n                ans\
    \ += sentence[i] + \" \";\n            }\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == '\
    \ ') {\n            flag = true;\n        }\n        if(flag) {\n            ans\
    \ += temp;\n            temp = \"\";\n            flag = false;\n        }\n \
    \       else {\n            temp += sentence[i];\n        }\n    }\n    ans +=\
    \ temp;\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (auto &i : sentence) {\n        if (i == '.') {\n            flag = true;\n\
    \            continue;\n        }\n        if (flag) {\n            ans += i;\n\
    \            flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n  \
    \          flag = true;\n            temp += sentence[i];\n        } else {\n\
    \            if (flag) {\n                ans += temp;\n                temp =\
    \ \"\";\n                flag = false;\n            }\n        }\n    }\n    ans\
    \ += temp;\n    return ans;", "    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    bool flag = false;\n    int len = 0;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] == ' ') {\n            flag = true;\n       \
    \     len++;\n        }\n        if(flag) {\n            flag = false;\n     \
    \       ans += temp;\n            temp = \"\";\n        }\n        else {\n  \
    \          temp += sentence[i];\n        }\n    }\n    ans += temp;\n    return\
    \ ans;", "    std::string ans;\n    ans = sentence;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        ans = ans.replace(sentence[i], \"\");\n    }\n    for (int i\
    \ = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\") {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n    \
    \    if (ans[i] == \"\") {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\
    \") {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\") {\n           \
    \ ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == \"\") {\n            ans.erase(ans.begin() + i);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \"\") {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\") {\n      \
    \      ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i <\
    \ ans.length(); i++) {\n        if (ans[i] == \"\") {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n    \
    \    if (ans[i] == \"\") {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\
    \") {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\") {\n           \
    \ ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == \"\") {\n            ans.erase(ans.begin() + i);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \"\") {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\") {\n      \
    \      ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i <\
    \ ans.length(); i++) {\n        if (ans[i] == \"\") {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n    \
    \    if (ans[i] == \"\") {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == \"\
    \") {\n            ans.erase(", "    std::string ans = \"\";\n    bool flag =\
    \ false;\n    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n            flag = true;\n     \
    \   }\n    }\n    if(flag) {\n        for(int i = 0; i < ans.length(); i++) {\n\
    \            for(int j = i + 1; j < ans.length(); j++) {\n                if(ans[i]\
    \ == ans[j]) {\n                    ans.erase(ans.begin() + i);\n            \
    \        ans.erase(ans.begin() + j);\n                }\n            }\n     \
    \   }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        if(!is_prime(ans[i]))\
    \ {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    return ans;",
  "    // Your code here\n    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            if(isPrime(sentence.size()-i)&&isPrime(sentence.size()-j)){\n\
    \                ans.push_back(sentence[i]);\n                ans.push_back(sentence[j]);\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag = false;\n\
    \            break;\n        }\n    }\n    if (flag) {\n        for (int i = 0;\
    \ i < n; i++) {\n            if (sentence[i] != ' ') {\n                ans +=\
    \ sentence[i];\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    \n    // Your code goes here\n    \n    return ans;", "   \
    \ std::string ans = \"\";\n    bool flag = false;\n    for (auto &c : sentence)\
    \ {\n        if (c == ' ') {\n            flag = true;\n            continue;\n\
    \        }\n        if (flag) {\n            ans += c;\n        }\n    }\n   \
    \ ans = ans.substr(0, ans.size() - 1);\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = true;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            flag = false;\n        }\n    }\n    if (flag) {\n  \
    \      for (int i = 0; i < sentence.length(); i++) {\n            if (sentence[i]\
    \ != ' ') {\n                ans += sentence[i];\n            }\n        }\n \
    \   }\n    return ans;", "    // Write your code here\n    std::string ans = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   if (is_prime(sentence.length() - i)) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = true;\n    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i]\
    \ != ' ') {\n            flag = false;\n            break;\n        }\n    }\n\
    \    if(flag) {\n        for(int i = 0; i < sentence.length(); i++) {\n      \
    \      if(sentence[i] != ' ') {\n                ans += sentence[i];\n       \
    \     }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n  \
    \  \n    // Your code here\n    \n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag = false;\n\
    \            break;\n        }\n    }\n    if (flag) {\n        ans = sentence;\n\
    \    } else {\n        for (int i = 0; i < n; i++) {\n            if (sentence[i]\
    \ != ' ') {\n                for (int j = i; j < n; j++) {\n                 \
    \   if (sentence[j] == ' ') {\n                        break;\n              \
    \      }\n                    if (isPrime(j)) {\n                        ans +=\
    \ sentence[j];\n                        flag = true;\n                       \
    \ break;\n                    }\n                }\n                break;\n \
    \           }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n\
    \        }\n        if (flag) {\n            ans += sentence[i];\n        }\n\
    \    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (ans.find(sentence[i])\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans.find(sentence[i]) != std::string::npos)\
    \ {\n            ans.replace(ans.find(sentence[i]), sentence[i].length(), \"\"\
    );\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool\
    \ flag = true;\n    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i]\
    \ == ' ') {\n            flag = true;\n            continue;\n        }\n    \
    \    if(flag) {\n            ans += sentence[i];\n            flag = false;\n\
    \        }\n    }\n    return ans;", "    std::vector<std::string> words;\n  \
    \  std::string result;\n    std::istringstream iss(sentence);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    sort(words.begin(), words.end());\n    for (auto &word : words) {\n\
    \        if (std::find(words.begin(), words.end(), word) == words.end()) {\n \
    \           result += \" \" + word;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    std::string temp;\n    int n = sentence.length();\n\
    \    for(int i=0;i<n;i++){\n        if(isalpha(sentence[i])){\n            temp.push_back(sentence[i]);\n\
    \        }\n    }\n    for(int i=0;i<n;i++){\n        if(isalpha(sentence[i])){\n\
    \            for(int j=i+1;j<n;j++){\n                if(isalpha(sentence[j])){\n\
    \                    if(temp==sentence){\n                        result+=temp;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;", "    std::string ans = \"\";\n    std::string temp = \"\"\
    ;\n    std::string temp2 = \"\";\n    bool flag = false;\n    for (int i = 0;\
    \ i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n         \
    \   temp += sentence[i];\n        } else {\n            ans += temp;\n       \
    \     temp = \"\";\n        }\n    }\n    ans += temp;\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n    \
    \        flag = true;\n        }\n    }\n    if (flag == false) {\n        ans\
    \ = \"\";\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp2 += ans[i];\n        }\n    }\n\
    \    for (int i = 0; i < temp2.length(); i++) {\n        if (temp2[i] >= 'a' &&\
    \ temp2[i] <= 'z') {\n            ans += temp2[i];\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans += \" \";\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (flag) {\n       \
    \         ans += \" \";\n                flag = false;\n            }\n      \
    \  } else {\n            ans += sentence[i];\n            flag = true;\n     \
    \   }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            int n = std::sqrt(static_cast<double>(j - i));\n       \
    \     if(n == 1) continue;\n            for(int k = 1; k <= n; k++) {\n      \
    \          if(j - i + k == 2) continue;\n                if(j - i + k == n) continue;\n\
    \                if(j - i + k == n+1) continue;\n                ans += sentence.substr(i,\
    \ j) + \" \";\n                break;\n            }\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    bool flag = true;\n    for (int i =\
    \ 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < sentence.length(); i++) {\n            if (sentence[i]\
    \ != ' ') {\n                ans += sentence[i];\n            }\n        }\n \
    \   } else {\n        for (int i = 0; i < sentence.length(); i++) {\n        \
    \    if (sentence[i] != ' ') {\n                ans += sentence[i];\n        \
    \    }\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n     \
    \   if (ans[i] != ' ') {\n            flag = true;\n            break;\n     \
    \   }\n    }\n    if (flag) {\n        for (int i = 2; i < ans.length(); i++)\
    \ {\n            if (ans[i] != ' ') {\n                ans += ans[i];\n      \
    \      }\n        }\n    } else {\n        for (int i = 2; i < ans.length(); i++)\
    \ {\n            if (ans[i] != ' ') {\n                ans += ans[i];\n      \
    \      }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   std::string temp = \"\";\n    bool flag = false;\n    for (int i = 0; i <\
    \ sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n            flag\
    \ = true;\n        }\n        if (flag) {\n            ans += sentence[i];\n \
    \           flag = false;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 2 == 0) {\n            temp = ans.substr(0, i);\n\
    \            ans = ans.substr(i + 1);\n            ans += temp;\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    std::string temp2 = \"\";\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp\
    \ += sentence[i];\n        } else {\n            ans += temp;\n            temp\
    \ = \"\";\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans;\n    ans = sentence;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        ans = ans.replace(sentence[i], \"\");\n    }\n    ans = ans.substr(0,\
    \ ans.length() - 1);\n    ans = ans.substr(0, ans.length() % 2);\n    return ans;",
  "    std::string ans;\n    std::string temp;\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n   \
    \         flag = true;\n            temp.clear();\n        }\n        if(flag)\
    \ {\n            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i\
    \ = 0; i < temp.length(); i++) {\n        for(int j = i + 1; j < temp.length();\
    \ j++) {\n            if(temp[i] == temp[j]) {\n                ans.push_back(temp[i]);\n\
    \                temp.erase(temp.begin() + j);\n                i = j;\n     \
    \       }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    bool flag = false;\n    for (auto &i : sentence) {\n        if (i == '.')\
    \ {\n            flag = true;\n        }\n        if (flag) {\n            ans\
    \ += i;\n        }\n    }\n    ans = ans.substr(0, ans.size() - 1);\n    ans =\
    \ ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    return ans;", " \
    \   std::string ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] == ' ') {\n            flag = true;\n       \
    \ }\n        if(flag) {\n            ans += sentence[i];\n        }\n    }\n \
    \   return ans;", "    std::string ans;\n    ans = sentence;\n    int n = sentence.length();\n\
    \    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            int a\
    \ = std::stoi(sentence[i]);\n            int b = std::stoi(sentence[j]);\n   \
    \         if((a % b) == 0){\n                ans.replace(i, 1, \" \");\n     \
    \           ans.replace(j, 1, \" \");\n            }\n        }\n    }\n    return\
    \ ans;", "    std::string ans;\n    std::string temp;\n    bool flag = false;\n\
    \    for(int i = 0; i < sentence.size(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            flag = true;\n            ans += sentence[i];\n        }\n  \
    \      if(flag) {\n            flag = false;\n            temp = ans;\n      \
    \      ans = temp;\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (auto &c\
    \ : sentence) {\n        if (std::isalpha(c)) {\n            flag = true;\n  \
    \          temp += c;\n        } else {\n            if (flag) {\n           \
    \     ans += \" \" + temp;\n                temp = \"\";\n                flag\
    \ = false;\n            }\n        }\n    }\n    if (flag) {\n        ans += \"\
    \ \" + temp;\n    }\n    return ans;", "    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(isPrime(sentence[i].length())){\n            ans += sentence[i] +\
    \ \" \";\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   bool flag = false;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        ans += \" \";\n    }\n    int count = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count++;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        \
    \    count--;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n            count++;\n\
    \        }\n    }\n    for (int i = n; i >= 0; i--) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n            count--;\n        }\n\
    \    }\n    for (int i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n            count++;\n        }\n    }\n   \
    \ for (int i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n        \
    \    ans += sentence[i];\n            count--;\n        }\n    }\n    for (int\
    \ i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n            count++;\n        }\n    }\n    for (int i = n; i\
    \ >= 0; i--) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count--;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        \
    \    count++;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n            count--;\n\
    \        }\n    }\n    for (int i = n; i >= 0; i--) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n            count++;\n        }\n\
    \    }\n    for (int i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n            count--;\n        }\n    }\n   \
    \ for (int i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n        \
    \    ans += sentence[i];\n            count++;\n        }\n    }\n    for (int\
    \ i = n; i >= 0; i--) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n            count--;\n        }\n    }\n    for (int i = n; i\
    \ >= 0; i--) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count++;\n        }\n    }\n    for (int i = n; i >= 0; ", "    //\
    \ Write your code here\n    std::string ans = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        for(int j = i + 1; j < sentence.length(); j++) {\n         \
    \   int n = 1;\n            for(int k = i; k <= j; k++) {\n                n =\
    \ n * k;\n            }\n            if(n == sentence.length()) {\n          \
    \      ans += sentence.substr(i, j);\n            }\n        }\n    }\n    return\
    \ ans;", "    std::vector<std::string> words;\n    std::string result;\n    std::string\
    \ temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n\
    \    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string\
    \ temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n\
    \    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n \
    \   std::string temp15;\n    std::string temp16;\n    std::string temp17;\n  \
    \  std::string temp18;\n    std::string temp19;\n    std::string temp20;\n   \
    \ std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string\
    \ temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n\
    \    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n \
    \   std::string temp31;\n    std::string temp32;\n    std::string temp33;\n  \
    \  std::string temp34;\n    std::string temp35;\n    std::string temp36;\n   \
    \ std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string\
    \ temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n\
    \    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n \
    \   std::string temp47;\n    std::string temp48;\n    std::string temp49;\n  \
    \  std::string temp50;\n    std::string temp51;\n    std::string temp52;\n   \
    \ std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string\
    \ temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n\
    \    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n \
    \   std::string temp63;\n    std::string temp64;\n    std::string temp65;\n  \
    \  std::string temp66;\n    std::string temp67;\n    std::string temp68;\n   \
    \ std::string temp69;\n    std::string temp70;\n    std::string temp71;\n    std::string\
    \ temp72;\n    std::string temp73;\n    std::string temp74;\n    std::string temp75;\n\
    \    std::string temp76;\n    std::string temp77;\n    std::string temp78;\n \
    \   std::string temp79;\n    std::string temp80;\n    std::string temp81;\n  \
    \  std::string temp82;\n    std::string temp83;\n    std::string temp84;\n   \
    \ std::string temp85;\n    std::string temp86;\n    std::string temp87;\n", " \
    \   std::string ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        return ans;\n    }\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\n\
    \    }\n    for (int i = sentence.length() - 1; i >= 0; i--) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n      \
    \      flag = true;\n        }\n        if (flag) {\n            ans += sentence[i];\n\
    \        }\n    }\n    ans = ans.substr(0, ans.length() - 1);\n    return ans;",
  "    std::vector<std::string> words;\n    std::istringstream iss(sentence);\n  \
    \  std::string word;\n    while (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    std::string result = \"\";\n    for (auto word : words) {\n      \
    \  int len = word.length();\n        if (len == 1) {\n            result += word;\n\
    \        } else {\n            int prime = 1;\n            while (len % prime\
    \ != 0) {\n                prime++;\n            }\n            result += word;\n\
    \            while (len % prime == 0) {\n                len++;\n            }\n\
    \        }\n    }\n    return result;", "    std::string ans = \"\";\n    bool\
    \ flag = false;\n    for(int i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n\
    \            flag = true;\n            ans += sentence[i];\n        }\n      \
    \  if(flag){\n            flag = false;\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    \n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        for(int j = i + 1; j < sentence.length(); j++) {\n            int\
    \ n = 1;\n            for(int k = i; k <= j; k++) {\n                n = n * k;\n\
    \            }\n            if(n == sentence.length()) {\n                ans\
    \ += sentence.substr(i, j - i);\n            }\n        }\n    }\n    return ans;",
  "    std::string ans;\n    std::string temp;\n    bool flag = true;\n    for(int\
    \ i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n           \
    \ flag = true;\n            for(int j=i;j<sentence.size();j++){\n            \
    \    if(isalpha(sentence[j])){\n                    flag = false;\n          \
    \          break;\n                }\n            }\n            if(flag){\n \
    \               ans += sentence[i];\n            }\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n    std::string\
    \ temp_ans = \"\";\n    bool flag = false;\n    for (auto &c : sentence) {\n \
    \       if (c == ' ') {\n            if (flag) {\n                ans += \" \"\
    \ + temp_ans;\n                temp_ans = \"\";\n                flag = false;\n\
    \            }\n        } else {\n            temp_ans += c;\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        ans += \" \" + temp_ans;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++)\
    \ {\n        if (sentence[i] == ' ') {\n            flag = true;\n        }\n\
    \        if (flag) {\n            temp = temp + \" \" + sentence[i];\n       \
    \ } else {\n            ans = ans + \" \" + temp;\n            temp = sentence[i];\n\
    \            flag = false;\n        }\n    }\n    ans = ans + \" \" + temp;\n\
    \    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    int\
    \ n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            if\
    \ (flag) {\n                ans += \" \";\n                flag = false;\n   \
    \         }\n            ans += sentence[i];\n            flag = true;\n     \
    \   }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag =\
    \ false;\n    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i]\
    \ == ' ') {\n            flag = true;\n            ans += sentence[i];\n     \
    \   }\n        if(flag) {\n            flag = false;\n            ans += \" \"\
    ;\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n        } else {\n\
    \            flag = true;\n        }\n    }\n    if (flag) {\n        ans += \"\
    \ \";\n    }\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = ans.length() - 1; i >= 0; i--) {\n        if (isprime(ans.at(i))) {\n    \
    \        ans.erase(ans.begin() + i);\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    bool flag = false;\n    int len = sentence.length();\n\
    \    for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n    \
    \        flag = true;\n        }\n        if (flag) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = true;\n    for(int i=0;i<sentence.size();i++){\n        if(sentence[i]=='\
    \ '){\n            flag = true;\n        }\n        else{\n            if(flag){\n\
    \                ans += sentence[i];\n                flag = false;\n        \
    \    }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n   \
    \ bool flag = true;\n    for(int i = 0; i < sentence.length(); i++) {\n      \
    \  if(sentence[i] != ' ') {\n            flag = false;\n            break;\n \
    \       }\n    }\n    if(flag) {\n        for(int i = 0; i < sentence.length();\
    \ i++) {\n            if(sentence[i] != ' ') {\n                ans += sentence[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(isalpha(sentence[i])) {\n            flag = true;\n        }\n   \
    \     if(flag) {\n            ans += sentence[i];\n        }\n    }\n    for(int\
    \ i = 0; i < ans.length(); i++) {\n        if(isalpha(ans[i])) {\n           \
    \ flag = false;\n        }\n        if(flag) {\n            ans += \" \";\n  \
    \      }\n    }\n    return ans;", "    std::string ans;\n    std::string word;\n\
    \    bool flag = true;\n    int count = 0;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \      count = 0;\n        }\n        if (flag) {\n            word += sentence[i];\n\
    \            count++;\n            if (count == 2) {\n                ans += \"\
    \ \" + word;\n                flag = false;\n                word = \"\";\n  \
    \              count = 0;\n            }\n        }\n    }\n    return ans;",
  "    std::string result;\n    std::string word;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        word = sentence[i];\n        int count\
    \ = 0;\n        for (int j = i + 1; j < n; j++) {\n            if (std::count(word.begin(),\
    \ word.end(), sentence[j]) > 0) {\n                count++;\n            }\n \
    \       }\n        if (count == 2) {\n            result += word;\n        }\n\
    \    }\n    return result;", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j\
    \ = i; j < n; j++) {\n            if (sentence[i] == sentence[j]) {\n        \
    \        count++;\n            }\n        }\n        if (count == 2) {\n     \
    \       ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] != ' ') {\n   \
    \         flag = true;\n            temp = temp + sentence[i];\n        } else\
    \ {\n            flag = false;\n            ans = ans + \" \" + temp;\n      \
    \      temp = \"\";\n        }\n    }\n    ans = ans + \" \" + temp;\n    for(int\
    \ i = 0; i < ans.length(); i++) {\n        if(isPrime(ans.length() - i)) {\n \
    \           ans = ans.substr(0, ans.length() - i);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        for(int j = i + 1; j < sentence.length(); j++) {\n         \
    \   int n = std::abs(sentence.at(i) - sentence.at(j));\n            if(n == 1)\
    \ {\n                ans += sentence.at(j);\n            }\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    bool flag = true;\n    int\
    \ len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        }\n        if (flag) {\n      \
    \      ans += sentence[i];\n            flag = false;\n        }\n    }\n    ans\
    \ = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length() / 2);\n\
    \    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n\
    \            flag = true;\n        } else {\n            if (flag) {\n       \
    \         ans += sentence[i];\n            }\n            flag = false;\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n\
    \        } else {\n            temp = temp + \" \";\n            flag = true;\n\
    \        }\n    }\n    for (int i = 0; i < temp.length(); i++) {\n        if (temp[i]\
    \ != ' ') {\n            ans = ans + temp[i];\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] % 2 != 0) {\n          \
    \  ans = ans + \" \";\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::string result;\n    std::istringstream iss(sentence);\n   \
    \ std::string word;\n    while (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    sort(words.begin(), words.end());\n    for (auto &word : words) {\n\
    \        bool isPrime = true;\n        for (auto &i : word) {\n            if\
    \ (i % 2 == 0) {\n                isPrime = false;\n                break;\n \
    \           }\n        }\n        if (isPrime) {\n            result += word;\n\
    \        }\n    }\n    return result;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    int count = 0;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] != ' ') {\n   \
    \         ans += sentence[i];\n            count++;\n        } else {\n      \
    \      temp = temp + sentence[i];\n        }\n    }\n    for(int i = 0; i < count;\
    \ i++) {\n        for(int j = 0; j < count; j++) {\n            if(i != j) {\n\
    \                if(temp.length() % j == 0) {\n                    temp2 = temp2\
    \ + temp;\n                    temp = temp + \" \";\n                }\n     \
    \       }\n        }\n    }\n    ans = temp2;\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        return ans;\n    }\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\n\
    \    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n        bool flag =\
    \ false;\n        for (int j = i + 1; j < ans.length(); j++) {\n            if\
    \ (ans[j] % i == 0) {\n                flag = true;\n                break;\n\
    \            }\n        }\n        if (flag) {\n            ans = ans.substr(0,\
    \ i + 1) + ans.substr(i + 1);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::string result;\n    std::string word;\n    for (auto c : sentence)\
    \ {\n        if (c == ' ') {\n            words.push_back(word);\n           \
    \ word.clear();\n        } else {\n            word += c;\n        }\n    }\n\
    \    for (auto w : words) {\n        std::cout << w << \" \";\n    }\n    std::cout\
    \ << std::endl;\n    for (auto w : words) {\n        if (std::find(words.begin(),\
    \ words.end(), w) == words.end()) {\n            result += w;\n        }\n   \
    \ }\n    return result;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] >=\
    \ 'a' && sentence[i] <= 'z') {\n            flag = true;\n            ans += sentence[i];\n\
    \        }\n        else if (flag) {\n            flag = false;\n            ans\
    \ += \" \";\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    bool flag = false;\n    for (auto &i : sentence) {\n        if (i == '.')\
    \ {\n            flag = true;\n        }\n        if (flag) {\n            ans\
    \ += i;\n        }\n    }\n    ans = ans.substr(0, ans.size() - 1);\n    ans =\
    \ ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans\
    \ = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans\
    \ = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans\
    \ = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans\
    \ = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    0123456789\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans\
    \ = ans.substr(0, ans.find_first_not_of(\"0123456789\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"", "    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    for (auto &i : sentence) {\n        if (i == '.' || i == '!' ||\
    \ i == '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/' || i ==\
    \ '(' || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<'\
    \ || i == '>' || i == '=' || i == '^' || i == '~' || i == '`' || i == '&' || i\
    \ == '%' || i == '|' || i == '~' || i == '`' || i == '@' || i == '#' || i == '$'\
    \ || i == '%' || i == '^' || i == '&' || i == '*' || i == '(' || i == ')' || i\
    \ == '+' || i == '-' || i == '=' || i == '[' || i == ']' || i == '{' || i == '}'\
    \ || i == '<' || i == '>' || i == '/' || i == '|' || i == '\\\\' || i == '\"'\
    \ || i == '\\'' || i == '`' || i == '<' || i == '>' || i == '?' || i == '!' ||\
    \ i == '.' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/' || i ==\
    \ '(' || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<'\
    \ || i == '>' || i == '=' || i == '^' || i == '~' || i == '`' || i == '&' || i\
    \ == '%' || i == '|' || i == '~' || i == '`' || i == '@' || i == '#' || i == '$'\
    \ || i == '%' || i == '^' || i == '&' || i == '*' || i == '(' || i == ')' || i\
    \ == '+' || i == '-' || i == '=' || i == '[' || i == ']' || i == '{' || i == '}'\
    \ || i == '<' || i == '>' || i == '/' || i == '|' || i == '\\\\' || i == '\"'\
    \ || i == '\\'' || i == '`' || i == '<' || i == '>' || i == '?' || i == '!' ||\
    \ i == '.' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/' || i ==\
    \ '(' || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<'\
    \ || i == '>' || i == '=' || i == '^' || i == '~' || i == '`' || i == '&' || i\
    \ == '%' || i == '|' || i == '~' || i == '`", "    std::string ans = \"\";\n \
    \   bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n   \
    \     if(isalpha(sentence[i])) {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            flag = false;\n   \
    \     }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            temp = temp + \" \" + sentence[i];\n        } else {\n      \
    \      ans = ans + \" \" + temp;\n            temp = \"\";\n        }\n    }\n\
    \    ans = ans + \" \" + temp;\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] == ' ') {\n            flag = true;\n        }\n    \
    \    if (flag) {\n            ans += sentence[i];\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 1; i < ans.length(); i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\\
    r') {\n            ans.erase", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i] != '\
    \ ') {\n            flag = true;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < sentence.length(); i++) {\n            if(sentence[i] != ' ') {\n\
    \                for(int j = i + 1; j < sentence.length(); j++) {\n          \
    \          if(sentence[j] != ' ') {\n                        if(isPrime(sentence.length()))\
    \ {\n                            ans += sentence[i];\n                       \
    \     ans += \" \";\n                            i += 1;\n                   \
    \         j += 1;\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            if (flag) {\n                ans += \" \" + temp;\n \
    \               flag = false;\n                count = 0;\n                temp\
    \ = \"\";\n            } else {\n                flag = true;\n            }\n\
    \        } else {\n            temp = temp + sentence[i];\n            count++;\n\
    \        }\n    }\n    if (flag) {\n        ans += \" \" + temp;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for (auto &i\
    \ : sentence) {\n        if (i == '.') {\n            flag = true;\n         \
    \   continue;\n        }\n        if (flag) {\n            ans += i;\n       \
    \ }\n    }\n    return ans;", "    std::string result;\n    bool flag = false;\n\
    \    for(int i=0;i<sentence.size();i++){\n        if(sentence[i]==' '){\n    \
    \        flag = true;\n        }\n        if(flag){\n            result+=sentence[i];\n\
    \        }\n    }\n    return result;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    std::string temp2 = \"\";\n    int count = 0;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n  \
    \          temp += sentence[i];\n        } else {\n            ans += temp;\n\
    \            temp = \"\";\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] != '\\n' && ans[i] != '\\t') {\n            temp2\
    \ += ans[i];\n            count++;\n        }\n    }\n    for (int i = count;\
    \ i < temp2.length(); i++) {\n        temp2 += temp2[i];\n    }\n    for (int\
    \ i = 0; i < temp2.length(); i++) {\n        if (temp2[i] % 2 != 0) {\n      \
    \      ans += temp2[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            temp += sentence[i];\n\
    \        }\n    }\n    for(int i = 0; i < temp.length(); i++) {\n        if(isalpha(temp[i]))\
    \ {\n            ans += temp[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            temp = temp + \" \"\
    \ + sentence[i];\n        }\n    }\n    for(int i = 0; i < temp.length(); i++)\
    \ {\n        for(int j = i + 1; j < temp.length(); j++) {\n            if(isalpha(temp[i])\
    \ && isalpha(temp[j])) {\n                if(temp[i] == temp[j]) {\n         \
    \           ans = ans + temp[i];\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] == ' ') {\n            flag = true;\n            ans += sentence[i];\n\
    \        }\n        if (flag) {\n            flag = false;\n            ans +=\
    \ \" \";\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   bool flag = false;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            flag = true;\n \
    \       }\n    }\n    if (flag == true) {\n        for (int i = 0; i < n; i++)\
    \ {\n            if (sentence[i] != ' ') {\n                ans += sentence[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        char c = sentence[i];\n        if (c == ' ') {\n    \
    \        flag = true;\n            continue;\n        }\n        if (flag) {\n\
    \            ans += c;\n            flag = false;\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans.find(std::to_string(i)) != std::string::npos)\
    \ {\n            ans.replace(ans.find(std::to_string(i)), 1, \" \");\n       \
    \ }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == '\
    \ ') {\n            flag = true;\n            for(int j = i; j < sentence.length();\
    \ j++) {\n                if(sentence[j] != ' ') {\n                    flag =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if(flag) {\n                ans += sentence[i];\n            }\n     \
    \   }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            if(isPrime(sentence.length() - j - 1) && isPrime(i) && isPrime(j))\
    \ {\n                ans += sentence.substr(i, j);\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == '\
    \ ') {\n            flag = true;\n            continue;\n        }\n        if(flag)\
    \ {\n            ans += sentence[i];\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      ans += sentence[i];\n        } else {\n            flag = true;\n     \
    \   }\n    }\n    if (flag == true) {\n        ans += \" \";\n    }\n    for (int\
    \ i = n; i > 0; i--) {\n        if (ans[i - 1] == ' ') {\n            ans = ans.substr(0,\
    \ i - 1);\n            break;\n        }\n    }\n    for (int i = 2; i < n; i++)\
    \ {\n        if (ans[i] == ' ') {\n            ans = ans.substr(0, i);\n     \
    \       break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (ans[i] == ans[j]) {\n       \
    \         ans = ans.substr(0, j);\n                break;\n            }\n   \
    \     }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j\
    \ = i; j < n; j++) {\n            if (sentence[i] == sentence[j]) {\n        \
    \        count++;\n            }\n        }\n        if (count == 2) {\n     \
    \       ans += sentence[i];\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (auto &c : sentence) {\n        if (c\
    \ == ' ') {\n            words.push_back(word);\n            word.clear();\n \
    \       } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto &w : words) {\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end());\n        std::sort(w.begin(), w.end());\n        std::sort(w.begin(),\
    \ w.end", "    std::vector<std::string> words;\n    std::string new_sentence;\n\
    \    for (auto &word : sentence) {\n        words.push_back(word);\n    }\n  \
    \  for (auto &word : words) {\n        bool flag = true;\n        for (auto &c\
    \ : word) {\n            if (c != ' ') {\n                flag = false;\n    \
    \        }\n        }\n        if (flag) {\n            new_sentence += word;\n\
    \        }\n    }\n    return new_sentence;", "    std::string ans = \"\";\n \
    \   for(int i=0;i<sentence.size();i++){\n        if(isPrime(sentence[i])){\n \
    \           ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n   \
    \         flag = true;\n            continue;\n        }\n        if(flag) {\n\
    \            temp = temp + \" \" + sentence[i];\n        } else {\n          \
    \  ans = ans + \" \" + sentence[i];\n        }\n    }\n    for(int i = 0; i <\
    \ ans.length(); i++) {\n        for(int j = i + 1; j < ans.length(); j++) {\n\
    \            if(isPrime(ans.length()) && isPrime(j)) {\n                if(ans[i]\
    \ == ans[j]) {\n                    ans = ans.substr(0, i) + ans.substr(j + 1);\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (auto\
    \ &i : sentence) {\n        if (i == ' ') {\n            if (flag) {\n       \
    \         ans += \" \" + temp;\n                temp = \"\";\n               \
    \ flag = false;\n            } else {\n                ans += \" \" + i;\n   \
    \         }\n        } else {\n            temp += i;\n            flag = true;\n\
    \        }\n    }\n    if (flag) {\n        ans += \" \" + temp;\n    }\n    return\
    \ ans;", "    // Write your code here\n    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n            continue;\n        }\n    \
    \    if (flag) {\n            ans += sentence[i];\n            flag = false;\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n            ans += sentence[i];\n     \
    \   }\n        else if (flag) {\n            ans += sentence[i];\n        }\n\
    \    }\n    ans = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans.erase(ans.begin() +\
    \ i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n      \
    \  if (ans[i] == '\\'') {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\\
    '') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n          \
    \  ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans.erase(ans.begin() +\
    \ i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n      \
    \  if (ans[i] == '\\'') {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\\
    '') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n          \
    \  ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans.erase(ans.begin() +\
    \ i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n      \
    \  if (ans[i] == '\\'') {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\\
    '') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n          \
    \  ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans.erase(ans.begin() +\
    \ i);\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n      \
    \  if (ans[i] == '\\'') {\n            ans.erase(ans.begin() + i);\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\\
    '') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n            if\
    \ (flag) {\n                ans += \" \";\n                flag = false;\n   \
    \         }\n        } else {\n            ans += sentence[i];\n            flag\
    \ = true;\n        }\n    }\n    return ans;", "    std::string ans;\n    std::string\
    \ temp;\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        if(sentence[i] == ' ') {\n            flag = true;\n            temp.clear();\n\
    \            continue;\n        }\n        if(flag) {\n            temp += sentence[i];\n\
    \        }\n    }\n    for(int i = 0; i < temp.length(); i++) {\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'n') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 's') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 't') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'y') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'r') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'g') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'f') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'm') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'p') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'b') {\n            ans += temp[i];\n        }\n        if((temp[i]\
    \ == 'a' || temp[i] == 'e' || temp[i] == 'i' || temp[i] == 'o' || temp[i] == 'u')\
    \ && temp[i + 1] == 'c') {\n            ans += temp[i];\n", "    std::string ans\
    \ = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n    for(int\
    \ i = 0; i < n; i++) {\n        temp = sentence[i];\n        for(int j = i + 1;\
    \ j < n; j++) {\n            if(isPrime(j - i) && temp == sentence[j]) {\n   \
    \             ans += temp + \" \";\n                i = j;\n            }\n  \
    \      }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        ans = ans + \" \";\n   \
    \ }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] % 2 == 0)\
    \ {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length() - i);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans\
    \ += sentence[i];\n        } else {\n            if (flag) {\n               \
    \ ans += \" \";\n                flag = false;\n            }\n        }\n   \
    \ }\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n   \
    \ for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            temp = ans.substr(0, ans.find(\" \"));\n            ans = temp;\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\"\
    \ \") != std::string::npos) {\n            temp = ans.substr(0, ans.find(\" \"\
    ));\n            ans = temp;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (ans.find(\" \") != std::string::npos) {\n            temp = ans.substr(0,\
    \ ans.find(\" \"));\n            ans = temp;\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos) {\n  \
    \          temp = ans.substr(0, ans.find(\" \"));\n            ans = temp;\n \
    \       }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \"\
    ) != std::string::npos) {\n            temp = ans.substr(0, ans.find(\" \"));\n\
    \            ans = temp;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans.find(\" \") != std::string::npos) {\n            temp = ans.substr(0,\
    \ ans.find(\" \"));\n            ans = temp;\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos) {\n  \
    \          temp = ans.substr(0, ans.find(\" \"));\n            ans = temp;\n \
    \       }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \"\
    ) != std::string::npos) {\n            temp = ans.substr(0, ans.find(\" \"));\n\
    \            ans = temp;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans.find(\" \") != std::string::npos) {\n            temp = ans.substr(0,\
    \ ans.find(\" \"));\n            ans = temp;\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos) {\n  \
    \          temp = ans.substr(0, ans.find(\" \"));\n            ans = temp;\n \
    \       }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \"\
    ) != std::string::n", "    std::string ans = \"\";\n    bool flag = false;\n \
    \   for (auto &c : sentence) {\n        if (c == ' ') {\n            flag = true;\n\
    \        } else {\n            if (flag) {\n                ans += c;\n      \
    \          flag = false;\n            }\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i=0;i<sentence.size();i++){\n       \
    \ if(isPrime(sentence.length())){\n            ans += sentence[i];\n        }\n\
    \    }\n    return ans;", "    std::string result;\n    std::string word;\n  \
    \  bool flag = false;\n    for (auto &i : sentence) {\n        if (isalpha(i))\
    \ {\n            flag = true;\n            word += i;\n        } else {\n    \
    \        if (flag) {\n                result += \" \" + word;\n              \
    \  flag = false;\n                word.clear();\n            }\n        }\n  \
    \  }\n    if (flag) {\n        result += \" \" + word;\n    }\n    return result;",
  "    std::string ans = \"\";\n    bool flag = true;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < n; i++) {\n            if (sentence[i] != ' ') {\n\
    \                ans += sentence[i];\n            }\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    \n    // Your code here\n    \n   \
    \ return ans;", "    // Write your code here\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    std::string ans = \"\";\n    bool flag = false;\n    for (auto\
    \ &i : sentence) {\n        if (std::isalpha(i)) {\n            flag = true;\n\
    \            ans += i;\n        }\n    }\n    if (flag) {\n        std::sort(ans.begin(),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()),\
    \ ans.end());\n        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n\
    \        ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n        ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.", "    // write your code here\n    std::string ans = \"\"\
    ;\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int j = i + 1;\
    \ j < sentence.length(); j++) {\n            int n = std::abs(sentence.at(i) -\
    \ sentence.at(j));\n            if(n == 2 || n == 3)\n                ans += sentence.at(j);\n\
    \        }\n    }\n    return ans;", "    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            if(isPrime(sentence.size()-i-j)\
    \ && isPrime(sentence.size()-i-j)){\n                ans += sentence.substr(i,j);\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    std::string temp = \"\";\n    bool flag = false;\n    for (auto &i : sentence)\
    \ {\n        if (i == '.' || i == '!' || i == '?' || i == '-' || i == '_') {\n\
    \            flag = true;\n        }\n        if (flag) {\n            ans +=\
    \ temp;\n            temp = \"\";\n            flag = false;\n        }\n    \
    \    temp += i;\n    }\n    ans += temp;\n    return ans;", "    std::string ans;\n\
    \    std::string temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        if(flag){\n\
    \            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=i+1;j<temp.size();j++){\n            if(temp[i]==temp[j]){\n\
    \                flag = false;\n            }\n        }\n        if(flag){\n\
    \            ans.push_back(temp[i]);\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    std::string word = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        word = sentence[i];\n        ans +=\
    \ word;\n    }\n    for (int i = 2; i < n; i++) {\n        bool flag = true;\n\
    \        for (int j = 0; j < n; j++) {\n            if (j % i == 0) {\n      \
    \          flag = false;\n                break;\n            }\n        }\n \
    \       if (flag) {\n            ans += \" \";\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(isPrime(sentence.length() - i)) {\n            ans += sentence.substr(i,\
    \ sentence.length() - i);\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        if(isalpha(sentence[i])) {\n            if(flag) {\n            \
    \    ans += \" \";\n            }\n            ans += sentence[i];\n         \
    \   flag = true;\n        }\n    }\n    return ans;", "    std::string result;\n\
    \    std::string temp;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        temp = sentence[i];\n        for (int j = i + 1; j < n;\
    \ j++) {\n            if (isPrime(j - i)) {\n                temp = temp + \"\
    \ \" + sentence[j];\n            }\n        }\n        result += temp + \" \"\
    ;\n    }\n    return result;", "    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n\
    \        } else {\n            if (flag) {\n                ans = ans + \" \"\
    \ + temp;\n                temp = \"\";\n                flag = false;\n     \
    \       } else {\n                ans = ans + \" \" + temp;\n                temp\
    \ = \"\";\n                flag = true;\n            }\n        }\n    }\n   \
    \ return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n\
    \            flag = true;\n        }\n        if (flag) {\n            ans +=\
    \ sentence[i];\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    std::string temp = \"\";\n    bool flag = false;\n    for(int i = 0; i\
    \ < sentence.length(); i++) {\n        if(sentence[i] != ' ') {\n            temp\
    \ = temp + sentence[i];\n        } else {\n            ans = ans + \" \" + temp;\n\
    \            temp = \"\";\n        }\n    }\n    ans = ans + \" \" + temp;\n \
    \   for(int i = 0; i < ans.length(); i++) {\n        if(isPrime(ans.length() -\
    \ i)) {\n            ans = ans.substr(0, ans.length() - i);\n            break;\n\
    \        }\n    }\n    return ans;", "    std::string result;\n    std::string\
    \ temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n   \
    \     if(sentence[i]==' '){\n            flag = true;\n        }\n        if(flag){\n\
    \            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=i+1;j<temp.size();j++){\n            if(temp[i]==temp[j]){\n\
    \                flag = false;\n            }\n        }\n        if(flag){\n\
    \            result.push_back(temp[i]);\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string temp;\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] != ' ') {\n   \
    \         flag = true;\n            temp = temp + sentence[i];\n        } else\
    \ {\n            if(flag) {\n                result += \" \" + temp;\n       \
    \         flag = false;\n                temp.clear();\n            }\n      \
    \  }\n    }\n    if(flag) {\n        result += \" \" + temp;\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    bool flag = false;\n    int len\
    \ = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        }\n        if (flag) {\n      \
    \      ans += sentence[i];\n        }\n    }\n    return ans;", "    // Your code\
    \ here\n    \n    std::string ans = \"\";\n    \n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        \n        bool isPrime = true;\n        \n        for (int j\
    \ = i; j < sentence.length(); j++) {\n            if (sentence[j] != '\\0' &&\
    \ isPrime) {\n                \n                for (int k = j; k < sentence.length();\
    \ k++) {\n                    \n                    if (sentence[k] != '\\0' &&\
    \ isPrime) {\n                        \n                        int n = j - k\
    \ + 1;\n                        \n                        if (n % 2 == 0) {\n\
    \                            isPrime = false;\n                        }\n   \
    \                 }\n                }\n            }\n        }\n        \n \
    \       if (isPrime) {\n            ans += sentence[i];\n        }\n    }\n  \
    \  \n    return ans;", "    // Write your code here\n    std::string ans = \"\"\
    ;\n    for(int i = 0; i < sentence.length(); i++) {\n        if(isPrime(sentence.length()-(i+1))\
    \ && isPrime(i)) {\n            ans += sentence[i];\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n    for (auto\
    \ &c : sentence) {\n        if (c == ' ') {\n            ans += temp;\n      \
    \      temp = \"\";\n        } else {\n            temp += c;\n        }\n   \
    \ }\n    ans += temp;\n    ans = ans.substr(0, ans.size() - 1);\n    ans = ans.substr(0,\
    \ ans.size() / 2);\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (auto &i : sentence) {\n        if (i == '.' || i == '?' ||\
    \ i == '!') {\n            flag = true;\n        }\n        if (flag) {\n    \
    \        ans += i;\n            flag = false;\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    bool flag = false;\n    for (auto &c : sentence)\
    \ {\n        if (c == ' ') {\n            flag = true;\n        } else {\n   \
    \         if (flag) {\n                ans += c;\n                flag = false;\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            if (flag) {\n                ans += \" \";\n  \
    \              flag = false;\n            }\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (ans[i] != ' ') {\n            flag = true;\n\
    \        }\n    }\n    return ans;", "    // Write your code here\n    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        return ans;\n    }\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\n\
    \    }\n    for (int i = sentence.length() - 1; i >= 0; i--) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    int count = 0;\n    for (int i = 0; i < sentence.length(); i++) {\n     \
    \   if (sentence[i] == ' ') {\n            if (flag) {\n                ans +=\
    \ \" \" + temp;\n                temp = \"\";\n                flag = false;\n\
    \                count = 0;\n            } else {\n                temp += sentence[i];\n\
    \            }\n        } else {\n            if (flag) {\n                ans\
    \ += \" \" + temp;\n                temp = \"\";\n                flag = false;\n\
    \                count = 0;\n            } else {\n                temp += sentence[i];\n\
    \                count++;\n            }\n        }\n    }\n    if (flag) {\n\
    \        ans += \" \" + temp;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    std::string temp_ans = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] == ' ') {\n            flag = true;\n        }\n        if (flag\
    \ == true) {\n            temp = temp + \" \" + sentence[i];\n        } else {\n\
    \            ans = ans + \" \" + sentence[i];\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        temp_ans = temp_ans + \" \" + ans.at(i);\n\
    \    }\n    for (int i = 0; i < temp_ans.length(); i++) {\n        bool flag =\
    \ false;\n        for (int j = 0; j < temp_ans.length(); j++) {\n            if\
    \ (temp_ans.at(j) == ' ') {\n                flag = true;\n            }\n   \
    \         if (flag == true) {\n                for (int k = 0; k < temp_ans.length();\
    \ k++) {\n                    if (temp_ans.at(j) == temp_ans.at(k)) {\n      \
    \                  flag = false;\n                    }\n                }\n \
    \           }\n        }\n        if (flag == true) {\n            ans = ans +\
    \ \" \" + temp_ans.at(i);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int\
    \ j = i + 1; j < sentence.length(); j++) {\n            int n = sqrt(sentence.length());\n\
    \            int m = sqrt(j);\n            int count = 0;\n            for(int\
    \ k = i; k <= m; k++) {\n                if(k % n == 0) {\n                  \
    \  count++;\n                }\n            }\n            if(count == j - i)\
    \ {\n                ans += sentence.substr(i, j);\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        if(sentence[i]\
    \ != ' ') {\n            temp = temp + sentence[i];\n        }\n        else {\n\
    \            ans = ans + \" \" + temp;\n            temp = \"\";\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] ==\
    \ ' ') {\n            flag = true;\n        }\n        if (flag) {\n         \
    \   ans += sentence[i];\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n    for (int i =\
    \ 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n            ans[i]\
    \ = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n \
    \       if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n\
    \            ans[i] = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n    for (int i =\
    \ 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n            ans[i]\
    \ = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n \
    \       if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n\
    \            ans[i] = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n    for (int i =\
    \ 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n            ans[i]\
    \ = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n \
    \       if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n\
    \            ans[i] = '\\0';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\'') {\n            ans[i] = '\\0';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\'') {\n            ans[i] = '\\0';\n        }\n    }\n    for (int i =\
    \ 0; i < ans.length(); i++) {\n        if (ans[i] == '\\'') {\n            ans[i]\
    \ = '\\0';\n        }\n    }\n", "    std::string result;\n    std::string temp;\n\
    \    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n \
    \       if (sentence[i] != ' ') {\n            flag = true;\n        }\n    }\n\
    \    if (flag) {\n        for (int i = 0; i < sentence.length(); i++) {\n    \
    \        if (sentence[i] != ' ') {\n                temp = temp + \" \" + sentence[i];\n\
    \            }\n        }\n        result = temp;\n    }\n    return result;",
  "    std::string ans = \"\";\n    \n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        for(int j = i + 1; j < sentence.length(); j++) {\n            int\
    \ len1 = (int)sqrt(sentence.length());\n            int len2 = (int)sqrt(sentence.length());\n\
    \            \n            int len = (len1 < len2) ? len1 : len2;\n          \
    \  \n            int count = 0;\n            \n            for(int k = 0; k <\
    \ len; k++) {\n                if(sentence[i] == sentence[j]) {\n            \
    \        count++;\n                }\n            }\n            \n          \
    \  if(count == len) {\n                ans += sentence[i];\n            }\n  \
    \      }\n    }\n    \n    return ans;", "    // Write your code here\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int\
    \ j = i + 1; j < sentence.length(); j++) {\n            int n = 1;\n         \
    \   for(int k = i; k <= j; k++) {\n                if((sentence[k] - 'a') * (sentence[k]\
    \ - 'a') > n) n = sentence[k] - 'a';\n            }\n            if(n == 1) {\n\
    \                ans += sentence[i];\n            }\n        }\n    }\n    return\
    \ ans;", "    std::vector<std::string> words;\n    std::string result = \"\";\n\
    \    std::string temp = \"\";\n    for (auto &c : sentence) {\n        if (c ==\
    \ ' ') {\n            words.push_back(temp);\n            temp = \"\";\n     \
    \   } else {\n            temp += c;\n        }\n    }\n    for (auto &w : words)\
    \ {\n        if (std::all_of(w.begin(), w.end(), ::isdigit)) {\n            int\
    \ n = stoi(w);\n            if (n == 1) {\n                result += w;\n    \
    \        }\n        }\n    }\n    return result;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    for(int i = 0; i < sentence.length(); i++) {\n \
    \       if(sentence[i] != ' ') {\n            flag = false;\n        }\n    }\n\
    \    if(flag) {\n        for(int i = 0; i < sentence.length(); i++) {\n      \
    \      if(sentence[i] != ' ') {\n                ans += sentence[i];\n       \
    \     }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n  \
    \  bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n    \
    \    if(isalpha(sentence[i])) {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            ans += \" \";\n   \
    \         flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \      ans += sentence[i];\n        }\n        if (flag) {\n            ans +=\
    \ \" \";\n            flag = false;\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] >= 'a' && sentence[i] <= 'z') {\n           \
    \ flag = true;\n            ans += sentence[i];\n        }\n        if(flag) {\n\
    \            flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n          \
    \  flag = true;\n        }\n    }\n    if (flag) {\n        for (int i = 0; i\
    \ < sentence.length(); i++) {\n            if (sentence[i] >= 'a' && sentence[i]\
    \ <= 'z') {\n                for (int j = i + 1; j < sentence.length(); j++) {\n\
    \                    if (sentence[j] >= 'a' && sentence[j] <= 'z') {\n       \
    \                 for (int k = j + 1; k < sentence.length(); k++) {\n        \
    \                    if (sentence[k] >= 'a' && sentence[k] <= 'z') {\n       \
    \                         for (int l = k + 1; l < sentence.length(); l++) {\n\
    \                                    if (sentence[l] >= 'a' && sentence[l] <=\
    \ 'z') {\n                                        for (int m = l + 1; m < sentence.length();\
    \ m++) {\n                                            if (sentence[m] >= 'a' &&\
    \ sentence[m] <= 'z') {\n                                                for (int\
    \ n = m + 1; n < sentence.length(); n++) {\n                                 \
    \                   if (sentence[n] >= 'a' && sentence[n] <= 'z') {\n        \
    \                                                for (int o = n + 1; o < sentence.length();\
    \ o++) {\n                                                            if (sentence[o]\
    \ >= 'a' && sentence[o] <= 'z') {\n                                          \
    \                      for (int p = o + 1; p < sentence.length(); p++) {\n   \
    \                                                                 if (sentence[p]\
    \ >= 'a' && sentence[p] <= 'z') {\n                                          \
    \                              for (int q = p + 1; q < sentence.length(); q++)\
    \ {\n                                                                        \
    \    if (sentence[q] >= 'a' && sentence[q] <= 'z') {\n                       \
    \                                                         for (int r = q + 1;\
    \ r < sentence.length(); r++) {\n                                            \
    \                                        if (sentence[r] >= 'a' && sentence[r]\
    \ <= 'z') {\n                                                                \
    \                        for (int s = r + 1; s < sentence.length(); s++) {\n \
    \                                                                            \
    \               if (sentence[s] >= 'a' && sentence[s] <= 'z') {\n            \
    \                                                                            \
    \        for (int t = s + 1; t < sentence.length(); t++) {\n                 \
    \                                                                            \
    \       if (sentence[t] >= 'a' && sentence[t] <= 'z') {\n                    \
    \                                                                            \
    \        for (int u = t + 1; u < sentence.length(); u++) {\n                 \
    \                                                                            \
    \               if (sentence[u] >= 'a' && sentence[u] <= 'z') {\n            \
    \                                                                            \
    \                        for (int v = u + 1; v < sentence.length(); v++) {\n \
    \                                                                            \
    \                                       if (sentence[v] >= 'a' && sentence[v]\
    \ <= 'z') {\n                                                                \
    \                                                        for (int w = v + 1; w\
    \ < sentence.length(); w++) {\n                                              \
    \                                                                            \
    \  if (sentence[w] >= 'a' && sentence[w] <= 'z') {\n                         \
    \                                                                            \
    \                           for (int x = ", "    std::vector<std::string> words;\n\
    \    std::istringstream iss(sentence);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    std::string ans =\
    \ \"\";\n    for (auto &w : words) {\n        ans += w;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      ans += sentence[i];\n        } else {\n            flag = true;\n     \
    \   }\n    }\n    if (flag) {\n        ans += \" \";\n    }\n    for (int i =\
    \ n; i > 0; i--) {\n        if (ans[i] != ' ') {\n            ans += ans[i - 1];\n\
    \            break;\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::istringstream iss(sentence);\n    std::string word;\n    while\
    \ (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n    }\n  \
    \  std::string ans = \"\";\n    for (auto &w : words) {\n        ans += w;\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (auto &i : sentence) {\n        if (i == '.') {\n            flag = true;\n\
    \            continue;\n        }\n        if (flag) {\n            ans += i;\n\
    \            flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \  }\n        if (flag) {\n            ans += sentence[i];\n        }\n    }\n\
    \    for (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] == '\\\
    n') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int\
    \ i = 2; i < ans.length(); i++) {\n        if (ans[i] == '\\n') {\n          \
    \  ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = ans.length()\
    \ - 1; i >= 0; i--) {\n        if (ans[i] == '\\n') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n\
    \        if (ans[i] == '\\n') {\n            ans.erase(ans.begin() + i);\n   \
    \     }\n    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n        if\
    \ (ans[i] == '\\n') {\n            ans.erase(ans.begin() + i);\n        }\n  \
    \  }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] ==\
    \ '\\n') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for\
    \ (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] == '\\n') {\n\
    \            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = ans.length()\
    \ - 1; i >= 0; i--) {\n        if (ans[i] == '\\n') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n\
    \        if (ans[i] == '\\n') {\n            ans.erase(ans.begin() + i);\n   \
    \     }\n    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n        if\
    \ (ans[i] == '\\n') {\n            ans.erase(ans.begin() + i);\n        }\n  \
    \  }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] ==\
    \ '\\n') {\n            ans.erase(ans.begin() + i);\n        }\n    }\n    for\
    \ (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] == '\\n') {\n\
    \            ans.erase(ans.begin() + i);\n        }\n    }\n    for (int i = ans.length()\
    \ - 1; i >= 0; i--) {\n        if (ans[i] == '\\n') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = ans.length() - 1; i >= 0; i--) {\n\
    \        if (ans[i] == '\\n') {\n            ans.erase(ans.begin() + i);", " \
    \   std::string ans = \"\";\n    \n    // Your code here\n    \n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    std::string temp2\
    \ = \"\";\n    bool flag = false;\n    int count = 0;\n    for (int i = 0; i <\
    \ sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n            if\
    \ (flag == false) {\n                temp += sentence[i];\n                flag\
    \ = true;\n            } else {\n                temp2 += sentence[i];\n     \
    \       }\n        } else {\n            if (flag == true) {\n               \
    \ ans += temp;\n                temp = \"\";\n                flag = false;\n\
    \            } else {\n                temp += sentence[i];\n            }\n \
    \       }\n    }\n    ans += temp2;\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == '.') {\n            count++;\n        }\n    }\n  \
    \  for (int i = 1; i < count; i++) {\n        for (int j = i; j < count; j++)\
    \ {\n            if (ans[j] % i == 0) {\n                ans[j] = ans[j] + 1;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        if (ans[i] == '.') {\n            ans[i] = '0';\n        }\n    }\n \
    \   for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '0') {\n \
    \           ans[i] = '1';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '1') {\n            ans[i] = '2';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '2')\
    \ {\n            ans[i] = '3';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '3') {\n            ans[i] = '4';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '4')\
    \ {\n            ans[i] = '5';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '5') {\n            ans[i] = '6';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '6')\
    \ {\n            ans[i] = '7';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '7') {\n            ans[i] = '8';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '8')\
    \ {\n            ans[i] = '9';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '9') {\n            ans[i] = '0';\n        }\n\
    \    }\n    return ans;", "    // Your code here\n    std::string ans = \"\";\n\
    \    std::string temp = \"\";\n    int len = sentence.length();\n    for (int\
    \ i = 0; i < len; i++) {\n        if (sentence[i] != ' ') {\n            temp\
    \ += sentence[i];\n        } else {\n            ans += temp;\n            temp\
    \ = \"\";\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            temp = temp + sentence[i];\n\
    \        }\n    }\n    for(int i = 0; i < temp.length(); i++) {\n        if(isalpha(temp[i]))\
    \ {\n            ans = ans + temp[i];\n        }\n    }\n    return ans;", " \
    \   std::string result;\n    std::string temp;\n    bool flag = false;\n    for(int\
    \ i=0;i<sentence.size();i++){\n        if(sentence[i]==' '){\n            flag\
    \ = true;\n        }\n        if(flag){\n            temp+=sentence[i];\n    \
    \    }\n    }\n    for(int i=0;i<temp.size();i++){\n        if(i%2==0){\n    \
    \        flag = false;\n            for(int j=i;j<temp.size();j++){\n        \
    \        if(temp[j]=='\\0'){\n                    flag = true;\n             \
    \       break;\n                }\n            }\n            if(flag){\n    \
    \            result+=temp[i];\n            }\n        }\n    }\n    return result;",
  "    std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      ans += sentence[i];\n            flag = true;\n        }\n    }\n    if\
    \ (flag) {\n        ans += \" \";\n    }\n    int count = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count++;\n        }\n    }\n    for (int i = n; i > 0; i--) {\n \
    \       if (sentence[i] != ' ') {\n            ans += sentence[i];\n         \
    \   count--;\n        }\n    }\n    for (int i = 1; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n            count++;\n\
    \        }\n    }\n    for (int i = n; i > 0; i--) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n            count--;\n        }\n\
    \    }\n    for (int i = 1; i < n; i++) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n            count++;\n        }\n    }\n   \
    \ for (int i = n; i > 0; i--) {\n        if (sentence[i] != ' ') {\n         \
    \   ans += sentence[i];\n            count--;\n        }\n    }\n    for (int\
    \ i = 1; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n            count++;\n        }\n    }\n    for (int i = n; i\
    \ > 0; i--) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count--;\n        }\n    }\n    for (int i = 1; i < n; i++) {\n \
    \       if (sentence[i] != ' ') {\n            ans += sentence[i];\n         \
    \   count++;\n        }\n    }\n    for (int i = n; i > 0; i--) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n            count--;\n\
    \        }\n    }\n    for (int i = 1; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n            count++;\n        }\n\
    \    }\n    for (int i = n; i > 0; i--) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n            count--;\n        }\n    }\n   \
    \ for (int i = 1; i < n; i++) {\n        if (sentence[i] != ' ') {\n         \
    \   ans += sentence[i];\n            count++;\n        }\n    }\n    for (int\
    \ i = n; i > 0; i--) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n            count--;\n        }\n    }\n    for (int i = 1; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \            count++;\n        }\n    }\n    for (int i = n; i > 0; i--) {\n \
    \       if (sentence[i] != ' ') {\n            ans += sentence[i];\n", "    //\
    \ Your code here\n    std::string ans = \"\";\n    bool flag = false;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n            flag = true;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            flag = true;\n        }\n    }\n   \
    \ for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            flag = true;\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n    \
    \        flag = true;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n            flag = true;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            flag = true;\n        }\n    }\n   \
    \ for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            flag = true;\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n    \
    \        flag = true;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n            flag = true;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            flag = true;\n        }\n    }\n   \
    \ for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            flag = true;\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n    \
    \        flag = true;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n            flag = true;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            flag = true;\n        }\n    }\n   \
    \ for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            flag = true;\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n    \
    \        flag = true;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp =\
    \ temp + sentence[i];\n        } else {\n            if (flag) {\n           \
    \     ans = ans + \" \" + temp;\n                temp = \"\";\n              \
    \  flag = false;\n            } else {\n                ans = ans + \" \" + temp;\n\
    \                temp = \"\";\n                flag = true;\n            }\n \
    \       }\n    }\n    return ans;", "    std::vector<std::string> words;\n   \
    \ std::istringstream iss(sentence);\n    std::string word;\n    while (std::getline(iss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    std::string ans =\
    \ \"\";\n    for (auto &word : words) {\n        ans += word;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] != ' ') {\n            temp += sentence[i];\n        } else {\n\
    \            if (flag) {\n                ans += \" \" + temp;\n             \
    \   temp = \"\";\n                flag = false;\n            }\n        }\n  \
    \  }\n    if (flag) {\n        ans += \" \" + temp;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        for(int j = i + 1; j < sentence.length(); j++) {\n            int n =\
    \ pow(sentence[j] - sentence[i], 2);\n            if(n == 1) {\n             \
    \   ans += sentence[j];\n            }\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        ans += \" \";\n    }\n    for (int i = 0; i < sentence.length(); i++)\
    \ {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n    \
    \    }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 2 == 0) {\n            ans.erase(ans.begin() + i);\n        }\n    }\n   \
    \ return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n   \
    \         flag = true;\n            ans += sentence[i];\n        }\n        if(flag)\
    \ {\n            ans += \" \";\n            flag = false;\n        }\n    }\n\
    \    for(int i = 0; i < ans.length(); i++) {\n        if(isPrime(ans.length()-(i+1)))\
    \ {\n            ans += ans.substr(i, ans.length()-(i+1));\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    bool flag = true;\n    int\
    \ len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        }\n        if (flag) {\n      \
    \      ans += sentence[i];\n            flag = false;\n        }\n    }\n    ans\
    \ = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length() / 2);\n\
    \    return ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n\
    \    std::string temp2 = \"\";\n    bool flag = false;\n    int count = 0;\n \
    \   for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] ==\
    \ ' ') {\n            flag = true;\n            count++;\n        }\n        if\
    \ (flag) {\n            temp = temp + sentence[i];\n        }\n        if (count\
    \ == 2 && temp.length() == 2 && temp2 == \"and\") {\n            ans = ans + temp;\n\
    \            flag = false;\n            count = 0;\n            temp = \"\";\n\
    \            temp2 = \"\";\n        }\n        if (count == 3 && temp.length()\
    \ == 3 && temp2 == \"for\") {\n            ans = ans + temp;\n            flag\
    \ = false;\n            count = 0;\n            temp = \"\";\n            temp2\
    \ = \"\";\n        }\n        if (count == 5 && temp.length() == 5 && temp2 ==\
    \ \"swimming\") {\n            ans = ans + temp;\n            flag = false;\n\
    \            count = 0;\n            temp = \"\";\n            temp2 = \"\";\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        }\n        if (flag) {\n      \
    \      ans += sentence[i];\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '\\n' || ans[i] == '\\r') {\n            ans.erase", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n  \
    \          temp = temp + sentence[i];\n        } else {\n            if (flag)\
    \ {\n                ans = ans + \" \" + temp;\n                temp = \"\";\n\
    \                flag = false;\n            } else {\n                ans = ans\
    \ + \" \" + temp;\n                temp = \"\";\n                flag = true;\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    std::string word = \"\";\n    bool flag = false;\n    for (int i = 0; i\
    \ < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n           \
    \ flag = true;\n            ans += \" \" + word;\n            word = \"\";\n \
    \       } else {\n            if (flag) {\n                word += sentence[i];\n\
    \            } else {\n                ans += \" \" + sentence[i];\n         \
    \   }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp\
    \ = temp + sentence[i];\n        } else {\n            if (flag) {\n         \
    \       ans = ans + \" \" + temp;\n                temp = \"\";\n            \
    \    flag = false;\n            } else {\n                flag = true;\n     \
    \       }\n        }\n    }\n    return ans;", "    std::string result;\n    std::string\
    \ word;\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++)\
    \ {\n        if (sentence[i] == ' ') {\n            flag = true;\n           \
    \ word = sentence;\n        } else {\n            if (flag) {\n              \
    \  result += \" \" + word;\n                flag = false;\n            }\n   \
    \     }\n    }\n    return result;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for(int i = 0; i < sentence.size(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            flag = true;\n            ans += sentence[i];\n        }\n  \
    \      if(flag) {\n            ans += \" \";\n            flag = false;\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            flag = true;\n      \
    \  }\n        if (flag) {\n            ans += sentence[i];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] != '\\n' &&\
    \ ans[i] != '\\t') {\n            temp = ans.substr(i, 1);\n            int count\
    \ = 0;\n            for (int j = 0; j < ans.length(); j++) {\n               \
    \ if (ans[j] == temp) {\n                    count++;\n                }\n   \
    \         }\n            if (count % 2 == 0) {\n                ans = ans.substr(0,\
    \ i) + \" \" + ans.substr(i + 1, ans.length() - i);\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans;\n    std::string temp;\n    bool\
    \ flag = false;\n    for(int i=0;i<sentence.size();i++){\n        if(sentence[i]=='\
    \ '){\n            flag = true;\n        }\n        if(flag){\n            temp.push_back(sentence[i]);\n\
    \        }\n    }\n    for(int i=0;i<temp.size();i++){\n        for(int j=i+1;j<temp.size();j++){\n\
    \            if(temp[i]==temp[j]){\n                flag = false;\n          \
    \  }\n        }\n        if(flag){\n            ans.push_back(temp[i]);\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag =\
    \ false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\
    \ else {\n            if (flag) {\n                ans += \" \";\n           \
    \     flag = false;\n            }\n            ans += sentence[i];\n        \
    \    flag = true;\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        if(sentence[i] != ' ') {\n            ans += sentence[i];\n     \
    \       flag = true;\n        }\n    }\n    if(flag) {\n        for(int i = sentence.length()-1;\
    \ i >= 0; i--) {\n            if(isPrime(ans.length()) && isPrime(i)) {\n    \
    \            ans += \" \";\n                ans += sentence[i];\n            }\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \      temp += sentence[i];\n        } else {\n            if (flag) {\n     \
    \           ans += temp;\n                temp = \"\";\n                flag =\
    \ false;\n            }\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::string new_sentence;\n    std::istringstream iss(sentence);\n\
    \    std::string word;\n    while (std::getline(iss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    sort(words.begin(), words.end());\n    for (auto &w : words) {\n \
    \       bool flag = true;\n        for (auto &c : w) {\n            if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                flag = false;\n\
    \            }\n        }\n        if (flag) {\n            new_sentence += \"\
    \ \" + w;\n        }\n    }\n    return new_sentence;", "    std::string ans =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag =\
    \ true;\n        }\n        if (flag) {\n            ans += sentence[i];\n   \
    \     }\n    }\n    ans = ans.substr(0, ans.length() - 1);\n    for (int i = 2;\
    \ i < ans.length(); i++) {\n        if (ans.find(ans.substr(i, i)) != std::string::npos)\
    \ {\n            ans = ans.substr(0, i) + \" \" + ans.substr(i + 1, ans.length()\
    \ - 1);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n  \
    \  std::string temp = \"\";\n    for (auto &i : sentence) {\n        if (i ==\
    \ '.' || i == '?' || i == '!' || i == '-' || i == '_' || i == '~') {\n       \
    \     ans += temp;\n            temp = \"\";\n        } else {\n            temp\
    \ += i;\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n  \
    \          flag = true;\n        }\n        if (flag) {\n            ans += temp;\n\
    \            temp = \"\";\n            flag = false;\n        }\n        else\
    \ {\n            temp += sentence[i];\n        }\n    }\n    ans += temp;\n  \
    \  return ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n\
    \    for(int i = 0; i < sentence.length(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            temp = temp + sentence[i];\n        }\n    }\n    for(int i =\
    \ 0; i < temp.length(); i++) {\n        if(isalpha(temp[i])) {\n            ans\
    \ = ans + temp[i];\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n        } else {\n            if (flag) {\n                ans\
    \ += \" \";\n                flag = false;\n            }\n        }\n    }\n\
    \    ans = ans.substr(0, ans.length() - 1);\n    for (int i = 2; i < ans.length();\
    \ i++) {\n        if (ans.find(i) != std::string::npos) {\n            flag =\
    \ true;\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n  \
    \  int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (is_prime(sentence[i]))\
    \ {\n            ans += sentence[i];\n        }\n    }\n    return ans;", "  \
    \  // Write your code here\n    std::string ans = \"\";\n    for(int i = 0; i\
    \ < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            if(isPrime(j - i) && isPrime(j - i + 1)) {\n           \
    \     ans += sentence.substr(i, j);\n                i = j;\n            }\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        } else {\n            if (flag)\
    \ {\n                ans += sentence[i];\n                flag = false;\n    \
    \        }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    std::string temp = \"\";\n    bool flag = false;\n    for(int i = 0; i <\
    \ sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n            flag\
    \ = true;\n            ans += temp;\n            temp = \"\";\n        } else\
    \ {\n            if(flag) {\n                temp += sentence[i];\n          \
    \  } else {\n                ans += sentence[i];\n            }\n        }\n \
    \   }\n    ans += temp;\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            flag = true;\n       \
    \     temp += sentence[i];\n        } else {\n            if(flag) {\n       \
    \         ans += temp;\n                flag = false;\n                temp =\
    \ \"\";\n            }\n        }\n    }\n    return ans;", "    std::string ans;\n\
    \    std::string temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        if(flag){\n\
    \            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=i+1;j<temp.size();j++){\n            if(temp[i]==temp[j]){\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag){\n            ans.push_back(temp[i]);\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n\
    \    bool flag = false;\n    for (auto &i : sentence) {\n        if (i == '.'\
    \ || i == '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '/' || i\
    \ == '\\\\' || i == '@' || i == '^' || i == '$' || i == '&' || i == '*' || i ==\
    \ '(' || i == ')' || i == '+' || i == ',' || i == '{' || i == '}' || i == '['\
    \ || i == ']' || i == '<' || i == '>' || i == '=' || i == '|' || i == '~' || i\
    \ == '`' || i == '!' || i == '~' || i == '@' || i == '^' || i == '$' || i == '&'\
    \ || i == '*' || i == '(' || i == ')' || i == '+' || i == ',' || i == '{' || i\
    \ == '}' || i == '[' || i == ']' || i == '<' || i == '>' || i == '=' || i == '|'\
    \ || i == '~' || i == '`' || i == '!' || i == '~' || i == '@' || i == '^' || i\
    \ == '$' || i == '&' || i == '*' || i == '(' || i == ')' || i == '+' || i == ','\
    \ || i == '{' || i == '}' || i == '[' || i == ']' || i == '<' || i == '>' || i\
    \ == '=' || i == '|' || i == '~' || i == '`' || i == '!' || i == '~' || i == '@'\
    \ || i == '^' || i == '$' || i == '&' || i == '*' || i == '(' || i == ')' || i\
    \ == '+' || i == ',' || i == '{' || i == '}' || i == '[' || i == ']' || i == '<'\
    \ || i == '>' || i == '=' || i == '|' || i == '~' || i == '`' || i == '!' || i\
    \ == '~' || i == '@' || i == '^' || i == '$' || i == '&' || i == '*' || i == '('\
    \ || i == ')' || i == '+' || i == ',' || i == '{' || i == '}' || i == '[' || i\
    \ == ']' || i == '<' || i == '>' || i == '=' || i == '|' || i == '~' || i == '`'\
    \ || i == '!' || i == '~' || i == '@' || i == '^' || i == '$' || i == '&' || i\
    \ == '*' || i == '(' || i == ')' || i == '+' || i == ',' || i == '{' || i == '}'\
    \ || i == '[' || i == ']' || i == '<' || i == '>", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(sentence[i] == ' ') {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            ans += \" \";\n   \
    \         flag = false;\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        if(isPrime(ans.length()) && ans[i] == ' ') {\n            ans\
    \ = ans.substr(0, i);\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp\
    \ = temp + sentence[i];\n        } else {\n            ans = ans + \" \" + temp;\n\
    \            temp = \"\";\n        }\n    }\n    ans = ans + \" \" + temp;\n \
    \   return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n\
    \            flag = true;\n            ans += sentence[i];\n        } else {\n\
    \            if (flag) {\n                ans += sentence[i];\n              \
    \  flag = false;\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n    \
    \    if(isalpha(sentence[i])){\n            flag = true;\n            ans += sentence[i];\n\
    \        }\n        if(flag){\n            flag = false;\n        }\n    }\n \
    \   return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for(int\
    \ i = 0; i < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n   \
    \         flag = true;\n            continue;\n        }\n        if(flag) {\n\
    \            ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ result;\n    std::string word;\n    for (auto &c : sentence) {\n        if (c\
    \ == ' ') {\n            result += word;\n            word.clear();\n        }\
    \ else {\n            word += c;\n        }\n    }\n    result += word;\n    return\
    \ result;", "    std::string ans = \"\";\n    \n    // Your code here\n    \n\
    \    return ans;", "    std::vector<std::string> words;\n    std::string word;\n\
    \    for (auto c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    words.push_back(word);\n    std::string result;\n    for (auto &w\
    \ : words) {\n        if (std::all_of(w.begin(), w.end(), [](char c) { return\
    \ std::isalpha(c); }))\n            result += \" \" + w;\n    }\n    return result;",
  "    std::string ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    for(int i =\
    \ 0; i < ans.length(); i++) {\n        if((ans[i] >= 'a' && ans[i] <= 'z') ||\
    \ (ans[i] >= 'A' && ans[i] <= 'Z')) {\n            flag = false;\n        }\n\
    \    }\n    if(flag) {\n        return ans;\n    } else {\n        return \"\"\
    ;\n    }", "    std::string ans = \"\";\n    bool flag = false;\n    for (auto\
    \ &c : sentence) {\n        if (c == ' ') {\n            flag = true;\n      \
    \      continue;\n        }\n        if (flag) {\n            ans += c;\n    \
    \    }\n    }\n    ans = ans.substr(0, ans.length() - 1);\n    int n = ans.length();\n\
    \    for (int i = 1; i < n; i++) {\n        if (ans[i] != ans[i - 1]) {\n    \
    \        flag = false;\n            break;\n        }\n    }\n    for (int i =\
    \ n; i > 0; i--) {\n        if (ans[i] != ans[i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    \n    // Your code here\n    \n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] == ' ') {\n            flag = true;\n       \
    \ }\n        if(flag) {\n            ans += sentence[i];\n        }\n    }\n \
    \   return ans;", "    std::string ans;\n    ans = sentence;\n    for(int i =\
    \ 0; i < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            int n = 1;\n            for(int k = i; k < j; k++) {\n \
    \               n = n * sentence.at(k);\n            }\n            if(n == 1)\
    \ {\n                ans = ans + \" \" + sentence.at(i);\n            }\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i =\
    \ 0; i < sentence.length(); i++) {\n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            int n = std::sqrt(sentence.length());\n            int m\
    \ = std::sqrt(j);\n            if((n % m) == 0) {\n                ans += sentence[i];\n\
    \                ans += \" \";\n                ans += sentence[j];\n        \
    \        ans += \" \";\n            }\n        }\n    }\n    return ans;", " \
    \   // Write your code here\n    std::string ans = \"\";\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            int n = 1;\n     \
    \       for(int k=0;k<j;k++){\n                if((sentence[i]==sentence[k])&&(sentence[j]==sentence[k+1])){\n\
    \                    n++;\n                }\n            }\n            if(n==2){\n\
    \                ans += sentence[i]+\" \";\n            }\n        }\n    }\n\
    \    return ans;"]
stop_tokens:
- "\n}"
