language: cpp
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> res;\n    int n = lst1.size();\n    int\
    \ m = lst2.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = 0; j < m; j++) {\n            if (lst1[i] == lst2[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    if (n == m) {\n\
    \        return lst1;\n    }\n    if (count > n) {\n        return lst2;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = total_match;\n   \
    \ assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3tur8gru.cpp: In function 'int main()':\n/tmp/tmp3tur8gru.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3tur8gru.cpp:2:\n/tmp/tmp3tur8gru.cpp:39:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp3tur8gru.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp3tur8gru.cpp:40:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp3tur8gru.cpp:40:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3tur8gru.cpp:40:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    std::vector<std::string> result;\n    \n    if (lst1.size()\
    \ == lst2.size()) {\n        for (size_t i = 0; i < lst1.size(); i++) {\n    \
    \        if (lst1[i] < lst2[i]) {\n                result.push_back(lst1[i]);\n\
    \            }\n        }\n        return result;\n    }\n    \n    return lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp02w51o5v.cpp: In function 'int main()':\n/tmp/tmp02w51o5v.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp02w51o5v.cpp:2:\n/tmp/tmp02w51o5v.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp02w51o5v.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp02w51o5v.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp02w51o5v.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp02w51o5v.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    for(auto &i : lst1) {\n \
    \       for(auto &j : lst2) {\n            if(i.size() == j.size()) {\n      \
    \          if(i.find(j) != std::string::npos) {\n                    result.push_back(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    if(result.size() == lst1.size()) {\n        return result;\n    }\n \
    \   return lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2lx03cv3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp2lx03cv3.cpp:19:15: error: ISO C++ forbids declaration of 'i'\
    \ with no type [-fpermissive]\n     for(auto &i : lst1) {\n               ^\n\
    /tmp/tmp2lx03cv3.cpp:19:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(auto &i : lst1) {\n                   ^\n/tmp/tmp2lx03cv3.cpp:20:19:\
    \ error: ISO C++ forbids declaration of 'j' with no type [-fpermissive]\n    \
    \     for(auto &j : lst2) {\n                   ^\n/tmp/tmp2lx03cv3.cpp:20:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for(auto\
    \ &j : lst2) {\n                       ^\n/tmp/tmp2lx03cv3.cpp:21:18: error: request\
    \ for member 'size' in 'i', which is of non-class type 'int'\n             if(i.size()\
    \ == j.size()) {\n                  ^\n/tmp/tmp2lx03cv3.cpp:21:30: error: request\
    \ for member 'size' in 'j', which is of non-class type 'int'\n             if(i.size()\
    \ == j.size()) {\n                              ^\n/tmp/tmp2lx03cv3.cpp:22:22:\
    \ error: request for member 'find' in 'i', which is of non-class type 'int'\n\
    \                 if(i.find(j) != std::string::npos) {\n                     \
    \ ^\n/tmp/tmp2lx03cv3.cpp:23:39: error: invalid user-defined conversion from 'int'\
    \ to 'const value_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \                     result.push_back(i);\n                                 \
    \      ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n        \
    \         from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2lx03cv3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    for(auto &str : lst1) {\n\
    \        if(std::count(lst2.begin(), lst2.end(), str) < std::count(lst1.begin(),\
    \ lst1.end(), str)) {\n            result.push_back(str);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaef8z69s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpaef8z69s.cpp:19:15: error: ISO C++ forbids declaration of 'str'\
    \ with no type [-fpermissive]\n     for(auto &str : lst1) {\n               ^\n\
    /tmp/tmpaef8z69s.cpp:19:21: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(auto &str : lst1) {\n                     ^\n/tmp/tmpaef8z69s.cpp:21:33:\
    \ error: invalid user-defined conversion from 'int' to 'const value_type& {aka\
    \ const std::basic_string<char>&}' [-fpermissive]\n             result.push_back(str);\n\
    \                                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpaef8z69s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpaef8z69s.cpp:21:33:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(str);\n                                 ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaef8z69s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() >= it2->size()) {\n                if(it1->find(*it2)\
    \ != std::string::npos) {\n                    result.push_back(*it1);\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdy_zk5a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmppdy_zk5a.cpp:19:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmppdy_zk5a.cpp:19:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmppdy_zk5a.cpp:19:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmppdy_zk5a.cpp:20:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmppdy_zk5a.cpp:20:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmppdy_zk5a.cpp:20:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmppdy_zk5a.cpp: In function 'int\
    \ main()':\n/tmp/tmppdy_zk5a.cpp:32:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppdy_zk5a.cpp:2:\n/tmp/tmppdy_zk5a.cpp:33:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmppdy_zk5a.cpp:34:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmppdy_zk5a.cpp:34:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    std::vector<std::string> result;\n    \n    for(auto it1\
    \ = lst1.begin(); it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin();\
    \ it2 != lst2.end(); ++it2) {\n            if(it1->size() > it2->size()) {\n \
    \               result.push_back(*it1);\n                break;\n            }\n\
    \            if(it1->size() == it2->size()) {\n                if(it1->find(*it2)\
    \ != std::string::npos) {\n                    result.push_back(*it1);\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   \n    return result;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71fu7rfa.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp71fu7rfa.cpp:21:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmp71fu7rfa.cpp:21:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmp71fu7rfa.cpp:21:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmp71fu7rfa.cpp:22:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmp71fu7rfa.cpp:22:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmp71fu7rfa.cpp:22:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmp71fu7rfa.cpp: In function 'int\
    \ main()':\n/tmp/tmp71fu7rfa.cpp:39:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp71fu7rfa.cpp:2:\n/tmp/tmp71fu7rfa.cpp:40:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp71fu7rfa.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp71fu7rfa.cpp:41:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    std::vector<std::string> result;\n    \n    if(lst1.size()\
    \ == lst2.size()) {\n        \n        for(auto &str : lst1) {\n            \n\
    \            for(auto &str2 : lst2) {\n                \n                if(str\
    \ == str2) {\n                    \n                    result.push_back(str);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     \n    } else {\n        \n        return lst1;\n    }\n    \n    return\
    \ result;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x59mxea.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp5x59mxea.cpp:23:19: error: ISO C++ forbids declaration of 'str'\
    \ with no type [-fpermissive]\n         for(auto &str : lst1) {\n            \
    \       ^\n/tmp/tmp5x59mxea.cpp:23:25: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n         for(auto &str : lst1) {\n                  \
    \       ^\n/tmp/tmp5x59mxea.cpp:25:23: error: ISO C++ forbids declaration of 'str2'\
    \ with no type [-fpermissive]\n             for(auto &str2 : lst2) {\n       \
    \                ^\n/tmp/tmp5x59mxea.cpp:25:30: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n             for(auto &str2 : lst2) {\n     \
    \                         ^\n/tmp/tmp5x59mxea.cpp:29:41: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n                     result.push_back(str);\n              \
    \                           ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5x59mxea.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5x59mxea.cpp:29:41:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \                result.push_back(str);\n                                    \
    \     ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n         \
    \        from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> res;\n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() > it2->size()) {\n                res.push_back(*it1);\n\
    \                break;\n            }\n            if(it1->size() == it2->size())\
    \ {\n                if(it1->find(*it2) != std::string::npos) {\n            \
    \        res.push_back(*it1);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wfk_h0q.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp8wfk_h0q.cpp:19:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmp8wfk_h0q.cpp:19:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmp8wfk_h0q.cpp:19:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmp8wfk_h0q.cpp:20:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmp8wfk_h0q.cpp:20:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmp8wfk_h0q.cpp:20:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmp8wfk_h0q.cpp: In function 'int\
    \ main()':\n/tmp/tmp8wfk_h0q.cpp:36:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wfk_h0q.cpp:2:\n/tmp/tmp8wfk_h0q.cpp:37:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8wfk_h0q.cpp:38:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8wfk_h0q.cpp:38:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() >= it2->size()) {\n                if(it1->find(*it2)\
    \ != std::string::npos) {\n                    result.push_back(*it1);\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   if(result.size() == lst1.size()) {\n        return result;\n    }\n    return\
    \ lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcecb31qc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpcecb31qc.cpp:19:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmpcecb31qc.cpp:19:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmpcecb31qc.cpp:19:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmpcecb31qc.cpp:20:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmpcecb31qc.cpp:20:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmpcecb31qc.cpp:20:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmpcecb31qc.cpp: In function 'int\
    \ main()':\n/tmp/tmpcecb31qc.cpp:35:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcecb31qc.cpp:2:\n/tmp/tmpcecb31qc.cpp:36:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpcecb31qc.cpp:37:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpcecb31qc.cpp:37:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    \n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() >= it2->size()) {\n                if(it1->size()\
    \ == it2->size()) {\n                    if(it1->find(*it2) != std::string::npos)\
    \ {\n                        result.push_back(*it1);\n                    }\n\
    \                }\n            }\n        }\n    }\n    \n    if(result.size()\
    \ == lst1.size()) {\n        return result;\n    }\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8o2uxmkm.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp8o2uxmkm.cpp:20:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmp8o2uxmkm.cpp:20:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmp8o2uxmkm.cpp:20:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmp8o2uxmkm.cpp:21:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmp8o2uxmkm.cpp:21:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmp8o2uxmkm.cpp:21:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmp8o2uxmkm.cpp: In function 'int\
    \ main()':\n/tmp/tmp8o2uxmkm.cpp:39:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8o2uxmkm.cpp:2:\n/tmp/tmp8o2uxmkm.cpp:40:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8o2uxmkm.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8o2uxmkm.cpp:41:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    \n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() == it2->size()) {\n                if(std::find(it1->begin(),\
    \ it1->end(), *it2) != it1->end()) {\n                    result.push_back(*it1);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    if(result.size() == lst1.size()) {\n        return lst1;\n    }\n\
    \    \n    return lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_dlbegm9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp_dlbegm9.cpp:20:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmp_dlbegm9.cpp:20:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmp_dlbegm9.cpp:20:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmp_dlbegm9.cpp:21:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmp_dlbegm9.cpp:21:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmp_dlbegm9.cpp:21:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmp_dlbegm9.cpp: In function 'int\
    \ main()':\n/tmp/tmp_dlbegm9.cpp:38:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_dlbegm9.cpp:2:\n/tmp/tmp_dlbegm9.cpp:39:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_dlbegm9.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_dlbegm9.cpp:40:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    // Write your code here\n    \n    return lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhpgkydk.cpp: In function 'int main()':\n/tmp/tmpzhpgkydk.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzhpgkydk.cpp:2:\n/tmp/tmpzhpgkydk.cpp:25:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpzhpgkydk.cpp:26:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpzhpgkydk.cpp:26:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpzhpgkydk.cpp:26:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpzhpgkydk.cpp:26:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    // Write your code here\n    \n    return lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhpgkydk.cpp: In function 'int main()':\n/tmp/tmpzhpgkydk.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzhpgkydk.cpp:2:\n/tmp/tmpzhpgkydk.cpp:25:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpzhpgkydk.cpp:26:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpzhpgkydk.cpp:26:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpzhpgkydk.cpp:26:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpzhpgkydk.cpp:26:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    \n    // Write your code\
    \ here\n    \n    return result;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbb8t2ezh.cpp: In function 'int main()':\n/tmp/tmpbb8t2ezh.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbb8t2ezh.cpp:2:\n/tmp/tmpbb8t2ezh.cpp:26:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpbb8t2ezh.cpp:27:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpbb8t2ezh.cpp:27:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpbb8t2ezh.cpp:27:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbb8t2ezh.cpp:27:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> res;\n    for(auto &str : lst1) {\n  \
    \      if(std::count(lst2.begin(), lst2.end(), str) < std::count(lst1.begin(),\
    \ lst1.end(), str)) {\n            res.push_back(str);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspecl6gv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpspecl6gv.cpp:19:15: error: ISO C++ forbids declaration of 'str'\
    \ with no type [-fpermissive]\n     for(auto &str : lst1) {\n               ^\n\
    /tmp/tmpspecl6gv.cpp:19:21: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(auto &str : lst1) {\n                     ^\n/tmp/tmpspecl6gv.cpp:21:30:\
    \ error: invalid user-defined conversion from 'int' to 'const value_type& {aka\
    \ const std::basic_string<char>&}' [-fpermissive]\n             res.push_back(str);\n\
    \                              ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpspecl6gv.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpspecl6gv.cpp:21:30:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        res.push_back(str);\n                              ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpspecl6gv.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    for(auto &str : lst1){\n\
    \        if(std::count(lst2.begin(), lst2.end(), str) < std::count(lst2.begin(),\
    \ lst2.end(), str)){\n            result.push_back(str);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppbplr6tj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmppbplr6tj.cpp:19:15: error: ISO C++ forbids declaration of 'str'\
    \ with no type [-fpermissive]\n     for(auto &str : lst1){\n               ^\n\
    /tmp/tmppbplr6tj.cpp:19:21: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(auto &str : lst1){\n                     ^\n/tmp/tmppbplr6tj.cpp:21:33:\
    \ error: invalid user-defined conversion from 'int' to 'const value_type& {aka\
    \ const std::basic_string<char>&}' [-fpermissive]\n             result.push_back(str);\n\
    \                                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmppbplr6tj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmppbplr6tj.cpp:21:33:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(str);\n                                 ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppbplr6tj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> result;\n    \n    for(int i = 0; i <\
    \ lst1.size(); i++) {\n        for(int j = 0; j < lst2.size(); j++) {\n      \
    \      if(lst1[i] < lst2[j]) {\n                result.push_back(lst1[i]);\n \
    \               break;\n            }\n        }\n    }\n    \n    if(result.size()\
    \ == lst1.size()) {\n        return result;\n    }\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pb0a_dg.cpp: In function 'int main()':\n/tmp/tmp2pb0a_dg.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2pb0a_dg.cpp:2:\n/tmp/tmp2pb0a_dg.cpp:37:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp2pb0a_dg.cpp:38:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp2pb0a_dg.cpp:38:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp2pb0a_dg.cpp:38:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2pb0a_dg.cpp:38:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    std::vector<std::string> result;\n    \n    for(int i = 0;\
    \ i < lst1.size(); i++) {\n        \n        for(int j = 0; j < lst2.size(); j++)\
    \ {\n            \n            if(lst1[i] == lst2[j]) {\n                \n  \
    \              result.push_back(lst1[i]);\n                \n                break;\n\
    \            }\n            \n        }\n        \n    }\n    \n    return result;\n\
    \    \n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7rj0bo_.cpp: In function 'int main()':\n/tmp/tmpe7rj0bo_.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe7rj0bo_.cpp:2:\n/tmp/tmpe7rj0bo_.cpp:41:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe7rj0bo_.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe7rj0bo_.cpp:42:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe7rj0bo_.cpp:42:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe7rj0bo_.cpp:42:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    std::vector<std::string> res;\n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if((*it1).size() >= (*it2).size()) {\n               \
    \ if((*it1).size() == (*it2).size()) {\n                    if((*it1).find(*it2)\
    \ != std::string::npos) {\n                        res.push_back(*it1);\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu15krla0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpu15krla0.cpp:19:14: error: 'it1' does not name a type\n     for(auto\
    \ it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n              ^\n/tmp/tmpu15krla0.cpp:19:34:\
    \ error: expected ';' before 'it1'\n     for(auto it1 = lst1.begin(); it1 != lst1.end();\
    \ ++it1) {\n                                  ^\n/tmp/tmpu15krla0.cpp:19:34: error:\
    \ 'it1' was not declared in this scope\n/tmp/tmpu15krla0.cpp:20:18: error: 'it2'\
    \ does not name a type\n         for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n                  ^\n/tmp/tmpu15krla0.cpp:20:38: error: expected ';'\
    \ before 'it2'\n         for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2)\
    \ {\n                                      ^\n/tmp/tmpu15krla0.cpp:20:38: error:\
    \ 'it2' was not declared in this scope\n/tmp/tmpu15krla0.cpp: In function 'int\
    \ main()':\n/tmp/tmpu15krla0.cpp:33:10: error: 'candidate' does not name a type\n\
    \     auto candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu15krla0.cpp:2:\n/tmp/tmpu15krla0.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpu15krla0.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpu15krla0.cpp:35:89:\
    \ warning: extended initializer lists only available with "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    \n    std::vector<std::string> result;\n    \n    if(lst1.size()\
    \ == lst2.size()) {\n        \n        for(size_t i = 0; i < lst1.size(); i++)\
    \ {\n            \n            for(size_t j = 0; j < lst2.size(); j++) {\n   \
    \             \n                if(lst1[i] < lst2[j]) {\n                    \n\
    \                    result.push_back(lst1[i]);\n                    \n      \
    \              break;\n                    \n                }\n             \
    \   \n            }\n            \n        }\n        \n    }\n    \n    return\
    \ result;\n    \n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprebat4t6.cpp: In function 'int main()':\n/tmp/tmprebat4t6.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprebat4t6.cpp:2:\n/tmp/tmprebat4t6.cpp:46:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmprebat4t6.cpp:47:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmprebat4t6.cpp:47:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmprebat4t6.cpp:47:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprebat4t6.cpp:47:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
