language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \".?!\";\n  \
    \  std::string delimiters_lowercase = \"i.e\";\n    std::string delimiters_uppercase\
    \ = \"I.E\";\n    std::string delimiters_numbers = \"1234567890\";\n    std::string\
    \ delimiters_specials = \"!@#$%^&*()_+\";\n    std::string delimiters_all = \"\
    .?!1234567890\";\n    std::string delimiters_all_lowercase = \"i.e\";\n    std::string\
    \ delimiters_all_uppercase = \"I.E\";\n    std::string delimiters_all_numbers\
    \ = \"1234567890\";\n    std::string delimiters_all_specials = \"!@#$%^&*()_+\"\
    ;\n    std::string delimiters_all_all = \".?!1234567890\";\n    std::string delimiters_all_all_lowercase\
    \ = \"i.e\";\n    std::string delimiters_all_all_uppercase = \"I.E\";\n    std::string\
    \ delimiters_all_all_numbers = \"1234567890\";\n    std::string delimiters_all_all_specials\
    \ = \"!@#$%^&*()_+\";\n    std::string delimiters_all_all_all = \".?!1234567890\"\
    ;\n    std::string delimiters_all_all_all_lowercase = \"i.e\";\n    std::string\
    \ delimiters_all_all_all_uppercase = \"I.E\";\n    std::string delimiters_all_all_all_numbers\
    \ = \"1234567890\";\n    std::string delimiters_all_all_all_specials = \"!@#$%^&*()_+\"\
    ;\n    std::string delimiters_all_all_all_all = \".?!1234567890\";\n    std::string\
    \ delimiters_all_all_all_all_lowercase = \"i.e\";\n    std::string delimiters_all_all_all_all_uppercase\
    \ = \"I.E\";\n    std::string delimiters_all_all_all_all_numbers = \"1234567890\"\
    ;\n    std::string delimiters_all_all_all_all_specials = \"!@#$%^&*()_+\";\n \
    \   std::string delimiters_all_all_all_all_all = \".?!1234567890\";\n    std::string\
    \ delimiters_all_all_all_all_all_lowercase = \"i.e\";\n    std::string delimiters_all_all_all_all_all_uppercase\
    \ = \"I.E\";\n    std::string delimiters_all_all_all_all_all_numbers = \"1234567890\"\
    ;\n    std::string delimiters_all_all_all_all_all_specials = \"!@#$%^&*()_+\"\
    ;\n    std::string delimiters_all_all_all_all_all_all = \".?!1234567890\";\n \
    \   std::string delimiters_all_all_all_all_all_all_lowercase = \"i.e\";\n    std::string\
    \ delimiters_all_all_all_all_all_all_uppercase = \"I.E\";\n    std::string delimiters_all_all_all_all_all_all_numbers\
    \ = \"123456789\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8so9rfjs.cpp:48:62: warning: missing terminating \" character\n\
    \   48 |     std::string delimiters_all_all_all_all_all_all_numbers = \"123456789\n\
    \      |                                                              ^\n/tmp/tmp8so9rfjs.cpp:48:62:\
    \ error: missing terminating \" character\n   48 |     std::string delimiters_all_all_all_all_all_all_numbers\
    \ = \"123456789\n      |                                                     \
    \         ^~~~~~~~~~\n/tmp/tmp8so9rfjs.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8so9rfjs.cpp:49:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   49 | }\n      | ^\n/tmp/tmp8so9rfjs.cpp:49:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp8so9rfjs.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    std::string delimiter2 = \"\
    .\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4 = \"!\"\
    ;\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6 = \".\";\n\
    \    std::string delimiter7 = \"?\";\n    std::string delimiter8 = \"!\";\n  \
    \  std::string delimiter9 = \".?!\";\n    std::string delimiter10 = \".\";\n \
    \   std::string delimiter11 = \"?\";\n    std::string delimiter12 = \"!\";\n \
    \   std::string delimiter13 = \".?!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".?!\";\n    std::string delimiter18 = \".\";\n\
    \    std::string delimiter19 = \"?\";\n    std::string delimiter20 = \"!\";\n\
    \    std::string delimiter21 = \".?!\";\n    std::string delimiter22 = \".\";\n\
    \    std::string delimiter23 = \"?\";\n    std::string delimiter24 = \"!\";\n\
    \    std::string delimiter25 = \".?!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".?!\";\n    std::string delimiter30 = \".\";\n\
    \    std::string delimiter31 = \"?\";\n    std::string delimiter32 = \"!\";\n\
    \    std::string delimiter33 = \".?!\";\n    std::string delimiter34 = \".\";\n\
    \    std::string delimiter35 = \"?\";\n    std::string delimiter36 = \"!\";\n\
    \    std::string delimiter37 = \".?!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \".?!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".?!\";\n    std::string delimiter46 = \".\";\n\
    \    std::string delimiter47 = \"?\";\n    std::string delimiter48 = \"!\";\n\
    \    std::string delimiter49 = \".?!\";\n    std::string delimiter50 = \".\";\n\
    \    std::string delimiter51 = \"?\";\n    std::string delimiter52 = \"!\";\n\
    \    std::string delimiter53 = \".?!\";\n    std::string delimiter54 = \".\";\n\
    \    std::string delimiter55 = \"?\";\n    std::string delimiter56 = \"!\";\n\
    \    std::string delimiter57 = \".?!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgl2qt54w.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpgl2qt54w.cpp:73:1: error: expected initializer before \u2018}\u2019\
    \ token\n   73 | }\n      | ^\n/tmp/tmpgl2qt54w.cpp:73:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n        }\n        else {\n            word = word\
    \ + c;\n        }\n    }\n    if (word == \"I\") {\n        boredoms++;\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0vy1_6ko: /tmp/tmp0vy1_6ko.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++){\n        word = S[i];\n        if(word\
    \ == \"I\"){\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqcsf_i75: /tmp/tmpqcsf_i75.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom_word = \"I\";\n\
    \    std::string boredom_sentence = \"I\";\n    std::string sentence;\n    std::string\
    \ sentence_word;\n    std::string sentence_sentence;\n    std::string sentence_boredom_word;\n\
    \    std::string sentence_boredom_sentence;\n    std::string sentence_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_sentence;\n    std::string sentence_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_sentence;\n    std::string sentence_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_sentence;\n    std::string\
    \ sentence_boredom_boredom_boredom_boredom_boredom_word;\n    std::string sentence_boredom_boredom_boredom_boredom_boredom_sentence;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_sentence;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_sentence;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_sentence;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_sentence;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_word;\n\
    \    std::string sentence_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_boredom_bore\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo107jy4s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpo107jy4s.cpp:40:1: error: expected initializer before \u2018}\u2019\
    \ token\n   40 | }\n      | ^\n/tmp/tmpo107jy4s.cpp:40:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase\
    \ = \"i.e\";\n    std::string delimiters_uppercase = \"I.E\";\n    std::string\
    \ delimiters_numbers = \"1.\";\n    std::string delimiters_specials = \"!\";\n\
    \    std::string delimiters_special_lowercase = \"i.e\";\n    std::string delimiters_special_uppercase\
    \ = \"I.E\";\n    std::string delimiters_special_numbers = \"1.\";\n    std::string\
    \ delimiters_special_specials = \"!\";\n    std::string delimiters_special_special_lowercase\
    \ = \"i.e\";\n    std::string delimiters_special_special_uppercase = \"I.E\";\n\
    \    std::string delimiters_special_special_numbers = \"1.\";\n    std::string\
    \ delimiters_special_special_specials = \"!\";\n    std::string delimiters_special_special_special_lowercase\
    \ = \"i.e\";\n    std::string delimiters_special_special_special_uppercase = \"\
    I.E\";\n    std::string delimiters_special_special_special_numbers = \"1.\";\n\
    \    std::string delimiters_special_special_special_specials = \"!\";\n    std::string\
    \ delimiters_special_special_special_special_lowercase = \"i.e\";\n    std::string\
    \ delimiters_special_special_special_special_uppercase = \"I.E\";\n    std::string\
    \ delimiters_special_special_special_special_numbers = \"1.\";\n    std::string\
    \ delimiters_special_special_special_special_specials = \"!\";\n    std::string\
    \ delimiters_special_special_special_special_special_lowercase = \"i.e\";\n  \
    \  std::string delimiters_special_special_special_special_special_uppercase =\
    \ \"I.E\";\n    std::string delimiters_special_special_special_special_special_numbers\
    \ = \"1.\";\n    std::string delimiters_special_special_special_special_special_specials\
    \ = \"!\";\n    std::string delimiters_special_special_special_special_special_lowercase\
    \ = \"i.e\";\n    std::string delimiters_special_special_special_special_special_special_uppercase\
    \ = \"I.E\";\n    std::string delimiters_special_special_special_special_special_special_numbers\
    \ = \"1.\";\n    std::string delimiters_special_special_special_special_special_special_specials\
    \ = \"!\";\n    std::string delimiters_special_special_special_special_special_special_special_lowercase\
    \ = \"i.e\";\n    std::string delimiters_special_special_special_special_special_special_special_special_uppercase\
    \ = \"I.E\";\n    std::string delimiters_special_special_special_special_special_special_special_numbers\
    \ = \"1.\";\n    std::string delimiters_special_special_special_special_special_special_special_specials\
    \ = \"!\";\n    std::string delimiters_special_special_special_special_special_special_special_special_lowercase\
    \ = \"i.e\";\n    std::string delimiters_special_special_special_special_special_special_special_special_special_uppercase\
    \ = \"I.E\";\n    std::string delimiters_special_special_special_special_special_special_special_special_special_numbers\
    \ = \"1.\";\n    std::string delimiters_special_special_special_special_special_special_special_special_specials\
    \ = \"!\";\n    std::string delimiter\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp621de9ys.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp621de9ys.cpp:39:17: error: redeclaration of \u2018std::string delimiters_special_special_special_special_special_lowercase\u2019\
    \n   39 |     std::string delimiters_special_special_special_special_special_lowercase\
    \ = \"i.e\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp621de9ys.cpp:35:17: note: \u2018std::string delimiters_special_special_special_special_special_lowercase\u2019\
    \ previously declared here\n   35 |     std::string delimiters_special_special_special_special_special_lowercase\
    \ = \"i.e\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp621de9ys.cpp:52:1: error: expected initializer before \u2018}\u2019 token\n\
    \   52 | }\n      | ^\n/tmp/tmp621de9ys.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4lcixf5: /tmp/tmpw4lcixf5.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    std::string delimiter1 = \"\
    \ \";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter63 = \" \n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kn7xqic.cpp:77:31: warning: missing terminating \" character\n\
    \   77 |     std::string delimiter63 = \"\n      |                           \
    \    ^\n/tmp/tmp6kn7xqic.cpp:77:31: error: missing terminating \" character\n\
    \   77 |     std::string delimiter63 = \"\n      |                           \
    \    ^ \n/tmp/tmp6kn7xqic.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6kn7xqic.cpp:78:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   78 | }\n      | ^\n/tmp/tmp6kn7xqic.cpp:78:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp6kn7xqic.cpp:78:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjid651y5: /tmp/tmpjid651y5.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.') {\n            boredoms\
    \ += 1;\n        }\n        else if (i == '?') {\n            boredoms += 1;\n\
    \        }\n        else if (i == '!') {\n            boredoms += 1;\n       \
    \ }\n        else if (i == 'I') {\n            boredoms += 1;\n        }\n   \
    \     else {\n            word = i;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp__i0xldj: /tmp/tmp__i0xldj.cpp:36: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n\
    \        if (word[0] == 'I')\n            boredoms += 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7iv8c_m0: /tmp/tmp7iv8c_m0.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.length()) {\n        if (S[i] == '.') {\n            boredom++;\n\
    \        }\n        if (S[i] == '?') {\n            boredom++;\n        }\n  \
    \      if (S[i] == '!') {\n            boredom++;\n        }\n        i++;\n \
    \   }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgx6oszm2: /tmp/tmpgx6oszm2.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter2 = \".?!\";\n    std::string delimiter3 = \"\
    .?!\";\n    std::string delimiter4 = \".?!\";\n    std::string delimiter5 = \"\
    .?!\";\n    std::string delimiter6 = \".?!\";\n    std::string delimiter7 = \"\
    .?!\";\n    std::string delimiter8 = \".?!\";\n    std::string delimiter9 = \"\
    .?!\";\n    std::string delimiter10 = \".?!\";\n    std::string delimiter11 =\
    \ \".?!\";\n    std::string delimiter12 = \".?!\";\n    std::string delimiter13\
    \ = \".?!\";\n    std::string delimiter14 = \".?!\";\n    std::string delimiter15\
    \ = \".?!\";\n    std::string delimiter16 = \".?!\";\n    std::string delimiter17\
    \ = \".?!\";\n    std::string delimiter18 = \".?!\";\n    std::string delimiter19\
    \ = \".?!\";\n    std::string delimiter20 = \".?!\";\n    std::string delimiter21\
    \ = \".?!\";\n    std::string delimiter22 = \".?!\";\n    std::string delimiter23\
    \ = \".?!\";\n    std::string delimiter24 = \".?!\";\n    std::string delimiter25\
    \ = \".?!\";\n    std::string delimiter26 = \".?!\";\n    std::string delimiter27\
    \ = \".?!\";\n    std::string delimiter28 = \".?!\";\n    std::string delimiter29\
    \ = \".?!\";\n    std::string delimiter30 = \".?!\";\n    std::string delimiter31\
    \ = \".?!\";\n    std::string delimiter32 = \".?!\";\n    std::string delimiter33\
    \ = \".?!\";\n    std::string delimiter34 = \".?!\";\n    std::string delimiter35\
    \ = \".?!\";\n    std::string delimiter36 = \".?!\";\n    std::string delimiter37\
    \ = \".?!\";\n    std::string delimiter38 = \".?!\";\n    std::string delimiter39\
    \ = \".?!\";\n    std::string delimiter40 = \".?!\";\n    std::string delimiter41\
    \ = \".?!\";\n    std::string delimiter42 = \".?!\";\n    std::string delimiter43\
    \ = \".?!\";\n    std::string delimiter44 = \".?!\";\n    std::string delimiter45\
    \ = \".?!\";\n    std::string delimiter46 = \".?!\";\n    std::string delimiter47\
    \ = \".?!\";\n    std::string delimiter48 = \".?!\";\n    std::string delimiter49\
    \ = \".?!\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvnjehhrh: /tmp/tmpvnjehhrh.cpp:68: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \".?!\";\n  \
    \  size_t pos = 0;\n    size_t count = 0;\n    while(pos < S.length()) {\n   \
    \     word = S.substr(pos, 1);\n        pos = pos + 1;\n        pos = S.find(delimiters,\
    \ pos);\n        sentence = S.substr(0, pos);\n        boredoms += (sentence.find(word)\
    \ != std::string::npos);\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1as8fa4f: /tmp/tmp1as8fa4f.cpp:29: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string::size_type pos;\n\
    \    std::string temp;\n    pos = 0;\n    temp = S;\n    while (pos != std::string::npos)\
    \ {\n        pos = temp.find(delimiters, pos);\n        word = temp.substr(0,\
    \ pos);\n        if (word == \"I\") {\n            boredoms++;\n        }\n  \
    \      temp = temp.substr(pos + 1);\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2t_9iqen: /tmp/tmp2t_9iqen.cpp:33: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredom++;\n        }\n        i++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpid7mpac4: /tmp/tmpid7mpac4.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    std::string\
    \ temp;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n     \
    \   pos = 0;\n        temp = S;\n        for(size_t i = 0; i < delimiters.size();\
    \ i++) {\n            pos = temp.find(delimiters[i]);\n            if(pos != std::string::npos)\
    \ {\n                temp = temp.substr(0, pos);\n                break;\n   \
    \         }\n        }\n        if(word == \"I\") {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kev6i60.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_kev6i60.cpp:27:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_kev6i60.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:30:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:29:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously decla"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpye454b6p: /tmp/tmpye454b6p.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            boredom++;\n\
    \        }\n        else if (S[i] == '?') {\n            boredom++;\n        }\n\
    \        else if (S[i] == '!') {\n            boredom++;\n        }\n        i++;\n\
    \    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp886yblrn: /tmp/tmp886yblrn.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeol3xpgz: /tmp/tmpeol3xpgz.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \"?.!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter63 = \" \";\n\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4dpntzx8: /tmp/tmp4dpntzx8.cpp:82: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter1 = \"I\";\n    std::string delimiter2 = \".\";\n    std::string delimiter3\
    \ = \".\";\n    std::string delimiter4 = \".\";\n    std::string delimiter5 =\
    \ \".\";\n    std::string delimiter6 = \".\";\n    std::string delimiter7 = \"\
    .\";\n    std::string delimiter8 = \".\";\n    std::string delimiter9 = \".\"\
    ;\n    std::string delimiter10 = \".\";\n    std::string delimiter11 = \".\";\n\
    \    std::string delimiter12 = \".\";\n    std::string delimiter13 = \".\";\n\
    \    std::string delimiter14 = \".\";\n    std::string delimiter15 = \".\";\n\
    \    std::string delimiter16 = \".\";\n    std::string delimiter17 = \".\";\n\
    \    std::string delimiter18 = \".\";\n    std::string delimiter19 = \".\";\n\
    \    std::string delimiter20 = \".\";\n    std::string delimiter21 = \".\";\n\
    \    std::string delimiter22 = \".\";\n    std::string delimiter23 = \".\";\n\
    \    std::string delimiter24 = \".\";\n    std::string delimiter25 = \".\";\n\
    \    std::string delimiter26 = \".\";\n    std::string delimiter27 = \".\";\n\
    \    std::string delimiter28 = \".\";\n    std::string delimiter29 = \".\";\n\
    \    std::string delimiter30 = \".\";\n    std::string delimiter31 = \".\";\n\
    \    std::string delimiter32 = \".\";\n    std::string delimiter33 = \".\";\n\
    \    std::string delimiter34 = \".\";\n    std::string delimiter35 = \".\";\n\
    \    std::string delimiter36 = \".\";\n    std::string delimiter37 = \".\";\n\
    \    std::string delimiter38 = \".\";\n    std::string delimiter39 = \".\";\n\
    \    std::string delimiter40 = \".\";\n    std::string delimiter41 = \".\";\n\
    \    std::string delimiter42 = \".\";\n    std::string delimiter43 = \".\";\n\
    \    std::string delimiter44 = \".\";\n    std::string delimiter45 = \".\";\n\
    \    std::string delimiter46 = \".\";\n    std::string delimiter47 = \".\";\n\
    \    std::string delimiter48 = \".\";\n    std::string delimiter49 = \".\";\n\
    \    std::string delimiter50 = \".\";\n    std::string delimiter51 = \".\";\n\
    \    std::string delimiter52 = \".\";\n    std::string delimiter53 = \".\";\n\
    \    std::string delimiter54 = \".\";\n    std::string delimiter55 = \".\";\n\
    \    std::string delimiter56 = \".\";\n    std::string delimiter57 = \".\";\n\
    \    std::string delimiter58 = \".\";\n    std::string delimiter59 = \".\";\n\
    \    std::string delimiter60 = \".\";\n    std::string delimiter61 = \".\";\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmx53jxsv: /tmp/tmpmx53jxsv.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \". ? !\";\n\
    \    size_t pos = 0;\n    size_t pos1 = 0;\n    size_t pos2 = 0;\n    size_t pos3\
    \ = 0;\n    size_t pos4 = 0;\n    size_t pos5 = 0;\n    size_t pos6 = 0;\n   \
    \ size_t pos7 = 0;\n    size_t pos8 = 0;\n    size_t pos9 = 0;\n    size_t pos10\
    \ = 0;\n    size_t pos11 = 0;\n    size_t pos12 = 0;\n    size_t pos13 = 0;\n\
    \    size_t pos14 = 0;\n    size_t pos15 = 0;\n    size_t pos16 = 0;\n    size_t\
    \ pos17 = 0;\n    size_t pos18 = 0;\n    size_t pos19 = 0;\n    size_t pos20 =\
    \ 0;\n    size_t pos21 = 0;\n    size_t pos22 = 0;\n    size_t pos23 = 0;\n  \
    \  size_t pos24 = 0;\n    size_t pos25 = 0;\n    size_t pos26 = 0;\n    size_t\
    \ pos27 = 0;\n    size_t pos28 = 0;\n    size_t pos29 = 0;\n    size_t pos30 =\
    \ 0;\n    size_t pos31 = 0;\n    size_t pos32 = 0;\n    size_t pos33 = 0;\n  \
    \  size_t pos34 = 0;\n    size_t pos35 = 0;\n    size_t pos36 = 0;\n    size_t\
    \ pos37 = 0;\n    size_t pos38 = 0;\n    size_t pos39 = 0;\n    size_t pos40 =\
    \ 0;\n    size_t pos41 = 0;\n    size_t pos42 = 0;\n    size_t pos43 = 0;\n  \
    \  size_t pos44 = 0;\n    size_t pos45 = 0;\n    size_t pos46 = 0;\n    size_t\
    \ pos47 = 0;\n    size_t pos48 = 0;\n    size_t pos49 = 0;\n    size_t pos50 =\
    \ 0;\n    size_t pos51 = 0;\n    size_t pos52 = 0;\n    size_t pos53 = 0;\n  \
    \  size_t pos54 = 0;\n    size_t pos55 = 0;\n    size_t pos56 = 0;\n    size_t\
    \ pos57 = 0;\n    size_t pos58 = 0;\n    size_t pos59 = 0;\n    size_t pos60 =\
    \ 0;\n    size_t pos61 = 0;\n    size_t pos62 = 0;\n    size_t pos63 = 0;\n  \
    \  size_t pos64 = 0;\n    size_t pos65 = 0;\n    size_t pos66 = 0;\n    size_t\
    \ pos67 = 0;\n    size_t pos68 = 0;\n    size_t pos69 = 0;\n    size_t pos70 =\
    \ 0;\n    size_t pos71 = 0;\n    size_t pos72 = 0;\n    size_t pos73 = 0;\n  \
    \  size_t pos74 = 0;\n    size_t pos75 = 0;\n    size_t pos76 = 0;\n    size_t\
    \ pos77 = 0;\n    size_t pos78 = 0;\n    size_t pos79 = 0;\n    size_t pos80 =\
    \ 0;\n    size_t pos81 = 0;\n\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplykjvs5e: /tmp/tmplykjvs5e.cpp:102: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string temp;\n\
    \    temp = S;\n    temp.erase(std::remove(temp.begin(), temp.end(), '.'), temp.end());\n\
    \    temp.erase(std::remove(temp.begin(), temp.end(), '?'), temp.end());\n   \
    \ temp.erase(std::remove(temp.begin(), temp.end(), '!'), temp.end());\n    temp.erase(std::remove(temp.begin(),\
    \ temp.end(), '.'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(),\
    \ '?'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '!'),\
    \ temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '.'), temp.end());\n\
    \    temp.erase(std::remove(temp.begin(), temp.end(), '?'), temp.end());\n   \
    \ temp.erase(std::remove(temp.begin(), temp.end(), '!'), temp.end());\n    temp.erase(std::remove(temp.begin(),\
    \ temp.end(), '.'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(),\
    \ '?'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '!'),\
    \ temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '.'), temp.end());\n\
    \    temp.erase(std::remove(temp.begin(), temp.end(), '?'), temp.end());\n   \
    \ temp.erase(std::remove(temp.begin(), temp.end(), '!'), temp.end());\n    temp.erase(std::remove(temp.begin(),\
    \ temp.end(), '.'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(),\
    \ '?'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '!'),\
    \ temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '.'), temp.end());\n\
    \    temp.erase(std::remove(temp.begin(), temp.end(), '?'), temp.end());\n   \
    \ temp.erase(std::remove(temp.begin(), temp.end(), '!'), temp.end());\n    temp.erase(std::remove(temp.begin(),\
    \ temp.end(), '.'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(),\
    \ '?'), temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '!'),\
    \ temp.end());\n    temp.erase(std::remove(temp.begin(), temp.end(), '.'), temp.end());\n\
    \    temp.erase(std::remove(temp.begin(), temp.end(), '?'), temp.end());\n   \
    \ temp.erase(std::remove(temp.begin(), temp.end(), '!'), temp.end());\n    temp.erase(std::remove(temp.begin(),\
    \ temp.end\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpevpr1p.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvpevpr1p.cpp:42:50: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   42 |     temp.erase(std::remove(temp.begin(), temp.end\n      |  \
    \                         ~                      ^\n      |                  \
    \                                )\n   43 | }\n      | ~                     \
    \                            \n/tmp/tmpvpevpr1p.cpp:43:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   43 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    size_t pos\
    \ = 0;\n    size_t pos1 = 0;\n    size_t pos2 = 0;\n    size_t pos3 = 0;\n   \
    \ size_t pos4 = 0;\n    size_t pos5 = 0;\n    size_t pos6 = 0;\n    size_t pos7\
    \ = 0;\n    size_t pos8 = 0;\n    size_t pos9 = 0;\n    size_t pos10 = 0;\n  \
    \  size_t pos11 = 0;\n    size_t pos12 = 0;\n    size_t pos13 = 0;\n    size_t\
    \ pos14 = 0;\n    size_t pos15 = 0;\n    size_t pos16 = 0;\n    size_t pos17 =\
    \ 0;\n    size_t pos18 = 0;\n    size_t pos19 = 0;\n    size_t pos20 = 0;\n  \
    \  size_t pos21 = 0;\n    size_t pos22 = 0;\n    size_t pos23 = 0;\n    size_t\
    \ pos24 = 0;\n    size_t pos25 = 0;\n    size_t pos26 = 0;\n    size_t pos27 =\
    \ 0;\n    size_t pos28 = 0;\n    size_t pos29 = 0;\n    size_t pos30 = 0;\n  \
    \  size_t pos31 = 0;\n    size_t pos32 = 0;\n    size_t pos33 = 0;\n    size_t\
    \ pos34 = 0;\n    size_t pos35 = 0;\n    size_t pos36 = 0;\n    size_t pos37 =\
    \ 0;\n    size_t pos38 = 0;\n    size_t pos39 = 0;\n    size_t pos40 = 0;\n  \
    \  size_t pos41 = 0;\n    size_t pos42 = 0;\n    size_t pos43 = 0;\n    size_t\
    \ pos44 = 0;\n    size_t pos45 = 0;\n    size_t pos46 = 0;\n    size_t pos47 =\
    \ 0;\n    size_t pos48 = 0;\n    size_t pos49 = 0;\n    size_t pos50 = 0;\n  \
    \  size_t pos51 = 0;\n    size_t pos52 = 0;\n    size_t pos53 = 0;\n    size_t\
    \ pos54 = 0;\n    size_t pos55 = 0;\n    size_t pos56 = 0;\n    size_t pos57 =\
    \ 0;\n    size_t pos58 = 0;\n    size_t pos59 = 0;\n    size_t pos60 = 0;\n  \
    \  size_t pos61 = 0;\n    size_t pos62 = 0;\n    size_t pos63 = 0;\n    size_t\
    \ pos64 = 0;\n    size_t pos65 = 0;\n    size_t pos66 = 0;\n    size_t pos67 =\
    \ 0;\n    size_t pos68 = 0;\n    size_t pos69 = 0;\n    size_t pos70 = 0;\n  \
    \  size_t pos71 = 0;\n    size_t pos72 = 0;\n    size_t pos73 = 0;\n    size_t\
    \ pos74 = 0;\n    size_t pos75 = 0;\n    size_t pos76 = 0;\n    size_t pos77 =\
    \ 0;\n    size_t pos78 = 0;\n    size_t pos79 = 0;\n    size_t pos80 = 0;\n  \
    \  size_t pos81 = 0;\n    \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw165i6_n: /tmp/tmpw165i6_n.cpp:102: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n \
    \   }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpinrc7lk1: /tmp/tmpinrc7lk1.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    while\
    \ ((pos = S.find(delimiters, pos)) != std::string::npos) {\n        word = S.substr(0,\
    \ pos);\n        if (word == \"I\") {\n            boredoms += 1;\n        }\n\
    \        pos = pos + delimiters.size();\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprmvui_1i: /tmp/tmprmvui_1i.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    for (auto &i : S) {\n        if ((i == '.') || (i == '?') || (i == '!'))\
    \ {\n            count++;\n        }\n        else {\n            word = i;\n\
    \        }\n    }\n    if (word == \"I\") {\n        count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp15q_vw_i: /tmp/tmp15q_vw_i.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n \
    \   }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpinrc7lk1: /tmp/tmpinrc7lk1.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjid651y5: /tmp/tmpjid651y5.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        ans += 1;\n        }\n        else {\n            word = i;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_8cxep2c: /tmp/tmp_8cxep2c.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    std::string sentence;\n    std::string temp;\n    std::string temp2;\n  \
    \  std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string\
    \ temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n\
    \    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n \
    \   std::string temp13;\n    std::string temp14;\n    std::string temp15;\n  \
    \  std::string temp16;\n    std::string temp17;\n    std::string temp18;\n   \
    \ std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string\
    \ temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n\
    \    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n \
    \   std::string temp29;\n    std::string temp30;\n    std::string temp31;\n  \
    \  std::string temp32;\n    std::string temp33;\n    std::string temp34;\n   \
    \ std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string\
    \ temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n\
    \    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n \
    \   std::string temp45;\n    std::string temp46;\n    std::string temp47;\n  \
    \  std::string temp48;\n    std::string temp49;\n    std::string temp50;\n   \
    \ std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string\
    \ temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n\
    \    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n \
    \   std::string temp61;\n    std::string temp62;\n    std::string temp63;\n  \
    \  std::string temp64;\n    std::string temp65;\n    std::string temp66;\n   \
    \ std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string\
    \ temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n\
    \    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n \
    \   std::string temp77;\n    std::string temp78;\n    std::string temp79;\n  \
    \  std::string temp80;\n    std::string temp81;\n    std::string temp82;\n   \
    \ std::string temp83;\n    \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3m1nuinq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3m1nuinq.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmp3m1nuinq.cpp:101:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n\
    \    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n\
    \    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n\
    \    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n\
    \    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n\
    \    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfn54vil0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfn54vil0.cpp:49:9: error: declaration of \u2018int S\u2019 shadows\
    \ a parameter\n   49 |     int S = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:65:9:\
    \ error: redeclaration of \u2018int i\u2019\n   65 |     int i = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:13:9: note: \u2018int i\u2019 previously declared\
    \ here\n   13 |     int i = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:66:9:\
    \ error: redeclaration of \u2018int j\u2019\n   66 |     int j = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:14:9: note: \u2018int j\u2019 previously declared\
    \ here\n   14 |     int j = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:67:9:\
    \ error: redeclaration of \u2018int k\u2019\n   67 |     int k = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:15:9: note: \u2018int k\u2019 previously declared\
    \ here\n   15 |     int k = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:68:9:\
    \ error: redeclaration of \u2018int l\u2019\n   68 |     int l = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:16:9: note: \u2018int l\u2019 previously declared\
    \ here\n   16 |     int l = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:69:9:\
    \ error: redeclaration of \u2018int m\u2019\n   69 |     int m = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:17:9: note: \u2018int m\u2019 previously declared\
    \ here\n   17 |     int m = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:70:9:\
    \ error: redeclaration of \u2018int n\u2019\n   70 |     int n = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:18:9: note: \u2018int n\u2019 previously declared\
    \ here\n   18 |     int n = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:71:9:\
    \ error: redeclaration of \u2018int o\u2019\n   71 |     int o = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:19:9: note: \u2018int o\u2019 previously declared\
    \ here\n   19 |     int o = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:72:9:\
    \ error: redeclaration of \u2018int p\u2019\n   72 |     int p = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:20:9: note: \u2018int p\u2019 previously declared\
    \ here\n   20 |     int p = 0;\n      |         ^\n/tmp/tmpfn54vil0.cpp:73:9:\
    \ error: redeclaration of \u2018int q\u2019\n   73 |     int q = 0;\n      | \
    \        ^\n/tmp/tmpfn54vil0.cpp:21:9: not"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!') {\n  \
    \          ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprwrlvoy8: /tmp/tmprwrlvoy8.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpts1a504n: /tmp/tmpts1a504n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiters_str = delimiters.c_str();\n    std::string delimiters_str_copy\
    \ = delimiters_str;\n    std::string delimiters_str_copy2 = delimiters_str;\n\
    \    std::string delimiters_str_copy3 = delimiters_str;\n    std::string delimiters_str_copy4\
    \ = delimiters_str;\n    std::string delimiters_str_copy5 = delimiters_str;\n\
    \    std::string delimiters_str_copy6 = delimiters_str;\n    std::string delimiters_str_copy7\
    \ = delimiters_str;\n    std::string delimiters_str_copy8 = delimiters_str;\n\
    \    std::string delimiters_str_copy9 = delimiters_str;\n    std::string delimiters_str_copy10\
    \ = delimiters_str;\n    std::string delimiters_str_copy11 = delimiters_str;\n\
    \    std::string delimiters_str_copy12 = delimiters_str;\n    std::string delimiters_str_copy13\
    \ = delimiters_str;\n    std::string delimiters_str_copy14 = delimiters_str;\n\
    \    std::string delimiters_str_copy15 = delimiters_str;\n    std::string delimiters_str_copy16\
    \ = delimiters_str;\n    std::string delimiters_str_copy17 = delimiters_str;\n\
    \    std::string delimiters_str_copy18 = delimiters_str;\n    std::string delimiters_str_copy19\
    \ = delimiters_str;\n    std::string delimiters_str_copy20 = delimiters_str;\n\
    \    std::string delimiters_str_copy21 = delimiters_str;\n    std::string delimiters_str_copy22\
    \ = delimiters_str;\n    std::string delimiters_str_copy23 = delimiters_str;\n\
    \    std::string delimiters_str_copy24 = delimiters_str;\n    std::string delimiters_str_copy25\
    \ = delimiters_str;\n    std::string delimiters_str_copy26 = delimiters_str;\n\
    \    std::string delimiters_str_copy27 = delimiters_str;\n    std::string delimiters_str_copy28\
    \ = delimiters_str;\n    std::string delimiters_str_copy29 = delimiters_str;\n\
    \    std::string delimiters_str_copy30 = delimiters_str;\n    std::string delimiters_str_copy31\
    \ = delimiters_str;\n    std::string delimiters_str_copy32 = delimiters_str;\n\
    \    std::string delimiters_str_copy33 = delimiters_str;\n    std::string delimiters_str_copy34\
    \ = delimiters_str;\n    std::string delimiters_str_copy35 = delimiters_str;\n\
    \    std::string delimiters_str_copy36 = delimiters_str;\n    std::string delimiters_str_copy37\
    \ = delimiters_str;\n    std::string delimiters_str_copy38 = delimiters_str;\n\
    \    std::string delimiters_str_copy39 = delimiters_str;\n    std::string delimiters_str_copy40\
    \ = delimiters_str;\n    std::string delimiters_str_copy4\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptvullfd.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpptvullfd.cpp:58:1: error: expected initializer before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n/tmp/tmpptvullfd.cpp:58:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpts1a504n: /tmp/tmpts1a504n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for (int i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == '.') {\n            boredom++;\n\
    \        }\n        else if (S[i] == '?') {\n            boredom++;\n        }\n\
    \        else if (S[i] == '!') {\n            boredom++;\n        }\n    }\n \
    \   return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpu7ssat2y: /tmp/tmpu7ssat2y.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkq9_cxdw: /tmp/tmpkq9_cxdw.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     if (word == \"I\") {\n            boredoms += 1;\n        }\n        pos\
    \ = S.find_first_of(delimiters, pos);\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpibdp5wfl: /tmp/tmpibdp5wfl.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiters = \".?!\";\n   \
    \ std::string delimiter = \",\";\n    std::string delimiters2;\n    std::string\
    \ delimiter2;\n    std::string delimiters3;\n    std::string delimiter3;\n   \
    \ std::string delimiters4;\n    std::string delimiter4;\n    std::string delimiters5;\n\
    \    std::string delimiter5;\n    std::string delimiters6;\n    std::string delimiter6;\n\
    \    std::string delimiters7;\n    std::string delimiter7;\n    std::string delimiters8;\n\
    \    std::string delimiter8;\n    std::string delimiters9;\n    std::string delimiter9;\n\
    \    std::string delimiters10;\n    std::string delimiter10;\n    std::string\
    \ delimiters11;\n    std::string delimiter11;\n    std::string delimiters12;\n\
    \    std::string delimiter12;\n    std::string delimiters13;\n    std::string\
    \ delimiter13;\n    std::string delimiters14;\n    std::string delimiter14;\n\
    \    std::string delimiters15;\n    std::string delimiter15;\n    std::string\
    \ delimiters16;\n    std::string delimiter16;\n    std::string delimiters17;\n\
    \    std::string delimiter17;\n    std::string delimiters18;\n    std::string\
    \ delimiter18;\n    std::string delimiters19;\n    std::string delimiter19;\n\
    \    std::string delimiters20;\n    std::string delimiter20;\n    std::string\
    \ delimiters21;\n    std::string delimiter21;\n    std::string delimiters22;\n\
    \    std::string delimiter22;\n    std::string delimiters23;\n    std::string\
    \ delimiter23;\n    std::string delimiters24;\n    std::string delimiter24;\n\
    \    std::string delimiters25;\n    std::string delimiter25;\n    std::string\
    \ delimiters26;\n    std::string delimiter26;\n    std::string delimiters27;\n\
    \    std::string delimiter27;\n    std::string delimiters28;\n    std::string\
    \ delimiter28;\n    std::string delimiters29;\n    std::string delimiter29;\n\
    \    std::string delimiters30;\n    std::string delimiter30;\n    std::string\
    \ delimiters31;\n    std::string delimiter31;\n    std::string delimiters32;\n\
    \    std::string delimiter32;\n    std::string delimiters33;\n    std::string\
    \ delimiter33;\n    std::string delimiters34;\n    std::string delimiter34;\n\
    \    std::string delimiters35;\n    std::string delimiter35;\n    std::string\
    \ delimiters36;\n    std::string delimiter36;\n    std::string delimiters37;\n\
    \    std::string delimiter37;\n    std::string delimiters38;\n    std::string\
    \ delimiter38;\n    std::string delimiters39;\n    std::string delimiter39;\n\
    \    std::string delimiters40;\n    std::string delimiter40;\n    std::string\
    \ delimiters41;\n    std::string \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpud9_ukxn.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpud9_ukxn.cpp:97:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmpud9_ukxn.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n        else if(i != ' ') {\n    \
    \        word = i;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3r3ahcy_: /tmp/tmp3r3ahcy_.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == '.') {\n            boredoms += 1;\n        }\n      \
    \  if(S[i] == '?') {\n            boredoms += 1;\n        }\n        if(S[i] ==\
    \ '!') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n \
    \           boredoms += 1;\n        }\n        if(S[i] == 'I') {\n           \
    \ boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms +=\
    \ 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n     \
    \   }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n    \
    \    if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            \n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffqsazub.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpffqsazub.cpp:109:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  109 | int main() {\n      |            ^\n/tmp/tmpffqsazub.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpffqsazub.cpp:15:39:\
    \ note: to match this \u2018{\u2019\n   15 |     for(int i = 0; i < S.size();\
    \ i++) {\n      |                                       ^\n/tmp/tmpffqsazub.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpffqsazub.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpffqsazub.cpp:117:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  117 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"?\"\
    ;\n    std::string delimiter4 = \"!\";\n    std::string delimiter5 = \".\";\n\
    \    std::string delimiter6 = \"?\";\n    std::string delimiter7 = \"!\";\n  \
    \  std::string delimiter8 = \".\";\n    std::string delimiter9 = \"?\";\n    std::string\
    \ delimiter10 = \"!\";\n    std::string delimiter11 = \".\";\n    std::string\
    \ delimiter12 = \"?\";\n    std::string delimiter13 = \"!\";\n    std::string\
    \ delimiter14 = \".\";\n    std::string delimiter15 = \"?\";\n    std::string\
    \ delimiter16 = \"!\";\n    std::string delimiter17 = \".\";\n    std::string\
    \ delimiter18 = \"?\";\n    std::string delimiter19 = \"!\";\n    std::string\
    \ delimiter20 = \".\";\n    std::string delimiter21 = \"?\";\n    std::string\
    \ delimiter22 = \"!\";\n    std::string delimiter23 = \".\";\n    std::string\
    \ delimiter24 = \"?\";\n    std::string delimiter25 = \"!\";\n    std::string\
    \ delimiter26 = \".\";\n    std::string delimiter27 = \"?\";\n    std::string\
    \ delimiter28 = \"!\";\n    std::string delimiter29 = \".\";\n    std::string\
    \ delimiter30 = \"?\";\n    std::string delimiter31 = \"!\";\n    std::string\
    \ delimiter32 = \".\";\n    std::string delimiter33 = \"?\";\n    std::string\
    \ delimiter34 = \"!\";\n    std::string delimiter35 = \".\";\n    std::string\
    \ delimiter36 = \"?\";\n    std::string delimiter37 = \"!\";\n    std::string\
    \ delimiter38 = \".\";\n    std::string delimiter39 = \"?\";\n    std::string\
    \ delimiter40 = \"!\";\n    std::string delimiter41 = \"!\";\n    std::string\
    \ delimiter42 = \".\";\n    std::string delimiter43 = \"?\";\n    std::string\
    \ delimiter44 = \"!\";\n    std::string delimiter45 = \".\";\n    std::string\
    \ delimiter46 = \"?\";\n    std::string delimiter47 = \"!\";\n    std::string\
    \ delimiter48 = \".\";\n    std::string delimiter49 = \"?\";\n    std::string\
    \ delimiter50 = \"!\";\n    std::string delimiter51 = \"!\";\n    std::string\
    \ delimiter52 = \".\";\n    std::string delimiter53 = \"?\";\n    std::string\
    \ delimiter54 = \"!\";\n    std::string delimiter55 = \".\";\n    std::string\
    \ delimiter56 = \"?\";\n    std::string delimiter57 = \"!\";\n    std::string\
    \ delimiter58 = \".\";\n    std::string delimiter59 = \"?\";\n    std::string\
    \ delimiter60 = \"!\";\n    std::string delimiter61 = \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphoeajm2k.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphoeajm2k.cpp:76:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmphoeajm2k.cpp:76:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmphoeajm2k.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_5\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqovk5l8s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqovk5l8s.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpqovk5l8s.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \".?!\";\n    std::string\
    \ delimiters_lower = \"i.e\";\n    std::string delimiters_upper = \"I.E\";\n \
    \   std::string delimiters_mixed = \"i.E.\";\n    std::string delimiters_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_lower = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \"I.E.\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpop0v0p0q.cpp:47:102: warning: missing terminating \" character\n\
    \   47 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"\n      |                                                              \
    \                                        ^\n/tmp/tmpop0v0p0q.cpp:47:102: error:\
    \ missing terminating \" character\n/tmp/tmpop0v0p0q.cpp: In function \u2018long\
    \ int is_bored(std::string)\u2019:\n/tmp/tmpop0v0p0q.cpp:28:17: error: redeclaration\
    \ of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\n   28 |\
    \     std::string delimiters_mixed_mixed_mixed_mixed_lower = \"I.E.\";\n     \
    \ |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpop0v0p0q.cpp:26:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpop0v0p0q.cpp:29:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpop0v0p0q.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpop0v0p0q.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpop0v0p0q.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpop0v0p0q."
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \"?.!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \".\";\n    std::string delimiter3 = \"!\"\
    ;\n    std::string delimiter4 = \"?\";\n    std::string delimiter5 = \".\";\n\
    \    std::string delimiter6 = \"!\";\n    std::string delimiter7 = \"?\";\n  \
    \  std::string delimiter8 = \".\";\n    std::string delimiter9 = \"!\";\n    std::string\
    \ delimiter10 = \"?\";\n    std::string delimiter11 = \".\";\n    std::string\
    \ delimiter12 = \"!\";\n    std::string delimiter13 = \"?\";\n    std::string\
    \ delimiter14 = \".\";\n    std::string delimiter15 = \"!\";\n    std::string\
    \ delimiter16 = \"?\";\n    std::string delimiter17 = \".\";\n    std::string\
    \ delimiter18 = \"!\";\n    std::string delimiter19 = \"?\";\n    std::string\
    \ delimiter20 = \".\";\n    std::string delimiter21 = \"!\";\n    std::string\
    \ delimiter22 = \"?\";\n    std::string delimiter23 = \".\";\n    std::string\
    \ delimiter24 = \"!\";\n    std::string delimiter25 = \"?\";\n    std::string\
    \ delimiter26 = \".\";\n    std::string delimiter27 = \"!\";\n    std::string\
    \ delimiter28 = \"?\";\n    std::string delimiter29 = \".\";\n    std::string\
    \ delimiter30 = \"!\";\n    std::string delimiter31 = \"?\";\n    std::string\
    \ delimiter32 = \".\";\n    std::string delimiter33 = \"!\";\n    std::string\
    \ delimiter34 = \"?\";\n    std::string delimiter35 = \".\";\n    std::string\
    \ delimiter36 = \"!\";\n    std::string delimiter37 = \"?\";\n    std::string\
    \ delimiter38 = \".\";\n    std::string delimiter39 = \"!\";\n    std::string\
    \ delimiter40 = \"?\";\n    std::string delimiter41 = \".\";\n    std::string\
    \ delimiter42 = \"!\";\n    std::string delimiter43 = \"?\";\n    std::string\
    \ delimiter44 = \".\";\n    std::string delimiter45 = \"!\";\n    std::string\
    \ delimiter46 = \"?\";\n    std::string delimiter47 = \".\";\n    std::string\
    \ delimiter48 = \"!\";\n    std::string delimiter49 = \"?\";\n    std::string\
    \ delimiter50 = \".\";\n    std::string delimiter51 = \"!\";\n    std::string\
    \ delimiter52 = \"?\";\n    std::string delimiter53 = \".\";\n    std::string\
    \ delimiter54 = \"!\";\n    std::string delimiter55 = \"?\";\n    std::string\
    \ delimiter56 = \".\";\n    std::string delimiter57 = \"!\";\n    std::string\
    \ delimiter58 = \"?\";\n    std::string delimiter59 = \".\";\n    std::string\
    \ delimiter60 = \"!\";\n    std::string delimiter61 = \"?\";\n    std::string\
    \ \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3l0zt__z.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3l0zt__z.cpp:77:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmp3l0zt__z.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom = \"I\";\n    std::string delimiter = \".?!\";\n    size_t\
    \ pos = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n  \
    \      if(boredom.find(word) != std::string::npos) {\n            ans += 1;\n\
    \        }\n        pos += 1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz_bd3yrh: /tmp/tmpz_bd3yrh.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppocq6sub: /tmp/tmppocq6sub.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter1 = \"!\";\n    std::string delimiter2 = \"?\"\
    ;\n    std::string delimiter3 = \".\";\n    std::string delimiter4 = \".\";\n\
    \    std::string delimiter5 = \".\";\n    std::string delimiter6 = \".\";\n  \
    \  std::string delimiter7 = \".\";\n    std::string delimiter8 = \".\";\n    std::string\
    \ delimiter9 = \".\";\n    std::string delimiter10 = \".\";\n    std::string delimiter11\
    \ = \".\";\n    std::string delimiter12 = \".\";\n    std::string delimiter13\
    \ = \".\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15\
    \ = \".\";\n    std::string delimiter16 = \".\";\n    std::string delimiter17\
    \ = \".\";\n    std::string delimiter18 = \".\";\n    std::string delimiter19\
    \ = \".\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21\
    \ = \".\";\n    std::string delimiter22 = \".\";\n    std::string delimiter23\
    \ = \".\";\n    std::string delimiter24 = \".\";\n    std::string delimiter25\
    \ = \".\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27\
    \ = \".\";\n    std::string delimiter28 = \".\";\n    std::string delimiter29\
    \ = \".\";\n    std::string delimiter30 = \".\";\n    std::string delimiter31\
    \ = \".\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33\
    \ = \".\";\n    std::string delimiter34 = \".\";\n    std::string delimiter35\
    \ = \".\";\n    std::string delimiter36 = \".\";\n    std::string delimiter37\
    \ = \".\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39\
    \ = \".\";\n    std::string delimiter40 = \".\";\n    std::string delimiter41\
    \ = \".\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43\
    \ = \".\";\n    std::string delimiter44 = \".\";\n    std::string delimiter45\
    \ = \".\";\n    std::string delimiter46 = \".\";\n    std::string delimiter47\
    \ = \".\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49\
    \ = \".\";\n    std::string delimiter50 = \".\";\n    std::string delimiter51\
    \ = \".\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53\
    \ = \".\";\n    std::string delimiter54 = \".\";\n    std::string delimiter55\
    \ = \".\";\n    std::string delimiter56 = \".\";\n    std::string delimiter57\
    \ = \".\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59\
    \ = \".\";\n    std::string delimiter60 = \".\";\n    std::string delimiter6\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4x8cle9w.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp4x8cle9w.cpp:77:1: error: expected initializer before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmp4x8cle9w.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase\
    \ = \"i.e\";\n    std::string delimiters_uppercase = \"I.E\";\n    std::string\
    \ delimiters_mixed = \"i.E.\";\n    std::string delimiters_mixed_uppercase = \"\
    I.E.\";\n    std::string delimiters_mixed_lowercase = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_uppercase = \"I.E.\";\n    std::string delimiters_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_uppercase = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_lowercase = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_uppercase = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq97jxszg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpq97jxszg.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase =\
    \ \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:29:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase =\
    \ \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:30:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase =\
    \ \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase =\
    \ \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660094279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \".?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \".?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkihldgss.cpp:72:31: warning: missing terminating \" character\n\
    \   72 |     std::string delimiter58 = \".\n      |                          \
    \     ^\n/tmp/tmpkihldgss.cpp:72:31: error: missing terminating \" character\n\
    \   72 |     std::string delimiter58 = \".\n      |                          \
    \     ^~\n/tmp/tmpkihldgss.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkihldgss.cpp:73:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   73 | }\n      | ^\n/tmp/tmpkihldgss.cpp:73:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpkihldgss.cpp:73:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8xyf7xaa: /tmp/tmp8xyf7xaa.cpp:76: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string temp;\n\
    \    temp = S;\n    size_t pos = 0;\n    while (pos < S.size()) {\n        if\
    \ (S[0] == 'I') {\n            count++;\n            temp = S.substr(pos);\n \
    \           pos = 0;\n        }\n        else if (S[0] == '.') {\n           \
    \ temp = S.substr(pos);\n            pos = 0;\n        }\n        else if (S[0]\
    \ == '?') {\n            temp = S.substr(pos);\n            pos = 0;\n       \
    \ }\n        else if (S[0] == '!') {\n            temp = S.substr(pos);\n    \
    \        pos = 0;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (auto &c : S) {\n    \
    \    if (c == delimiters[0]) {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpck0077o2: /tmp/tmpck0077o2.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    std::string delimiter2 = \"\
    \ \";\n    std::string delimiter3 = \" \";\n    std::string delimiter4 = \" \"\
    ;\n    std::string delimiter5 = \" \";\n    std::string delimiter6 = \" \";\n\
    \    std::string delimiter7 = \" \";\n    std::string delimiter8 = \" \";\n  \
    \  std::string delimiter9 = \" \";\n    std::string delimiter10 = \" \";\n   \
    \ std::string delimiter11 = \" \";\n    std::string delimiter12 = \" \";\n   \
    \ std::string delimiter13 = \" \";\n    std::string delimiter14 = \" \";\n   \
    \ std::string delimiter15 = \" \";\n    std::string delimiter16 = \" \";\n   \
    \ std::string delimiter17 = \" \";\n    std::string delimiter18 = \" \";\n   \
    \ std::string delimiter19 = \" \";\n    std::string delimiter20 = \" \";\n   \
    \ std::string delimiter21 = \" \";\n    std::string delimiter22 = \" \";\n   \
    \ std::string delimiter23 = \" \";\n    std::string delimiter24 = \" \";\n   \
    \ std::string delimiter25 = \" \";\n    std::string delimiter26 = \" \";\n   \
    \ std::string delimiter27 = \" \";\n    std::string delimiter28 = \" \";\n   \
    \ std::string delimiter29 = \" \";\n    std::string delimiter30 = \" \";\n   \
    \ std::string delimiter31 = \" \";\n    std::string delimiter32 = \" \";\n   \
    \ std::string delimiter33 = \" \";\n    std::string delimiter34 = \" \";\n   \
    \ std::string delimiter35 = \" \";\n    std::string delimiter36 = \" \";\n   \
    \ std::string delimiter37 = \" \";\n    std::string delimiter38 = \" \";\n   \
    \ std::string delimiter39 = \" \";\n    std::string delimiter40 = \" \";\n   \
    \ std::string delimiter41 = \" \";\n    std::string delimiter42 = \" \";\n   \
    \ std::string delimiter43 = \" \";\n    std::string delimiter44 = \" \";\n   \
    \ std::string delimiter45 = \" \";\n    std::string delimiter46 = \" \";\n   \
    \ std::string delimiter47 = \" \";\n    std::string delimiter48 = \" \";\n   \
    \ std::string delimiter49 = \" \";\n    std::string delimiter50 = \" \";\n   \
    \ std::string delimiter51 = \" \";\n    std::string delimiter52 = \" \";\n   \
    \ std::string delimiter53 = \" \";\n    std::string delimiter54 = \" \";\n   \
    \ std::string delimiter55 = \" \";\n    std::string delimiter56 = \" \";\n   \
    \ std::string delimiter57 = \" \";\n    std::string delimiter58 = \" \";\n   \
    \ std::string delimiter59 = \" \";\n    std::string delimiter60 = \" \";\n   \
    \ std::string delimiter61 = \" \";\n    std::string delimiter62 = \" \";\n   \
    \ std::string delimiter63 = \" \";\n    std::string delimiter64 = \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_4zi3lt.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpt_4zi3lt.cpp:78:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   78 | }\n      | ^\n/tmp/tmpt_4zi3lt.cpp:78:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpt_4zi3lt.cpp:78:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsbi939bq: /tmp/tmpsbi939bq.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \".\"\
    ;\n    std::string delimiter3 = \".\";\n    std::string delimiter4 = \".\";\n\
    \    std::string delimiter5 = \".\";\n    std::string delimiter6 = \".\";\n  \
    \  std::string delimiter7 = \".\";\n    std::string delimiter8 = \".\";\n    std::string\
    \ delimiter9 = \".\";\n    std::string delimiter10 = \".\";\n    std::string delimiter11\
    \ = \".\";\n    std::string delimiter12 = \".\";\n    std::string delimiter13\
    \ = \".\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15\
    \ = \".\";\n    std::string delimiter16 = \".\";\n    std::string delimiter17\
    \ = \".\";\n    std::string delimiter18 = \".\";\n    std::string delimiter19\
    \ = \".\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21\
    \ = \".\";\n    std::string delimiter22 = \".\";\n    std::string delimiter23\
    \ = \".\";\n    std::string delimiter24 = \".\";\n    std::string delimiter25\
    \ = \".\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27\
    \ = \".\";\n    std::string delimiter28 = \".\";\n    std::string delimiter29\
    \ = \".\";\n    std::string delimiter30 = \".\";\n    std::string delimiter31\
    \ = \".\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33\
    \ = \".\";\n    std::string delimiter34 = \".\";\n    std::string delimiter35\
    \ = \".\";\n    std::string delimiter36 = \".\";\n    std::string delimiter37\
    \ = \".\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39\
    \ = \".\";\n    std::string delimiter40 = \".\";\n    std::string delimiter41\
    \ = \".\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43\
    \ = \".\";\n    std::string delimiter44 = \".\";\n    std::string delimiter45\
    \ = \".\";\n    std::string delimiter46 = \".\";\n    std::string delimiter47\
    \ = \".\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49\
    \ = \".\";\n    std::string delimiter50 = \".\";\n    std::string delimiter51\
    \ = \".\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53\
    \ = \".\";\n    std::string delimiter54 = \".\";\n    std::string delimiter55\
    \ = \".\";\n    std::string delimiter56 = \".\";\n    std::string delimiter57\
    \ = \".\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59\
    \ = \".\";\n    std::string delimiter60 = \".\";\n    \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp218cvi_n: /tmp/tmp218cvi_n.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n            word = \"\";\n        } else {\n   \
    \         word += c;\n        }\n    }\n    if (word == \"I\") {\n        boredoms++;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_zs9rzt1: /tmp/tmp_zs9rzt1.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!'){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpepbm__hy: /tmp/tmpepbm__hy.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        word = i;\n        if(word == \"I\") {\n    \
    \        ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphg5e_sal: /tmp/tmphg5e_sal.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase\
    \ = \"i.e\";\n    std::string delimiters_uppercase = \"I.E\";\n    std::string\
    \ delimiters_mixed = \"i.E.\";\n    std::string delimiters_mixed_uppercase = \"\
    I.E.\";\n    std::string delimiters_mixed_lowercase = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_uppercase = \"I.E.\";\n    std::string delimiters_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_uppercase = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_lowercase = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_uppercase = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq97jxszg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpq97jxszg.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase =\
    \ \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:29:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase =\
    \ \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\
    \ = \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:30:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase =\
    \ \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_uppercase\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq97jxszg.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lowercase =\
    \ \"i.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \   }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbimj77ug: /tmp/tmpbimj77ug.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    for (size_t i = 0; i < S.size(); i++) {\n\
    \        if (S[i] == '.') {\n            boredom.clear();\n            boredom\
    \ += S[i];\n            while (i < S.size() && S[i] != '.') {\n              \
    \  boredom += S[i];\n                i++;\n            }\n            boredom\
    \ += \".\";\n            boredoms += boredom.size();\n        } else if (S[i]\
    \ == '?') {\n            boredom.clear();\n            boredom += S[i];\n    \
    \        while (i < S.size() && S[i] != '?') {\n                boredom += S[i];\n\
    \                i++;\n            }\n            boredom += \"?\";\n        \
    \    boredoms += boredom.size();\n        } else if (S[i] == '!') {\n        \
    \    boredom.clear();\n            boredom += S[i];\n            while (i < S.size()\
    \ && S[i] != '!') {\n                boredom += S[i];\n                i++;\n\
    \            }\n            boredom += \"!\";\n            boredoms += boredom.size();\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3o_ze6iu: /tmp/tmp3o_ze6iu.cpp:50: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string sentence;\n    std::string\
    \ delimiters = \".?!\";\n    size_t pos = 0;\n    size_t pos1 = 0;\n    size_t\
    \ pos2 = 0;\n    size_t pos3 = 0;\n    size_t pos4 = 0;\n    size_t pos5 = 0;\n\
    \    size_t pos6 = 0;\n    size_t pos7 = 0;\n    size_t pos8 = 0;\n    size_t\
    \ pos9 = 0;\n    size_t pos10 = 0;\n    size_t pos11 = 0;\n    size_t pos12 =\
    \ 0;\n    size_t pos13 = 0;\n    size_t pos14 = 0;\n    size_t pos15 = 0;\n  \
    \  size_t pos16 = 0;\n    size_t pos17 = 0;\n    size_t pos18 = 0;\n    size_t\
    \ pos19 = 0;\n    size_t pos20 = 0;\n    size_t pos21 = 0;\n    size_t pos22 =\
    \ 0;\n    size_t pos23 = 0;\n    size_t pos24 = 0;\n    size_t pos25 = 0;\n  \
    \  size_t pos26 = 0;\n    size_t pos27 = 0;\n    size_t pos28 = 0;\n    size_t\
    \ pos29 = 0;\n    size_t pos30 = 0;\n    size_t pos31 = 0;\n    size_t pos32 =\
    \ 0;\n    size_t pos33 = 0;\n    size_t pos34 = 0;\n    size_t pos35 = 0;\n  \
    \  size_t pos36 = 0;\n    size_t pos37 = 0;\n    size_t pos38 = 0;\n    size_t\
    \ pos39 = 0;\n    size_t pos40 = 0;\n    size_t pos41 = 0;\n    size_t pos42 =\
    \ 0;\n    size_t pos43 = 0;\n    size_t pos44 = 0;\n    size_t pos45 = 0;\n  \
    \  size_t pos46 = 0;\n    size_t pos47 = 0;\n    size_t pos48 = 0;\n    size_t\
    \ pos49 = 0;\n    size_t pos50 = 0;\n    size_t pos51 = 0;\n    size_t pos52 =\
    \ 0;\n    size_t pos53 = 0;\n    size_t pos54 = 0;\n    size_t pos55 = 0;\n  \
    \  size_t pos56 = 0;\n    size_t pos57 = 0;\n    size_t pos58 = 0;\n    size_t\
    \ pos59 = 0;\n    size_t pos60 = 0;\n    size_t pos61 = 0;\n    size_t pos62 =\
    \ 0;\n    size_t pos63 = 0;\n    size_t pos64 = 0;\n    size_t pos65 = 0;\n  \
    \  size_t pos66 = 0;\n    size_t pos67 = 0;\n    size_t pos68 = 0;\n    size_t\
    \ pos69 = 0;\n    size_t pos70 = 0;\n    size_t pos71 = 0;\n    size_t pos72 =\
    \ 0;\n    size_t pos73 = 0;\n    size_t pos74 = 0;\n    size_t pos75 = 0;\n  \
    \  size_t pos76 = 0;\n    size_t pos77 = 0;\n    size_t pos78 = 0;\n    size_t\
    \ pos79 = 0;\n    size_t pos80 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpe_a82jsk: /tmp/tmpe_a82jsk.cpp:102: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.'){\n          \
    \  word = S.substr(0, i);\n            if(word == \"I\"){\n                ans\
    \ += 1;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphw1vhp3z: /tmp/tmphw1vhp3z.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            if (S[i +\
    \ 1] == '.') {\n                if (S[i + 2] == '.') {\n                    boredoms\
    \ += 3;\n                    i += 3;\n                } else {\n             \
    \       boredoms += 2;\n                    i += 2;\n                }\n     \
    \       } else {\n                boredoms += 1;\n                i += 1;\n  \
    \          }\n        } else {\n            boredoms += 1;\n            i += 1;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpio3savcj: /tmp/tmpio3savcj.cpp:37: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz7j867ei: /tmp/tmpz7j867ei.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \".\"\
    ;\n    std::string delimiter3 = \".?!\";\n    std::string delimiter4 = \".\";\n\
    \    std::string delimiter5 = \".\";\n    std::string delimiter6 = \".\";\n  \
    \  std::string delimiter7 = \".\";\n    std::string delimiter8 = \".\";\n    std::string\
    \ delimiter9 = \".\";\n    std::string delimiter10 = \".\";\n    std::string delimiter11\
    \ = \".\";\n    std::string delimiter12 = \".\";\n    std::string delimiter13\
    \ = \".\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15\
    \ = \".\";\n    std::string delimiter16 = \".\";\n    std::string delimiter17\
    \ = \".\";\n    std::string delimiter18 = \".\";\n    std::string delimiter19\
    \ = \".\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21\
    \ = \".\";\n    std::string delimiter22 = \".\";\n    std::string delimiter23\
    \ = \".\";\n    std::string delimiter24 = \".\";\n    std::string delimiter25\
    \ = \".\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27\
    \ = \".\";\n    std::string delimiter28 = \".\";\n    std::string delimiter29\
    \ = \".\";\n    std::string delimiter30 = \".\";\n    std::string delimiter31\
    \ = \".\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33\
    \ = \".\";\n    std::string delimiter34 = \".\";\n    std::string delimiter35\
    \ = \".\";\n    std::string delimiter36 = \".\";\n    std::string delimiter37\
    \ = \".\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39\
    \ = \".\";\n    std::string delimiter40 = \".\";\n    std::string delimiter41\
    \ = \".\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43\
    \ = \".\";\n    std::string delimiter44 = \".\";\n    std::string delimiter45\
    \ = \".\";\n    std::string delimiter46 = \".\";\n    std::string delimiter47\
    \ = \".\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49\
    \ = \".\";\n    std::string delimiter50 = \".\";\n    std::string delimiter51\
    \ = \".\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53\
    \ = \".\";\n    std::string delimiter54 = \".\";\n    std::string delimiter55\
    \ = \".\";\n    std::string delimiter56 = \".\";\n    std::string delimiter57\
    \ = \".\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59\
    \ = \".\";\n    std::string delimiter60 = \".\";\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9p_93hpc: /tmp/tmp9p_93hpc.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \" .?!\";\n   \
    \ std::string delimiter2 = \" .?!\";\n    std::string delimiter3 = \" .?!\";\n\
    \    std::string delimiter4 = \" .?!\";\n    std::string delimiter5 = \" .?!\"\
    ;\n    std::string delimiter6 = \" .?!\";\n    std::string delimiter7 = \" .?!\"\
    ;\n    std::string delimiter8 = \" .?!\";\n    std::string delimiter9 = \" .?!\"\
    ;\n    std::string delimiter10 = \" .?!\";\n    std::string delimiter11 = \" .?!\"\
    ;\n    std::string delimiter12 = \" .?!\";\n    std::string delimiter13 = \" .?!\"\
    ;\n    std::string delimiter14 = \" .?!\";\n    std::string delimiter15 = \" .?!\"\
    ;\n    std::string delimiter16 = \" .?!\";\n    std::string delimiter17 = \" .?!\"\
    ;\n    std::string delimiter18 = \" .?!\";\n    std::string delimiter19 = \" .?!\"\
    ;\n    std::string delimiter20 = \" .?!\";\n    std::string delimiter21 = \" .?!\"\
    ;\n    std::string delimiter22 = \" .?!\";\n    std::string delimiter23 = \" .?!\"\
    ;\n    std::string delimiter24 = \" .?!\";\n    std::string delimiter25 = \" .?!\"\
    ;\n    std::string delimiter26 = \" .?!\";\n    std::string delimiter27 = \" .?!\"\
    ;\n    std::string delimiter28 = \" .?!\";\n    std::string delimiter29 = \" .?!\"\
    ;\n    std::string delimiter30 = \" .?!\";\n    std::string delimiter31 = \" .?!\"\
    ;\n    std::string delimiter32 = \" .?!\";\n    std::string delimiter33 = \" .?!\"\
    ;\n    std::string delimiter34 = \" .?!\";\n    std::string delimiter35 = \" .?!\"\
    ;\n    std::string delimiter36 = \" .?!\";\n    std::string delimiter37 = \" .?!\"\
    ;\n    std::string delimiter38 = \" .?!\";\n    std::string delimiter39 = \" .?!\"\
    ;\n    std::string delimiter40 = \" .?!\";\n    std::string delimiter41 = \" .?!\"\
    ;\n    std::string delimiter42 = \" .?!\";\n    std::string delimiter43 = \" .?!\"\
    ;\n    std::string delimiter44 = \" .?!\";\n    std::string delimiter45 = \" .?!\"\
    ;\n    std::string delimiter46 = \" .?!\";\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9fjcq4hs: /tmp/tmp9fjcq4hs.cpp:64: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        for (size_t j = 0; j < delimiters.size();\
    \ j++) {\n            if (word.find(delimiters[j]) != std::string::npos) {\n \
    \               boredoms += 1;\n                break;\n            }\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm_9hytv1: /tmp/tmpm_9hytv1.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == '?') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == '!') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuvuohx56: /tmp/tmpuvuohx56.cpp:33: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \".?!\";\n  \
    \  size_t pos = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n\
    \    size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n\
    \    size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n\
    \    size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n\
    \    size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n\
    \    size_t B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n\
    \    size_t F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n\
    \    size_t J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n\
    \    size_t N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n\
    \    size_t R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n\
    \    size_t V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n\
    \    size_t Z = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t c = 0;\n\
    \    size_t d = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t g = 0;\n\
    \    size_t h = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n\
    \    size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n\
    \    size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n\
    \    size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n\
    \    size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n\
    \    size_t B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n\
    \    size_t F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n\
    \    size_t J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n\
    \    size_t N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n\
    \    size_t R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n\
    \    size_t V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n\
    \    size_t Z = 0;\n    size_t a = 0;\n    size_t \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptv_lk1db.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmptv_lk1db.cpp:53:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   53 |     size_t S = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:69:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   69 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:17:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   17 |     size_t i = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:70:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   70 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:18:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   18 |     size_t j = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:71:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   71 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:19:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   19 |     size_t k = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:72:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   72 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:20:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   20 |     size_t l = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:73:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   73 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:21:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   21 |     size_t m = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:74:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   74 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:22:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   22 |     size_t n = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:75:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   75 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:23:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   23 |     size_t o = 0;\n      |            ^\n/tmp/tmptv_lk1db.cpp:76:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   76 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmptv_lk1db.cpp:24:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   24 |    "
  stdout: ''
  timestamp: 1660094281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == '.'){\n            boredom++;\n        }\n        else if(S[i]\
    \ == '?'){\n            boredom++;\n        }\n        else if(S[i] == '!'){\n\
    \            boredom++;\n        }\n        else{\n            word = S[i];\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprmvut7lf: /tmp/tmprmvut7lf.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n        else {\n            word =\
    \ i;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpo0zl_gsy: /tmp/tmpo0zl_gsy.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpltvpmbsi: /tmp/tmpltvpmbsi.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom;\n    std::string\
    \ sentence;\n    std::string delimiter = \".?!\";\n    std::string delimiter2\
    \ = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4 =\
    \ \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 = \"\
    ?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \".\"\
    ;\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\";\n\
    \    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxka9nuo.cpp:76:31: warning: missing terminating \" character\n\
    \   76 |     std::string delimiter60 = \"!\n      |                          \
    \     ^\n/tmp/tmpqxka9nuo.cpp:76:31: error: missing terminating \" character\n\
    \   76 |     std::string delimiter60 = \"!\n      |                          \
    \     ^~\n/tmp/tmpqxka9nuo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqxka9nuo.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpqxka9nuo.cpp:77:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpqxka9nuo.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp73nu3oco: /tmp/tmp73nu3oco.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    std::string sentence;\n    std::string temp;\n    std::string temp2;\n  \
    \  std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string\
    \ temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n\
    \    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n \
    \   std::string temp13;\n    std::string temp14;\n    std::string temp15;\n  \
    \  std::string temp16;\n    std::string temp17;\n    std::string temp18;\n   \
    \ std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string\
    \ temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n\
    \    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n \
    \   std::string temp29;\n    std::string temp30;\n    std::string temp31;\n  \
    \  std::string temp32;\n    std::string temp33;\n    std::string temp34;\n   \
    \ std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string\
    \ temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n\
    \    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n \
    \   std::string temp45;\n    std::string temp46;\n    std::string temp47;\n  \
    \  std::string temp48;\n    std::string temp49;\n    std::string temp50;\n   \
    \ std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string\
    \ temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n\
    \    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n \
    \   std::string temp61;\n    std::string temp62;\n    std::string temp63;\n  \
    \  std::string temp64;\n    std::string temp65;\n    std::string temp66;\n   \
    \ std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string\
    \ temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n\
    \    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n \
    \   std::string temp77;\n    std::string temp78;\n    std::string temp79;\n  \
    \  std::string temp80;\n    std::string temp81;\n    std::string temp82;\n   \
    \ std::string temp83;\n    \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3m1nuinq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp3m1nuinq.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmp3m1nuinq.cpp:101:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppocq6sub: /tmp/tmppocq6sub.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word\
    \ == \"I\") {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc_mv79tc: /tmp/tmpc_mv79tc.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp18s1zzso: /tmp/tmp18s1zzso.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8xyf7xaa: /tmp/tmp8xyf7xaa.cpp:76: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::stringstream ss(S);\n    while(std::getline(ss,\
    \ sentence, '.')) {\n        std::istringstream iss(sentence);\n        while(std::getline(iss,\
    \ word, '.') || std::getline(iss, word, '?') || std::getline(iss, word, '!'))\
    \ {\n            if(word == \"I\")\n                boredoms++;\n        }\n \
    \   }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzzg1pv_7: /tmp/tmpzzg1pv_7.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4lcixf5: /tmp/tmpw4lcixf5.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    for (auto &c : S) {\n        if (c\
    \ == '.') {\n            boredom_word = word;\n            boredoms = 0;\n   \
    \     } else if (c == '?') {\n            boredom_word = word;\n            boredoms\
    \ = 0;\n        } else if (c == '!') {\n            boredom_word = word;\n   \
    \         boredoms = 0;\n        } else if (c == 'I') {\n            boredoms\
    \ = 1;\n            boredom_word = word;\n            word = \"\";\n        }\
    \ else if (c == ' ') {\n            boredoms = 0;\n            word = \"\";\n\
    \        } else {\n            word += c;\n        }\n    }\n    if (boredoms\
    \ == 1) {\n        boredoms = boredom_word.size();\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9ugtsjxt: /tmp/tmp9ugtsjxt.cpp:45: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4lcixf5: /tmp/tmpw4lcixf5.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \". ? !\";\n    std::string delimiter =\
    \ \" \";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp36eupfq0: /tmp/tmp36eupfq0.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++){\n\
    \        word = S.substr(i, 1);\n        if(word == \"I\"){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn8kvb2fp: /tmp/tmpn8kvb2fp.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     if (delimiters.find(word) != std::string::npos) {\n            pos = S.find_first_of(word,\
    \ pos);\n        } else {\n            pos = S.find_first_not_of(word, pos);\n\
    \        }\n        if (pos != std::string::npos) {\n            boredoms += 1;\n\
    \        }\n        ++i;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwcuw2n_4: /tmp/tmpwcuw2n_4.cpp:33: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpye454b6p: /tmp/tmpye454b6p.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++){\n        word = S[i];\n      \
    \  if(word == \"I\"){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9a162hrc: /tmp/tmp9a162hrc.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4lcixf5: /tmp/tmpw4lcixf5.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppocq6sub: /tmp/tmppocq6sub.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for (int i =\
    \ 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpplbigxv_: /tmp/tmpplbigxv_.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    std::string \n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd82862hv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpd82862hv.cpp:77:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpd82862hv.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    std::string word;\n    while (i < S.size()) {\n        word = S[i];\n   \
    \     if (word == \"I\") {\n            boredom++;\n        }\n        i++;\n\
    \    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpre9g4vsp: /tmp/tmpre9g4vsp.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n  \
    \      if (boredom_word == word) {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb2vv28fb: /tmp/tmpb2vv28fb.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_qcrlq84: /tmp/tmp_qcrlq84.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom_word = \"I\";\n\
    \    std::string delimiter = \".?!\";\n    size_t pos = 0;\n    std::string temp;\n\
    \    while(pos < S.length()) {\n        temp = S.substr(pos, 1);\n        pos\
    \ = pos + 1;\n        if(temp == boredom_word) {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp09dsb5t0: /tmp/tmp09dsb5t0.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \"?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \"?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\";\n\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpah3wbo6x: /tmp/tmpah3wbo6x.cpp:77: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    size_t j = 0;\n    while (pos < S.size()) {\n\
    \        word = S.substr(pos, 1);\n        if (word == \"I\") {\n            boredoms.push_back(boredom);\n\
    \            boredom.clear();\n            pos = 0;\n        }\n        else {\n\
    \            pos = pos + 1;\n            boredom.append(word);\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8n6fbb_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpp8n6fbb_.cpp:22:22: error: request for member \u2018push_back\u2019\
    \ in \u2018boredoms\u2019, which is of non-class type \u2018long int\u2019\n \
    \  22 |             boredoms.push_back(boredom);\n      |                    \
    \  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp05aramvc: /tmp/tmp05aramvc.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lowercase\
    \ = \"i.e\";\n    std::string delimiters_uppercase = \"I.E\";\n    std::string\
    \ delimiters_numbers = \"1.\";\n    std::string delimiters_specials = \"!\";\n\
    \    std::string delimiters_specials_lowercase = \"i.e\";\n    std::string delimiters_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_numbers = \"1.\";\n    std::string\
    \ delimiters_specials_specials = \"!\";\n    std::string delimiters_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_uppercase = \"I.E\"\
    ;\n    std::string delimiters_specials_specials_numbers = \"1.\";\n    std::string\
    \ delimiters_specials_specials_specials = \"!\";\n    std::string delimiters_specials_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_specials_specials_numbers =\
    \ \"1.\";\n    std::string delimiters_specials_specials_specials_specials = \"\
    !\";\n    std::string delimiters_specials_specials_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_specials_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_specials_specials_specials_numbers\
    \ = \"1.\";\n    std::string delimiters_specials_specials_specials_specials_specials\
    \ = \"!\";\n    std::string delimiters_specials_specials_specials_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_specials_specials_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_specials_specials_specials_specials_numbers\
    \ = \"1.\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials\
    \ = \"!\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_numbers\
    \ = \"1.\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_specials\
    \ = \"!\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_specials_lowercase\
    \ = \"i.e\";\n    std::string delimiters_specials_specials_specials_specials_specials_specials_specials_uppercase\
    \ = \"I.E\";\n    std::string delimiters_specials_specials_special\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpluytrdf2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpluytrdf2.cpp:46:1: error: expected initializer before \u2018}\u2019\
    \ token\n   46 | }\n      | ^\n/tmp/tmpluytrdf2.cpp:46:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    std::string\
    \ temp;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n     \
    \   pos = 0;\n        while(pos < S.size() && delimiters.find(S[pos]) != std::string::npos)\
    \ {\n            pos++;\n        }\n        temp = S.substr(pos, S.size() - pos);\n\
    \        if(word == \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp73nu3oco: /tmp/tmp73nu3oco.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    while(pos < S.size()) {\n\
    \        word = S.substr(pos, 1);\n        pos = 0;\n        for(i = 0; i < delimiters.size();\
    \ i++) {\n            if(word.find(delimiters[i]) != std::string::npos) {\n  \
    \              pos = word.find(delimiters[i]);\n                break;\n     \
    \       }\n        }\n        if(pos == 0) {\n            boredoms += 1;\n   \
    \     }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        if(word == \"I\") {\n            boredoms++;\n        }\n        pos\
    \ = pos + delimiters.size();\n    }\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnxbljr0t: /tmp/tmpnxbljr0t.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.') {\n            ans += 1;\n   \
    \     } else if (c == '?') {\n            ans += 1;\n        } else if (c == '!')\
    \ {\n            ans += 1;\n        } else if (c == 'I') {\n            ans +=\
    \ 1;\n        } else {\n            word = c;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7xz3ai45: /tmp/tmp7xz3ai45.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \". ? !\";\n    std::string delimiter =\
    \ \" \";\n    std::string temp;\n    size_t pos = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t\
    \ n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t\
    \ r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t\
    \ v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t\
    \ z = 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t\
    \ D = 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t\
    \ H = 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t\
    \ L = 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t\
    \ P = 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t\
    \ T = 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    size_t\
    \ X = 0;\n    size_t Y = 0;\n    size_t Z = 0;\n    size_t a = 0;\n    size_t\
    \ b = 0;\n    size_t c = 0;\n    size_t d = 0;\n    size_t e = 0;\n    size_t\
    \ f = 0;\n    size_t g = 0;\n    size_t h = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t\
    \ n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t\
    \ r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t\
    \ v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t\
    \ z = 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t\
    \ D = 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t\
    \ H = 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t\
    \ L = 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t\
    \ P = 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t\
    \ T = 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    size_t\
    \ X = 0;\n    size_t Y = 0;\n    size_t Z = 0;\n\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6z93k_az.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6z93k_az.cpp:54:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   54 |     size_t S = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:70:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   70 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:18:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   18 |     size_t i = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:71:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   71 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:19:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   19 |     size_t j = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:72:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   72 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:20:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   20 |     size_t k = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:73:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   73 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:21:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   21 |     size_t l = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:74:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   74 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:22:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   22 |     size_t m = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:75:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   75 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:23:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   23 |     size_t n = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:76:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   76 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:24:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   24 |     size_t o = 0;\n      |            ^\n/tmp/tmp6z93k_az.cpp:77:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   77 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmp6z93k_az.cpp:25:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   25 |    "
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \"?.!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (std::find(delimiters.begin(), delimiters.end(),\
    \ word) != delimiters.end()) {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp764jkadz.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp764jkadz.cpp:17:65:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41"
  stdout: ''
  timestamp: 1660094282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kev6i60.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_kev6i60.cpp:27:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_kev6i60.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:30:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_kev6i60.cpp:29:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously decla"
  stdout: ''
  timestamp: 1660094279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string temp;\n\
    \    for(int i=0;i<S.size();i++){\n        if(S[i] == '.'){\n            temp.clear();\n\
    \            temp.push_back(S[i]);\n            for(int j=i+1;j<S.size();j++){\n\
    \                if(S[j] == '.'){\n                    temp.push_back(S[j]);\n\
    \                }\n                else{\n                    temp.push_back(S[i]);\n\
    \                    break;\n                }\n            }\n            if(temp\
    \ == \"I\"){\n                ans++;\n            }\n        }\n        else{\n\
    \            temp.push_back(S[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp5uuh_hu: /tmp/tmpp5uuh_hu.cpp:41: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    size_t pos = 0;\n    size_t pos_boredom = 0;\n    size_t pos_delimiter\
    \ = 0;\n    size_t pos_word = 0;\n    size_t pos_delimiter2 = 0;\n    size_t pos_word2\
    \ = 0;\n    size_t pos_delimiter3 = 0;\n    size_t pos_word2 = 0;\n    size_t\
    \ pos_delimiter4 = 0;\n    size_t pos_word3 = 0;\n    size_t pos_delimiter5 =\
    \ 0;\n    size_t pos_word4 = 0;\n    size_t pos_delimiter6 = 0;\n    size_t pos_word5\
    \ = 0;\n    size_t pos_delimiter7 = 0;\n    size_t pos_word6 = 0;\n    size_t\
    \ pos_delimiter8 = 0;\n    size_t pos_word7 = 0;\n    size_t pos_delimiter9 =\
    \ 0;\n    size_t pos_word8 = 0;\n    size_t pos_delimiter10 = 0;\n    size_t pos_word9\
    \ = 0;\n    size_t pos_delimiter11 = 0;\n    size_t pos_word10 = 0;\n    size_t\
    \ pos_delimiter12 = 0;\n    size_t pos_word11 = 0;\n    size_t pos_delimiter13\
    \ = 0;\n    size_t pos_word12 = 0;\n    size_t pos_delimiter14 = 0;\n    size_t\
    \ pos_word13 = 0;\n    size_t pos_delimiter15 = 0;\n    size_t pos_word14 = 0;\n\
    \    size_t pos_delimiter16 = 0;\n    size_t pos_word15 = 0;\n    size_t pos_delimiter17\
    \ = 0;\n    size_t pos_word16 = 0;\n    size_t pos_delimiter18 = 0;\n    size_t\
    \ pos_word17 = 0;\n    size_t pos_delimiter19 = 0;\n    size_t pos_word18 = 0;\n\
    \    size_t pos_delimiter20 = 0;\n    size_t pos_word19 = 0;\n    size_t pos_delimiter21\
    \ = 0;\n    size_t pos_word20 = 0;\n    size_t pos_delimiter22 = 0;\n    size_t\
    \ pos_word21 = 0;\n    size_t pos_delimiter23 = 0;\n    size_t pos_word22 = 0;\n\
    \    size_t pos_delimiter24 = 0;\n    size_t pos_word23 = 0;\n    size_t pos_delimiter25\
    \ = 0;\n    size_t pos_word24 = 0;\n    size_t pos_delimiter26 = 0;\n    size_t\
    \ pos_word25 = 0;\n    size_t pos_delimiter27 = 0;\n    size_t pos_word26 = 0;\n\
    \    size_t pos_delimiter28 = 0;\n    size_t pos_word27 = 0;\n    size_t pos_delimiter29\
    \ = 0;\n    size_t pos_word28 = 0;\n    size_t pos_delimiter30 = 0;\n    size_t\
    \ pos_word29 = 0;\n    size_t pos_delimiter31 = 0;\n    size_t pos_word30 = 0;\n\
    \    size_t pos_delimiter32 = 0;\n    size_t pos_word31 = 0;\n    size_t pos_delimiter33\
    \ = 0;\n    size_t pos_word32 = 0;\n    size_t pos_delimiter34 = 0;\n    size_t\
    \ pos_word33 = 0;\n    size_t pos_\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwb1vhm0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphwb1vhm0.cpp:23:12: error: redeclaration of \u2018size_t pos_word2\u2019\
    \n   23 |     size_t pos_word2 = 0;\n      |            ^~~~~~~~~\n/tmp/tmphwb1vhm0.cpp:21:12:\
    \ note: \u2018size_t pos_word2\u2019 previously declared here\n   21 |     size_t\
    \ pos_word2 = 0;\n      |            ^~~~~~~~~\n/tmp/tmphwb1vhm0.cpp:87:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmphwb1vhm0.cpp:87:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n \
    \   std::string temp85;\n    std::string temp86;\n    std::string temp87;\n\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnrhueotn: /tmp/tmpnrhueotn.cpp:105: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string temp;\n    std::string temp2;\n   \
    \ std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string\
    \ temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n\
    \    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n \
    \   std::string temp13;\n    std::string temp14;\n    std::string temp15;\n  \
    \  std::string temp16;\n    std::string temp17;\n    std::string temp18;\n   \
    \ std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string\
    \ temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n\
    \    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n \
    \   std::string temp29;\n    std::string temp30;\n    std::string temp31;\n  \
    \  std::string temp32;\n    std::string temp33;\n    std::string temp34;\n   \
    \ std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string\
    \ temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n\
    \    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n \
    \   std::string temp45;\n    std::string temp46;\n    std::string temp47;\n  \
    \  std::string temp48;\n    std::string temp49;\n    std::string temp50;\n   \
    \ std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string\
    \ temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n\
    \    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n \
    \   std::string temp61;\n    std::string temp62;\n    std::string temp63;\n  \
    \  std::string temp64;\n    std::string temp65;\n    std::string temp66;\n   \
    \ std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string\
    \ temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n\
    \    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n \
    \   std::string temp77;\n    std::string temp78;\n    std::string temp79;\n  \
    \  std::string temp80;\n    std::string temp81;\n    std::string temp82;\n   \
    \ std::string temp83;\n    std::string temp84;\n    std::string temp85;\n    std::string\
    \ temp86;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgbl2zbq6: /tmp/tmpgbl2zbq6.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    size_t pos = 0;\n    size_t pos_boredom = 0;\n    size_t pos_delimiter\
    \ = 0;\n    size_t pos_word = 0;\n    size_t pos_delimiter2 = 0;\n    size_t pos_word2\
    \ = 0;\n    size_t pos_delimiter3 = 0;\n    size_t pos_word2 = 0;\n    size_t\
    \ pos_delimiter4 = 0;\n    size_t pos_word3 = 0;\n    size_t pos_delimiter5 =\
    \ 0;\n    size_t pos_word4 = 0;\n    size_t pos_delimiter6 = 0;\n    size_t pos_word5\
    \ = 0;\n    size_t pos_delimiter7 = 0;\n    size_t pos_word6 = 0;\n    size_t\
    \ pos_delimiter8 = 0;\n    size_t pos_word7 = 0;\n    size_t pos_delimiter9 =\
    \ 0;\n    size_t pos_word8 = 0;\n    size_t pos_delimiter10 = 0;\n    size_t pos_word9\
    \ = 0;\n    size_t pos_delimiter11 = 0;\n    size_t pos_word10 = 0;\n    size_t\
    \ pos_delimiter12 = 0;\n    size_t pos_word11 = 0;\n    size_t pos_delimiter13\
    \ = 0;\n    size_t pos_word12 = 0;\n    size_t pos_delimiter14 = 0;\n    size_t\
    \ pos_word13 = 0;\n    size_t pos_delimiter15 = 0;\n    size_t pos_word14 = 0;\n\
    \    size_t pos_delimiter16 = 0;\n    size_t pos_word15 = 0;\n    size_t pos_delimiter17\
    \ = 0;\n    size_t pos_word16 = 0;\n    size_t pos_delimiter18 = 0;\n    size_t\
    \ pos_word17 = 0;\n    size_t pos_delimiter19 = 0;\n    size_t pos_word18 = 0;\n\
    \    size_t pos_delimiter20 = 0;\n    size_t pos_word19 = 0;\n    size_t pos_delimiter21\
    \ = 0;\n    size_t pos_word20 = 0;\n    size_t pos_delimiter22 = 0;\n    size_t\
    \ pos_word21 = 0;\n    size_t pos_delimiter23 = 0;\n    size_t pos_word22 = 0;\n\
    \    size_t pos_delimiter24 = 0;\n    size_t pos_word23 = 0;\n    size_t pos_delimiter25\
    \ = 0;\n    size_t pos_word24 = 0;\n    size_t pos_delimiter26 = 0;\n    size_t\
    \ pos_word25 = 0;\n    size_t pos_delimiter27 = 0;\n    size_t pos_word26 = 0;\n\
    \    size_t pos_delimiter28 = 0;\n    size_t pos_word27 = 0;\n    size_t pos_delimiter29\
    \ = 0;\n    size_t pos_word28 = 0;\n    size_t pos_delimiter30 = 0;\n    size_t\
    \ pos_word29 = 0;\n    size_t pos_delimiter31 = 0;\n    size_t pos_word30 = 0;\n\
    \    size_t pos_delimiter32 = 0;\n    size_t pos_word31 = 0;\n    size_t pos_delimiter33\
    \ = 0;\n    size_t pos_word32 = 0;\n    size_t pos_delimiter34 = 0;\n    size_t\
    \ pos_word33 = 0;\n    size_t pos_\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwb1vhm0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphwb1vhm0.cpp:23:12: error: redeclaration of \u2018size_t pos_word2\u2019\
    \n   23 |     size_t pos_word2 = 0;\n      |            ^~~~~~~~~\n/tmp/tmphwb1vhm0.cpp:21:12:\
    \ note: \u2018size_t pos_word2\u2019 previously declared here\n   21 |     size_t\
    \ pos_word2 = 0;\n      |            ^~~~~~~~~\n/tmp/tmphwb1vhm0.cpp:87:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmphwb1vhm0.cpp:87:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \".?!\";\n  \
    \  size_t pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word\
    \ = S.substr(pos, 1);\n        pos = pos + 1;\n        if (word == \"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphzn2pad2: /tmp/tmphzn2pad2.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.')\
    \ {\n            boredoms += 1;\n        }\n        else if (S[i] == '?') {\n\
    \            boredoms += 1;\n        }\n        else if (S[i] == '!') {\n    \
    \        boredoms += 1;\n        }\n        else if (S[i] == 'I') {\n        \
    \    boredoms += 1;\n        }\n        else {\n            word = S[i];\n   \
    \     }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpl41a3122: /tmp/tmpl41a3122.cpp:36: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++){\n\
    \        word = S.substr(i, 1);\n        if(word == \"I\"){\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpteircd7c: /tmp/tmpteircd7c.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    for (auto &c : S) {\n        if (c == delimiter[0]) {\n          \
    \  boredoms += 1;\n            boredoms += boredom_word.find(word);\n        \
    \    word = boredom_word;\n            boredom_word = \"I\";\n        } else {\n\
    \            word += c;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2im7k_a5: /tmp/tmp2im7k_a5.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string temp;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        word = S[i];\n        if(word == \".\" || word\
    \ == \"?\" || word == \"!\") {\n            temp = S;\n            S.replace(i,\
    \ 1, \"\");\n            boredom++;\n        }\n    }\n    return boredom;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcbvmq2i5: /tmp/tmpcbvmq2i5.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++){\n        if(S[i] == 'I'){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppyu1lr5h: /tmp/tmppyu1lr5h.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    std::string\
    \ temp;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n    \
    \    if (delimiters.find(word) != std::string::npos) {\n            temp = S.substr(pos,\
    \ delimiters.size());\n            if (temp == \"I\") {\n                boredoms\
    \ += 1;\n            }\n        }\n        pos += 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpakdq35g7: /tmp/tmpakdq35g7.cpp:33: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string::size_type pos;\n\
    \    pos = S.find_first_of(delimiters);\n    while (pos != std::string::npos)\
    \ {\n        word = S.substr(0, pos);\n        if (word == \"I\") {\n        \
    \    boredoms += 1;\n        }\n        S = S.substr(pos + 1);\n        pos =\
    \ S.find_first_of(delimiters);\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdch5y29z: /tmp/tmpdch5y29z.cpp:31: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    int j = 0;\n    std::string word;\n    while(i < S.size()) {\n        word\
    \ = S[i];\n        if(word == \"I\") {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwtz6u90l: /tmp/tmpwtz6u90l.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string::size_type pos\
    \ = 0;\n    std::string::size_type lastPos = 0;\n    std::string::size_type i\
    \ = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n\
    \    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type\
    \ n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n\
    \    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type\
    \ s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n\
    \    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type\
    \ x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n\
    \    std::string::size_type A = 0;\n    std::string::size_type B = 0;\n    std::string::size_type\
    \ C = 0;\n    std::string::size_type D = 0;\n    std::string::size_type E = 0;\n\
    \    std::string::size_type F = 0;\n    std::string::size_type G = 0;\n    std::string::size_type\
    \ H = 0;\n    std::string::size_type I = 0;\n    std::string::size_type J = 0;\n\
    \    std::string::size_type K = 0;\n    std::string::size_type L = 0;\n    std::string::size_type\
    \ M = 0;\n    std::string::size_type N = 0;\n    std::string::size_type O = 0;\n\
    \    std::string::size_type P = 0;\n    std::string::size_type Q = 0;\n    std::string::size_type\
    \ R = 0;\n    std::string::size_type S = 0;\n    std::string::size_type T = 0;\n\
    \    std::string::size_type U = 0;\n    std::string::size_type V = 0;\n    std::string::size_type\
    \ W = 0;\n    std::string::size_type X = 0;\n    std::string::size_type Y = 0;\n\
    \    std::string::size_type Z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type\
    \ b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n\
    \    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type\
    \ g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n\
    \    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type\
    \ l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n\
    \    std::string::size_type o = 0;\n    std::string::size_type p\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73j_evdl.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp73j_evdl.cpp:53:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   53 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmp73j_evdl.cpp:69:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type i\u2019\n   69 |     std::string::size_type\
    \ i = 0;\n      |                            ^\n/tmp/tmp73j_evdl.cpp:17:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type i\u2019 previously declared\
    \ here\n   17 |     std::string::size_type i = 0;\n      |                   \
    \         ^\n/tmp/tmp73j_evdl.cpp:70:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019\n   70 |     std::string::size_type j = 0;\n      |                \
    \            ^\n/tmp/tmp73j_evdl.cpp:18:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ j\u2019 previously declared here\n   18 |     std::string::size_type j = 0;\n\
    \      |                            ^\n/tmp/tmp73j_evdl.cpp:71:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type k\u2019\n   71 |     std::string::size_type\
    \ k = 0;\n      |                            ^\n/tmp/tmp73j_evdl.cpp:19:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type k\u2019 previously declared\
    \ here\n   19 |     std::string::size_type k = 0;\n      |                   \
    \         ^\n/tmp/tmp73j_evdl.cpp:72:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019\n   72 |     std::string::size_type l = 0;\n      |                \
    \            ^\n/tmp/tmp73j_evdl.cpp:20:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ l\u2019 previously declared here\n   20 |     std::string::size_type l = 0;\n\
    \      |                            ^\n/tmp/tmp73j_evdl.cpp:73:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type m\u2019\n   73 |     std::string::size_type\
    \ m = 0;\n      |                            ^\n/tmp/tmp73j_evdl.cpp:21:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type m\u2019 previously dec"
  stdout: ''
  timestamp: 1660094283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            if (S[i +\
    \ 1] == '.') {\n                i += 2;\n                boredoms += 1;\n    \
    \        }\n            else if (S[i + 1] == '?') {\n                i += 2;\n\
    \                boredoms += 1;\n            }\n            else if (S[i + 1]\
    \ == '!') {\n                i += 2;\n                boredoms += 1;\n       \
    \     }\n        }\n        else if (S[i] == '?') {\n            if (S[i + 1]\
    \ == '.') {\n                i += 2;\n                boredoms += 1;\n       \
    \     }\n            else if (S[i + 1] == '!') {\n                i += 2;\n  \
    \              boredoms += 1;\n            }\n        }\n        else if (S[i]\
    \ == '!') {\n            if (S[i + 1] == '.') {\n                i += 2;\n   \
    \             boredoms += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7n6ju__6: /tmp/tmp7n6ju__6.cpp:53: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz7j867ei: /tmp/tmpz7j867ei.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_caps\
    \ = \"...?!\";\n    std::string delimiters_caps_lower = \"...?!\";\n    std::string\
    \ delimiters_caps_upper = \"...?!\";\n    std::string delimiters_caps_all = \"\
    ...?!\";\n    std::string delimiters_caps_all_lower = \"...?!\";\n    std::string\
    \ delimiters_caps_all_upper = \"...?!\";\n    std::string delimiters_caps_all_all\
    \ = \"...?!\";\n    std::string delimiters_caps_all_all_lower = \"...?!\";\n \
    \   std::string delimiters_caps_all_all_upper = \"...?!\";\n    std::string delimiters_caps_all_all_all\
    \ = \"...?!\";\n    std::string delimiters_caps_all_all_all_lower = \"...?!\"\
    ;\n    std::string delimiters_caps_all_all_all_upper = \"...?!\";\n    std::string\
    \ delimiters_caps_all_all_all_all = \"...?!\";\n    std::string delimiters_caps_all_all_all_all_lower\
    \ = \"...?!\";\n    std::string delimiters_caps_all_all_all_all_upper = \"...?!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all = \"...?!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_lower = \"...?!\";\n    std::string delimiters_caps_all_all_all_all_all_upper\
    \ = \"...?!\";\n    std::string delimiters_caps_all_all_all_all_all_all = \"...?!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all_all_lower = \"...?!\";\n\
    \    std::string delimiters_caps_all_all_all_all_all_all_upper = \"...?!\";\n\
    \    std::string delimiters_caps_all_all_all_all_all_all_all = \"...?!\";\n  \
    \  std::string delimiters_caps_all_all_all_all_all_all_all_lower = \"...?!\";\n\
    \    std::string delimiters_caps_all_all_all_all_all_all_all_upper = \"...?!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all_all_all_all = \"...?!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all_all_all_all_lower = \"\
    ...?!\";\n    std::string delimiters_caps_all_all_all_all_all_all_all_all_upper\
    \ = \"...?!\";\n    std::string delimiters_caps_all_all_all_all_all_all_all_all_all\
    \ = \"...?!\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpng4c1nv3: /tmp/tmpng4c1nv3.cpp:48: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeol3xpgz: /tmp/tmpeol3xpgz.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \" .?!\";\n    std::string\
    \ delimiter2 = \" .?!\";\n    std::string delimiter3 = \" .?!\";\n    std::string\
    \ delimiter4 = \" .?!\";\n    std::string delimiter5 = \" .?!\";\n    std::string\
    \ delimiter6 = \" .?!\";\n    std::string delimiter7 = \" .?!\";\n    std::string\
    \ delimiter8 = \" .?!\";\n    std::string delimiter9 = \" .?!\";\n    std::string\
    \ delimiter10 = \" .?!\";\n    std::string delimiter11 = \" .?!\";\n    std::string\
    \ delimiter12 = \" .?!\";\n    std::string delimiter13 = \" .?!\";\n    std::string\
    \ delimiter14 = \" .?!\";\n    std::string delimiter15 = \" .?!\";\n    std::string\
    \ delimiter16 = \" .?!\";\n    std::string delimiter17 = \" .?!\";\n    std::string\
    \ delimiter18 = \" .?!\";\n    std::string delimiter19 = \" .?!\";\n    std::string\
    \ delimiter20 = \" .?!\";\n    std::string delimiter21 = \" .?!\";\n    std::string\
    \ delimiter22 = \" .?!\";\n    std::string delimiter23 = \" .?!\";\n    std::string\
    \ delimiter24 = \" .?!\";\n    std::string delimiter25 = \" .?!\";\n    std::string\
    \ delimiter26 = \" .?!\";\n    std::string delimiter27 = \" .?!\";\n    std::string\
    \ delimiter28 = \" .?!\";\n    std::string delimiter29 = \" .?!\";\n    std::string\
    \ delimiter30 = \" .?!\";\n    std::string delimiter31 = \" .?!\";\n    std::string\
    \ delimiter32 = \" .?!\";\n    std::string delimiter33 = \" .?!\";\n    std::string\
    \ delimiter34 = \" .?!\";\n    std::string delimiter35 = \" .?!\";\n    std::string\
    \ delimiter36 = \" .?!\";\n    std::string delimiter37 = \" .?!\";\n    std::string\
    \ delimiter38 = \" .?!\";\n    std::string delimiter39 = \" .?!\";\n    std::string\
    \ delimiter40 = \" .?!\";\n    std::string delimiter41 = \" .?!\";\n    std::string\
    \ delimiter42 = \" .?!\";\n    std::string delimiter43 = \" .?!\";\n    std::string\
    \ delimiter44 = \" .?!\";\n    std::string delimiter45 = \" .?!\";\n    std::string\
    \ delimiter46 = \" .?!\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7plxomzw: /tmp/tmp7plxomzw.cpp:65: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    for(int i=0;i<S.size();i++){\n        if(S[i] == '.'){\n            word\
    \ = S[i+1];\n            for(int j=i+1;j<S.size();j++){\n                if(S[j]\
    \ == '.' || S[j] == '?' || S[j] == '!'){\n                    word = S[j+1];\n\
    \                    break;\n                }\n            }\n            if(word\
    \ == \"I\"){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpci2a1yq3: /tmp/tmpci2a1yq3.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom;\n    std::string\
    \ delimiter = \" .?!\";\n    std::string delimiter2 = \" .?!\";\n    std::string\
    \ delimiter3 = \" .?!\";\n    std::string delimiter4 = \" .?!\";\n    std::string\
    \ delimiter5 = \" .?!\";\n    std::string delimiter6 = \" .?!\";\n    std::string\
    \ delimiter7 = \" .?!\";\n    std::string delimiter8 = \" .?!\";\n    std::string\
    \ delimiter9 = \" .?!\";\n    std::string delimiter10 = \" .?!\";\n    std::string\
    \ delimiter11 = \" .?!\";\n    std::string delimiter12 = \" .?!\";\n    std::string\
    \ delimiter13 = \" .?!\";\n    std::string delimiter14 = \" .?!\";\n    std::string\
    \ delimiter15 = \" .?!\";\n    std::string delimiter16 = \" .?!\";\n    std::string\
    \ delimiter17 = \" .?!\";\n    std::string delimiter18 = \" .?!\";\n    std::string\
    \ delimiter19 = \" .?!\";\n    std::string delimiter20 = \" .?!\";\n    std::string\
    \ delimiter21 = \" .?!\";\n    std::string delimiter22 = \" .?!\";\n    std::string\
    \ delimiter23 = \" .?!\";\n    std::string delimiter24 = \" .?!\";\n    std::string\
    \ delimiter25 = \" .?!\";\n    std::string delimiter26 = \" .?!\";\n    std::string\
    \ delimiter27 = \" .?!\";\n    std::string delimiter28 = \" .?!\";\n    std::string\
    \ delimiter29 = \" .?!\";\n    std::string delimiter30 = \" .?!\";\n    std::string\
    \ delimiter31 = \" .?!\";\n    std::string delimiter32 = \" .?!\";\n    std::string\
    \ delimiter33 = \" .?!\";\n    std::string delimiter34 = \" .?!\";\n    std::string\
    \ delimiter35 = \" .?!\";\n    std::string delimiter36 = \" .?!\";\n    std::string\
    \ delimiter37 = \" .?!\";\n    std::string delimiter38 = \" .?!\";\n    std::string\
    \ delimiter39 = \" .?!\";\n    std::string delimiter40 = \" .?!\";\n    std::string\
    \ delimiter41 = \" .?!\";\n    std::string delimiter42 = \" .?!\";\n    std::string\
    \ delimiter43 = \" .?!\";\n    std::string delimiter44 = \" .?!\";\n    std::string\
    \ delimiter45 = \" .?!\";\n    std::string delimiter46 = \n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tdn4fo7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp7tdn4fo7.cpp:62:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   62 | }\n      | ^\n/tmp/tmp7tdn4fo7.cpp:62:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp7tdn4fo7.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \".?!\";\n    std::string delimiter2 = \"\
    .?!\";\n    std::string delimiter3 = \".?!\";\n    std::string delimiter4 = \"\
    .?!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6 = \"\
    .?!\";\n    std::string delimiter7 = \".?!\";\n    std::string delimiter8 = \"\
    .?!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 = \"\
    .?!\";\n    std::string delimiter11 = \".?!\";\n    std::string delimiter12 =\
    \ \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string delimiter16\
    \ = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string delimiter20\
    \ = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string delimiter22\
    \ = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string delimiter24\
    \ = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string delimiter28\
    \ = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string delimiter32\
    \ = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string delimiter36\
    \ = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string delimiter40\
    \ = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string delimiter42\
    \ = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string delimiter44\
    \ = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string delimiter48\
    \ = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".?!\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpze1ygval: /tmp/tmpze1ygval.cpp:68: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6xkr66ph: /tmp/tmp6xkr66ph.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        if (word == \"I\") {\n            boredoms += 1;\n        }\n       \
    \ pos = pos + delimiters.size();\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1szv0879: /tmp/tmp1szv0879.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \"?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \"?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\";\n\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpah3wbo6x: /tmp/tmpah3wbo6x.cpp:77: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_qcrlq84: /tmp/tmp_qcrlq84.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiters = \".?!\";\n    std::string\
    \ delimiter = delimiters[0];\n    std::string delimiter2 = delimiters[1];\n  \
    \  std::string delimiter3 = delimiters[2];\n    std::string delimiter4 = delimiters[3];\n\
    \    std::string delimiter5 = delimiters[4];\n    std::string delimiter6 = delimiters[5];\n\
    \    std::string delimiter7 = delimiters[6];\n    std::string delimiter8 = delimiters[7];\n\
    \    std::string delimiter9 = delimiters[8];\n    std::string delimiter10 = delimiters[9];\n\
    \    std::string delimiter11 = delimiters[10];\n    std::string delimiter12 =\
    \ delimiters[11];\n    std::string delimiter13 = delimiters[12];\n    std::string\
    \ delimiter14 = delimiters[13];\n    std::string delimiter15 = delimiters[14];\n\
    \    std::string delimiter16 = delimiters[15];\n    std::string delimiter17 =\
    \ delimiters[16];\n    std::string delimiter18 = delimiters[17];\n    std::string\
    \ delimiter19 = delimiters[18];\n    std::string delimiter20 = delimiters[19];\n\
    \    std::string delimiter21 = delimiters[20];\n    std::string delimiter22 =\
    \ delimiters[21];\n    std::string delimiter23 = delimiters[22];\n    std::string\
    \ delimiter24 = delimiters[23];\n    std::string delimiter25 = delimiters[24];\n\
    \    std::string delimiter26 = delimiters[25];\n    std::string delimiter27 =\
    \ delimiters[26];\n    std::string delimiter28 = delimiters[27];\n    std::string\
    \ delimiter29 = delimiters[28];\n    std::string delimiter30 = delimiters[29];\n\
    \    std::string delimiter31 = delimiters[30];\n    std::string delimiter32 =\
    \ delimiters[31];\n    std::string delimiter33 = delimiters[32];\n    std::string\
    \ delimiter34 = delimiters[33];\n    std::string delimiter35 = delimiters[34];\n\
    \    std::string delimiter36 = delimiters[35];\n    std::string delimiter37 =\
    \ delimiters[36];\n    std::string delimiter38 = delimiters[37];\n    std::string\
    \ delimiter39 = delimiters[38];\n    std::string delimiter40 = delimiters[39];\n\
    \    std::string delimiter41 = delimiters[40];\n    std::string delimiter42 =\
    \ delimiters[41];\n    std::string delimiter43 = delimiters[42];\n    std::string\
    \ delimiter44 = delimiters[43];\n    std::string delimiter45 = delimiters[44];\n\
    \    std::string delimiter46 = delimiters[45];\n    std::string delimiter47 =\
    \ delimiters[46];\n    std::string delimiter48 = delimiters[47];\n    std::string\
    \ delimiter49 = delimiters[48];\n    std::string delimiter50 = delimiters[49];\n\
    \    std::string delimiter5\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptbg6a1wb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmptbg6a1wb.cpp:16:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   16 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmptbg6a1wb.cpp:17:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |     std::string\
    \ delimiter2 = delimiters[1];\n      |                                       \
    \   ^\n/tmp/tmptbg6a1wb.cpp:18:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   18 |     std::string\
    \ delimiter3 = delimiters[2];\n      |                                       \
    \   ^\n/tmp/tmptbg6a1wb.cpp:19:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   19 |     std::string\
    \ delimiter4 = delimiters[3];\n      |                                       \
    \   ^\n/tmp/tmptbg6a1wb.cpp:20:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   20 |     std::string\
    \ delimiter5 = delimiters[4];\n      |                                       \
    \   ^\n/tmp/tmptbg6a1wb.cpp:21:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   21 |     std::string\
    \ delimiter6 = delimiters[5];\n      |            "
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ count = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        if(word == \"I\") {\n            boredoms += 1;\n        }\n        pos\
    \ = pos + delimiters.size();\n    }\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjl7s1vlu: /tmp/tmpjl7s1vlu.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \". ? !\";\n\
    \    std::string delimiter = \" \";\n    size_t pos = 0;\n    size_t count = 0;\n\
    \    size_t start = 0;\n    size_t end = 0;\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t n =\
    \ 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t r =\
    \ 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t v =\
    \ 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t z =\
    \ 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t D =\
    \ 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t H =\
    \ 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t L =\
    \ 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t P =\
    \ 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t T =\
    \ 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    size_t X =\
    \ 0;\n    size_t Y = 0;\n    size_t Z = 0;\n    size_t a = 0;\n    size_t b =\
    \ 0;\n    size_t c = 0;\n    size_t d = 0;\n    size_t e = 0;\n    size_t f =\
    \ 0;\n    size_t g = 0;\n    size_t h = 0;\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t n =\
    \ 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t r =\
    \ 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t v =\
    \ 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t z =\
    \ 0;\n    size_t A = 0;\n    size_t B = 0;\n    size_t C = 0;\n    size_t D =\
    \ 0;\n    size_t E = 0;\n    size_t F = 0;\n    size_t G = 0;\n    size_t H =\
    \ 0;\n    size_t I = 0;\n    size_t J = 0;\n    size_t K = 0;\n    size_t L =\
    \ 0;\n    size_t M = 0;\n    size_t N = 0;\n    size_t O = 0;\n    size_t P =\
    \ 0;\n    size_t Q = 0;\n    size_t R = 0;\n    size_t S = 0;\n    size_t T =\
    \ 0;\n    size_t U = 0;\n    size_t V = 0;\n    size_t W = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpni0ofxoz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpni0ofxoz.cpp:57:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   57 |     size_t S = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:73:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   73 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:21:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   21 |     size_t i = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:74:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   74 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:22:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   22 |     size_t j = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:75:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   75 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:23:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   23 |     size_t k = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:76:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   76 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:24:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   24 |     size_t l = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:77:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   77 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:25:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   25 |     size_t m = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:78:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   78 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:26:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   26 |     size_t n = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:79:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   79 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:27:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   27 |     size_t o = 0;\n      |            ^\n/tmp/tmpni0ofxoz.cpp:80:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   80 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpni0ofxoz.cpp:28:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   28 |    "
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \". ? !\";\n    size_t pos = 0;\n    size_t\
    \ prev = 0;\n    size_t count = 0;\n    while(pos < S.length()) {\n        pos\
    \ = S.find_first_of(delimiters, prev);\n        word = S.substr(prev, pos - prev);\n\
    \        prev = pos + 1;\n        if(word == \"I\") {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0i6q17jb: /tmp/tmp0i6q17jb.cpp:35: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters.at(0);\n\
    \    std::string delimiter2 = delimiters.at(1);\n    std::string delimiter3 =\
    \ delimiters.at(2);\n    std::string delimiter4 = delimiters.at(3);\n    std::string\
    \ delimiter5 = delimiters.at(4);\n    std::string delimiter6 = delimiters.at(5);\n\
    \    std::string delimiter7 = delimiters.at(6);\n    std::string delimiter8 =\
    \ delimiters.at(7);\n    std::string delimiter9 = delimiters.at(8);\n    std::string\
    \ delimiter10 = delimiters.at(9);\n    std::string delimiter11 = delimiters.at(10);\n\
    \    std::string delimiter12 = delimiters.at(11);\n    std::string delimiter13\
    \ = delimiters.at(12);\n    std::string delimiter14 = delimiters.at(13);\n   \
    \ std::string delimiter15 = delimiters.at(14);\n    std::string delimiter16 =\
    \ delimiters.at(15);\n    std::string delimiter17 = delimiters.at(16);\n    std::string\
    \ delimiter18 = delimiters.at(17);\n    std::string delimiter19 = delimiters.at(18);\n\
    \    std::string delimiter20 = delimiters.at(19);\n    std::string delimiter21\
    \ = delimiters.at(20);\n    std::string delimiter22 = delimiters.at(21);\n   \
    \ std::string delimiter23 = delimiters.at(22);\n    std::string delimiter24 =\
    \ delimiters.at(23);\n    std::string delimiter25 = delimiters.at(24);\n    std::string\
    \ delimiter26 = delimiters.at(25);\n    std::string delimiter27 = delimiters.at(26);\n\
    \    std::string delimiter28 = delimiters.at(27);\n    std::string delimiter29\
    \ = delimiters.at(28);\n    std::string delimiter30 = delimiters.at(29);\n   \
    \ std::string delimiter31 = delimiters.at(30);\n    std::string delimiter32 =\
    \ delimiters.at(31);\n    std::string delimiter33 = delimiters.at(32);\n    std::string\
    \ delimiter34 = delimiters.at(33);\n    std::string delimiter35 = delimiters.at(34);\n\
    \    std::string delimiter36 = delimiters.at(35);\n    std::string delimiter37\
    \ = delimiters.at(36);\n    std::string delimiter38 = delimiters.at(37);\n   \
    \ std::string delimiter39 = delimiters.at(38);\n    std::string delimiter40 =\
    \ delimiters.at(39);\n    std::string delimiter41 = delimiters.at(40);\n    std::string\
    \ delimiter42 = delimiters.at(41);\n    std::string delimiter43 = delimiters.at(42);\n\
    \    std::string delimiter44 = delimiters.at(43);\n    std::string delimiter45\
    \ = delimiters.at(44);\n    std::string delimiter46 = delimiters.at(45);\n   \
    \ std::string delimiter47 = delimiters.at(46);\n    std::string delimiter48 =\
    \ delimiter\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeb8xek1d.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpeb8xek1d.cpp:15:42: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters.at(0);\n      |                             ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpeb8xek1d.cpp:16:43: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   16 |     std::string\
    \ delimiter2 = delimiters.at(1);\n      |                              ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpeb8xek1d.cpp:17:43: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |     std::string\
    \ delimiter3 = delimiters.at(2);\n      |                              ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpeb8xek1d.cpp:18:43: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   18 |     std::string\
    \ delimiter4 = delimiters.at(3);\n      |                              ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpeb8xek1d.cpp:19:43: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   19 |     std::string\
    \ delimiter5 = delimiters.at(4);\n      |                              ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpeb8xek1d.cpp:20:43: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   20 |     std::string\
    \ delimiter6 = deli"
  stdout: ''
  timestamp: 1660094283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string boredom_sentence\
    \ = \"I love this weather\";\n    std::string boredom_sentence2 = \"I love this\
    \ weather.\";\n    std::string boredom_sentence3 = \"I love this weather.!\";\n\
    \    std::string boredom_sentence4 = \"I love this weather.!?\";\n    std::string\
    \ boredom_sentence5 = \"I love this weather.!?!\";\n    std::string boredom_sentence6\
    \ = \"I love this weather.!?!?!\";\n    std::string boredom_sentence7 = \"I love\
    \ this weather.!?!?!?!\";\n    std::string boredom_sentence8 = \"I love this weather.!?!?!?!?!?!\"\
    ;\n    std::string boredom_sentence9 = \"I love this weather.!?!?!?!?!?!?!?!\"\
    ;\n    std::string boredom_sentence10 = \"I love this weather.!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpraa8zqss.cpp:24:38: warning: missing terminating \" character\n\
    \   24 |     std::string boredom_sentence10 = \"I love this weather.!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?\n\
    \      |                                      ^\n/tmp/tmpraa8zqss.cpp:24:38: error:\
    \ missing terminating \" character\n   24 |     std::string boredom_sentence10\
    \ = \"I love this weather.!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?\n\
    \      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpraa8zqss.cpp: In function \u2018long int is_bored(std::string)\u2019:\n\
    /tmp/tmpraa8zqss.cpp:25:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   25 | }\n      | ^\n/tmp/tmpraa8zqss.cpp:25:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpraa8zqss.cpp:25:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \".?!\";\n    std::string delimiter2 = \"\
    \ \";\n    std::string delimiter3 = \".\";\n    std::string delimiter4 = \"?\"\
    ;\n    std::string delimiter5 = \"!\";\n    std::string delimiter6 = \".\";\n\
    \    std::string delimiter7 = \"?\";\n    std::string delimiter8 = \"!\";\n  \
    \  std::string delimiter9 = \".\";\n    std::string delimiter10 = \"?\";\n   \
    \ std::string delimiter11 = \"!\";\n    std::string delimiter12 = \".\";\n   \
    \ std::string delimiter13 = \"?\";\n    std::string delimiter14 = \"!\";\n   \
    \ std::string delimiter15 = \".\";\n    std::string delimiter16 = \"?\";\n   \
    \ std::string delimiter17 = \"!\";\n    std::string delimiter18 = \".\";\n   \
    \ std::string delimiter19 = \"?\";\n    std::string delimiter20 = \"!\";\n   \
    \ std::string delimiter21 = \"!\";\n    std::string delimiter22 = \".\";\n   \
    \ std::string delimiter23 = \"?\";\n    std::string delimiter24 = \"!\";\n   \
    \ std::string delimiter25 = \".\";\n    std::string delimiter26 = \"?\";\n   \
    \ std::string delimiter27 = \"!\";\n    std::string delimiter28 = \".\";\n   \
    \ std::string delimiter29 = \"?\";\n    std::string delimiter30 = \"!\";\n   \
    \ std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n   \
    \ std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n   \
    \ std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n   \
    \ std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n   \
    \ std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n   \
    \ std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n   \
    \ std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n   \
    \ std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n   \
    \ std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n   \
    \ std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n   \
    \ std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n   \
    \ std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n   \
    \ std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n   \
    \ std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n   \
    \ std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n   \
    \ std::string delimiter61 = \"!\";\n    std::string delimiter62 = \".\";\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpocn1twm2: /tmp/tmpocn1twm2.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \" .?!\";\n   \
    \ std::string delimiter2 = \" .?!\";\n    std::string delimiter3 = \" .?!\";\n\
    \    std::string delimiter4 = \" .?!\";\n    std::string delimiter5 = \" .?!\"\
    ;\n    std::string delimiter6 = \" .?!\";\n    std::string delimiter7 = \" .?!\"\
    ;\n    std::string delimiter8 = \" .?!\";\n    std::string delimiter9 = \" .?!\"\
    ;\n    std::string delimiter10 = \" .?!\";\n    std::string delimiter11 = \" .?!\"\
    ;\n    std::string delimiter12 = \" .?!\";\n    std::string delimiter13 = \" .?!\"\
    ;\n    std::string delimiter14 = \" .?!\";\n    std::string delimiter15 = \" .?!\"\
    ;\n    std::string delimiter16 = \" .?!\";\n    std::string delimiter17 = \" .?!\"\
    ;\n    std::string delimiter18 = \" .?!\";\n    std::string delimiter19 = \" .?!\"\
    ;\n    std::string delimiter20 = \" .?!\";\n    std::string delimiter21 = \" .?!\"\
    ;\n    std::string delimiter22 = \" .?!\";\n    std::string delimiter23 = \" .?!\"\
    ;\n    std::string delimiter24 = \" .?!\";\n    std::string delimiter25 = \" .?!\"\
    ;\n    std::string delimiter26 = \" .?!\";\n    std::string delimiter27 = \" .?!\"\
    ;\n    std::string delimiter28 = \" .?!\";\n    std::string delimiter29 = \" .?!\"\
    ;\n    std::string delimiter30 = \" .?!\";\n    std::string delimiter31 = \" .?!\"\
    ;\n    std::string delimiter32 = \" .?!\";\n    std::string delimiter33 = \" .?!\"\
    ;\n    std::string delimiter34 = \" .?!\";\n    std::string delimiter35 = \" .?!\"\
    ;\n    std::string delimiter36 = \" .?!\";\n    std::string delimiter37 = \" .?!\"\
    ;\n    std::string delimiter38 = \" .?!\";\n    std::string delimiter39 = \" .?!\"\
    ;\n    std::string delimiter40 = \" .?!\";\n    std::string delimiter41 = \" .?!\"\
    ;\n    std::string delimiter42 = \" .?!\";\n    std::string delimiter43 = \" .?!\"\
    ;\n    std::string delimiter44 = \" .?!\";\n    std::string delimiter45 = \" .?!\"\
    ;\n    std::string delimiter46 = \" .?!\";\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9fjcq4hs: /tmp/tmp9fjcq4hs.cpp:64: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa_qg4vf6: /tmp/tmpa_qg4vf6.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S.substr(i, 1);\n        if (word == \"I\") {\n     \
    \       boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgyerom51: /tmp/tmpgyerom51.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            word = S[i];\n\
    \            for(int j = i; j < S.length(); j++) {\n                if(S[j] ==\
    \ word) {\n                    count++;\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwftw6qbp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpwftw6qbp.cpp:19:25: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   19 |                 if(S[j] == word) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwftw6qbp.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwftw6qbp.cpp:19:28:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   19 |                 if(S[j] == word) {\n      |\
    \                            ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwftw6qbp.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwftw6qbp.cpp:19:28: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_ty"
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    for (auto &c : S) {\n    \
    \    if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n   \
    \     }\n        if (c == boredom_word) {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozcwlb9c.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpozcwlb9c.cpp:19:15: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   19 |         if (c == boredom_word) {\n      |             ~ ^~ ~~~~~~~~~~~~\n\
    \      |             |    |\n      |             char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpozcwlb9c.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpozcwlb9c.cpp:19:18:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   19 |         if (c == boredom_word) {\n      |    \
    \              ^~~~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpozcwlb9c.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpozcwlb9c.cpp:19:18: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   19 |         if (c ==\
    \ boredom_word) {\n      |                  ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.')\
    \ {\n            boredoms += 1;\n            word = S.substr(0, i);\n        }\
    \ else if (S[i] == '?') {\n            boredoms += 1;\n            word = S.substr(0,\
    \ i);\n        } else if (S[i] == '!') {\n            boredoms += 1;\n       \
    \     word = S.substr(0, i);\n        } else if (S[i] == 'I') {\n            boredoms\
    \ += 1;\n            word = S.substr(0, i);\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8fpf6vhs: /tmp/tmp8fpf6vhs.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpszfxkps6: /tmp/tmpszfxkps6.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n   \
    \ \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyqbm_7v8: /tmp/tmpyqbm_7v8.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2nexha7c: /tmp/tmp2nexha7c.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_qcrlq84: /tmp/tmp_qcrlq84.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdvygnxvb: /tmp/tmpdvygnxvb.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpesazyi0i: /tmp/tmpesazyi0i.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_caps\
    \ = \"...!\";\n    std::string delimiters_caps_lower = \"...!\";\n    std::string\
    \ delimiters_caps_upper = \"...!\";\n    std::string delimiters_caps_all = \"\
    ...!\";\n    std::string delimiters_caps_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_upper = \"...!\";\n    std::string delimiters_caps_all_all\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_lower = \"...!\";\n   \
    \ std::string delimiters_caps_all_all_upper = \"...!\";\n    std::string delimiters_caps_all_all_all\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_lower = \"...!\";\n\
    \    std::string delimiters_caps_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all = \"...!\";\n    std::string delimiters_caps_all_all_all_all_lower\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_all_upper = \"...!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_lower = \"...!\";\n    std::string delimiters_caps_all_all_all_all_all_upper\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_all_all_all = \"...!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all_all_lower = \"...!\";\n\
    \    std::string delimiters_caps_all_all_all_all_all_all_upper = \"...!\";\n \
    \   std::string delimiters_caps_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_rkccse.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpr_rkccse.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmpr_rkccse.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \". ? !\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        for (size_t j = 0; j < delimiters.size();\
    \ j++) {\n            if (word.find(delimiters[j]) != std::string::npos) {\n \
    \               boredoms++;\n                break;\n            }\n        }\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdyl3kg0z: /tmp/tmpdyl3kg0z.cpp:28: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    \ .,?!\";\n    std::string delimiter2 = \".,?!\";\n    std::string delimiter3\
    \ = \".,?!\";\n    std::string delimiter4 = \".,?!\";\n    std::string delimiter5\
    \ = \".,?!\";\n    std::string delimiter6 = \".,?!\";\n    std::string delimiter7\
    \ = \".,?!\";\n    std::string delimiter8 = \".,?!\";\n    std::string delimiter9\
    \ = \".,?!\";\n    std::string delimiter10 = \".,?!\";\n    std::string delimiter11\
    \ = \".,?!\";\n    std::string delimiter12 = \".,?!\";\n    std::string delimiter13\
    \ = \".,?!\";\n    std::string delimiter14 = \".,?!\";\n    std::string delimiter15\
    \ = \".,?!\";\n    std::string delimiter16 = \".,?!\";\n    std::string delimiter17\
    \ = \".,?!\";\n    std::string delimiter18 = \".,?!\";\n    std::string delimiter19\
    \ = \".,?!\";\n    std::string delimiter20 = \".,?!\";\n    std::string delimiter21\
    \ = \".,?!\";\n    std::string delimiter22 = \".,?!\";\n    std::string delimiter23\
    \ = \".,?!\";\n    std::string delimiter24 = \".,?!\";\n    std::string delimiter25\
    \ = \".,?!\";\n    std::string delimiter26 = \".,?!\";\n    std::string delimiter27\
    \ = \".,?!\";\n    std::string delimiter28 = \".,?!\";\n    std::string delimiter29\
    \ = \".,?!\";\n    std::string delimiter30 = \".,?!\";\n    std::string delimiter31\
    \ = \".,?!\";\n    std::string delimiter32 = \".,?!\";\n    std::string delimiter33\
    \ = \".,?!\";\n    std::string delimiter34 = \".,?!\";\n    std::string delimiter35\
    \ = \".,?!\";\n    std::string delimiter36 = \".,?!\";\n    std::string delimiter37\
    \ = \".,?!\";\n    std::string delimiter38 = \".,?!\";\n    std::string delimiter39\
    \ = \".,?!\";\n    std::string delimiter40 = \".,?!\";\n    std::string delimiter41\
    \ = \".,?!\";\n    std::string delimiter42 = \".,?!\";\n    std::string delimiter43\
    \ = \".,?!\";\n    std::string delimiter44 = \".,?!\";\n    std::string delimiter45\
    \ = \".\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwo2xq86.cpp:59:31: warning: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".\n      |                          \
    \     ^\n/tmp/tmphwo2xq86.cpp:59:31: error: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".\n      |                          \
    \     ^~\n/tmp/tmphwo2xq86.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphwo2xq86.cpp:60:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   60 | }\n      | ^\n/tmp/tmphwo2xq86.cpp:60:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmphwo2xq86.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    for (auto &i : S) {\n        if (i == '.') {\n\
    \            boredom += \".\";\n        } else if (i == '?') {\n            boredom\
    \ += \"?\";\n        } else if (i == '!') {\n            boredom += \"!\";\n \
    \       } else {\n            word = i;\n        }\n    }\n    if (boredom.find(\"\
    I\") == 0) {\n        count++;\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplad_n4ew: /tmp/tmplad_n4ew.cpp:35: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp18s1zzso: /tmp/tmp18s1zzso.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094282
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ len = S.length();\n    std::string temp;\n    while (pos < len) {\n        temp\
    \ = S.substr(pos, 1);\n        if (delimiters.find(temp) != std::string::npos)\
    \ {\n            word = temp;\n            pos = 0;\n            while (pos <\
    \ len) {\n                temp = S.substr(pos, 1);\n                if (delimiters.find(temp)\
    \ != std::string::npos) {\n                    word = word + temp;\n         \
    \           pos = 0;\n                } else {\n                    pos = pos\
    \ + 1;\n                }\n            }\n            if (word == \"I\") {\n \
    \               boredoms = boredoms + 1;\n            }\n        }\n        pos\
    \ = pos + 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094289
