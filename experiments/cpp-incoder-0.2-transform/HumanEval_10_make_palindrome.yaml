name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  // >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n//\
  \ (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    std::string reverse = \"\";\n    for (auto &c : string) {\n   \
    \     reverse = reverse + c;\n    }\n    for (auto &c : string) {\n        if\
    \ (c != reverse.back()) {\n            reverse = reverse + c;\n        }\n   \
    \ }\n    return reverse;", "    std::string postfix = \"\";\n    std::string prefix\
    \ = \"\";\n    std::string reverse = \"\";\n    std::string palindrome = \"\"\
    ;\n    int length = string.length();\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < length) {\n        postfix = postfix + string[i];\n        i++;\n    }\n\
    \    length = postfix.length();\n    i = 0;\n    while (i < length) {\n      \
    \  prefix = prefix + string[i];\n        i++;\n    }\n    length = prefix.length();\n\
    \    i = 0;\n    while (i < length) {\n        reverse = reverse + string[i];\n\
    \        i++;\n    }\n    length = reverse.length();\n    i = 0;\n    while (i\
    \ < length) {\n        palindrome = palindrome + reverse;\n        i++;\n    }\n\
    \    return palindrome;", "    std::string palindrome = string;\n    size_t prefix_length\
    \ = 0;\n    size_t suffix_length = 0;\n    size_t max_suffix_length = 0;\n   \
    \ std::string reversed_suffix;\n    std::string reversed_prefix;\n    for (size_t\
    \ i = 0; i < palindrome.size(); i++) {\n        if (palindrome[i] == string[i])\
    \ {\n            prefix_length++;\n        } else {\n            suffix_length++;\n\
    \            if (suffix_length > max_suffix_length) {\n                max_suffix_length\
    \ = suffix_length;\n            }\n        }\n    }\n    for (size_t i = 0; i\
    \ < max_suffix_length; i++) {\n        reversed_suffix = palindrome.substr(max_suffix_length\
    \ - i - 1, 1);\n        reversed_prefix = palindrome.substr(0, max_suffix_length\
    \ - i - 1);\n        palindrome = reversed_prefix + reversed_suffix;\n    }\n\
    \    return palindrome;", "    std::string reverse = \"\";\n    int i = 0;\n \
    \   int j = string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        reverse += string[j];\n        j--;\n    }\n    return\
    \ reverse;", "    string postfix = \"\";\n    int max_len = string.length();\n\
    \    for (int i = 0; i < max_len; i++) {\n        postfix += string[i];\n    }\n\
    \    string reverse = postfix;\n    reverse.resize(max_len);\n    for (int i =\
    \ 0; i < max_len; i++) {\n        reverse[max_len - i - 1] = string[i];\n    }\n\
    \    return reverse + postfix;", "    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    int length = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == string[length - 1]) {\n            length++;\n \
    \       } else {\n            length = 0;\n        }\n        if (length == 0)\
    \ {\n            postfix = postfix + string[i];\n        } else {\n          \
    \  prefix = prefix + string[i];\n        }\n    }\n    string reverse = prefix;\n\
    \    for (int i = 0; i < length - 1; i++) {\n        reverse = reverse + string[i];\n\
    \    }\n    return reverse + postfix;", "    string postfix = string;\n    string\
    \ prefix = \"\";\n    int max_length = 0;\n    int i = 0;\n    while (i < postfix.size())\
    \ {\n        int j = postfix.size() - 1;\n        while (j >= 0) {\n         \
    \   if (postfix[i] == postfix[j]) {\n                j--;\n            } else\
    \ {\n                break;\n            }\n        }\n        if (j >= 0) {\n\
    \            max_length = std::max(max_length, j + 1);\n            prefix = prefix\
    \ + postfix[i];\n            postfix.erase(postfix.begin() + i);\n           \
    \ i = j;\n        } else {\n            postfix.erase(postfix.begin() + i);\n\
    \            i = postfix.size();\n        }\n    }\n    if (postfix.size() > 0)\
    \ {\n        max_length = std::max(max_length, postfix.size());\n    }\n    std::string\
    \ result = prefix;\n    for (int i = 0; i < max_length; i++) {\n        result\
    \ = result + postfix[i];\n    }\n    return result;", "    string postfix = \"\
    \";\n    string prefix = \"\";\n    int longest = 0;\n    for (auto c : string)\
    \ {\n        if (c == ' ') {\n            postfix = postfix + c;\n        } else\
    \ {\n            postfix = postfix + c;\n            longest = std::max(longest,\
    \ postfix.size());\n        }\n    }\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(longest, postfix.size());\n    longest\
    \ = std::max(longest, prefix.size());\n    longest = std::max(longest, string.size());\n\
    \    longest = std::max(longest, postfix.size());\n    longest = std::max(longest,\
    \ prefix.size());\n    longest = std::max(longest, string.size());\n    longest\
    \ = std::max(longest, postfix.size());\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(longest, postfix.size());\n    longest\
    \ = std::max(longest, prefix.size());\n    longest = std::max(longest, string.size());\n\
    \    longest = std::max(longest, postfix.size());\n    longest = std::max(longest,\
    \ prefix.size());\n    longest = std::max(longest, string.size());\n    longest\
    \ = std::max(longest, postfix.size());\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(", "    std::string reverse = \"\";\n\
    \    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    for\
    \ (auto &c : string) {\n        if (c != reverse.back()) {\n            reverse\
    \ = reverse + c;\n        }\n    }\n    return reverse;", "    string reverse;\n\
    \    string prefix;\n    string suffix;\n    string palindrome;\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        longest = i;\n\
    \    }\n    for (size_t i = 0; i < string.size(); i++) {\n        if (i == 0)\
    \ {\n            prefix = string;\n        } else {\n            prefix = prefix.substr(0,\
    \ i);\n        }\n        if (string[i] == string[string.size() - i - 1]) {\n\
    \            suffix = string.substr(i, string.size() - i - 1);\n            palindrome\
    \ = prefix + suffix;\n            longest = i;\n        }\n    }\n    if (longest\
    \ == 0) {\n        return string;\n    }\n    string reversed = reverse(palindrome);\n\
    \    string result = prefix + reversed + suffix;\n    return result;", "    std::string\
    \ reverse = \"\";\n    int length = string.length();\n    int index = 0;\n   \
    \ while (index < length) {\n        reverse = reverse + string[index];\n     \
    \   index++;\n    }\n    reverse = reverse + string[index];\n    return reverse;",
  "    string reverse = \"\";\n    int start = 0;\n    int end = string.length() -\
    \ 1;\n    while (start < end) {\n        reverse += string[start];\n        start\
    \ += 1;\n        end -= 1;\n    }\n    reverse += string[start];\n    return reverse;",
  "    string reverse = \"\";\n    int length = string.length();\n    for (int i =\
    \ 0; i < length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int\
    \ i = length / 2; i < length; i++) {\n        reverse += string[i];\n    }\n \
    \   return string + reverse;", "    string reverse = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    for (int i = length - 1; i >= 0; i--) {\n        reverse += string[i];\n\
    \    }\n    return reverse;", "    string postfix = \"\";\n    string prefix =\
    \ \"\";\n    bool found = false;\n    string reverse = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        postfix += string[i];\n\
    \        if (string[i] == string[string.size() - i - 1]) {\n            found\
    \ = true;\n        }\n    }\n    if (!found) {\n        postfix = \"\";\n    }\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        if (string[i] == string[string.size() - i - 1]) {\n            longest\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n \
    \       reverse += string[i];\n    }\n    reverse = reverse.substr(0, longest);\n\
    \    postfix = postfix.substr(0, longest);\n    string result = prefix + reverse\
    \ + postfix;\n    return result;", "    std::string palindrome = string;\n   \
    \ std::string prefix = \"\";\n    std::string suffix = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - i - 1]) {\n            longest = i;\n        }\n\
    \    }\n    for (size_t i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - i - 1]) {\n            suffix = string.substr(0,\
    \ i);\n            prefix = string.substr(0, longest);\n            palindrome\
    \ = prefix + palindrome + suffix;\n        }\n    }\n    return palindrome;",
  "    std::string palindrome = string;\n    size_t prefix_len = string.length();\n\
    \    size_t suffix_len = string.length();\n    size_t palindrome_len = string.length();\n\
    \    bool found = false;\n    while (!found && suffix_len > 0) {\n        suffix_len--;\n\
    \        found = string[suffix_len] == string[suffix_len - 1];\n    }\n    if\
    \ (found) {\n        palindrome_len = suffix_len;\n    }\n    std::string reversed_suffix;\n\
    \    for (size_t i = 0; i < palindrome_len; i++) {\n        reversed_suffix +=\
    \ string[i];\n    }\n    string reversed_prefix = reversed_suffix;\n    for (size_t\
    \ i = 0; i < prefix_len; i++) {\n        reversed_prefix += string[i];\n    }\n\
    \    reversed_prefix += palindrome;\n    return reversed_prefix;", "    std::string\
    \ reverse = \"\";\n    int length = string.length();\n    for (int i = 0; i <\
    \ length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int i = length\
    \ - 1; i >= 0; i--) {\n        reverse += string[i];\n    }\n    return reverse;",
  "    std::string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while (i < j) {\n        reverse += string[j];\n        i++;\n        j--;\n\
    \    }\n    reverse += string[i];\n    return reverse;", "    string reverse =\
    \ \"\";\n    int i = 0;\n    while (i < string.length()) {\n        reverse +=\
    \ string[i];\n        i++;\n    }\n    reverse = reverse.substr(0, reverse.length()\
    \ - 1);\n    string postfix = \"\";\n    int j = string.length() - 1;\n    while\
    \ (j >= 0) {\n        postfix += string[j];\n        j--;\n    }\n    postfix\
    \ = postfix.substr(0, postfix.length() - 1);\n    string result = string + reverse\
    \ + postfix;\n    return result;"]
stop_tokens:
- "\n}"
