name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  // >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n//\
  \ (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    std::string reverse = \"\";\n    for (auto &c : string) {\n   \
    \     reverse = reverse + c;\n    }\n    for (auto &c : string) {\n        if\
    \ (c != reverse.back()) {\n            reverse = reverse + c;\n        }\n   \
    \ }\n    return reverse;", "    std::string postfix = \"\";\n    std::string prefix\
    \ = \"\";\n    std::string reverse = \"\";\n    std::string palindrome = \"\"\
    ;\n    int length = string.length();\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < length) {\n        postfix = postfix + string[i];\n        i++;\n    }\n\
    \    length = postfix.length();\n    i = 0;\n    while (i < length) {\n      \
    \  prefix = prefix + string[i];\n        i++;\n    }\n    length = prefix.length();\n\
    \    i = 0;\n    while (i < length) {\n        reverse = reverse + string[i];\n\
    \        i++;\n    }\n    length = reverse.length();\n    i = 0;\n    while (i\
    \ < length) {\n        palindrome = palindrome + reverse;\n        i++;\n    }\n\
    \    return palindrome;", "    std::string palindrome = string;\n    size_t prefix_length\
    \ = 0;\n    size_t suffix_length = 0;\n    size_t max_suffix_length = 0;\n   \
    \ std::string reversed_suffix;\n    std::string reversed_prefix;\n    for (size_t\
    \ i = 0; i < palindrome.size(); i++) {\n        if (palindrome[i] == string[i])\
    \ {\n            prefix_length++;\n        } else {\n            suffix_length++;\n\
    \            if (suffix_length > max_suffix_length) {\n                max_suffix_length\
    \ = suffix_length;\n            }\n        }\n    }\n    for (size_t i = 0; i\
    \ < max_suffix_length; i++) {\n        reversed_suffix = palindrome.substr(max_suffix_length\
    \ - i - 1, 1);\n        reversed_prefix = palindrome.substr(0, max_suffix_length\
    \ - i - 1);\n        palindrome = reversed_prefix + reversed_suffix;\n    }\n\
    \    return palindrome;", "    std::string reverse = \"\";\n    int i = 0;\n \
    \   int j = string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        reverse += string[j];\n        j--;\n    }\n    return\
    \ reverse;", "    string postfix = \"\";\n    int max_len = string.length();\n\
    \    for (int i = 0; i < max_len; i++) {\n        postfix += string[i];\n    }\n\
    \    string reverse = postfix;\n    reverse.resize(max_len);\n    for (int i =\
    \ 0; i < max_len; i++) {\n        reverse[max_len - i - 1] = string[i];\n    }\n\
    \    return reverse + postfix;", "    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    int length = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == string[length - 1]) {\n            length++;\n \
    \       } else {\n            length = 0;\n        }\n        if (length == 0)\
    \ {\n            postfix = postfix + string[i];\n        } else {\n          \
    \  prefix = prefix + string[i];\n        }\n    }\n    string reverse = prefix;\n\
    \    for (int i = 0; i < length - 1; i++) {\n        reverse = reverse + string[i];\n\
    \    }\n    return reverse + postfix;", "    string postfix = string;\n    string\
    \ prefix = \"\";\n    int max_length = 0;\n    int i = 0;\n    while (i < postfix.size())\
    \ {\n        int j = postfix.size() - 1;\n        while (j >= 0) {\n         \
    \   if (postfix[i] == postfix[j]) {\n                j--;\n            } else\
    \ {\n                break;\n            }\n        }\n        if (j >= 0) {\n\
    \            max_length = std::max(max_length, j + 1);\n            prefix = prefix\
    \ + postfix[i];\n            postfix.erase(postfix.begin() + i);\n           \
    \ i = j;\n        } else {\n            postfix.erase(postfix.begin() + i);\n\
    \            i = postfix.size();\n        }\n    }\n    if (postfix.size() > 0)\
    \ {\n        max_length = std::max(max_length, postfix.size());\n    }\n    std::string\
    \ result = prefix;\n    for (int i = 0; i < max_length; i++) {\n        result\
    \ = result + postfix[i];\n    }\n    return result;", "    string postfix = \"\
    \";\n    string prefix = \"\";\n    int longest = 0;\n    for (auto c : string)\
    \ {\n        if (c == ' ') {\n            postfix = postfix + c;\n        } else\
    \ {\n            postfix = postfix + c;\n            longest = std::max(longest,\
    \ postfix.size());\n        }\n    }\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(longest, postfix.size());\n    longest\
    \ = std::max(longest, prefix.size());\n    longest = std::max(longest, string.size());\n\
    \    longest = std::max(longest, postfix.size());\n    longest = std::max(longest,\
    \ prefix.size());\n    longest = std::max(longest, string.size());\n    longest\
    \ = std::max(longest, postfix.size());\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(longest, postfix.size());\n    longest\
    \ = std::max(longest, prefix.size());\n    longest = std::max(longest, string.size());\n\
    \    longest = std::max(longest, postfix.size());\n    longest = std::max(longest,\
    \ prefix.size());\n    longest = std::max(longest, string.size());\n    longest\
    \ = std::max(longest, postfix.size());\n    longest = std::max(longest, prefix.size());\n\
    \    longest = std::max(longest, string.size());\n    longest = std::max(longest,\
    \ postfix.size());\n    longest = std::max(longest, prefix.size());\n    longest\
    \ = std::max(longest, string.size());\n    longest = std::max(longest, postfix.size());\n\
    \    longest = std::max(longest, prefix.size());\n    longest = std::max(longest,\
    \ string.size());\n    longest = std::max(", "    std::string reverse = \"\";\n\
    \    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    for\
    \ (auto &c : string) {\n        if (c != reverse.back()) {\n            reverse\
    \ = reverse + c;\n        }\n    }\n    return reverse;", "    string reverse;\n\
    \    string prefix;\n    string suffix;\n    string palindrome;\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        longest = i;\n\
    \    }\n    for (size_t i = 0; i < string.size(); i++) {\n        if (i == 0)\
    \ {\n            prefix = string;\n        } else {\n            prefix = prefix.substr(0,\
    \ i);\n        }\n        if (string[i] == string[string.size() - i - 1]) {\n\
    \            suffix = string.substr(i, string.size() - i - 1);\n            palindrome\
    \ = prefix + suffix;\n            longest = i;\n        }\n    }\n    if (longest\
    \ == 0) {\n        return string;\n    }\n    string reversed = reverse(palindrome);\n\
    \    string result = prefix + reversed + suffix;\n    return result;", "    std::string\
    \ reverse = \"\";\n    int length = string.length();\n    int index = 0;\n   \
    \ while (index < length) {\n        reverse = reverse + string[index];\n     \
    \   index++;\n    }\n    reverse = reverse + string[index];\n    return reverse;",
  "    string reverse = \"\";\n    int start = 0;\n    int end = string.length() -\
    \ 1;\n    while (start < end) {\n        reverse += string[start];\n        start\
    \ += 1;\n        end -= 1;\n    }\n    reverse += string[start];\n    return reverse;",
  "    string reverse = \"\";\n    int length = string.length();\n    for (int i =\
    \ 0; i < length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int\
    \ i = length / 2; i < length; i++) {\n        reverse += string[i];\n    }\n \
    \   return string + reverse;", "    string reverse = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    for (int i = length - 1; i >= 0; i--) {\n        reverse += string[i];\n\
    \    }\n    return reverse;", "    string postfix = \"\";\n    string prefix =\
    \ \"\";\n    bool found = false;\n    string reverse = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        postfix += string[i];\n\
    \        if (string[i] == string[string.size() - i - 1]) {\n            found\
    \ = true;\n        }\n    }\n    if (!found) {\n        postfix = \"\";\n    }\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        if (string[i] == string[string.size() - i - 1]) {\n            longest\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n \
    \       reverse += string[i];\n    }\n    reverse = reverse.substr(0, longest);\n\
    \    postfix = postfix.substr(0, longest);\n    string result = prefix + reverse\
    \ + postfix;\n    return result;", "    std::string palindrome = string;\n   \
    \ std::string prefix = \"\";\n    std::string suffix = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - i - 1]) {\n            longest = i;\n        }\n\
    \    }\n    for (size_t i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - i - 1]) {\n            suffix = string.substr(0,\
    \ i);\n            prefix = string.substr(0, longest);\n            palindrome\
    \ = prefix + palindrome + suffix;\n        }\n    }\n    return palindrome;",
  "    std::string palindrome = string;\n    size_t prefix_len = string.length();\n\
    \    size_t suffix_len = string.length();\n    size_t palindrome_len = string.length();\n\
    \    bool found = false;\n    while (!found && suffix_len > 0) {\n        suffix_len--;\n\
    \        found = string[suffix_len] == string[suffix_len - 1];\n    }\n    if\
    \ (found) {\n        palindrome_len = suffix_len;\n    }\n    std::string reversed_suffix;\n\
    \    for (size_t i = 0; i < palindrome_len; i++) {\n        reversed_suffix +=\
    \ string[i];\n    }\n    string reversed_prefix = reversed_suffix;\n    for (size_t\
    \ i = 0; i < prefix_len; i++) {\n        reversed_prefix += string[i];\n    }\n\
    \    reversed_prefix += palindrome;\n    return reversed_prefix;", "    std::string\
    \ reverse = \"\";\n    int length = string.length();\n    for (int i = 0; i <\
    \ length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int i = length\
    \ - 1; i >= 0; i--) {\n        reverse += string[i];\n    }\n    return reverse;",
  "    std::string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while (i < j) {\n        reverse += string[j];\n        i++;\n        j--;\n\
    \    }\n    reverse += string[i];\n    return reverse;", "    string reverse =\
    \ \"\";\n    int i = 0;\n    while (i < string.length()) {\n        reverse +=\
    \ string[i];\n        i++;\n    }\n    reverse = reverse.substr(0, reverse.length()\
    \ - 1);\n    string postfix = \"\";\n    int j = string.length() - 1;\n    while\
    \ (j >= 0) {\n        postfix += string[j];\n        j--;\n    }\n    postfix\
    \ = postfix.substr(0, postfix.length() - 1);\n    string result = string + reverse\
    \ + postfix;\n    return result;", "    string reverse = \"\";\n    size_t start\
    \ = 0;\n    size_t end = string.length() - 1;\n    while (start < end) {\n   \
    \     reverse += string.at(start);\n        start += 1;\n        end -= 1;\n \
    \   }\n    reverse += string.at(start);\n    return reverse;", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    int max_len =\
    \ 0, i = 0;\n    while (i < string.length()) {\n        if (string[i] == string[string.length()\
    \ - 1 - i]) {\n            ++i;\n        } else {\n            max_len = i;\n\
    \            break;\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    string\
    \ reverse = string[max_len];\n    for (int j = max_len - 1; j >= 0; --j) {\n \
    \       reverse = string[j] + reverse;\n    }\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        size_t j = string.size() - i - 1;\n        if (j > longest)\
    \ {\n            longest = j;\n        }\n        reverse += string[j];\n    }\n\
    \    reverse += string[longest];\n    reverse = reverse.substr(0, reverse.size()\
    \ - 1);\n    return string + reverse;", "    string reverse = \"\";\n    int len\
    \ = string.length();\n    int i = 0;\n    while (i < len) {\n        reverse +=\
    \ string[i];\n        i++;\n    }\n    reverse = reverse.substr(0, len);\n   \
    \ string prefix = \"\";\n    int j = 0;\n    while (j < len) {\n        prefix\
    \ += string[j];\n        j++;\n    }\n    prefix = prefix.substr(0, len);\n  \
    \  return prefix + reverse;", "    std::string palindrome = string;\n    std::string\
    \ postfix = \"\";\n    std::string reverse = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        postfix += string[i];\n        reverse\
    \ += string[len - i - 1];\n    }\n    if (reverse == postfix) {\n        palindrome\
    \ = postfix + reverse;\n    }\n    return palindrome;", "    std::string reverse\
    \ = \"\";\n    for (auto i = string.size(); i > 0; i--) {\n        reverse.insert(0,\
    \ string[i - 1]);\n    }\n    return string + reverse;", "    std::string palindrome\
    \ = string;\n    size_t start = 0;\n    size_t end = 0;\n    size_t palindrome_length\
    \ = 0;\n    while (end < palindrome.size()) {\n        end = palindrome.find_first_of(string[start],\
    \ end);\n        if (end == std::string::npos) {\n            break;\n       \
    \ }\n        palindrome_length = end - start;\n        palindrome.append(palindrome.begin()\
    \ + start, palindrome.begin() + end + palindrome_length);\n        start = end\
    \ + 1;\n    }\n    return palindrome;", "    string reverse;\n    string prefix;\n\
    \    string suffix;\n    int max_len = string.length();\n    int prefix_len =\
    \ 0;\n    int suffix_len = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    while (i < max_len) {\n        if (string[i] == string[max_len]) {\n    \
    \        reverse.append(string[i]);\n            i++;\n            max_len--;\n\
    \        } else {\n            if (string[i] != string[max_len]) {\n         \
    \       reverse.append(string[i]);\n                i++;\n                max_len--;\n\
    \            }\n        }\n    }\n    prefix = string.substr(0, prefix_len);\n\
    \    suffix = string.substr(prefix_len, string.length() - suffix_len);\n    while\
    \ (suffix.length() > 1) {\n        if (reverse.find(suffix.substr(0, suffix.length()\
    \ - 1)) != string::npos) {\n            reverse.append(suffix.substr(0, suffix.length()\
    \ - 1));\n            suffix_len--;\n        } else {\n            reverse.append(suffix.substr(0,\
    \ suffix.length() - 1));\n            suffix_len--;\n        }\n    }\n    return\
    \ prefix + reverse + suffix;", "    std::string palindrome;\n    int start = 0;\n\
    \    int end = string.length() - 1;\n    while (start < end) {\n        if (string[start]\
    \ != string[end]) {\n            palindrome.push_back(string[start]);\n      \
    \      palindrome.push_back(string[end]);\n            start = end;\n        \
    \    end = string.length() - 1;\n        } else {\n            end--;\n      \
    \  }\n    }\n    return palindrome;", "    std::string palindrome;\n    int length\
    \ = string.length();\n    int max_len = length;\n    int min_len = 0;\n    int\
    \ i = 0;\n    int j = 0;\n    while (i < length) {\n        if (string[i] != string[length\
    \ - 1 - i]) {\n            j = i;\n            break;\n        }\n        i++;\n\
    \    }\n    if (j - i > 1) {\n        max_len = j;\n        min_len = i;\n   \
    \ }\n    palindrome = string;\n    while (max_len - min_len > 1) {\n        palindrome\
    \ = std::string(min_len, max_len - min_len) + palindrome;\n        max_len--;\n\
    \        min_len++;\n    }\n    return palindrome;", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    int max_len = 0, max_i\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        max_len = max(max_len,\
    \ string.length() - i);\n        max_i = i;\n    }\n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    string reverse = string(max_i, max_len);\n    string prefix = string(max_i,\
    \ max_len - string.length());\n    return prefix + reverse;", "    std::string\
    \ reversed_string;\n    std::string postfix_string;\n    for (size_t i = 0; i\
    \ < string.length(); i++) {\n        postfix_string += string[i];\n    }\n   \
    \ for (size_t i = 0; i < string.length(); i++) {\n        reversed_string += string[string.length()\
    \ - 1 - i];\n    }\n    if (postfix_string == reversed_string) {\n        return\
    \ string;\n    }\n    string += reversed_string;\n    return string;", "    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i\
    \ < j) {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n \
    \   reverse += string[j];\n    return reverse;", "    string postfix = \"\";\n\
    \    string prefix = \"\";\n    int longest = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - i - 1]) {\n      \
    \      longest++;\n        } else {\n            if (longest > 1) {\n        \
    \        postfix = postfix + string[string.length() - i - 1];\n              \
    \  prefix = prefix + string[string.length() - longest - 1];\n            } else\
    \ {\n                postfix = postfix + string[string.length() - i - 1];\n  \
    \          }\n            longest = 1;\n        }\n    }\n    if (longest > 1)\
    \ {\n        postfix = postfix + string[string.length() - longest];\n        prefix\
    \ = prefix + string[string.length() - longest - 1];\n    }\n    return prefix\
    \ + postfix;", "    std::string ans = string;\n    std::string prefix = string;\n\
    \    std::string suffix = string;\n    std::string reverse = \"\";\n    size_t\
    \ prefix_len = prefix.size();\n    size_t suffix_len = suffix.size();\n    size_t\
    \ max_len = prefix_len + suffix_len;\n    size_t i = 0;\n    size_t j = 0;\n \
    \   while (i < prefix_len && j < suffix_len) {\n        if (prefix[i] != suffix[j])\
    \ {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if\
    \ (i == prefix_len && j == suffix_len) {\n        return ans;\n    }\n    size_t\
    \ prefix_end = i;\n    size_t suffix_start = j;\n    while (i < prefix_len) {\n\
    \        reverse = reverse + prefix[i];\n        i++;\n    }\n    while (j < suffix_len)\
    \ {\n        reverse = reverse + suffix[j];\n        j++;\n    }\n    reverse\
    \ = reverse + suffix[j];\n    ans = ans + reverse;\n    return ans;", "    std::string\
    \ ans = string;\n    int n = string.length();\n    for (int i = 0; i < n; ++i)\
    \ {\n        std::string prefix = string.substr(0, i);\n        std::string suffix\
    \ = string.substr(i, n);\n        std::string reverse = suffix;\n        reverse.resize(prefix.length(),\
    \ 0);\n        for (int j = reverse.length() - 1; j >= 0; --j) {\n           \
    \ reverse[j] = prefix[prefix.length() - j - 1];\n        }\n        ans = prefix\
    \ + reverse + suffix;\n    }\n    return ans;", "    string reverse = \"\";\n\
    \    size_t start = 0;\n    size_t end = string.size() - 1;\n    while (start\
    \ < end) {\n        reverse += string[start];\n        start += 1;\n        end\
    \ -= 1;\n    }\n    reverse += string[start];\n    return reverse;", "    std::string\
    \ palindrome = string;\n    int length = string.length();\n    for (int i = 0;\
    \ i < length; i++) {\n        int j = length - i - 1;\n        if (string[i] !=\
    \ string[j]) {\n            palindrome.insert(palindrome.begin() + j, string[i]);\n\
    \        }\n    }\n    return palindrome;", "    string reverse = \"\";\n    for\
    \ (auto &c : string) {\n        reverse = c + reverse;\n    }\n    return string\
    \ + reverse;", "    string postfix = \"\";\n    string prefix = \"\";\n    int\
    \ longest = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - 1 - i]) {\n            postfix += string[i];\n \
    \           longest = i;\n        } else {\n            prefix += string[i];\n\
    \        }\n    }\n    std::string palindrome = prefix + postfix.substr(0, longest);\n\
    \    return palindrome;", "    string reverse = \"\";\n    int i = 0;\n    int\
    \ j = string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        j--;\n    }\n    reverse += string[j];\n    return reverse;",
  "    std::string postfix = \"\";\n    std::string prefix = \"\";\n    std::string\
    \ reverse = \"\";\n    for (auto &c : string) {\n        if (c != ' ') {\n   \
    \         postfix += c;\n        } else {\n            reverse = prefix + reverse;\n\
    \            prefix = postfix.substr(0, postfix.size() - 1);\n            postfix\
    \ = \"\";\n        }\n    }\n    return reverse;", "    string reverse = \"\"\
    ;\n    int length = string.length();\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < length / 2) {\n        reverse += string[j];\n        i++;\n        j++;\n\
    \    }\n    reverse += string[j];\n    return reverse;", "    string reverse =\
    \ \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        if (string[i] == string[string.length() - 1 - i]) {\n           \
    \ longest = i;\n        }\n    }\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        if (string[i] == string[string.length() - 1 - i]) {\n           \
    \ reverse = reverse + string[i];\n        }\n    }\n    return reverse + string.substr(0,\
    \ longest);", "    // Find the longest postfix that is a palindrome.\n    int\
    \ max_len = 0, max_idx = 0;\n    for (int i = 1; i < string.length(); i++) {\n\
    \        if (string[i] == string[i - 1]) {\n            ++i;\n        }\n    \
    \    if (string[i] > string[max_len]) {\n            max_len = i;\n          \
    \  max_idx = i;\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    string reversed_string\
    \ = string;\n    for (int i = max_len - 1; i >= 0; i--) {\n        reversed_string[max_idx]\
    \ = string[i];\n        max_idx--;\n    }\n    return reversed_string;", "   \
    \ std::string palindrome;\n    std::string reverse;\n    std::string prefix =\
    \ string;\n    std::string postfix = \"\";\n    std::string suffix = \"\";\n \
    \   std::string temp;\n    bool found = false;\n    while (!found) {\n       \
    \ postfix = prefix + postfix;\n        postfix = postfix.substr(0, postfix.size()\
    \ - 1);\n        found = postfix != string;\n        prefix = postfix.substr(0,\
    \ postfix.size() - 1);\n    }\n    temp = string;\n    found = postfix != string;\n\
    \    while (!found) {\n        postfix = prefix + postfix;\n        postfix =\
    \ postfix.substr(0, postfix.size() - 1);\n        found = postfix != string;\n\
    \        prefix = postfix.substr(0, postfix.size() - 1);\n    }\n    temp = string;\n\
    \    found = postfix != string;\n    while (!found) {\n        postfix = prefix\
    \ + postfix;\n        postfix = postfix.substr(0, postfix.size() - 1);\n     \
    \   found = postfix != string;\n        prefix = postfix.substr(0, postfix.size()\
    \ - 1);\n    }\n    temp = string;\n    found = postfix != string;\n    while\
    \ (!found) {\n        postfix = prefix + postfix;\n        postfix = postfix.substr(0,\
    \ postfix.size() - 1);\n        found = postfix != string;\n        prefix = postfix.substr(0,\
    \ postfix.size() - 1);\n    }\n    temp = string;\n    found = postfix != string;\n\
    \    while (!found) {\n        postfix = prefix + postfix;\n        postfix =\
    \ postfix.substr(0, postfix.size() - 1);\n        found = postfix != string;\n\
    \        prefix = postfix.substr(0, postfix.size() - 1);\n    }\n    temp = string;\n\
    \    found = postfix != string;\n    while (!found) {\n        postfix = prefix\
    \ + postfix;\n        postfix = postfix.substr(0, postfix.size() - 1);\n     \
    \   found = postfix != string;\n        prefix = postfix.substr(0, postfix.size()\
    \ - 1);\n    }\n    temp = string;\n    found = postfix != string;\n    while\
    \ (!found) {\n        postfix = prefix + postfix;\n        postfix = postfix.substr(0,\
    \ postfix.size() - 1);\n        found = postfix != string;\n        prefix = postfix.substr(0,\
    \ postfix.size() - 1);\n    }\n    temp = string;\n    found = postfix != string;\n\
    \    while (!found) {\n        postfix = prefix + postfix;\n        postfix =\
    \ postfix.substr(0, postfix.size() - 1);\n        found = ", "    string postfix\
    \ = string;\n    string prefix = string;\n    int max_length = 0;\n    int max_length_postfix\
    \ = 0, max_length_prefix = 0, max_length_suffix = 0;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        if (string[i] == string[string.length() - 1\
    \ - i]) {\n            max_length++;\n            if (max_length_postfix < max_length)\
    \ {\n                max_length_postfix = max_length;\n            }\n       \
    \     if (max_length_prefix < max_length) {\n                max_length_prefix\
    \ = max_length;\n            }\n            if (max_length_suffix < max_length)\
    \ {\n                max_length_suffix = max_length;\n            }\n        }\
    \ else {\n            max_length = 0;\n        }\n    }\n    if (max_length_postfix\
    \ > max_length_prefix && max_length_postfix > max_length_suffix) {\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_suffix]);\n        postfix.append(1,\
    \ string[string.length() - 1 - max_length_prefix]);", "    std::string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    string reverse_reverse = reverse;\n    reverse = reverse + reverse_reverse;\n\
    \    return string;", "    string postfix = \"\";\n    string prefix = \"\";\n\
    \    int longest = 0;\n    int index = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      longest++;\n        } else {\n            longest = 0;\n        }\n   \
    \     if (longest > index) {\n            postfix = string[index];\n         \
    \   prefix = string[string.length() - 1 - i];\n            index = longest;\n\
    \        }\n    }\n    return prefix + postfix + string;", "    std::string reverse\
    \ = \"\";\n    int len = string.length();\n    for (int i = 0; i < len / 2; i++)\
    \ {\n        reverse += string[i];\n    }\n    reverse += string[len - 1];\n \
    \   return reverse;", "    std::string reverse = \"\";\n    size_t longest = 0;\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        size_t j = string.size()\
    \ - 1 - i;\n        if (string[i] == string[j]) {\n            longest = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n        size_t\
    \ j = string.size() - 1 - i;\n        if (string[i] == string[j]) {\n        \
    \    reverse = reverse + string[i];\n        }\n    }\n    return string + reverse;",
  "    string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n  \
    \  while (i < j) {\n        reverse = reverse + string[j--];\n        i++;\n \
    \   }\n    reverse = reverse + string[i];\n    return reverse;", "    string reverse\
    \ = \"\";\n    int len = string.length();\n    for (int i = 0; i < len / 2; i++)\
    \ {\n        reverse += string[i];\n    }\n    reverse += string[len - 1];\n \
    \   return reverse;", "    std::string reverse = \"\";\n    size_t longest = 0;\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        size_t j = string.size()\
    \ - 1 - i;\n        if (string[i] == string[j]) {\n            longest = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n        size_t\
    \ j = string.size() - 1 - i;\n        if (string[i] == string[j]) {\n        \
    \    reverse = reverse + string[i];\n        }\n    }\n    return string + reverse\
    \ + string.substr(longest);", "    string postfix = \"\";\n    string prefix =\
    \ \"\";\n    string reverse = \"\";\n    int length = string.length();\n    for\
    \ (int i = 0; i < length; i++) {\n        postfix += string[i];\n    }\n    for\
    \ (int i = 0; i < length; i++) {\n        prefix += string[i];\n    }\n    reverse\
    \ = prefix;\n    for (int i = 0; i < length; i++) {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    return postfix + reverse;", "    std::string palindrome\
    \ = string;\n    size_t max_len = string.length();\n    for (size_t i = 1; i <\
    \ max_len; ++i) {\n        auto prefix = string.substr(0, i);\n        auto suffix\
    \ = string.substr(i);\n        if (suffix == std::string(prefix.rbegin(), prefix.rend()))\
    \ {\n            palindrome.append(suffix);\n            break;\n        }\n \
    \   }\n    return palindrome;", "    string reverse = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        reverse += string[i];\n    }\n\
    \    reverse += string[len - 1];\n    return reverse;", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    int max_len = 0, max_pos\
    \ = 0;\n    for (int i = 0; i < (int) string.size(); i++) {\n        if (string[i]\
    \ == string[string.length() - 1 - i]) {\n            max_len = i;\n          \
    \  max_pos = i;\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    std::string\
    \ reverse = string.substr(0, max_len);\n    reverse = reverse + string[max_pos];\n\
    \    return reverse;", "    std::string palindrome = string;\n    size_t prefix_length\
    \ = 0;\n    size_t suffix_length = 0;\n    size_t palindrome_length = 0;\n   \
    \ size_t i = 0;\n    size_t j = 0;\n    while (i < palindrome.size()) {\n    \
    \    j = i;\n        while (j + 1 < palindrome.size() && palindrome[j] == palindrome[j\
    \ + 1]) {\n            j++;\n        }\n        if (j - i > 1) {\n           \
    \ prefix_length = j - i;\n            palindrome_length = prefix_length + suffix_length;\n\
    \            palindrome.append(palindrome.begin() + prefix_length, palindrome.begin()\
    \ + palindrome_length);\n            suffix_length = j - i;\n        }\n     \
    \   i++;\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    int length = string.length();\n    int max_len = length;\n    for (int i\
    \ = 0; i < length; i++) {\n        if (string[i] != string[length - i - 1]) {\n\
    \            int j = i;\n            while (j > 0 && string[j - 1] == string[j])\
    \ {\n                j--;\n            }\n            int k = j;\n           \
    \ while (k < length && string[k] == string[k + 1]) {\n                k++;\n \
    \           }\n            std::string temp = string.substr(j, k - j);\n     \
    \       palindrome += temp;\n            length = k - j;\n            max_len\
    \ = k;\n        }\n    }\n    return palindrome;", "    std::string reverse =\
    \ \"\";\n    size_t start = 0;\n    size_t end = string.size() - 1;\n    while\
    \ (start < end) {\n        reverse += string[start];\n        ++start;\n     \
    \   --end;\n    }\n    reverse += string[end];\n    return reverse;", "    string\
    \ reverse;\n    string prefix = string;\n    int length = string.length();\n \
    \   int index = 0;\n    while (index < length) {\n        reverse += prefix[index];\n\
    \        index++;\n    }\n    reverse = reverse.substr(0, length - 1);\n    string\
    \ postfix = string;\n    length = string.length();\n    index = 0;\n    while\
    \ (index < length) {\n        postfix += reverse[index];\n        index++;\n \
    \   }\n    return postfix;", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    int max_len = 0, max_pos = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        int pos = string.find_first_of(string[i],\
    \ max_pos);\n        if (pos == string::npos) {\n            pos = string.length();\n\
    \        }\n        if (pos > max_len) {\n            max_len = pos;\n       \
    \     max_pos = i;\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    std::string\
    \ palindrome = string;\n    for (int i = max_len - 1; i >= 0; i--) {\n       \
    \ palindrome += string[i];\n    }\n    return palindrome;", "    std::string reverse\
    \ = \"\";\n    int length = string.length();\n    for (int i = 0; i < length /\
    \ 2; i++) {\n        reverse += string[i];\n    }\n    reverse += string[length\
    \ - 1];\n    return reverse;", "    std::string reverse = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == string[string.size() - 1 - i]) {\n            longest = i;\n        }\n \
    \   }\n    for (size_t i = 0; i < string.size() - longest; i++) {\n        reverse\
    \ += string[i];\n    }\n    reverse += string[string.size() - longest];\n    return\
    \ reverse;", "    std::string palindrome = string;\n    int length = string.length();\n\
    \    int start = 0;\n    int end = length - 1;\n    while (start < end) {\n  \
    \      if (string[start] != string[end]) {\n            end = end - 1;\n     \
    \   } else {\n            start = start + 1;\n            end = end - 1;\n   \
    \     }\n    }\n    std::string reverse = string.substr(start, length);\n    palindrome\
    \ = palindrome + reverse;\n    return palindrome;", "    string reverse = \"\"\
    ;\n    size_t start = 0;\n    size_t end = 0;\n    size_t longest = 0;\n    for\
    \ (size_t i = 0; i < string.size(); i++) {\n        end = string.size() - i;\n\
    \        if (string[end] == string[end - 1]) {\n            longest = end - 1;\n\
    \        } else {\n            longest = end;\n        }\n        if (longest\
    \ > start) {\n            reverse = reverse + string[start];\n            start\
    \ = longest;\n        }\n    }\n    return reverse + string[start];", "    std::string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        size_t j = string.size() - 1 - i;\n        if (string[i] ==\
    \ string[j]) {\n            longest = i;\n        }\n    }\n    for (size_t i\
    \ = 0; i < string.size(); i++) {\n        size_t j = string.size() - 1 - i;\n\
    \        if (string[i] == string[j]) {\n            reverse = reverse + string[i];\n\
    \        }\n    }\n    return reverse + string.substr(0, longest);", "    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    size_t\
    \ longest = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == string[string.size() - 1 - i]) {\n            longest = i;\n        }\n \
    \   }\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == string[string.size() - 1 - i]) {\n            prefix = string[string.size()\
    \ - 1 - i];\n            suffix = string[i];\n        }\n    }\n    string postfix\
    \ = \"\";\n    for (size_t i = 0; i < longest; i++) {\n        postfix = postfix\
    \ + prefix;\n    }\n    postfix = postfix + suffix;\n    reverse = reverse.substr(0,\
    \ reverse.size() - longest) + postfix;\n    return reverse;", "    // Find longest\
    \ postfix of string that is a palindrome.\n    int max_len = 0, min_len = string.length();\n\
    \    for (int i = 0; i < min_len; ++i) {\n        int j = min_len - 1 - i;\n \
    \       if (string[i] == string[j]) {\n            max_len = std::max(max_len,\
    \ j + 1);\n        }\n    }\n    // Append the reverse of the string prefix that\
    \ comes before the palindromic suffix.\n    std::string result = string;\n   \
    \ for (int i = 0; i < max_len; ++i) {\n        int j = min_len - 1 - i;\n    \
    \    if (string[i] == string[j]) {\n            result += string[j];\n       \
    \ }\n    }\n    return result;", "    std::string reverse = \"\";\n    size_t\
    \ start = 0;\n    size_t end = string.length() - 1;\n    while (start < end) {\n\
    \        reverse = reverse + string.substr(start, end - start);\n        start\
    \ = end;\n        end = string.length() - 1;\n    }\n    return reverse + string.substr(start,\
    \ string.length() - start);", "    std::string ans = string;\n    ans.push_back(string[0]);\n\
    \    ans.push_back(string[string.length() - 1]);\n    ans.erase(ans.begin(), std::unique(ans.begin(),\
    \ ans.end()));\n    return ans;", "    string reverse;\n    string prefix;\n \
    \   string suffix;\n    int max_len = string.length();\n    int min_len = max_len;\n\
    \    int min_len_postfix = max_len;\n    int min_len_prefix = max_len;\n    int\
    \ min_len_suffix = max_len;\n    int min_len_postfix_reverse = max_len;\n    int\
    \ min_len_prefix_reverse = max_len;\n    int min_len_suffix_reverse = max_len;\n\
    \    int min_len_postfix_reverse_palindromic = max_len;\n    int min_len_prefix_reverse_palindromic\
    \ = max_len;\n    int min_len_suffix_reverse_palindromic = max_len;\n    int min_len_postfix_reverse_prefix_palindromic\
    \ = max_len;\n    int min_len_prefix_reverse_prefix_palindromic = max_len;\n \
    \   int min_len_suffix_reverse_prefix_palindromic = max_len;\n    int min_len_postfix_reverse_suffix_palindromic\
    \ = max_len;\n    int min_len_prefix_reverse_suffix_palindromic = max_len;\n \
    \   int min_len_suffix_reverse_suffix_palindromic = max_len;\n    int min_len_postfix_reverse_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_prefix_reverse_prefix_prefix_palindromic = max_len;\n\
    \    int min_len_suffix_reverse_prefix_prefix_palindromic = max_len;\n    int\
    \ min_len_postfix_reverse_suffix_prefix_palindromic = max_len;\n    int min_len_prefix_reverse_suffix_prefix_palindromic\
    \ = max_len;\n    int min_len_suffix_reverse_suffix_prefix_palindromic = max_len;\n\
    \    int min_len_postfix_reverse_prefix_suffix_palindromic = max_len;\n    int\
    \ min_len_prefix_reverse_prefix_suffix_palindromic = max_len;\n    int min_len_suffix_reverse_prefix_suffix_palindromic\
    \ = max_len;\n    int min_len_postfix_reverse_suffix_suffix_palindromic = max_len;\n\
    \    int min_len_prefix_reverse_suffix_suffix_palindromic = max_len;\n    int\
    \ min_len_suffix_reverse_suffix_suffix_palindromic = max_len;\n    int min_len_postfix_reverse_prefix_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_prefix_reverse_prefix_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_suffix_reverse_prefix_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_postfix_reverse_suffix_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_prefix_reverse_suffix_prefix_prefix_palindromic\
    \ = max_len;\n    int min_len_suffix_reverse_suffix_prefix_prefix_palindromic\
    \ = ", "    std::string reversed = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reversed += string[i];\n\
    \    }\n    for (int i = length - 1; i >= 0; i--) {\n        reversed += string[i];\n\
    \    }\n    return reversed;", "    std::string palindrome = string;\n    std::string\
    \ prefix = string;\n    std::string suffix = string;\n    size_t prefix_len =\
    \ 0;\n    size_t suffix_len = 0;\n    size_t max_len = palindrome.size();\n  \
    \  while (max_len > 0) {\n        max_len--;\n        prefix_len = prefix.size();\n\
    \        suffix_len = suffix.size();\n        if (prefix_len > suffix_len) {\n\
    \            std::swap(prefix_len, suffix_len);\n        }\n        if (prefix_len\
    \ == suffix_len) {\n            prefix += suffix;\n            suffix += prefix;\n\
    \        }\n        else if (prefix_len < suffix_len) {\n            std::swap(prefix_len,\
    \ suffix_len);\n        }\n    }\n    palindrome += suffix;\n    return palindrome;",
  "    string reverse = \"\";\n    string prefix = \"\";\n    int i = 0;\n    int\
    \ j = string.size() - 1;\n    while (i < j) {\n        if (string[i] != string[j])\
    \ {\n            reverse = reverse + string[j];\n            j = j - 1;\n    \
    \    } else {\n            reverse = reverse + string[i];\n            i = i +\
    \ 1;\n        }\n    }\n    prefix = prefix + reverse;\n    return prefix;", " \
    \   string reverse = \"\";\n    int i = 0;\n    while (i < string.length()) {\n\
    \        reverse += string[i];\n        i++;\n    }\n    reverse = reverse.substr(0,\
    \ string.length()) + reverse;\n    return string;", "    string reverse = \"\"\
    ;\n    int n = string.length();\n    for (int i = 0; i < n; i++) {\n        reverse\
    \ += string[n - i - 1];\n    }\n    return string + reverse;", "    std::string\
    \ palindrome = string;\n    std::string postfix = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        postfix = postfix + string[i];\n\
    \    }\n    for (int i = length - 1; i >= 0; i--) {\n        palindrome = palindrome\
    \ + string[i];\n    }\n    palindrome = palindrome + postfix;\n    return palindrome;",
  "    std::string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    reverse = reverse + string[string.length() - 1];\n\
    \    return string;", "    std::string ans = string;\n    size_t n = string.length();\n\
    \    std::string prefix = \"\";\n    std::string suffix = \"\";\n    for (size_t\
    \ i = 0; i < n; ++i) {\n        std::string s = prefix + string[i];\n        std::string\
    \ r = s + suffix;\n        if (r == s) {\n            ans = s;\n            prefix\
    \ = string[i];\n            suffix = string[n - i - 1];\n            break;\n\
    \        }\n    }\n    return ans;", "    string reversed = \"\";\n    int i =\
    \ 0;\n    int j = string.size() - 1;\n    while (i < j) {\n        reversed.push_back(string[i]);\n\
    \        i++;\n        j--;\n    }\n    reversed.push_back(string[j]);\n    return\
    \ reversed;", "    std::string ans = string;\n    size_t len = string.length();\n\
    \    std::string prefix = \"\";\n    std::string suffix = \"\";\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        std::string sub = string.substr(0, i);\n   \
    \     if (sub == string) {\n            ans = ans + suffix;\n            break;\n\
    \        }\n        std::string reverse = std::string(sub.rbegin(), sub.rend());\n\
    \        ans = ans + reverse + prefix;\n        prefix = reverse;\n        suffix\
    \ = sub.substr(0, i);\n    }\n    return ans;", "    std::string reverse = \"\"\
    ;\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    reverse\
    \ = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse + reverse.substr(reverse.length()\
    \ / 2, reverse.length());\n    return string;", "    std::string palindrome =\
    \ string;\n    int max_len = 0, min_len = string.length();\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        int j = i + 1;\n        while (j < string.length()\
    \ && string[i] == string[j]) {\n            j++;\n        }\n        if (j - i\
    \ > max_len) {\n            max_len = j - i;\n        }\n        if (i - j < min_len)\
    \ {\n            min_len = i - j;\n        }\n    }\n    for (int i = 0; i < max_len;\
    \ i++) {\n        palindrome.insert(palindrome.begin(), string[i]);\n    }\n \
    \   for (int i = max_len; i < min_len; i++) {\n        palindrome.insert(palindrome.begin(),\
    \ string[i]);\n    }\n    return palindrome;", "    string postfix = \"\";\n \
    \   int max_len = 0, min_len = string.length();\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      postfix += string[i];\n            max_len = i;\n            min_len =\
    \ string.length() - 1 - i;\n        }\n    }\n    string reverse = postfix.substr(0,\
    \ max_len);\n    string prefix = string.substr(0, min_len);\n    return prefix\
    \ + reverse;", "    std::string palindrome = string;\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        int j = length - i - 1;\n   \
    \     if (string[j] != string[i]) {\n            string += string[j];\n      \
    \      palindrome += string[i];\n        }\n    }\n    return palindrome;", " \
    \   std::string palindrome = string;\n    int length = string.length();\n    for\
    \ (int i = 0; i < length / 2; i++) {\n        if (string[i] != string[length -\
    \ i - 1]) {\n            palindrome.append(string[i]);\n        }\n    }\n   \
    \ return palindrome;", "    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    std::string longestPalindrome = string;\n    std::string\
    \ longestPalindromePostfix = string;\n    std::string longestPalindromePostfixReverse\
    \ = string;\n    int longestPalindromePostfixLength = 0;\n    int longestPalindromePostfixReverseLength\
    \ = 0;\n    int longestPalindromePostfixReverseIndex = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        if (string[i] == string[string.length()\
    \ - 1 - i]) {\n            longestPalindromePostfixReverseIndex++;\n         \
    \   longestPalindromePostfixReverse[longestPalindromePostfixReverseIndex] = string[i];\n\
    \            longestPalindromePostfixReverseLength++;\n        }\n    }\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    for (int i = 0; i < string.length(); i++) {\n \
    \       if (string[i] == string[string.length() - 1 - i]) {\n            longestPalindromePostfixReverseIndex++;\n\
    \            longestPalindromePostfixReverse[longestPalindromePostfixReverseIndex]\
    \ = string[i];\n            longestPalindromePostfixReverseLength++;\n       \
    \ }\n    }\n    // If longest palindrome postfix is longer than the original string\
    \ then return original string.\n    if (longestPalindromePostfixLength > string.length())\
    \ {\n        return string;\n    }\n    // If longest palindrome postfix is equal\
    \ to the original string then return longest palindrome postfix.\n    if (longestPalindromePostfixLength\
    \ == string.length()) {\n        return longestPalindromePostfix;\n    }\n   \
    \ // If longest palindrome postfix is shorter than the original string then return\
    \ longest palindrome postfix reverse.\n    if (longestPalindromePostfixLength\
    \ < string.length()) {\n        return longestPalindromePostfixReverse;\n    }",
  "    string reverse;\n    string prefix;\n    string suffix;\n    string postfix\
    \ = string;\n    string longest;\n    longest = postfix.substr(0, postfix.size()\
    \ - 1);\n    reverse = postfix.substr(0, postfix.size() - 1);\n    prefix = postfix.substr(0,\
    \ postfix.size() - 1);\n    suffix = postfix.substr(postfix.size() - 1);\n   \
    \ string postfix_reverse;\n    postfix_reverse = postfix.substr(postfix.size()\
    \ - 1);\n    if (postfix_reverse == longest) {\n        postfix = postfix.substr(0,\
    \ postfix.size() - 1);\n        reverse = postfix.substr(0, postfix.size() - 1);\n\
    \        prefix = postfix.substr(0, postfix.size() - 1);\n        suffix = postfix.substr(postfix.size()\
    \ - 1);\n        postfix_reverse = postfix.substr(postfix.size() - 1);\n    }\n\
    \    string postfix_suffix;\n    postfix_suffix = postfix.substr(postfix.size()\
    \ - 1);\n    string postfix_prefix_reverse;\n    postfix_prefix_reverse = prefix.substr(0,\
    \ prefix.size() - 1);\n    string postfix_prefix_suffix;\n    postfix_prefix_suffix\
    \ = prefix.substr(prefix.size() - 1);\n    string postfix_prefix_suffix_reverse;\n\
    \    postfix_prefix_suffix_reverse = postfix_prefix_suffix.substr(0, postfix_prefix_suffix.size()\
    \ - 1);\n    string postfix_prefix_suffix_postfix_reverse;\n    postfix_prefix_suffix_postfix_reverse\
    \ = postfix_prefix_suffix.substr(postfix_prefix_suffix.size() - 1);\n    string\
    \ postfix_prefix_suffix_postfix_suffix;\n    postfix_prefix_suffix_postfix_suffix\
    \ = postfix_prefix_suffix.substr(postfix_prefix_suffix.size() - 1);\n    string\
    \ postfix_prefix_suffix_postfix_suffix_reverse;\n    postfix_prefix_suffix_postfix_suffix_reverse\
    \ = postfix_prefix_suffix_postfix_suffix.substr(0, postfix_prefix_suffix_postfix_suffix.size()\
    \ - 1);\n    string postfix_prefix_suffix_postfix_suffix_postfix_reverse;\n  \
    \  postfix_prefix_suffix_postfix_suffix_postfix_reverse = postfix_prefix_suffix_postfix_suffix.substr(postfix_prefix_suffix_postfix_suffix.size()\
    \ - 1);\n    string postfix_prefix_suffix_postfix_suffix_postfix_suffix;\n   \
    \ postfix_prefix_suffix_postfix_suffix_postfix_suffix = postfix_prefix_suffix_postfix_suffix.substr(postfix_prefix_suffix_postfix_suffix.size()\
    \ - 1);\n    string postfix_prefix_", "    string reverse = \"\";\n    int length\
    \ = string.length();\n    int i = 0;\n    int j = 0;\n    while (i < length) {\n\
    \        reverse += string[j];\n        i++;\n        j++;\n    }\n    string\
    \ prefix = string.substr(0, i);\n    string suffix = string.substr(i);\n    return\
    \ prefix + reverse + suffix;", "    string reverse = \"\";\n    int i = 0;\n \
    \   while (i < string.length()) {\n        reverse += string[i];\n        i++;\n\
    \    }\n    reverse = reverse.substr(0, string.length());\n    string prefix =\
    \ \"\";\n    int j = 0;\n    while (j < reverse.length()) {\n        prefix +=\
    \ reverse[j];\n        j++;\n    }\n    return prefix + string;", "    std::string\
    \ reverse = \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        reverse\
    \ = reverse + string[i];\n    }\n    reverse = reverse + string[string.size()\
    \ - 1];\n    return reverse;", "    string reverse = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        reverse += string[i];\n    }\n\
    \    reverse += string[len - 1];\n    return reverse;", "    std::string reverse\
    \ = \"\";\n    int start = 0;\n    int end = string.length();\n    while (start\
    \ < end) {\n        reverse = reverse + string.substr(start, end - start);\n \
    \       start = end;\n        end = string.length();\n    }\n    return reverse\
    \ + string.substr(start, end - start);", "    std::string palindrome = string;\n\
    \    size_t prefix_length = 0;\n    size_t suffix_length = 0;\n    size_t longest_postfix_length\
    \ = 0;\n    std::string longest_postfix = \"\";\n    std::string longest_postfix_reverse\
    \ = \"\";\n    std::string longest_postfix_suffix;\n    std::string longest_postfix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix;\n    std::string longest_postfix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix;\n    std::string longest_postfix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_reverse;\n    std::string\
    \ longest_postfix_suffix_suffix_suffix_suffix_suffix_reverse;\n    std::string\
    \ longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n    std::string\
    \ longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;\n\
    \    std::string longest_postfix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_reverse;",
  "    string postfix = \"\";\n    string prefix = \"\";\n    for (size_t i = 0; i\
    \ < string.length(); i++) {\n        postfix += string[i];\n        prefix +=\
    \ string[string.length() - i - 1];\n    }\n    std::string reverse = prefix;\n\
    \    for (size_t i = 0; i < postfix.length(); i++) {\n        reverse += postfix[postfix.length()\
    \ - i - 1];\n    }\n    return reverse;", "    std::string reverse = \"\";\n \
    \   for (size_t i = 0; i < string.size(); i++) {\n        reverse += string[i];\n\
    \    }\n    reverse = reverse.substr(0, reverse.size() - 1);\n    string += reverse;\n\
    \    return string;", "    string palindrome;\n    string reverse;\n    int len\
    \ = string.length();\n    int max_len = len / 2;\n    for (int i = 0; i < max_len;\
    \ i++) {\n        reverse += string[i];\n    }\n    for (int i = max_len; i <\
    \ len; i++) {\n        reverse += string[i];\n    }\n    reverse = reverse.substr(0,\
    \ max_len);\n    palindrome = string + reverse;\n    return palindrome;", "  \
    \  string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\"\
    ;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = string.length();\n\
    \    while (i < n) {\n        postfix += string[i];\n        i++;\n    }\n   \
    \ while (i < n) {\n        prefix += string[i];\n        i++;\n    }\n    while\
    \ (i < n) {\n        reverse += string[i];\n        i++;\n    }\n    while (i\
    \ < n) {\n        postfix += string[i];\n        i++;\n    }\n    while (i < n)\
    \ {\n        prefix += string[i];\n        i++;\n    }\n    while (i < n) {\n\
    \        reverse += string[i];\n        i++;\n    }\n    while (i < n) {\n   \
    \     postfix += string[i];\n        i++;\n    }\n    while (i < n) {\n      \
    \  prefix += string[i];\n        i++;\n    }\n    while (i < n) {\n        reverse\
    \ += string[i];\n        i++;\n    }\n    while (i < n) {\n        postfix +=\
    \ string[i];\n        i++;\n    }\n    while (i < n) {\n        prefix += string[i];\n\
    \        i++;\n    }\n    while (i < n) {\n        reverse += string[i];\n   \
    \     i++;\n    }\n    while (i < n) {\n        postfix += string[i];\n      \
    \  i++;\n    }\n    while (i < n) {\n        prefix += string[i];\n        i++;\n\
    \    }\n    while (i < n) {\n        reverse += string[i];\n        i++;\n   \
    \ }\n    while (i < n) {\n        postfix += string[i];\n        i++;\n    }\n\
    \    while (i < n) {\n        prefix += string[i];\n        i++;\n    }\n    while\
    \ (i < n) {\n        reverse += string[i];\n        i++;\n    }\n    while (i\
    \ < n) {\n        postfix += string[i];\n        i++;\n    }\n    while (i < n)\
    \ {\n        prefix += string[i];\n        i++;\n    }\n    while (i < n) {\n\
    \        reverse += string[i];\n        i++;\n    }\n    while (i < n) {\n   \
    \     postfix += string[i];\n        i++;\n    }\n    while (i < n) {\n      \
    \  prefix += string[i];\n        i++;\n    }\n    while (i < n) {\n        reverse\
    \ += string[i];\n        i++;\n    }\n    while (i < n) {\n        postfix +=\
    \ string[i];\n        i++;\n    }\n    while (i < n) {\n        prefix += string[i];\n\
    \        i++;\n    }\n    while (i < n) {\n        reverse += string[i];\n   \
    \     i++;\n    }\n    while (i < n) {\n        postfix += string[i];\n      \
    \  i++;\n    }\n    while (i < n) {\n        prefix += string[i];\n        i++;\n\
    \    }\n    while (i < n) {\n", "    std::string palindrome = string;\n    int\
    \ length = string.length();\n    int max_index = length - 1;\n    for (int i =\
    \ 0; i <= max_index; i++) {\n        if (string[i] != string[max_index]) {\n \
    \           int j = max_index;\n            while (j > i) {\n                string[j]\
    \ = string[j - 1];\n                j--;\n            }\n            string[j]\
    \ = string[i];\n        }\n    }\n    return palindrome;", "    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i < j) {\n\
    \        reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse\
    \ += string[j];\n    return reverse;", "    string reverse = \"\";\n    int len\
    \ = string.length();\n    for (int i = 0; i < len / 2; i++) {\n        reverse\
    \ += string[i];\n    }\n    reverse += string[len - 1];\n    return reverse;",
  "    std::string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while (i < j) {\n        reverse = reverse + string[j];\n        i++;\n \
    \       j--;\n    }\n    reverse = reverse + string[i];\n    return reverse;",
  "    string reverse = \"\";\n    int length = string.length();\n    for (int i =\
    \ 0; i < length; i++) {\n        reverse += string[length - i - 1];\n    }\n \
    \   string prefix = \"\";\n    int prefix_length = string.length();\n    for (int\
    \ i = 0; i < length; i++) {\n        prefix += string[i];\n    }\n    return prefix\
    \ + reverse;", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    int max_len = 0, max_pos = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        int pos = string.find_first_not_of(string[i], max_pos);\n       \
    \ if (pos == string.length() - 1) {\n            max_len = i - max_pos;\n    \
    \        max_pos = i;\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    std::string\
    \ result = string;\n    for (int i = max_len; i >= 0; i--) {\n        result =\
    \ string[max_pos + i] + result;\n    }\n    return result;", "    std::string\
    \ palindrome = string;\n    std::string reverse_string;\n    std::string::reverse_iterator\
    \ reverse_iterator;\n    std::string::iterator iterator;\n    std::string::reverse_iterator\
    \ reverse_iterator_end;\n    std::string::iterator iterator_end;\n    std::string\
    \ postfix_string;\n    std::string postfix_string_end;\n    std::string postfix_string_begin;\n\
    \    std::string postfix_string_begin_end;\n    std::string postfix_string_begin_begin_end;\n\
    \    std::string postfix_string_begin_begin_begin_end_end;\n    std::string postfix_string_begin_begin_begin_end_end_end;\n\
    \    std::string postfix_string_begin_begin_begin_end_end_end_end;\n    std::string\
    \ postfix_string_begin_begin_end_end_end_end_end;\n    std::string postfix_string_begin_begin_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end;\n   \
    \ std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end;\n  \
    \  std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string postfix_string_begin_begin_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    std::string post", "    std::string palindrome = string;\n    int length\
    \ = string.length();\n    int max_index = 0;\n    int min_index = length - 1;\n\
    \    while (min_index >= 0 && max_index < length) {\n        if (string[max_index]\
    \ != string[min_index]) {\n            break;\n        }\n        max_index++;\n\
    \        min_index--;\n    }\n    if (max_index == min_index) {\n        return\
    \ string;\n    }\n    int max_index = max_index + 1;\n    int min_index = min_index\
    \ - 1;\n    while (max_index >= 0 && min_index >= 0) {\n        if (string[max_index]\
    \ != string[min_index]) {\n            break;\n        }\n        max_index--;\n\
    \        min_index--;\n    }\n    if (max_index == min_index) {\n        return\
    \ string;\n    }\n    string reverse = \"\";\n    while (max_index >= 0) {\n \
    \       reverse = reverse + string[max_index];\n        max_index--;\n    }\n\
    \    reverse = reverse + string[min_index];\n    return palindrome + reverse;",
  "    std::string reverse = \"\";\n    int start = 0;\n    int end = string.length()\
    \ - 1;\n    while (start < end) {\n        reverse = reverse + string.substr(start,\
    \ end - start);\n        start = end;\n        end = start - 1;\n    }\n    return\
    \ reverse + string.substr(start, string.length() - start);", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    reverse = reverse.substr(0, reverse.length() / 2);\n    string prefix = string;\n\
    \    string suffix = reverse;\n    string palindrome = prefix + suffix;\n    return\
    \ palindrome;", "    std::string postfix = \"\";\n    std::string prefix = \"\"\
    ;\n    std::string reverse = \"\";\n    for (auto c : string) {\n        postfix\
    \ += c;\n    }\n    for (auto c : string) {\n        prefix += c;\n    }\n   \
    \ for (auto c : string) {\n        reverse += c;\n    }\n    if (postfix != reverse)\
    \ {\n        postfix.append(reverse);\n    }\n    return postfix;", "    string\
    \ reverse = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n\
    \    }\n    for (auto &c : string) {\n        if (c != reverse.back()) {\n   \
    \         reverse = reverse + c;\n        }\n    }\n    return reverse;", "  \
    \  std::string palindrome = string;\n    size_t prefix_length = 0;\n    size_t\
    \ suffix_length = 0;\n    size_t max_length = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      suffix_length++;\n        } else {\n            max_length = i;\n     \
    \       break;\n        }\n    }\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      prefix_length++;\n        } else {\n            break;\n        }\n   \
    \ }\n    if (prefix_length >= suffix_length) {\n        max_length = string.length()\
    \ - suffix_length;\n    }\n    if (max_length > 0) {\n        std::string reverse\
    \ = string[max_length];\n        for (size_t i = 0; i < string.length() - max_length;\
    \ i++) {\n            reverse = reverse + string[i];\n        }\n        palindrome\
    \ = palindrome + reverse;\n    }\n    return palindrome;", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    int max_len = 0, max_idx\
    \ = 0;\n    for (int i = 1; i < string.length(); i++) {\n        if (string[i]\
    \ == string[i - 1]) {\n            int len = i - 1;\n            if (len > max_len)\
    \ {\n                max_len = len;\n                max_idx = i;\n          \
    \  }\n        } else {\n            break;\n        }\n    }\n    // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    string reverse = string[max_idx];\n    for (int i = max_idx + 1;\
    \ i < string.length(); i++) {\n        reverse = reverse + string[i];\n    }\n\
    \    return string + reverse;", "    string reverse = \"\";\n    int i = 0;\n\
    \    while (i < string.length()) {\n        reverse = reverse + string[i];\n \
    \       i++;\n    }\n    reverse = reverse + string[i];\n    return reverse;",
  "    string reverse = \"\";\n    int start = 0;\n    int end = string.size() - 1;\n\
    \    while (start < end) {\n        reverse += string[start];\n        ++start;\n\
    \        --end;\n    }\n    reverse += string[start];\n    return reverse;", " \
    \   string postfix = \"\";\n    string prefix = \"\";\n    for (auto &c : string)\
    \ {\n        postfix += c;\n        prefix += c;\n    }\n    std::string reverse\
    \ = prefix;\n    for (auto &c : postfix) {\n        reverse += c;\n    }\n   \
    \ return reverse + postfix;", "    std::string reverse = \"\";\n    int start\
    \ = 0;\n    int end = string.length() - 1;\n    while (start < end) {\n      \
    \  reverse += string[start];\n        start += 1;\n        end -= 1;\n    }\n\
    \    reverse += string[start];\n    return reverse;", "    string postfix = \"\
    \";\n    string prefix = \"\";\n    string reverse = \"\";\n    string longest\
    \ = \"\";\n    int longestLength = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      postfix += string[i];\n            prefix += string[i];\n        } else\
    \ {\n            postfix += string[i];\n            reverse = reverse + string[i];\n\
    \            if (longestLength < postfix.length()) {\n                longest\
    \ = postfix;\n                longestLength = postfix.length();\n            }\n\
    \        }\n    }\n    longest = prefix + reverse + longest;\n    return longest;",
  "    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n\
    \        if (string[i] == string[string.length() - 1 - i]) {\n            longest\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n \
    \       if (string[i] == string[string.length() - 1 - i]) {\n            reverse\
    \ = reverse + string[i];\n        }\n    }\n    prefix = string.substr(0, longest);\n\
    \    suffix = string.substr(longest, string.length() - longest);\n    string result\
    \ = prefix + reverse + suffix;\n    return result;", "    std::string reverse\
    \ = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        size_t j = string.size() - i - 1;\n        if (j > longest)\
    \ {\n            longest = j;\n        }\n        reverse += string[j];\n    }\n\
    \    string += reverse;\n    return string;", "    std::string reverse = \"\"\
    ;\n    size_t max_index = 0;\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        size_t index = string.size() - i - 1;\n        if (string[index]\
    \ == string[max_index]) {\n            max_index = index;\n        }\n    }\n\
    \    for (size_t i = 0; i < max_index; i++) {\n        reverse = reverse + string[i];\n\
    \    }\n    reverse = reverse + string[max_index];\n    return reverse;", "  \
    \  std::string palindrome = string;\n    int length = string.length();\n    for\
    \ (int i = 0; i < length / 2; i++) {\n        palindrome.append(string[i]);\n\
    \        palindrome.append(string[length - i - 1]);\n    }\n    return palindrome;",
  "    string reverse = \"\";\n    int length = string.length();\n    for (int i =\
    \ 0; i < length / 2; i++) {\n        reverse += string[i];\n    }\n    reverse\
    \ += string[length - 1];\n    return reverse;", "    std::string reverse = \"\"\
    ;\n    std::string prefix = string;\n    std::string postfix = \"\";\n    std::string\
    \ longest = \"\";\n    std::string longestPrefix = \"\";\n    std::string longestPostfix\
    \ = \"\";\n    std::string longestReverse = \"\";\n    std::string longestPrefixReverse\
    \ = \"\";\n    std::string longestPostfixReverse = \"\";\n    std::string longestReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverse = \"\";\n    std::string longestReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefixReverseReverseReverse = \"\";\n    std::string\
    \ longestPostfixReverseReverseReverse = \"\";\n    std::string longestReverseReverseReverseReverse\
    \ = \"\";\n    std::string longestPrefix", "    std::string reverse = \"\";\n\
    \    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    reverse\
    \ = reverse.substr(0, reverse.length() - 1);\n    string prefix = string;\n  \
    \  string postfix = \"\";\n    for (auto &c : string) {\n        postfix = postfix\
    \ + c;\n    }\n    postfix = postfix.substr(0, postfix.length() - 1);\n    if\
    \ (reverse == postfix && prefix.length() > postfix.length()) {\n        return\
    \ string;\n    }\n    string palindrome = prefix + reverse;\n    return palindrome;",
  "    std::string reverse = \"\";\n    size_t pos = 0;\n    while (pos < string.size())\
    \ {\n        reverse = reverse + string[pos];\n        pos++;\n    }\n    string\
    \ += reverse;\n    return string;", "    std::string postfix = \"\";\n    int\
    \ i = 0;\n    while (i < string.length()) {\n        postfix += string[i];\n \
    \       i++;\n    }\n    std::string reverse = postfix.rbegin();\n    std::string\
    \ prefix = postfix.substr(0, postfix.length() - reverse.length());\n    return\
    \ prefix + reverse;", "    std::string reverse = \"\";\n    size_t start = 0;\n\
    \    size_t end = 0;\n    size_t length = 0;\n    bool found = false;\n    while\
    \ (!found && end < string.length()) {\n        end = string.find_first_not_of(string[end],\
    \ start);\n        if (end == string.length()) {\n            found = true;\n\
    \        } else {\n            reverse = reverse + string.substr(start, end -\
    \ start);\n            start = end + 1;\n        }\n    }\n    if (found) {\n\
    \        length = end - start + 1;\n    }\n    return reverse + string.substr(start,\
    \ length);", "    string postfix = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        postfix += string[i];\n    }\n\
    \    string reverse = postfix.rbegin();\n    for (int i = 0; i < length; i++)\
    \ {\n        reverse += string[i];\n    }\n    return reverse + postfix;", " \
    \   std::string palindrome = string;\n    size_t start = 0;\n    size_t end =\
    \ 0;\n    bool found = false;\n    while (!found && start < palindrome.size())\
    \ {\n        end = palindrome.size() - 1;\n        while (end >= start && !found)\
    \ {\n            if (palindrome[start] != palindrome[end]) {\n               \
    \ found = true;\n            }\n            end--;\n        }\n        if (found)\
    \ {\n            palindrome.append(palindrome.begin() + start, palindrome.begin()\
    \ + end);\n            start = end + 1;\n        }\n    }\n    return palindrome;",
  "    string palindrome = string;\n    int length = string.length();\n    int i =\
    \ 0;\n    int j = 0;\n    while (i < length / 2) {\n        if (string[i] != string[j])\
    \ {\n            palindrome.append(string[j]);\n        }\n        i++;\n    \
    \    j++;\n    }\n    palindrome.append(string[j]);\n    return palindrome;",
  "    std::string palindrome = string;\n    size_t prefix_length = 0;\n    size_t\
    \ suffix_length = 0;\n    size_t max_suffix_length = 0;\n    std::string prefix_string;\n\
    \    std::string suffix_string;\n    std::string reversed_string;\n    std::string\
    \ postfix_string;\n    std::string postfix_reversed_string;\n    std::string postfix_postfix_reversed_string;\n\
    \    std::string postfix_postfix_reversed_postfix_string;\n    std::string postfix_postfix_reversed_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_string;\n  \
    \  std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_string;\n\
    \    std::string postfix_postfix_reversed_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    string reverse = \"\";\n    int length = string.length();\n    int i = 0;\n\
    \    while (i < length) {\n        reverse += string[i];\n        i++;\n    }\n\
    \    string prefix = \"\";\n    int j = length - 1;\n    while (j >= 0) {\n  \
    \      prefix += string[j];\n        j--;\n    }\n    string postfix = reverse;\n\
    \    postfix.append(prefix);\n    return postfix;", "    std::string reverse =\
    \ \"\";\n    int start = 0;\n    int end = string.length() - 1;\n    while (start\
    \ < end) {\n        reverse = reverse + string.substr(start, end - start);\n \
    \       start = end + 1;\n        end = start - 1;\n    }\n    return reverse\
    \ + string.substr(start, string.length() - start);", "    std::string postfix\
    \ = \"\";\n    std::string prefix = string;\n    std::string reverse = \"\";\n\
    \    int i = 0;\n    while (i < string.length()) {\n        int j = string.length()\
    \ - 1 - i;\n        reverse += prefix.substr(i, j);\n        postfix += reverse;\n\
    \        prefix = prefix.substr(0, j);\n        i++;\n    }\n    return postfix;",
  "    string postfix = \"\";\n    string prefix = \"\";\n    for (auto c : string)\
    \ {\n        postfix += c;\n        prefix += c;\n    }\n    std::string reverse\
    \ = prefix;\n    for (auto c : postfix) {\n        reverse += c;\n    }\n    return\
    \ reverse + postfix;", "    string reverse = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    while (i < len) {\n        reverse += string[len - i - 1];\n\
    \        i++;\n    }\n    return string + reverse;", "    std::string reverse\
    \ = \"\";\n    size_t max_len = string.length();\n    for (size_t i = 0; i < max_len;\
    \ ++i) {\n        reverse = reverse + string[i];\n    }\n    reverse = reverse\
    \ + string[max_len - 1];\n    return string;", "    string reverse;\n    string\
    \ prefix = string;\n    string postfix = string;\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += postfix[i];\n\
    \        postfix = postfix.substr(0, i) + postfix.substr(i + 1, string.length());\n\
    \    }\n    reverse += postfix;\n    return prefix + reverse;", "    // Find the\
    \ longest postfix of supplied string that is a palindrome.\n    int max_len =\
    \ 0, max_pos = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == string[string.size() - 1 - i]) {\n            max_len = i;\n            max_pos\
    \ = i;\n        }\n    }\n    // Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = string;\n    for (int i = max_len; i >= 0; i--) {\n        reverse.insert(max_pos,\
    \ string[i]);\n    }\n    return reverse;", "    std::string palindrome;\n   \
    \ int length = string.length();\n    int max_index = 0;\n    int max_index2 =\
    \ 0;\n    int max_index3 = 0;\n    int max_index4 = 0;\n    int max_index5 = 0;\n\
    \    int max_index6 = 0;\n    int max_index7 = 0;\n    int max_index8 = 0;\n \
    \   int max_index9 = 0;\n    int max_index10 = 0;\n    int max_index11 = 0;\n\
    \    int max_index12 = 0;\n    int max_index13 = 0;\n    int max_index14 = 0;\n\
    \    int max_index15 = 0;\n    int max_index16 = 0;\n    int max_index17 = 0;\n\
    \    int max_index18 = 0;\n    int max_index19 = 0;\n    int max_index20 = 0;\n\
    \    int max_index21 = 0;\n    int max_index22 = 0;\n    int max_index23 = 0;\n\
    \    int max_index24 = 0;\n    int max_index25 = 0;\n    int max_index26 = 0;\n\
    \    int max_index27 = 0;\n    int max_index28 = 0;\n    int max_index29 = 0;\n\
    \    int max_index30 = 0;\n    int max_index31 = 0;\n    int max_index32 = 0;\n\
    \    int max_index33 = 0;\n    int max_index34 = 0;\n    int max_index35 = 0;\n\
    \    int max_index36 = 0;\n    int max_index37 = 0;\n    int max_index38 = 0;\n\
    \    int max_index39 = 0;\n    int max_index40 = 0;\n    int max_index41 = 0;\n\
    \    int max_index42 = 0;\n    int max_index43 = 0;\n    int max_index44 = 0;\n\
    \    int max_index45 = 0;\n    int max_index46 = 0;\n    int max_index47 = 0;\n\
    \    int max_index48 = 0;\n    int max_index49 = 0;\n    int max_index50 = 0;\n\
    \    int max_index51 = 0;\n    int max_index52 = 0;\n    int max_index53 = 0;\n\
    \    int max_index54 = 0;\n    int max_index55 = 0;\n    int max_index56 = 0;\n\
    \    int max_index57 = 0;\n    int max_index58 = 0;\n    int max_index59 = 0;\n\
    \    int max_index60 = 0;\n    int max_index61 = 0;\n    int max_index62 = 0;\n\
    \    int max_index63 = 0;\n    int max_index64 = 0;\n    int max_index65 = 0;\n\
    \    int max_index66 = 0;\n    int max_index67 = 0;\n    int max_index68 = 0;\n\
    \    int max_index69 = 0;\n    int max_index70 = 0;\n    int max_index71 = 0;\n\
    \    int max_index72 = 0;\n    int max_index73 = 0;\n    int max_index74 = 0;\n\
    \    int max_index75 = 0;\n    int max_index76 = 0;\n    int max_index77 = 0;\n\
    \    int max_index78 = 0;\n    int max_index79 = 0;\n    int max_index80 = 0;\n\
    \    int max_index81 = 0;\n    int max_index82 = 0;\n    int max_index83 = 0;\n\
    \    int max_index84 = 0;", "    std::string ans = string;\n    int len = string.length();\n\
    \    int max_len = 0, max_pos = 0;\n    for (int i = 0; i < len; i++) {\n    \
    \    int pos = len - 1 - i;\n        if (pos > max_pos) {\n            max_pos\
    \ = pos;\n            max_len = i;\n        }\n    }\n    ans.insert(max_len,\
    \ string[max_len]);\n    ans.insert(max_len, string[max_len].reverse());\n   \
    \ return ans;", "    std::string reverse = \"\";\n    size_t start = 0;\n    size_t\
    \ end = 0;\n    size_t max_end = 0;\n    size_t max_start = 0;\n    bool found\
    \ = false;\n    for (size_t i = 0; i < string.length(); i++) {\n        end =\
    \ string.find_first_not_of(string[i], start);\n        if (end == string::npos)\
    \ {\n            end = string.length();\n        }\n        if (end > max_end)\
    \ {\n            max_end = end;\n            max_start = start;\n        }\n \
    \       start = end + 1;\n        found = true;\n    }\n    if (found) {\n   \
    \     reverse = string.substr(max_start, max_end - max_start);\n        reverse\
    \ = reverse + string.substr(0, max_end);\n    }\n    return reverse;", "    string\
    \ reverse;\n    string prefix = string;\n    string postfix = string;\n    int\
    \ length = 0;\n    while (length < string.length()) {\n        postfix = postfix\
    \ + string[length];\n        length++;\n    }\n    length = string.length();\n\
    \    while (length >= 0) {\n        reverse = reverse + string[length];\n    \
    \    length--;\n    }\n    reverse = reverse + postfix;\n    return prefix + reverse;",
  "    std::string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    reverse = reverse + string; // Append the original\
    \ string to the reverse of the original string.\n    return reverse;", "    string\
    \ reverse = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n\
    \    }\n    for (auto &c : string) {\n        if (c != reverse[reverse.size()\
    \ - 1 - c]) {\n            reverse = reverse + c;\n        }\n    }\n    return\
    \ reverse;", "    std::string palindrome;\n    std::string prefix = string;\n\
    \    std::string suffix = string;\n    int length = string.length();\n    int\
    \ max_len = length;\n    for (int i = 0; i < length; i++) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            length--;\n        } else {\n    \
    \        break;\n        }\n    }\n    for (int i = 0; i < length; i++) {\n  \
    \      if (string[i] == string[length - 1 - i]) {\n            length--;\n   \
    \     } else {\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ length; i++) {\n        if (string[i] == string[length - 1 - i]) {\n       \
    \     length--;\n        } else {\n            break;\n        }\n    }\n    for\
    \ (int i = 0; i < length; i++) {\n        if (string[i] == string[length - 1 -\
    \ i]) {\n            length--;\n        } else {\n            break;\n       \
    \ }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i] == string[length\
    \ - 1 - i]) {\n            length--;\n        } else {\n            break;\n \
    \       }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            length--;\n        } else {\n    \
    \        break;\n        }\n    }\n    for (int i = 0; i < length; i++) {\n  \
    \      if (string[i] == string[length - 1 - i]) {\n            length--;\n   \
    \     } else {\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ length; i++) {\n        if (string[i] == string[length - 1 - i]) {\n       \
    \     length--;\n        } else {\n            break;\n        }\n    }\n    for\
    \ (int i = 0; i < length; i++) {\n        if (string[i] == string[length - 1 -\
    \ i]) {\n            length--;\n        } else {\n            break;\n       \
    \ }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i] == string[length\
    \ - 1 - i]) {\n            length--;\n        } else {\n            break;\n \
    \       }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            length--;\n        } else {\n    \
    \        break;\n        }\n    }\n    for (int i = 0; i < length; i++) {\n  \
    \      if (string[i] == string[length - 1 - i]) {\n            length--;\n   \
    \     } else {\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ length; i++) {\n        if (string[i] == string[length - 1 - i]) {\n       \
    \     length--;\n        } else {\n            break;\n        }\n    }\n    for\
    \ (int i = 0; i < length; i++) {\n        if (string[i] == string[length - 1 -\
    \ i]) {\n            length--;\n        } else {\n            break;\n       \
    \ }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i] == string[length\
    \ - 1 - i]) {\n            length--;\n        } else {\n            break;\n \
    \       }\n    }\n    for (int i = 0; i < length; i++) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            length--;\n        } else {\n    \
    \        break;\n        }\n    }\n    for (int i = 0; i < length; i++) {\n  \
    \      if (string[i] == string[length - 1 - i]) {\n            length--;\n   \
    \     } else {\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ length; i++) {\n        if (string[i] == string[length - 1 - i]) {\n       \
    \     length--;\n        } else {\n            break;\n        }\n    }\n    for\
    \ (int i = 0; i < length; i++) {\n        if (string[i] == string[length - 1 -\
    \ i]) {\n            ", "    std::string reverse = \"\";\n    size_t start = 0;\n\
    \    size_t end = string.size() - 1;\n    while (start < end) {\n        reverse\
    \ += string[start];\n        ++start;\n        --end;\n    }\n    reverse += string[start];\n\
    \    return reverse;", "    string reverse = \"\";\n    string prefix = string;\n\
    \    int length = string.length();\n    for (int i = 0; i < length / 2; i++) {\n\
    \        reverse += string[i];\n    }\n    for (int i = length - 1; i >= 0; i--)\
    \ {\n        reverse += string[i];\n    }\n    string postfix = reverse;\n   \
    \ string result = prefix + postfix;\n    return result;", "    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    int max_len = 0, min_len\
    \ = string.length();\n    for (int i = 0; i < min_len; i++) {\n        if (string[i]\
    \ == string[max_len]) {\n            max_len++;\n        } else {\n          \
    \  break;\n        }\n    }\n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = \"\";\n    for (int i = max_len - 1; i >= 0; i--) {\n        reverse = string[i]\
    \ + reverse;\n    }\n    return reverse + string;", "    std::string palindrome\
    \ = string;\n    int length = string.length();\n    int max_index = 0;\n    int\
    \ max_index2 = 0;\n    int max_index3 = 0;\n    int max_index4 = 0;\n    int max_index5\
    \ = 0;\n    int max_index6 = 0;\n    int max_index7 = 0;\n    int max_index8 =\
    \ 0;\n    int max_index9 = 0;\n    int max_index10 = 0;\n    int max_index11 =\
    \ 0;\n    int max_index12 = 0;\n    int max_index13 = 0;\n    int max_index14\
    \ = 0;\n    int max_index15 = 0;\n    int max_index16 = 0;\n    int max_index17\
    \ = 0;\n    int max_index18 = 0;\n    int max_index19 = 0;\n    int max_index20\
    \ = 0;\n    int max_index21 = 0;\n    int max_index22 = 0;\n    int max_index23\
    \ = 0;\n    int max_index24 = 0;\n    int max_index25 = 0;\n    int max_index26\
    \ = 0;\n    int max_index27 = 0;\n    int max_index28 = 0;\n    int max_index29\
    \ = 0;\n    int max_index30 = 0;\n    int max_index31 = 0;\n    int max_index32\
    \ = 0;\n    int max_index33 = 0;\n    int max_index34 = 0;\n    int max_index35\
    \ = 0;\n    int max_index36 = 0;\n    int max_index37 = 0;\n    int max_index38\
    \ = 0;\n    int max_index39 = 0;\n    int max_index40 = 0;\n    int max_index41\
    \ = 0;\n    int max_index42 = 0;\n    int max_index43 = 0;\n    int max_index44\
    \ = 0;\n    int max_index45 = 0;\n    int max_index46 = 0;\n    int max_index47\
    \ = 0;\n    int max_index48 = 0;\n    int max_index49 = 0;\n    int max_index50\
    \ = 0;\n    int max_index51 = 0;\n    int max_index52 = 0;\n    int max_index53\
    \ = 0;\n    int max_index54 = 0;\n    int max_index55 = 0;\n    int max_index56\
    \ = 0;\n    int max_index57 = 0;\n    int max_index58 = 0;\n    int max_index59\
    \ = 0;\n    int max_index60 = 0;\n    int max_index61 = 0;\n    int max_index62\
    \ = 0;\n    int max_index63 = 0;\n    int max_index64 = 0;\n    int max_index65\
    \ = 0;\n    int max_index66 = 0;\n    int max_index67 = 0;\n    int max_index68\
    \ = 0;\n    int max_index69 = 0;\n    int max_index70 = 0;\n    int max_index71\
    \ = 0;\n    int max_index72 = 0;\n    int max_index73 = 0;\n    int max_index74\
    \ = 0;\n    int max_index75 = 0;\n    int max_index76 = 0;\n    int max_index77\
    \ = 0;\n    int max_index78 = 0;\n    int max_index79 = 0;\n    int max_index80\
    \ = 0;\n    int max_index81 = 0;\n    int max_index82 = 0;\n    int max_index83\
    \ = 0;\n    int max_index84", "    std::string reverse = \"\";\n    size_t start\
    \ = 0;\n    size_t end = string.size() - 1;\n    while (start < end) {\n     \
    \   reverse += string[start];\n        ++start;\n        --end;\n    }\n    reverse\
    \ += string[start];\n    return reverse;", "    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    int length = string.length();\n    for (int i = 0; i < length\
    \ / 2; i++) {\n        reverse += string[i];\n        prefix += string[i];\n \
    \   }\n    reverse += string[length - 1];\n    prefix += string[length - 1];\n\
    \    string postfix = prefix + reverse;\n    return postfix;", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    string prefix = string;\n    string postfix = reverse;\n    string result\
    \ = prefix + postfix;\n    return result;", "    string reverse;\n    int n =\
    \ string.length();\n    int i = 0;\n    int j = 0;\n    while (i < n / 2) {\n\
    \        reverse = reverse + string[j];\n        j = j + 1;\n        i = i + 1;\n\
    \    }\n    reverse = reverse + string[j];\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    size_t pos = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        reverse += string[pos];\n        pos++;\n        if (pos ==\
    \ string.length() - 1) {\n            pos = 0;\n        }\n    }\n    reverse\
    \ += string[pos];\n    return reverse;", "    string reverse;\n    string prefix;\n\
    \    string suffix;\n    size_t longest = 0;\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        longest = i;\n        prefix = string;\n        suffix = string;\n\
    \        while (i < string.length() && string[i] == string[--i]) {\n         \
    \   ++i;\n        }\n        reverse = suffix;\n        reverse.resize(longest);\n\
    \        reverse[longest - 1] = string[i];\n        reverse.resize(longest - 1);\n\
    \        string reversed = reverse;\n        reversed.insert(reversed.end(), prefix.begin(),\
    \ prefix.end());\n        reversed.insert(reversed.end(), suffix.begin(), suffix.end());\n\
    \        if (reversed == string) {\n            return string;\n        }\n  \
    \  }\n    return \"\";", "    std::string reverse = \"\";\n    for (auto &c :\
    \ string) {\n        reverse = reverse + c;\n    }\n    string reverse_reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse_reverse = reverse_reverse\
    \ + c;\n    }\n    if (reverse == reverse_reverse) {\n        return string;\n\
    \    }\n    string palindrome = \"\";\n    for (auto &c : string) {\n        palindrome\
    \ = palindrome + c + reverse;\n    }\n    return palindrome;", "    std::string\
    \ reverse = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n\
    \    }\n    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse =\
    \ reverse + reverse.substr(reverse.length() / 2, reverse.length());\n    return\
    \ reverse;", "    string reverse = \"\";\n    for (auto i = string.size(); i >\
    \ 0; i--) {\n        reverse += string[i - 1];\n    }\n    reverse += string;\n\
    \    return reverse;", "    std::string reverse = \"\";\n    size_t max_index\
    \ = 0;\n    for (size_t i = 0; i < string.length(); i++) {\n        size_t index\
    \ = string.size() - i - 1;\n        if (index > max_index) {\n            max_index\
    \ = index;\n        }\n    }\n    for (size_t i = max_index; i >= 0; i--) {\n\
    \        reverse = reverse + string[i];\n    }\n    return string + reverse;",
  "    std::string ans = string;\n    size_t len = string.length();\n    std::string\
    \ prefix = \"\";\n    std::string suffix = \"\";\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        std::string temp = prefix + string[i];\n        std::string\
    \ reverse = std::string(temp).rbegin();\n        ans += reverse;\n        prefix\
    \ = temp;\n        suffix = string[i];\n    }\n    return ans;", "    string postfix\
    \ = \"\";\n    int max_len = string.length();\n    for (int i = 0; i < max_len;\
    \ i++) {\n        postfix += string[i];\n    }\n    string reverse = postfix;\n\
    \    for (int i = max_len - 1; i >= 0; i--) {\n        reverse += string[i];\n\
    \    }\n    return reverse + postfix;", "    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    int longest = 0;\n    for (auto c : string) {\n        if\
    \ (longest < string.length() - 1) {\n            longest++;\n            postfix\
    \ += c;\n        }\n        prefix += c;\n    }\n    string reverse = prefix;\n\
    \    for (int i = 0; i < longest; i++) {\n        reverse += postfix[longest -\
    \ 1 - i];\n    }\n    return reverse;", "    string reverse;\n    int len = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    while (i < len) {\n        reverse += string[j];\n\
    \        j++;\n        if (j == len - 1) {\n            j = 0;\n            i++;\n\
    \        }\n    }\n    return string + reverse;", "    string reverse = \"\";\n\
    \    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    string\
    \ prefix = string;\n    string postfix = reverse;\n    string palindrome = prefix\
    \ + postfix;\n    return palindrome;", "    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    int max_length = 0;\n    int i = 0;\n    while (i < string.length())\
    \ {\n        if (string[i] == string[string.length() - 1 - i]) {\n           \
    \ postfix += string[i];\n            max_length = i;\n        } else {\n     \
    \       postfix += string[i];\n            prefix = string[max_length - i];\n\
    \        }\n        i++;\n    }\n    return prefix + postfix + reverse(prefix);",
  "    std::string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    reverse = reverse.substr(0, reverse.length() / 2);\n\
    \    reverse = reverse + reverse.substr(reverse.length() / 2);\n    return string;",
  "    // Find the longest postfix that is a palindrome.\n    int max_len = 0, max_index\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - 1 - i]) {\n            len++;\n            if (len\
    \ > max_len) {\n                max_len = len;\n                max_index = i;\n\
    \            }\n        }\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = string;\n    reverse[max_index] = string[string.length() - 1 - max_index];\n\
    \    reverse[string.length() - 1 - max_index] = '\\0';\n    return reverse;",
  "    std::string result = string;\n    std::string reverse;\n    int length = string.length();\n\
    \    int index = 0;\n    while (index < length) {\n        reverse = reverse +\
    \ string[index];\n        index++;\n    }\n    reverse = reverse + string[index];\n\
    \    while (!(reverse.compare(0, length - 1, string) == 0)) {\n        reverse\
    \ = reverse + string[index];\n        index++;\n    }\n    result = result + reverse;\n\
    \    return result;", "    std::string reverse = \"\";\n    for (auto &c : string)\
    \ {\n        reverse = reverse + c;\n    }\n    string reverse_reverse = \"\"\
    ;\n    for (auto &c : string) {\n        reverse_reverse = reverse_reverse + c;\n\
    \    }\n    if (reverse == reverse_reverse) {\n        return string;\n    }\n\
    \    string palindrome = string;\n    string postfix = \"\";\n    for (auto &c\
    \ : string) {\n        postfix = postfix + c;\n    }\n    string postfix_reverse\
    \ = \"\";\n    for (auto &c : string) {\n        postfix_reverse = postfix_reverse\
    \ + c;\n    }\n    string postfix_reverse_reverse = \"\";\n    for (auto &c :\
    \ string) {\n        postfix_reverse_reverse = postfix_reverse_reverse + c;\n\
    \    }\n    if (postfix_reverse == postfix_reverse_reverse) {\n        palindrome\
    \ = palindrome + postfix;\n    }\n    return palindrome;", "    std::string palindrome\
    \ = string;\n    int length = string.length();\n    for (int i = 0; i < length\
    \ / 2; i++) {\n        if (string[i] != string[length - i - 1]) {\n          \
    \  palindrome += string[i];\n        }\n    }\n    return palindrome;", "    std::string\
    \ reverse = \"\";\n    size_t max_len = string.length();\n    for (size_t i =\
    \ 0; i < max_len; ++i) {\n        reverse += string[i];\n    }\n    reverse =\
    \ reverse.substr(0, max_len);\n    string prefix = string;\n    size_t prefix_len\
    \ = string.length();\n    for (size_t i = 0; i < max_len; ++i) {\n        string\
    \ postfix = prefix + reverse;\n        if (postfix != string) {\n            string\
    \ palindrome = prefix + postfix + reverse;\n            return palindrome;\n \
    \       }\n        prefix += string[i];\n    }\n    return string;", "    std::string\
    \ reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i\
    \ < j) {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n \
    \   reverse += string[j];\n    return reverse;", "    string reverse = \"\";\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        reverse += string[string.size()\
    \ - i - 1];\n    }\n    string postfix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        postfix += string[i];\n    }\n    string prefix = \"\";\n  \
    \  for (size_t i = 0; i < reverse.size(); i++) {\n        prefix += reverse[i];\n\
    \    }\n    return prefix + postfix;", "    std::string palindrome = string;\n\
    \    std::string postfix = \"\";\n    int length = string.length();\n    for (int\
    \ i = 0; i < length; i++) {\n        postfix += string[i];\n    }\n    std::string\
    \ reverse = std::string(postfix.rbegin(), postfix.rend());\n    palindrome.append(reverse);\n\
    \    return palindrome;", "    string postfix = \"\";\n    int max_len = string.length();\n\
    \    int min_len = max_len;\n    string reverse = \"\";\n    for (int i = 0; i\
    \ < max_len; i++) {\n        reverse += string[i];\n    }\n    for (int i = 0;\
    \ i < max_len; i++) {\n        if (string[i] == reverse[i]) {\n            postfix\
    \ = (postfix + string[i]);\n        }\n    }\n    return postfix + reverse;",
  "    std::string reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0;\
    \ i < string.size(); i++) {\n        size_t j = string.size() - 1 - i;\n     \
    \   if (string[i] == string[j]) {\n            longest = std::max(longest, i +\
    \ 1);\n        }\n    }\n    for (size_t i = 0; i < longest; i++) {\n        reverse.push_back(string[i]);\n\
    \    }\n    reverse.push_back(string[longest]);\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    int length = string.length();\n    for (int i = 0; i <\
    \ length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int i = length\
    \ / 2; i >= 0; i--) {\n        reverse += string[i];\n    }\n    return reverse;",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    int\
    \ max_len = 0, max_pos = 0;\n    for (int i = 0; i <= string.length(); i++) {\n\
    \        max_len = max(max_len, i);\n        max_pos = i;\n    }\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    std::string reverse = string[max_pos];\n    for (int i = max_pos;\
    \ i >= 0; i--) {\n        reverse = reverse[max_pos - i] + string[i];\n    }\n\
    \    return reverse;", "    std::string result = string;\n    std::string prefix\
    \ = string;\n    std::string suffix = string;\n    size_t prefix_len = prefix.size();\n\
    \    size_t suffix_len = suffix.size();\n    size_t max_len = prefix_len + suffix_len;\n\
    \    size_t palindromic_len = max_len;\n    size_t palindromic_pos = 0;\n    bool\
    \ found = false;\n    while (!found && palindromic_pos < max_len) {\n        if\
    \ (prefix[palindromic_pos] == suffix[suffix_len - palindromic_pos]) {\n      \
    \      palindromic_len--;\n            palindromic_pos++;\n            found =\
    \ true;\n        } else {\n            palindromic_len--;\n        }\n    }\n\
    \    std::string reverse = suffix;\n    reverse.erase(max_len - palindromic_len,\
    \ max_len - palindromic_len);\n    reverse.insert(palindromic_len, prefix);\n\
    \    reverse.insert(palindromic_len, suffix);\n    result = reverse;\n    return\
    \ result;", "    std::string palindrome = string;\n    int length = string.length();\n\
    \    int max_index = 0;\n    int max_index2 = 0;\n    for (int i = 0; i < length;\
    \ i++) {\n        if (string[i] == string[length - 1 - i]) {\n            max_index\
    \ = i;\n            max_index2 = length - 1 - i;\n        }\n    }\n    palindrome.insert(max_index2,\
    \ string[max_index]);\n    return palindrome;", "    std::string result = string;\n\
    \    std::string prefix = string;\n    int i = 0;\n    int j = string.length()\
    \ - 1;\n    while (i < j) {\n        if (string[i] != string[j]) {\n         \
    \   result += string[j];\n            j = j - 1;\n        } else {\n         \
    \   i = i + 1;\n            j = j - 1;\n        }\n    }\n    result += string[j];\n\
    \    return result;", "    std::string palindrome = string;\n    size_t palindrome_length\
    \ = string.length();\n    size_t prefix_length = 0;\n    size_t suffix_length\
    \ = 0;\n    std::string prefix = \"\";\n    std::string suffix = \"\";\n    std::string\
    \ reverse = \"\";\n    bool is_palindrome = true;\n    while (palindrome_length\
    \ > 0) {\n        prefix_length = palindrome_length / 2;\n        suffix = palindrome.substr(prefix_length);\n\
    \        reverse = reverse.substr(0, reverse.length() - suffix.length());\n  \
    \      reverse = reverse + suffix;\n        palindrome = palindrome.substr(0,\
    \ prefix_length);\n        palindrome_length = palindrome_length - prefix_length;\n\
    \        if (reverse != palindrome) {\n            is_palindrome = false;\n  \
    \          break;\n        }\n    }\n    if (is_palindrome) {\n        prefix\
    \ = palindrome.substr(0, prefix_length);\n        suffix = palindrome.substr(prefix_length);\n\
    \        reverse = reverse.substr(0, reverse.length() - suffix.length());\n  \
    \      reverse = reverse + suffix;\n        palindrome = palindrome.substr(0,\
    \ prefix_length);\n        palindrome_length = palindrome_length - prefix_length;\n\
    \    }\n    return prefix + reverse + suffix;", "    std::string reverse = \"\"\
    ;\n    int i = 0;\n    int j = string.length() - 1;\n    while (i < j) {\n   \
    \     reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse +=\
    \ string[j];\n    return reverse;", "    std::string ans = string;\n    int len\
    \ = string.length();\n    int max_len = 0, max_pos = 0;\n    for (int i = 0; i\
    \ < len; i++) {\n        if (string[i] == string[len - 1 - i]) {\n           \
    \ max_len = i;\n            max_pos = len - 1 - i;\n        }\n    }\n    ans.insert(max_pos,\
    \ string[max_len]);\n    ans.insert(max_pos + 1, string[max_len - 1]);\n    return\
    \ ans;", "    string reverse = \"\";\n    for (auto i = string.size() - 1; i >=\
    \ 0; i--) {\n        reverse += string[i];\n    }\n    string prefix = string;\n\
    \    string suffix = reverse;\n    string result = prefix + suffix;\n    return\
    \ result;", "    std::string palindrome = string;\n    int max_len = 0, min_len\
    \ = string.length();\n    for (int i = 0; i < string.length(); i++) {\n      \
    \  max_len = max(max_len, i);\n        min_len = min(min_len, i);\n    }\n   \
    \ for (int i = 0; i < max_len; i++) {\n        for (int j = max_len - 1; j >=\
    \ i; j--) {\n            if (string[i] != string[j]) {\n                break;\n\
    \            }\n        }\n        if (j == i) {\n            palindrome += string[i];\n\
    \        }\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    size_t max_len = string.length();\n    for (size_t i = 1; i < max_len; i++)\
    \ {\n        auto prefix = string.substr(0, i);\n        auto suffix = string.substr(i);\n\
    \        if (suffix == prefix) {\n            palindrome.append(suffix);\n   \
    \     }\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    std::string prefix = \"\";\n    std::string suffix = \"\";\n    int max_length\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    while (i < palindrome.size()) {\n\
    \        if (palindrome[i] == palindrome[j]) {\n            i++;\n           \
    \ j++;\n        } else {\n            max_length = std::max(max_length, i - j);\n\
    \            prefix = palindrome.substr(0, i);\n            suffix = palindrome.substr(j);\n\
    \            palindrome = prefix + suffix;\n            i = j = 0;\n        }\n\
    \    }\n    return palindrome;", "    string reverse = \"\";\n    size_t start\
    \ = 0;\n    size_t end = string.length();\n    while (start < end) {\n       \
    \ reverse = reverse + string.substr(start, end - start);\n        start = end;\n\
    \        end = string.length();\n    }\n    return reverse + string.substr(start,\
    \ end - start);", "    std::string reverse = \"\";\n    for (size_t i = 0; i <\
    \ string.size(); ++i) {\n        reverse = reverse + string[i];\n    }\n    reverse\
    \ = reverse + string[string.size() - 1];\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    int start = 0;\n    int end = string.length() - 1;\n  \
    \  while (start < end) {\n        reverse += string[start];\n        ++start;\n\
    \        --end;\n    }\n    reverse += string[start];\n    return reverse;", " \
    \   std::string reverse = \"\";\n    int len = string.length();\n    for (int\
    \ i = 0; i < len / 2; i++) {\n        reverse += string[i];\n    }\n    reverse\
    \ += string[len - 1];\n    return reverse;", "    string reverse = \"\";\n   \
    \ size_t longest = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n    \
    \    size_t j = string.size() - 1 - i;\n        if (string[i] == string[j]) {\n\
    \            longest = i;\n        }\n    }\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        size_t j = string.size() - 1 - i;\n        if (string[i] ==\
    \ string[j]) {\n            reverse = reverse + string[i];\n        }\n    }\n\
    \    return reverse + string.substr(0, longest);", "    std::string postfix =\
    \ \"\";\n    std::string prefix = \"\";\n    for (auto c : string) {\n       \
    \ postfix += c;\n        prefix += c;\n    }\n    std::string reverse = prefix;\n\
    \    for (auto c : postfix) {\n        reverse += c;\n    }\n    return reverse\
    \ + postfix;", "    string postfix = \"\";\n    string prefix = string;\n    string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        postfix += string[i];\n        reverse += string[string.length()\
    \ - i - 1];\n        if (string[i] == string[string.length() - i - 1]) {\n   \
    \         longest = i;\n        }\n    }\n    prefix = prefix.substr(0, longest);\n\
    \    postfix = postfix.substr(0, longest);\n    reverse = reverse.substr(0, longest);\n\
    \    string result = prefix + reverse + postfix;\n    return result;", "    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i\
    \ < j) {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n \
    \   reverse += string[j];\n    return reverse;", "    std::string palindrome =\
    \ string;\n    int length = string.length();\n    int max_index = 0;\n    int\
    \ max_index2 = 0;\n    for (int i = 0; i < length; i++) {\n        if (string[i]\
    \ == string[length - i - 1]) {\n            max_index = i;\n            max_index2\
    \ = length - i - 1;\n        }\n    }\n    for (int i = max_index; i >= 0; i--)\
    \ {\n        palindrome.insert(max_index2, string[i]);\n    }\n    return palindrome;"]
stop_tokens:
- "\n}"
