language: cpp
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    std::vector<long> result;\n    for(long long i : nums){\n\
    \        if(sum == i){\n            result.push_back(i);\n        }\n    }\n \
    \   for(long long i : nums){\n        if(sum < i){\n            result.push_back(i);\n\
    \        }\n    }\n    for(long long i : nums){\n        if(sum > i){\n      \
    \      result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnfcfj6jt.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpnfcfj6jt.cpp:15:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : nums){\n                     \
    \  ^\n/tmp/tmpnfcfj6jt.cpp:19:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for(long long i : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp:24:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp:29:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp: In function 'int main()':\n\
    /tmp/tmpnfcfj6jt.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = order_by_points;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnfcfj6jt.cpp:2:\n/tmp/tmpnfcfj6jt.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpnfcfj6jt.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpnfcfj6jt.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnfcfj6jt.cpp:38:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwt4rmz0.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpzwt4rmz0.cpp:100:1: error: expected initializer before '}'\
    \ token\n }\n ^\n/tmp/tmpzwt4rmz0.cpp: In function 'int main()':\n/tmp/tmpzwt4rmz0.cpp:102:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwt4rmz0.cpp:2:\n/tmp/tmpzwt4rmz0.cpp:103:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpzwt4rmz0.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpzwt4rmz0.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzwt4rmz0.cpp:103:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzwt4rmz0.cpp:103:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzwt4rmz0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    long maxSum\
    \ = sum;\n    long maxSumIndex = 0;\n    for (long i = 0; i < nums2.size(); i++)\
    \ {\n        long sum2 = sum - nums2[i];\n        if (sum2 > maxSum) {\n     \
    \       maxSum = sum2;\n            maxSumIndex = i;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < nums2.size(); i++) {\n        if (i == maxSumIndex)\
    \ {\n            ans.push_back(nums2[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt18kp31s.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpt18kp31s.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpt18kp31s.cpp:\
    \ In function 'int main()':\n/tmp/tmpt18kp31s.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt18kp31s.cpp:2:\n/tmp/tmpt18kp31s.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpt18kp31s.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpt18kp31s.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt18kp31s.cpp:39:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt18kp31s.cpp:39:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt18kp31s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::abs(a - b) < 10;\n    });\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uyysv6w.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5uyysv6w.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmp5uyysv6w.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5uyysv6w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5uyysv6w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5uyysv6w.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \   required from here\n/tmp/tmp5uyysv6w.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    long sum2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n   \
    \ long index2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n\
    \    long index3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4 =\
    \ 0;\n    long index4 = 0;\n    long sum5 = 0;\n    long max5 = 0;\n    long min5\
    \ = 0;\n    long index5 = 0;\n    long sum6 = 0;\n    long max6 = 0;\n    long\
    \ min6 = 0;\n    long index6 = 0;\n    long sum7 = 0;\n    long max7 = 0;\n  \
    \  long min7 = 0;\n    long index7 = 0;\n    long sum8 = 0;\n    long max8 = 0;\n\
    \    long min8 = 0;\n    long index8 = 0;\n    long sum9 = 0;\n    long max9 =\
    \ 0;\n    long min9 = 0;\n    long index9 = 0;\n    long sum10 = 0;\n    long\
    \ max10 = 0;\n    long min10 = 0;\n    long index10 = 0;\n    long sum11 = 0;\n\
    \    long max11 = 0;\n    long min11 = 0;\n    long index11 = 0;\n    long sum12\
    \ = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long index12 = 0;\n    long\
    \ sum13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long index13 = 0;\n\
    \    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long index14\
    \ = 0;\n    long sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n    long\
    \ index15 = 0;\n    long sum16 = 0;\n    long max16 = 0;\n    long min16 = 0;\n\
    \    long index16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long min17\
    \ = 0;\n    long index17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n    long\
    \ min18 = 0;\n    long index18 = 0;\n    long sum19 = 0;\n    long max19 = 0;\n\
    \    long min19 = 0;\n    long index19 = 0;\n    long sum20 = 0;\n    long max20\
    \ = 0;\n    long min20 = 0;\n    long index20 = 0;\n    long sum21 = 0;\n    long\
    \ max21 = 0;\n    long min21 = 0;\n    long index21 = 0;\n    long sum22 = 0;\n\
    \    long max22 = 0;\n    long min22 = 0;\n    long index22 = 0;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbhj4w28.cpp: In function 'int main()':\n/tmp/tmpxbhj4w28.cpp:104:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxbhj4w28.cpp:2:\n/tmp/tmpxbhj4w28.cpp:105:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpxbhj4w28.cpp:105:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpxbhj4w28.cpp:105:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxbhj4w28.cpp:105:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxbhj4w28.cpp:105:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxbhj4w28.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/i"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu7odaso.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpxu7odaso.cpp:15:85: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n                   \
    \                                                                  ^\n/tmp/tmpxu7odaso.cpp:15:86:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ (a+b<0);});\n                                                              \
    \                        ^\n/tmp/tmpxu7odaso.cpp:15:86: note: candidates are:\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpxu7odaso.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxu7odaso.cpp:15:86:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n                   \
    \                                                                   ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpxu7odaso.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substit"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return a + b < 0;\n    });\n    return nums_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8cac6td.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpp8cac6td.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpp8cac6td.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpp8cac6td.cpp:16:6:\
    \   required from here\n/tmp/tmpp8cac6td.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy;\n    nums_copy.insert(nums_copy.end(), nums.begin(), nums.end());\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnai5n2ml.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpnai5n2ml.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmpnai5n2ml.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmpnai5n2ml.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmpnai5n2ml.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnai5n2ml.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpnai5n2ml.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \    }\n    std::vector<long> result;\n    for (long i : nums) {\n        if (sum\
    \ == i) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8xau0a1.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpf8xau0a1.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp:19:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp: In function 'int main()':\n\
    /tmp/tmpf8xau0a1.cpp:28:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = order_by_points;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf8xau0a1.cpp:2:\n/tmp/tmpf8xau0a1.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf8xau0a1.cpp:29:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf8xau0a1.cpp:29:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf8xau0a1.cpp:2:\n/usr/include/c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqhnm__z.cpp: In lambda function:\n/tmp/tmpdqhnm__z.cpp:16:32:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                ^\n/tmp/tmpdqhnm__z.cpp:16:43: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                      ^\n/tmp/tmpdqhnm__z.cpp:16:55: error: 'end'\
    \ is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                       ^\n/tmp/tmpdqhnm__z.cpp:16:64:\
    \ error: 'nums_copy' is not captured\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                ^\n/tmp/tmpdqhnm__z.cpp:16:97:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                      \
    \                           ^\n/tmp/tmpdqhnm__z.cpp:16:108: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                           ^\n/tmp/tmpdqhnm__z.cpp:16:120: error: 'end' is not\
    \ a member of 'std'\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                                       ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_urbfufr.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp_urbfufr.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmp_urbfufr.cpp:\
    \ In function 'int main()':\n/tmp/tmp_urbfufr.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_urbfufr.cpp:2:\n/tmp/tmp_urbfufr.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_urbfufr.cpp:28:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_urbfufr.cpp:28:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_urbfufr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    for (long long i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (long long\
    \ i : nums) {\n        if (sum - i == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    ans.push_back(min);\n    ans.push_back(max);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuk5qqpfs.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpuk5qqpfs.cpp:17:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : nums) {\n                   \
    \     ^\n/tmp/tmpuk5qqpfs.cpp:27:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : nums) {\n                        ^\n\
    /tmp/tmpuk5qqpfs.cpp: In function 'int main()':\n/tmp/tmpuk5qqpfs.cpp:37:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuk5qqpfs.cpp:2:\n/tmp/tmpuk5qqpfs.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpuk5qqpfs.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpuk5qqpfs.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuk5qqpfs.cpp:38:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuk5qqpfs.cpp:38:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuk5qqpfs.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (auto num : nums) {\n        sum +=\
    \ num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyc17nlsk.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpyc17nlsk.cpp:15:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpyc17nlsk.cpp:19:5: error:\
    \ expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n \
    \    ^\n/tmp/tmpyc17nlsk.cpp:19:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), result.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpyc17nlsk.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n     return result;\n  \
    \   ^\n/tmp/tmpyc17nlsk.cpp:20:5: error: expected ')' before 'return'\n/tmp/tmpyc17nlsk.cpp:\
    \ In function 'int main()':\n/tmp/tmpyc17nlsk.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyc17nlsk.cpp:2:\n/tmp/tmpyc17nlsk.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpyc17nlsk.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpyc17nlsk.cpp:24:92:\
    \ warning: extended initializer "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_sorted_by_sum;\n    long sum =\
    \ 0;\n    for (long num : nums_copy) {\n        sum += num;\n        nums_sorted_by_sum.push_back(sum);\n\
    \    }\n    std::sort(nums_sorted_by_sum.begin(), nums_sorted_by_sum.end());\n\
    \    return nums_sorted_by_sum;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxec7fumn.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpxec7fumn.cpp:16:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpxec7fumn.cpp: In function 'int main()':\n/tmp/tmpxec7fumn.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxec7fumn.cpp:2:\n/tmp/tmpxec7fumn.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxec7fumn.cpp:25:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxec7fumn.cpp:25:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxec7fumn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rdktd6v.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5rdktd6v.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp5rdktd6v.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    std::vector<long>\
    \ result;\n    for (auto i : nums) {\n        sum += i;\n    }\n    for (auto\
    \ i : nums) {\n        if (sum > 0) {\n            temp = sum % 10;\n        \
    \    sum = (sum - temp) / 10;\n            while (sum > 0) {\n               \
    \ result.push_back(temp);\n                sum -= temp;\n                temp\
    \ = 0;\n            }\n        }\n    }\n    for (auto i : result) {\n       \
    \ nums.insert(nums.begin() + index, i);\n        index++;\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpze8i88hi.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpze8i88hi.cpp:18:15: error: 'i' does not name a type\n     for\
    \ (auto i : nums) {\n               ^\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ ';' before 'for'\n     for (auto i : nums) {\n     ^\n/tmp/tmpze8i88hi.cpp:21:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:21:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpze8i88hi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : nums) {\n               ^\n/tmp/tmpze8i88hi.cpp:32:5: error:\
    \ expected ';' before 'for'\n     for (auto i : result) {\n     ^\n/tmp/tmpze8i88hi.cpp:32:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:32:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpze8i88hi.cpp:32:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:32:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpze8i88hi.cpp:32:15: error: 'i' does not name a type\n\
    \     for (auto i : result) {\n               ^\n/tmp/tmpze8i88hi.cpp:36:5: error:\
    \ expected ';' before 'return'\n     return nums;\n     ^\n/tmp/tmpze8i88hi.cpp:36:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpze8i88hi.cpp:36:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpze8i88hi.cpp:36:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpze8i88hi.cpp:36:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpze8i88hi.cpp: In function 'int main()':\n/tmp/tmpze8i88hi.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpze8i88hi.cpp:2:\n/tmp/tmpze8i88hi.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4fafsvf.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpq4fafsvf.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpq4fafsvf.cpp: In function 'int main()':\n/tmp/tmpq4fafsvf.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq4fafsvf.cpp:2:\n/tmp/tmpq4fafsvf.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq4fafsvf.cpp:24:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq4fafsvf.cpp:24:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq4fafsvf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long min_sum = sum;\n    long min_idx = -1;\n  \
    \  for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n    }\n    std::vector<long> result;\n \
    \   for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        sum += num;\n        if (sum == min_sum) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6s_6icv.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpt6s_6icv.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpt6s_6icv.cpp: In function 'int main()':\n/tmp/tmpt6s_6icv.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt6s_6icv.cpp:2:\n/tmp/tmpt6s_6icv.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpt6s_6icv.cpp:40:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpt6s_6icv.cpp:40:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt6s_6icv.cpp:40:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt6s_6icv.cpp:40:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt6s_6icv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ count = 0;\n    long sumOfDigits = 0;\n    long sumOfDigitsOfPoints = 0;\n \
    \   long max = 0;\n    long min = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n\
    \    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7\
    \ = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long\
    \ temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n\
    \    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_gyo6qp.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp1_gyo6qp.cpp:100:1: error: expected initializer before '}'\
    \ token\n }\n ^\n/tmp/tmp1_gyo6qp.cpp: In function 'int main()':\n/tmp/tmp1_gyo6qp.cpp:102:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1_gyo6qp.cpp:2:\n/tmp/tmp1_gyo6qp.cpp:103:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp1_gyo6qp.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp1_gyo6qp.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1_gyo6qp.cpp:103:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1_gyo6qp.cpp:103:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1_gyo6qp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator"
  stdout: ''
