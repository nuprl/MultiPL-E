language: cpp
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    std::vector<long> result;\n    for(long long i : nums){\n\
    \        if(sum == i){\n            result.push_back(i);\n        }\n    }\n \
    \   for(long long i : nums){\n        if(sum < i){\n            result.push_back(i);\n\
    \        }\n    }\n    for(long long i : nums){\n        if(sum > i){\n      \
    \      result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnfcfj6jt.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpnfcfj6jt.cpp:15:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : nums){\n                     \
    \  ^\n/tmp/tmpnfcfj6jt.cpp:19:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for(long long i : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp:24:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp:29:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : nums){\n                       ^\n/tmp/tmpnfcfj6jt.cpp: In function 'int main()':\n\
    /tmp/tmpnfcfj6jt.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = order_by_points;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnfcfj6jt.cpp:2:\n/tmp/tmpnfcfj6jt.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpnfcfj6jt.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpnfcfj6jt.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnfcfj6jt.cpp:38:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwt4rmz0.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpzwt4rmz0.cpp:100:1: error: expected initializer before '}'\
    \ token\n }\n ^\n/tmp/tmpzwt4rmz0.cpp: In function 'int main()':\n/tmp/tmpzwt4rmz0.cpp:102:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwt4rmz0.cpp:2:\n/tmp/tmpzwt4rmz0.cpp:103:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpzwt4rmz0.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpzwt4rmz0.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzwt4rmz0.cpp:103:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzwt4rmz0.cpp:103:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzwt4rmz0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    long maxSum\
    \ = sum;\n    long maxSumIndex = 0;\n    for (long i = 0; i < nums2.size(); i++)\
    \ {\n        long sum2 = sum - nums2[i];\n        if (sum2 > maxSum) {\n     \
    \       maxSum = sum2;\n            maxSumIndex = i;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < nums2.size(); i++) {\n        if (i == maxSumIndex)\
    \ {\n            ans.push_back(nums2[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt18kp31s.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpt18kp31s.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpt18kp31s.cpp:\
    \ In function 'int main()':\n/tmp/tmpt18kp31s.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt18kp31s.cpp:2:\n/tmp/tmpt18kp31s.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpt18kp31s.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpt18kp31s.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt18kp31s.cpp:39:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt18kp31s.cpp:39:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt18kp31s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::abs(a - b) < 10;\n    });\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uyysv6w.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5uyysv6w.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmp5uyysv6w.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5uyysv6w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5uyysv6w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5uyysv6w.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmp5uyysv6w.cpp:16:6:\
    \   required from here\n/tmp/tmp5uyysv6w.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    long sum2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n   \
    \ long index2 = 0;\n    long sum3 = 0;\n    long max3 = 0;\n    long min3 = 0;\n\
    \    long index3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4 =\
    \ 0;\n    long index4 = 0;\n    long sum5 = 0;\n    long max5 = 0;\n    long min5\
    \ = 0;\n    long index5 = 0;\n    long sum6 = 0;\n    long max6 = 0;\n    long\
    \ min6 = 0;\n    long index6 = 0;\n    long sum7 = 0;\n    long max7 = 0;\n  \
    \  long min7 = 0;\n    long index7 = 0;\n    long sum8 = 0;\n    long max8 = 0;\n\
    \    long min8 = 0;\n    long index8 = 0;\n    long sum9 = 0;\n    long max9 =\
    \ 0;\n    long min9 = 0;\n    long index9 = 0;\n    long sum10 = 0;\n    long\
    \ max10 = 0;\n    long min10 = 0;\n    long index10 = 0;\n    long sum11 = 0;\n\
    \    long max11 = 0;\n    long min11 = 0;\n    long index11 = 0;\n    long sum12\
    \ = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long index12 = 0;\n    long\
    \ sum13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n    long index13 = 0;\n\
    \    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long index14\
    \ = 0;\n    long sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n    long\
    \ index15 = 0;\n    long sum16 = 0;\n    long max16 = 0;\n    long min16 = 0;\n\
    \    long index16 = 0;\n    long sum17 = 0;\n    long max17 = 0;\n    long min17\
    \ = 0;\n    long index17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n    long\
    \ min18 = 0;\n    long index18 = 0;\n    long sum19 = 0;\n    long max19 = 0;\n\
    \    long min19 = 0;\n    long index19 = 0;\n    long sum20 = 0;\n    long max20\
    \ = 0;\n    long min20 = 0;\n    long index20 = 0;\n    long sum21 = 0;\n    long\
    \ max21 = 0;\n    long min21 = 0;\n    long index21 = 0;\n    long sum22 = 0;\n\
    \    long max22 = 0;\n    long min22 = 0;\n    long index22 = 0;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbhj4w28.cpp: In function 'int main()':\n/tmp/tmpxbhj4w28.cpp:104:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxbhj4w28.cpp:2:\n/tmp/tmpxbhj4w28.cpp:105:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpxbhj4w28.cpp:105:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpxbhj4w28.cpp:105:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxbhj4w28.cpp:105:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxbhj4w28.cpp:105:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxbhj4w28.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/i"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu7odaso.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpxu7odaso.cpp:15:85: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n                   \
    \                                                                  ^\n/tmp/tmpxu7odaso.cpp:15:86:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ (a+b<0);});\n                                                              \
    \                        ^\n/tmp/tmpxu7odaso.cpp:15:86: note: candidates are:\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpxu7odaso.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxu7odaso.cpp:15:86:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b<0);});\n                   \
    \                                                                   ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpxu7odaso.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substit"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return a + b < 0;\n    });\n    return nums_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8cac6td.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpp8cac6td.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpp8cac6td.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpp8cac6td.cpp:16:6:\
    \   required from here\n/tmp/tmpp8cac6td.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy;\n    nums_copy.insert(nums_copy.end(), nums.begin(), nums.end());\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnai5n2ml.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpnai5n2ml.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmpnai5n2ml.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmpnai5n2ml.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmpnai5n2ml.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnai5n2ml.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpnai5n2ml.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \    }\n    std::vector<long> result;\n    for (long i : nums) {\n        if (sum\
    \ == i) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8xau0a1.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpf8xau0a1.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp:19:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp: In function 'int main()':\n\
    /tmp/tmpf8xau0a1.cpp:28:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = order_by_points;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf8xau0a1.cpp:2:\n/tmp/tmpf8xau0a1.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf8xau0a1.cpp:29:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf8xau0a1.cpp:29:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf8xau0a1.cpp:2:\n/usr/include/c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqhnm__z.cpp: In lambda function:\n/tmp/tmpdqhnm__z.cpp:16:32:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                ^\n/tmp/tmpdqhnm__z.cpp:16:43: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                      ^\n/tmp/tmpdqhnm__z.cpp:16:55: error: 'end'\
    \ is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                       ^\n/tmp/tmpdqhnm__z.cpp:16:64:\
    \ error: 'nums_copy' is not captured\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                ^\n/tmp/tmpdqhnm__z.cpp:16:97:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                      \
    \                           ^\n/tmp/tmpdqhnm__z.cpp:16:108: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                           ^\n/tmp/tmpdqhnm__z.cpp:16:120: error: 'end' is not\
    \ a member of 'std'\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                                       ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_urbfufr.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp_urbfufr.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmp_urbfufr.cpp:\
    \ In function 'int main()':\n/tmp/tmp_urbfufr.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_urbfufr.cpp:2:\n/tmp/tmp_urbfufr.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_urbfufr.cpp:28:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_urbfufr.cpp:28:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_urbfufr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    for (long long i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (long long\
    \ i : nums) {\n        if (sum - i == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    ans.push_back(min);\n    ans.push_back(max);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuk5qqpfs.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpuk5qqpfs.cpp:17:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : nums) {\n                   \
    \     ^\n/tmp/tmpuk5qqpfs.cpp:27:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : nums) {\n                        ^\n\
    /tmp/tmpuk5qqpfs.cpp: In function 'int main()':\n/tmp/tmpuk5qqpfs.cpp:37:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuk5qqpfs.cpp:2:\n/tmp/tmpuk5qqpfs.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpuk5qqpfs.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpuk5qqpfs.cpp:38:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuk5qqpfs.cpp:38:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuk5qqpfs.cpp:38:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuk5qqpfs.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (auto num : nums) {\n        sum +=\
    \ num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyc17nlsk.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpyc17nlsk.cpp:15:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpyc17nlsk.cpp:19:5: error:\
    \ expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n \
    \    ^\n/tmp/tmpyc17nlsk.cpp:19:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), result.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpyc17nlsk.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n     return result;\n  \
    \   ^\n/tmp/tmpyc17nlsk.cpp:20:5: error: expected ')' before 'return'\n/tmp/tmpyc17nlsk.cpp:\
    \ In function 'int main()':\n/tmp/tmpyc17nlsk.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyc17nlsk.cpp:2:\n/tmp/tmpyc17nlsk.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpyc17nlsk.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpyc17nlsk.cpp:24:92:\
    \ warning: extended initializer "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_sorted_by_sum;\n    long sum =\
    \ 0;\n    for (long num : nums_copy) {\n        sum += num;\n        nums_sorted_by_sum.push_back(sum);\n\
    \    }\n    std::sort(nums_sorted_by_sum.begin(), nums_sorted_by_sum.end());\n\
    \    return nums_sorted_by_sum;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxec7fumn.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpxec7fumn.cpp:16:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpxec7fumn.cpp: In function 'int main()':\n/tmp/tmpxec7fumn.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxec7fumn.cpp:2:\n/tmp/tmpxec7fumn.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxec7fumn.cpp:25:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxec7fumn.cpp:25:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxec7fumn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rdktd6v.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5rdktd6v.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp5rdktd6v.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    std::vector<long>\
    \ result;\n    for (auto i : nums) {\n        sum += i;\n    }\n    for (auto\
    \ i : nums) {\n        if (sum > 0) {\n            temp = sum % 10;\n        \
    \    sum = (sum - temp) / 10;\n            while (sum > 0) {\n               \
    \ result.push_back(temp);\n                sum -= temp;\n                temp\
    \ = 0;\n            }\n        }\n    }\n    for (auto i : result) {\n       \
    \ nums.insert(nums.begin() + index, i);\n        index++;\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpze8i88hi.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpze8i88hi.cpp:18:15: error: 'i' does not name a type\n     for\
    \ (auto i : nums) {\n               ^\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ ';' before 'for'\n     for (auto i : nums) {\n     ^\n/tmp/tmpze8i88hi.cpp:21:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:21:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:21:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpze8i88hi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : nums) {\n               ^\n/tmp/tmpze8i88hi.cpp:32:5: error:\
    \ expected ';' before 'for'\n     for (auto i : result) {\n     ^\n/tmp/tmpze8i88hi.cpp:32:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:32:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpze8i88hi.cpp:32:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpze8i88hi.cpp:32:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpze8i88hi.cpp:32:15: error: 'i' does not name a type\n\
    \     for (auto i : result) {\n               ^\n/tmp/tmpze8i88hi.cpp:36:5: error:\
    \ expected ';' before 'return'\n     return nums;\n     ^\n/tmp/tmpze8i88hi.cpp:36:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpze8i88hi.cpp:36:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpze8i88hi.cpp:36:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpze8i88hi.cpp:36:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpze8i88hi.cpp: In function 'int main()':\n/tmp/tmpze8i88hi.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpze8i88hi.cpp:2:\n/tmp/tmpze8i88hi.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4fafsvf.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpq4fafsvf.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpq4fafsvf.cpp: In function 'int main()':\n/tmp/tmpq4fafsvf.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq4fafsvf.cpp:2:\n/tmp/tmpq4fafsvf.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq4fafsvf.cpp:24:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq4fafsvf.cpp:24:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq4fafsvf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long min_sum = sum;\n    long min_idx = -1;\n  \
    \  for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n    }\n    std::vector<long> result;\n \
    \   for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        sum += num;\n        if (sum == min_sum) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6s_6icv.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpt6s_6icv.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpt6s_6icv.cpp: In function 'int main()':\n/tmp/tmpt6s_6icv.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt6s_6icv.cpp:2:\n/tmp/tmpt6s_6icv.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpt6s_6icv.cpp:40:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpt6s_6icv.cpp:40:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt6s_6icv.cpp:40:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt6s_6icv.cpp:40:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt6s_6icv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ count = 0;\n    long sumOfDigits = 0;\n    long sumOfDigitsOfPoints = 0;\n \
    \   long max = 0;\n    long min = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n\
    \    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7\
    \ = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long\
    \ temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n\
    \    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_gyo6qp.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp1_gyo6qp.cpp:100:1: error: expected initializer before '}'\
    \ token\n }\n ^\n/tmp/tmp1_gyo6qp.cpp: In function 'int main()':\n/tmp/tmp1_gyo6qp.cpp:102:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1_gyo6qp.cpp:2:\n/tmp/tmp1_gyo6qp.cpp:103:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp1_gyo6qp.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp1_gyo6qp.cpp:103:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1_gyo6qp.cpp:103:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1_gyo6qp.cpp:103:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1_gyo6qp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rdktd6v.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5rdktd6v.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp5rdktd6v.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b){return sum - a - b < 0;});\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx38g3elg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy;\n    nums_copy.assign(nums.begin(),\
    \ nums.end());\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){\n        return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp650qyose.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    std::vector<long> ans;\n    for (long\
    \ long i : nums) {\n        sum += i;\n        ans.push_back(i);\n    }\n    std::sort(ans.begin(),\
    \ ans.end(), [sum](long long a, long long b) -> bool {\n        return sum - a\
    \ < sum - b;\n    });\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0h6r_4aa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) {\n        return sum - a + b < sum - a + b;\n    });\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghuje6nb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for(long i=0;i<nums.size();i++){\n\
    \        long sum=0;\n        for(long j=0;j<nums.size();j++){\n            if(nums[j]>0){\n\
    \                sum+=nums[j];\n            }\n        }\n        if(sum==0){\n\
    \            nums2.push_back(nums[i]);\n        }\n    }\n    for(long i=0;i<nums2.size();i++){\n\
    \        for(long j=i+1;j<nums2.size();j++){\n            if(nums2[i]>nums2[j]){\n\
    \                long temp=nums2[i];\n                nums2[i]=nums2[j];\n   \
    \             nums2[j]=temp;\n            }\n        }\n    }\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6i8ei40.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        if (sum > 0) {\n            nums2.push_back(i);\n\
    \        }\n    }\n    std::sort(nums2.begin(), nums2.end(), [](long a, long b)\
    \ { return a + b < b + a; });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfg12pn9e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    for(long i : nums) {\n        sum += i;\n\
    \    }\n    std::vector<long> result;\n    for(long i : nums) {\n        if(sum\
    \ - i == 0) {\n            result.push_back(i);\n        }\n    }\n    for(long\
    \ i : nums) {\n        if(sum - i != 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i != 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i != 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i == 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i != 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i != 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i != 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i == 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i != 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i != 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i != 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i == 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    for(long i : nums) {\n        if(sum - i != 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    for(long i : nums) {\n        if(sum - i == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    for(long i : nums) {\n  \
    \      if(sum - i != 0) {\n            result.push_back(i);\n        }\n\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8jupi9m_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_sorted_by_sum;\n    long sum =\
    \ 0;\n    for (long num : nums_copy) {\n        sum += num;\n        nums_sorted_by_sum.push_back(sum);\n\
    \    }\n    std::sort(nums_sorted_by_sum.begin(), nums_sorted_by_sum.end());\n\
    \    return nums_sorted_by_sum;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxec7fumn.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpxec7fumn.cpp:16:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpxec7fumn.cpp: In function 'int main()':\n/tmp/tmpxec7fumn.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxec7fumn.cpp:2:\n/tmp/tmpxec7fumn.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpxec7fumn.cpp:25:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxec7fumn.cpp:25:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxec7fumn.cpp:25:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxec7fumn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n    for\
    \ (long i : nums_copy) {\n        if (sum == max_sum) {\n            max_index\
    \ = i;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n    }\n    nums_copy.erase(std::remove(nums_copy.begin(),\
    \ nums_copy.end(), max_index), nums_copy.end());\n    nums_copy.insert(nums_copy.begin(),\
    \ max_index);\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjf5p4ulz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](int a, int b){return sum - a + b < sum - b + a;});\n   \
    \ return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphp_1l4ic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp76rntyyk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long last_sum = 0;\n    long last_index = -1;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n \
    \       long cur_sum = sum - num;\n        if (cur_sum > last_sum) {\n       \
    \     last_sum = cur_sum;\n            last_index = i;\n        }\n    }\n   \
    \ std::vector<long> result;\n    for (long i = 0; i < nums.size(); i++) {\n  \
    \      if (i == last_index) {\n            result.push_back(nums[i]);\n      \
    \  } else {\n            result.push_back(nums[last_index]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7j882rii.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b) {\n        return std::abs(a) < std::abs(b);\n    });\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplaaz9rl1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx6i4e669.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> result;\n    long sum = 0;\n    for (long\
    \ i : nums) {\n        sum += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end(), [&sum](long a, long b) { return sum - a + b; });\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1hdez69.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (auto &num : nums_copy) {\n        sum += num;\n    }\n    long min_sum = sum;\n\
    \    long min_idx = -1;\n    for (auto &num : nums_copy) {\n        long cur_sum\
    \ = sum - num;\n        if (cur_sum < min_sum) {\n            min_sum = cur_sum;\n\
    \            min_idx = num;\n        }\n    }\n    std::vector<long> sorted_nums;\n\
    \    for (auto &num : nums_copy) {\n        if (num == min_idx) {\n          \
    \  sorted_nums.push_back(min_idx);\n        } else {\n            sorted_nums.push_back(num);\n\
    \        }\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp80heh3op.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) {\n        return sum - a + b < sum - b\
    \ + a;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeqdg7d6n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){\n        return a + b < 0;\n    });\n    return nums_copy;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp5_twpdg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n        if (sum < min) {\n            min = sum;\n  \
    \      }\n    }\n    std::vector<long> result;\n    for (long i : nums) {\n  \
    \      if (sum - i == max) {\n            result.push_back(i);\n        }\n  \
    \      if (sum - i == min) {\n            result.push_back(i);\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfjvwwpz6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    for(long i : nums)\n    {\n        sum +=\
    \ i;\n    }\n    long maxSum = sum;\n    std::vector<long> ans;\n    for(long\
    \ i : nums)\n    {\n        long curSum = sum - i;\n        if(curSum > maxSum)\n\
    \        {\n            maxSum = curSum;\n            ans.push_back(i);\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8o5lsmr5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n  \
    \      nums2.push_back(i);\n    }\n    long min_sum = sum;\n    for (long i :\
    \ nums2) {\n        if (min_sum > i) {\n            min_sum = i;\n        }\n\
    \    }\n    long min_sum_index = 0;\n    for (long i : nums2) {\n        if (min_sum\
    \ == i) {\n            min_sum_index = i;\n        }\n    }\n    std::vector<long>\
    \ nums3;\n    for (long i : nums2) {\n        if (i != min_sum_index) {\n    \
    \        nums3.push_back(i);\n        }\n    }\n    return nums3;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1hes_0l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    for (long i : nums_copy) {\n\
    \        max_sum = std::max(max_sum, sum);\n        sum += i;\n    }\n    std::vector<long>\
    \ result;\n    for (long i : nums_copy) {\n        if (sum == max_sum) {\n   \
    \         result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6jdyfy3q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        if (sum > 0) {\n            nums2.push_back(i);\n\
    \        }\n    }\n    std::sort(nums2.begin(), nums2.end(), [](long a, long b){return\
    \ a+b<0;});\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpww2bef8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n    for\
    \ (long i : nums_copy) {\n        if (sum == max_sum) {\n            max_index\
    \ = i;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (long i : nums_copy) {\n        if (i == max_index) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpct5fq3fl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (auto i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyfg5b6ax.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg6rxge92.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndgrg0qk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums) {\n        sum\
    \ += i;\n    }\n    long long maxSum = sum;\n    long long maxSumIndex = 0;\n\
    \    for(long long i : nums) {\n        if(sum == maxSum) {\n            maxSumIndex\
    \ = i;\n        }\n        sum += i % 10;\n    }\n    std::vector<long> ans;\n\
    \    for(long long i : nums) {\n        if(maxSumIndex == i) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7kzcfh1h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghzof4bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsCopy = nums;\n    long sum = 0;\n    for (long i = 0; i < numsCopy.size();\
    \ i++) {\n        sum += numsCopy[i];\n    }\n    long maxSum = sum;\n    long\
    \ maxIndex = -1;\n    for (long i = 0; i < numsCopy.size(); i++) {\n        sum\
    \ += numsCopy[i];\n        if (sum > maxSum) {\n            maxSum = sum;\n  \
    \          maxIndex = i;\n        }\n    }\n    numsCopy.erase(numsCopy.begin()\
    \ + maxIndex);\n    numsCopy.insert(numsCopy.begin(), maxIndex);\n    return numsCopy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl41y63ub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxm9vvlat.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6yehquiq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> sorted_nums;\n    long sum = 0;\n \
    \   for (long num : nums_copy) {\n        sum += num;\n    }\n    for (long num\
    \ : nums_copy) {\n        if (sum > 0) {\n            long digit = num % 10;\n\
    \            while (sum > 0) {\n                sum += digit;\n              \
    \  digit = num % 10;\n                nums_copy.erase(nums_copy.begin() + nums_copy.end()\
    \ - 1);\n            }\n            sorted_nums.push_back(digit);\n        }\n\
    \    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0vac0ae9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6yehquiq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    long max_index = -1;\n    for\
    \ (long i : nums_copy) {\n        if (sum - i < 0) {\n            sum += i;\n\
    \        } else {\n            sum -= i;\n            if (sum > max_sum) {\n \
    \               max_sum = sum;\n                max_index = i;\n            }\n\
    \        }\n    }\n    nums_copy.erase(std::remove(nums_copy.begin(), nums_copy.end(),\
    \ max_index), nums_copy.end());\n    nums_copy.insert(nums_copy.begin(), max_index);\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsqwglsqv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n   \
    \ for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        if (num > 0) {\n            long digit = num % 10;\n            if (max_sum\
    \ < sum + digit) {\n                max_sum = sum + digit;\n                max_index\
    \ = i;\n            }\n        }\n    }\n    nums_copy.erase(nums_copy.begin()\
    \ + max_index, nums_copy.end());\n    return nums_copy;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy7yhwu96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_index = 0;\n\
    \    for (auto &i : nums) {\n        sum += i;\n        if (sum > max_sum) {\n\
    \            max_sum = sum;\n            max_index = i;\n        }\n    }\n  \
    \  std::vector<long> result;\n    for (auto &i : nums) {\n        if (i == max_index)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpql7e7t0i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy;\n    std::vector<long> nums_copy_sorted;\n    for (auto num : nums)\
    \ {\n        nums_copy.push_back(num);\n    }\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) -> bool {\n        return std::abs(a - b)\
    \ < std::abs(std::abs(a) - std::abs(b));\n    });\n    for (auto num : nums_copy)\
    \ {\n        nums_copy_sorted.push_back(num);\n    }\n    return nums_copy_sorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1n0p_8ns.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsCopy = nums;\n    long sum = 0;\n    for (long i = 0; i < numsCopy.size();\
    \ i++) {\n        sum += numsCopy[i];\n    }\n    std::vector<long> numsCopySorted\
    \ = numsCopy;\n    std::sort(numsCopySorted.begin(), numsCopySorted.end(), [sum](int\
    \ a, int b) {\n        return a + b < sum;\n    });\n    return numsCopySorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjaoosh8j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::abs(a) < std::abs(b);\n    });\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph_2zbydo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (long long i : nums) {\n        sum\
    \ += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&sum](long long a, long long b) { return sum - a + b; });\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpba1faic9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rdktd6v.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5rdktd6v.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp5rdktd6v.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    std::vector<long> nums_sorted;\n    for (long\
    \ i : nums) {\n        sum += i;\n        nums_sorted.push_back(i);\n    }\n \
    \   std::sort(nums_sorted.begin(), nums_sorted.end(), [&sum](long a, long b) ->\
    \ bool {\n        return sum - a < sum - b;\n    });\n    return nums_sorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppmpfk1dv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    long long sum2 = 0;\n    long long max2 = 0;\n    long long min2 =\
    \ 0;\n    long long index2 = 0;\n    long long temp2 = 0;\n    long long count2\
    \ = 0;\n    long long sum3 = 0;\n    long long max3 = 0;\n    long long min3 =\
    \ 0;\n    long long index3 = 0;\n    long long temp3 = 0;\n    long long count3\
    \ = 0;\n    long long sum4 = 0;\n    long long max4 = 0;\n    long long min4 =\
    \ 0;\n    long long index4 = 0;\n    long long temp4 = 0;\n    long long count4\
    \ = 0;\n    long long sum5 = 0;\n    long long max5 = 0;\n    long long min5 =\
    \ 0;\n    long long index5 = 0;\n    long long temp5 = 0;\n    long long count5\
    \ = 0;\n    long long sum6 = 0;\n    long long max6 = 0;\n    long long min6 =\
    \ 0;\n    long long index6 = 0;\n    long long temp6 = 0;\n    long long count6\
    \ = 0;\n    long long sum7 = 0;\n    long long max7 = 0;\n    long long min7 =\
    \ 0;\n    long long index7 = 0;\n    long long temp7 = 0;\n    long long count7\
    \ = 0;\n    long long sum8 = 0;\n    long long max8 = 0;\n    long long min8 =\
    \ 0;\n    long long index8 = 0;\n    long long temp8 = 0;\n    long long count8\
    \ = 0;\n    long long sum9 = 0;\n    long long max9 = 0;\n    long long min9 =\
    \ 0;\n    long long index9 = 0;\n    long long temp9 = 0;\n    long long count9\
    \ = 0;\n    long long sum10 = 0;\n    long long max10 = 0;\n    long long min10\
    \ = 0;\n    long long index10 = 0;\n    long long temp10 = 0;\n    long long count10\
    \ = 0;\n    long long sum11 = 0;\n    long long max11 = 0;\n    long long min11\
    \ = 0;\n    long long index11 = 0;\n    long long temp11 = 0;\n    long long count11\
    \ = 0;\n    long long sum12 = 0;\n    long long max12 = 0;\n    long long min12\
    \ = 0;\n    long long index12 = 0;\n    long long temp12 = 0;\n    long long count12\
    \ = 0;\n    long long sum13 = 0;\n    long long max13 = 0;\n    long long min13\
    \ = 0;\n    long long index13 = 0;\n    long long temp13 = 0;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_a0gmqi4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return a + b < 0;\n    });\n    return nums_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8cac6td.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpp8cac6td.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpp8cac6td.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpp8cac6td.cpp:16:6:\
    \   required from here\n/tmp/tmpp8cac6td.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwm3czg6f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    for (long i : nums) {\n      \
    \  int sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        if (sum > 0) {\n            nums2.push_back(i);\n\
    \        }\n    }\n    std::sort(nums2.begin(), nums2.end(), [](long a, long b){return\
    \ a+b<0;});\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_l9t_6qz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_urbfufr.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp_urbfufr.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmp_urbfufr.cpp:\
    \ In function 'int main()':\n/tmp/tmp_urbfufr.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_urbfufr.cpp:2:\n/tmp/tmp_urbfufr.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_urbfufr.cpp:28:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_urbfufr.cpp:28:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_urbfufr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [sum](int a, int b) {\n        return a + b < sum;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu4zgeak1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    std::vector<long> nums_sorted;\n    for(long long i : nums){\n\
    \        if(sum == i){\n            nums_sorted.push_back(i);\n        }\n   \
    \ }\n    return nums_sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgk0qglu9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a - b) < std::abs(std::abs(a)\
    \ - std::abs(b));\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0g8ktt9w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx6i4e669.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsCopy = nums;\n    long sum = 0;\n    for (long i = 0; i < numsCopy.size();\
    \ i++) {\n        sum += numsCopy[i];\n    }\n    long maxSum = 0;\n    for (long\
    \ i = 0; i < numsCopy.size(); i++) {\n        maxSum = std::max(maxSum, sum);\n\
    \        sum += numsCopy[i];\n    }\n    std::vector<long> result;\n    for (long\
    \ i = 0; i < numsCopy.size(); i++) {\n        if (sum == maxSum) {\n         \
    \   result.push_back(i);\n            sum -= numsCopy[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpttm0r42e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (long long i : nums) {\n        sum +=\
    \ i;\n    }\n    long long maxSum = sum;\n    for (long long i : nums) {\n   \
    \     long long newSum = sum - i;\n        if (newSum > maxSum) {\n          \
    \  maxSum = newSum;\n        }\n    }\n    for (long long i : nums) {\n      \
    \  long long newSum = sum - i;\n        if (newSum == maxSum) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyysvmn3n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ int sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n       \
    \     i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4edl0oza.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [sum](long a, long b) -> bool {\n        return sum - a + b < sum\
    \ - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6uw63ns.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    long long temp = 0;\n    for (auto num :\
    \ nums) {\n        sum += num;\n        if (sum > max) {\n            max = sum;\n\
    \        }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for (auto num : nums) {\n        temp = sum - num;\n        if (temp > 0)\
    \ {\n            index = num;\n            break;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (auto num : nums) {\n        if (num == index) {\n           \
    \ ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoxe9461k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghzof4bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return (a+b)/10 > b+a/10;});\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7v5rfuqp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    for (long i : nums_copy) {\n\
    \        max_sum = std::max(max_sum, sum);\n    }\n    std::vector<long> result;\n\
    \    for (long i : nums_copy) {\n        if (sum - i == max_sum) {\n         \
    \   result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphw5unb5t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    for(long i : nums)\n        sum += i;\n \
    \   std::vector<long> ans;\n    for(long i : nums)\n    {\n        long temp =\
    \ sum - i;\n        if(temp < 0)\n        {\n            temp = temp * -1;\n \
    \       }\n        ans.push_back(temp);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8z9eck9i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4fafsvf.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpq4fafsvf.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpq4fafsvf.cpp: In function 'int main()':\n/tmp/tmpq4fafsvf.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq4fafsvf.cpp:2:\n/tmp/tmpq4fafsvf.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq4fafsvf.cpp:24:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq4fafsvf.cpp:24:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq4fafsvf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    for (long num : nums) {\n        long sum = 0;\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn6vjgy6l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long maxSum = 0;\n    long long\
    \ maxSumIndex = 0;\n    for (long long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum > maxSum) {\n            maxSum = sum;\n \
    \           maxSumIndex = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (long long i = 0; i < nums.size(); i++) {\n        if (i == maxSumIndex)\
    \ {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkvhqygys.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b) -> bool {\n        return std::abs(a - b) < 10;\n    });\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3xgye4kp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \    }\n    std::vector<long> ans;\n    for (long i : nums) {\n        long temp\
    \ = sum - i;\n        if (temp > 0) {\n            ans.push_back(i);\n       \
    \     ans.push_back(temp);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9xacpfle.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ 0;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzp27wb2b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](int a, int b) {\n        return sum - a + b < sum - a +\
    \ b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3f5or0s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        nums2.push_back(nums[i]);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm16l3ijy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) {\n        return sum - a + b < sum - a\
    \ + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ke9jro8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i == j) {\n                sum += nums[i];\n            }\n\
    \            else {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum > 0) {\n            nums2.push_back(nums[i]);\n        }\n  \
    \  }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0a3iqbg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n    \
    \    long cur_sum = sum - num;\n        if (cur_sum > max_sum) {\n           \
    \ max_sum = cur_sum;\n            max_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < nums.size(); i++) {\n        if (i == max_index)\
    \ {\n            result.push_back(nums[i]);\n        } else {\n            result.push_back(max_sum\
    \ - nums[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpil_sd5pj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    for (auto &num : nums) {\n        long sum = 0;\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4q2z3bg9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    std::vector<long> nums_copy;\n    for(long\
    \ long i : nums)\n    {\n        sum += i;\n        nums_copy.push_back(i);\n\
    \    }\n    sort(nums_copy.begin(), nums_copy.end(), [&sum](long long a, long\
    \ long b){return sum - a + b < sum - b + a;});\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpamn2z5i5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum2 = 0;\n    long temp2 = 0;\n    long\
    \ index2 = 0;\n    long max2 = 0;\n    long min2 = 0;\n    for (auto i : nums)\
    \ {\n        sum += i;\n    }\n    for (auto i : nums) {\n        temp = sum %\
    \ 10;\n        sum2 = sum / 10;\n        if (sum2 == temp) {\n            index\
    \ = i;\n        }\n    }\n    for (auto i : nums) {\n        temp2 = sum2 % 10;\n\
    \        sum2 = sum2 / 10;\n        if (sum2 == temp2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (sum > sum2) {\n        max = index;\n        min\
    \ = index2;\n    }\n    if (sum < sum2) {\n        max = index2;\n        min\
    \ = index;\n    }\n    if (sum == sum2) {\n        max = index;\n        min =\
    \ index2;\n    }\n    if (sum < sum2) {\n        max = index2;\n        min =\
    \ index;\n    }\n    if (sum > sum2) {\n        max = index;\n        min = index2;\n\
    \    }\n    if (sum == sum2) {\n        max = index;\n        min = index2;\n\
    \    }\n    if (sum > sum2) {\n        max = index;\n        min = index2;\n \
    \   }\n    if (sum == sum2) {\n        max = index;\n        min = index2;\n \
    \   }\n    if (sum < sum2) {\n        max = index2;\n        min = index;\n  \
    \  }\n    if (sum > sum2) {\n        max = index;\n        min = index2;\n   \
    \ }\n    if (sum == sum2) {\n        max = index;\n        min = index2;\n   \
    \ }\n    if (sum < sum2) {\n        max = index2;\n        min = index;\n    }\n\
    \    if (sum > sum2) {\n        max = index;\n        min = index2;\n    }\n \
    \   if (sum == sum2) {\n        max = index;\n        min = index2;\n    }\n \
    \   if (sum < sum2) {\n        max = index2;\n        min = index;\n    }\n  \
    \  if (sum > sum2) {\n        max = index;\n        min = index2;\n    }\n   \
    \ if (sum == sum2) {\n        max = index;\n        min = index2;\n    }\n   \
    \ if (sum < sum2) {\n        max = index2;\n        min = index;\n    }\n    if\
    \ (sum > sum2) {\n        max = index;\n        min = index2;\n    }\n    if (sum\
    \ == sum2) {\n        max = index;\n        min = index2;\n    }\n    if (sum\
    \ < sum2) {\n        max = index2;\n        min = index;\n    }\n    if (sum >\
    \ sum2) {\n        max = index;\n        min = index2;\n    }\n    if (\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ew9gleb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    for(long long i : nums) {\n        sum\
    \ += i;\n    }\n    std::vector<long> result;\n    for(long long i : nums) {\n\
    \        if(sum == i) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1i77b9ol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums1;\n    std::vector<long> nums2;\n    std::vector<long>\
    \ nums3;\n    std::vector<long> nums4;\n    std::vector<long> nums5;\n    std::vector<long>\
    \ nums6;\n    std::vector<long> nums7;\n    std::vector<long> nums8;\n    std::vector<long>\
    \ nums9;\n    std::vector<long> nums10;\n    std::vector<long> nums11;\n    std::vector<long>\
    \ nums12;\n    std::vector<long> nums13;\n    std::vector<long> nums14;\n    std::vector<long>\
    \ nums15;\n    std::vector<long> nums16;\n    std::vector<long> nums17;\n    std::vector<long>\
    \ nums18;\n    std::vector<long> nums19;\n    std::vector<long> nums20;\n    std::vector<long>\
    \ nums21;\n    std::vector<long> nums22;\n    std::vector<long> nums23;\n    std::vector<long>\
    \ nums24;\n    std::vector<long> nums25;\n    std::vector<long> nums26;\n    std::vector<long>\
    \ nums27;\n    std::vector<long> nums28;\n    std::vector<long> nums29;\n    std::vector<long>\
    \ nums30;\n    std::vector<long> nums31;\n    std::vector<long> nums32;\n    std::vector<long>\
    \ nums33;\n    std::vector<long> nums34;\n    std::vector<long> nums35;\n    std::vector<long>\
    \ nums36;\n    std::vector<long> nums37;\n    std::vector<long> nums38;\n    std::vector<long>\
    \ nums39;\n    std::vector<long> nums40;\n    std::vector<long> nums41;\n    std::vector<long>\
    \ nums42;\n    std::vector<long> nums43;\n    std::vector<long> nums44;\n    std::vector<long>\
    \ nums45;\n    std::vector<long> nums46;\n    std::vector<long> nums47;\n    std::vector<long>\
    \ nums48;\n    std::vector<long> nums49;\n    std::vector<long> nums50;\n    std::vector<long>\
    \ nums51;\n    std::vector<long> nums52;\n    std::vector<long> nums53;\n    std::vector<long>\
    \ nums54;\n    std::vector<long> nums55;\n    std::vector<long> nums56;\n    std::vector<long>\
    \ nums57;\n    std::vector<long> nums58;\n    std::vector<long> nums59\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5oofuh5x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_copy_sorted = nums;\n    long\
    \ sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n    }\n    long\
    \ last_sum = 0;\n    for (long i : nums_copy) {\n        last_sum += i;\n    \
    \    if (last_sum > sum) {\n            nums_copy_sorted.push_back(i);\n     \
    \       last_sum -= sum;\n        }\n    }\n    return nums_copy_sorted;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8y6_gy1r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwm3czg6f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long index = 0;\n    long temp = 0;\n    std::vector<long>\
    \ result;\n    for (auto &i : nums) {\n        sum += i;\n        index = sum\
    \ % 10;\n        temp = sum / 10;\n        if (temp != 0) {\n            result.push_back(temp);\n\
    \        }\n    }\n    result.push_back(index);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyhfj81j9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsSorted(nums.size());\n    for (long i = 0; i < nums.size(); i++) {\n   \
    \     long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n      \
    \      sum += nums[j];\n            if (sum > i) {\n                numsSorted[i]\
    \ = nums[j];\n                break;\n            }\n        }\n    }\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvm7f_zie.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums1;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums1.push_back(i);\n    }\n    long min\
    \ = nums1[0];\n    for (long i : nums1) {\n        if (sum == sum - i) {\n   \
    \         min = i;\n        }\n    }\n    long max = nums1[0];\n    for (long\
    \ i : nums1) {\n        if (sum == sum + i) {\n            max = i;\n        }\n\
    \    }\n    std::vector<long> nums2;\n    for (long i : nums1) {\n        if (sum\
    \ == sum - i) {\n            nums2.push_back(i);\n        }\n    }\n    for (long\
    \ i : nums2) {\n        nums1.push_back(i);\n    }\n    return nums1;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwe9i9vs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    std::vector<long> result;\n    for(long long i : nums){\n\
    \        if(sum == i){\n            result.push_back(i);\n        }\n    }\n \
    \   for(long long i : nums){\n        if(sum < i){\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpej1atk51.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> sorted_nums;\n    long sum = 0;\n \
    \   for (long num : nums_copy) {\n        sum += num;\n    }\n    for (long num\
    \ : nums_copy) {\n        if (sum > 0) {\n            long cur_sum = 0;\n    \
    \        for (long i = 0; i < num; i++) {\n                cur_sum += nums_copy[i];\n\
    \            }\n            if (cur_sum > sum) {\n                sorted_nums.push_back(num);\n\
    \                sum -= cur_sum;\n            } else {\n                sorted_nums.push_back(nums_copy[i]);\n\
    \                sum -= nums_copy[i];\n            }\n        } else {\n     \
    \       sorted_nums.push_back(num);\n        }\n    }\n    return sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpomrb4jvv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    long max_sum = 0;\n  \
    \  long max_index = 0;\n    for (long i : nums_copy) {\n        if (sum == max_sum)\
    \ {\n            max_index = i;\n        }\n        if (sum > max_sum) {\n   \
    \         max_sum = sum;\n            max_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i : nums_copy) {\n        if (i == max_index) {\n   \
    \         result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc2npykks.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n    for\
    \ (long i : nums_copy) {\n        if (sum == max_sum) {\n            max_index\
    \ = i;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n    }\n    nums_copy.erase(std::remove(nums_copy.begin(),\
    \ nums_copy.end(), max_index), nums_copy.end());\n    nums_copy.insert(std::begin(nums_copy),\
    \ max_index);\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfvn8r3vo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4fafsvf.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpq4fafsvf.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpq4fafsvf.cpp: In function 'int main()':\n/tmp/tmpq4fafsvf.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq4fafsvf.cpp:2:\n/tmp/tmpq4fafsvf.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpq4fafsvf.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq4fafsvf.cpp:24:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq4fafsvf.cpp:24:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq4fafsvf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         sum += nums[j];\n        }\n        if (sum > 0) {\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprm9ix_ez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for(long i=0;i<nums.size();i++){\n\
    \        long sum=0;\n        for(long j=0;j<nums.size();j++){\n            if(nums[j]==i){\n\
    \                sum+=nums[j];\n            }\n        }\n        if(sum>0){\n\
    \            nums2.push_back(i);\n        }\n    }\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpktysos4g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for (long long i : nums) {\n        sum\
    \ += i;\n    }\n    std::vector<long> ans;\n    for (long long i : nums) {\n \
    \       if (sum == i) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6_gcgip4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums) {\n        sum\
    \ += i;\n    }\n    std::vector<long> result;\n    for(long long i : nums) {\n\
    \        if(sum == i) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsr4h8qdb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsCopy = nums;\n    long sum = 0;\n    for (long i = 0; i < numsCopy.size();\
    \ i++) {\n        sum += numsCopy[i];\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < numsCopy.size(); i++) {\n        if (sum > 0) {\n  \
    \          long digit = numsCopy[i] / sum;\n            long index = sum - digit;\n\
    \            result.push_back(numsCopy[index]);\n            sum -= digit;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppn_yu4rd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rdktd6v.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5rdktd6v.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp5rdktd6v.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5rdktd6v.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp5rdktd6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto &num : nums) {\n        sum += num;\n\
    \        result.push_back(num);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [sum](long a, long b) -> bool {\n        return sum - a < sum - b;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqstv4_mz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzvnviqhh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndgrg0qk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    for (auto i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (auto i : nums) {\n        if (i == -1) {\n            result.push_back(-1);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    for\
    \ (auto i : nums) {\n        if (i == -1) {\n            result.push_back(-1);\n\
    \        } else {\n            if (sum == i) {\n                result.push_back(i);\n\
    \            } else {\n                result.push_back(-1);\n            }\n\
    \        }\n    }\n    for (auto i : nums) {\n        if (i == -1) {\n       \
    \     result.push_back(-1);\n        } else {\n            if (sum < i) {\n  \
    \              result.push_back(i);\n            } else {\n                result.push_back(-1);\n\
    \            }\n        }\n    }\n    for (auto i : nums) {\n        if (i ==\
    \ -1) {\n            result.push_back(-1);\n        } else {\n            if (sum\
    \ > i) {\n                result.push_back(i);\n            } else {\n       \
    \         result.push_back(-1);\n            }\n        }\n    }\n    for (auto\
    \ i : nums) {\n        if (i == -1) {\n            result.push_back(-1);\n   \
    \     } else {\n            if (sum == i) {\n                result.push_back(i);\n\
    \            } else {\n                result.push_back(-1);\n            }\n\
    \        }\n    }\n    for (auto i : nums) {\n        if (i == -1) {\n       \
    \     result.push_back(-1);\n        } else {\n            if (sum < i) {\n  \
    \              result.push_back(i);\n            } else {\n                result.push_back(-1);\n\
    \            }\n        }\n    }\n    for (auto i : nums) {\n        if (i ==\
    \ -1) {\n            result.push_back(-1);\n        } else {\n            if (sum\
    \ > i) {\n                result.push_back(i);\n            } else {\n       \
    \         result.push_back(-1);\n            }\n        }\n    }\n    for (auto\
    \ i : nums) {\n        if (i == -1) {\n            result.push_back(-1);\n   \
    \     } else {\n            if (sum == i) {\n                result.push_back(i);\n\
    \            } else {\n                result.push_back(-1);\n            }\n\
    \        }\n    }\n    for (auto i : nums) {\n        if (i == -1) {\n       \
    \     result.push_back(-1);\n        } else {\n            if (sum < i) {\n  \
    \              result.push_back(i);\n            } else {\n                result.push_back(-1);\n\
    \            }\n        }\n    }\n    for (auto i : nums) {\n        if (i ==\
    \ -1) {\n            result.push_back(-1);\n        } else {\n            if (sum\
    \ > i) {\n                result.push_back(i);\n            } else {\n       \
    \         result.push_back(-1);\n            }\n        }\n    }\n    for (auto\
    \ i : nums) {\n        if (i == -1) {\n            result.push_back(-1);\n   \
    \     } else {\n            if (sum == i) {\n                result.push_back(i);\n\
    \            } else {\n                result.push_back(-1);\n            }\n\
    \        }\n    }\n    for (auto i : nums) {\n        if (i == -1) {\n       \
    \     result.push_back(\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkw8l0evb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    for (auto &i : nums) {\n        sum += i;\n        if (sum >\
    \ max) {\n            max = sum;\n        }\n        if (sum < min) {\n      \
    \      min = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (auto\
    \ &i : nums) {\n        if (i == max) {\n            ans.push_back(i);\n     \
    \   }\n        if (i == min) {\n            ans.push_back(i);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprarldxe2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n  \
    \      nums2.push_back(i);\n    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long\
    \ a, long b) -> bool {\n        return sum - a + b < sum - a + b;\n    });\n \
    \   return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdt_cmoog.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    for (auto i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n            index = i;\n  \
    \      }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    std::vector<long> result;\n    for (auto i : nums) {\n        if (i == index)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppirj9z9g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_copy_sorted = nums;\n    long\
    \ sum = 0;\n    for (long num : nums_copy) {\n        sum += num;\n    }\n   \
    \ long min_sum = sum;\n    for (long num : nums_copy) {\n        if (min_sum >\
    \ num) {\n            min_sum = num;\n        }\n    }\n    long min_sum_pos =\
    \ 0;\n    for (long i = 0; i < nums_copy.size(); i++) {\n        long num = nums_copy[i];\n\
    \        if (num == min_sum) {\n            nums_copy_sorted[min_sum_pos++] =\
    \ num;\n        }\n    }\n    return nums_copy_sorted;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybze3f6k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    long long max = 0;\n    for (auto num\
    \ : nums) {\n        sum += num;\n        if (sum > max) {\n            max =\
    \ sum;\n        }\n    }\n    std::vector<long> result;\n    for (auto num : nums)\
    \ {\n        if (sum - num > max) {\n            result.push_back(num);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvozggb94.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n \
    \       result.push_back(i);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&sum](int a, int b) {\n        return sum - a + b < sum - b + a;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvwcip6wa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> sorted_nums;\n    long sum = 0;\n \
    \   for (long num : nums_copy) {\n        sum += num;\n    }\n    for (long num\
    \ : nums_copy) {\n        if (sum > 0) {\n            sorted_nums.push_back(sum);\n\
    \            sum -= num;\n        }\n    }\n    for (long num : nums_copy) {\n\
    \        if (sum < 0) {\n            sorted_nums.push_back(-sum);\n          \
    \  sum += num;\n        }\n    }\n    return sorted_nums;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1eehfcy0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe_y65lze.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ ans;\n    long sum = 0;\n    for (long &i : nums) {\n        sum += i;\n   \
    \ }\n    long max_sum = sum;\n    for (long &i : nums) {\n        sum += i;\n\
    \        if (sum > max_sum) {\n            max_sum = sum;\n            ans.clear();\n\
    \            ans.push_back(i);\n        } else if (sum == max_sum) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrsraa6j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         sum += nums[j];\n        }\n        if (sum > 0) {\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnemlv80b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_sum = 0;\n    for (long num : nums_copy)\
    \ {\n        max_sum = std::max(max_sum, sum);\n        sum -= num;\n    }\n \
    \   std::vector<long> result;\n    for (long num : nums_copy) {\n        if (sum\
    \ == max_sum) {\n            result.push_back(num);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw6dhjhjs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_sum = 0;\n    for (long num : nums_copy)\
    \ {\n        max_sum = std::max(max_sum, sum);\n        sum -= num;\n    }\n \
    \   std::vector<long> result;\n    for (long num : nums_copy) {\n        if (sum\
    \ == 0) {\n            result.push_back(num);\n        } else {\n            long\
    \ cur_sum = sum;\n            while (cur_sum > 0) {\n                long cur_digit\
    \ = num % 10;\n                cur_sum -= cur_digit;\n                num = (num\
    \ - cur_digit) / 10;\n                result.push_back(num);\n            }\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jzl1ief.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_index = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum > max_sum) {\n            max_sum = sum;\n            max_index =\
    \ i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(nums[max_index]);\n\
    \    long sum2 = 0;\n    for (long i = max_index + 1; i < nums.size(); i++) {\n\
    \        sum2 += nums[i];\n        if (sum2 > max_sum) {\n            ans.push_back(nums[i]);\n\
    \            max_sum = sum2;\n            max_index = i;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprpokli87.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    for (auto num : nums) {\n        long sum = 0;\n        while (num\
    \ != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n \
    \       nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphlb4jtor.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    for (long i : nums_copy) {\n\
    \        max_sum = std::max(max_sum, sum);\n        sum -= i;\n    }\n    std::vector<long>\
    \ result;\n    for (long i : nums_copy) {\n        if (sum == max_sum) {\n   \
    \         result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5w6zirhi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghzof4bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    for (long long i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (long long\
    \ i : nums) {\n        if (sum == i) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    std::sort(ans.begin(), ans.end(), [&](long long a, long long\
    \ b) -> bool {\n        return a + b < 0;\n    });\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp68l2a8v3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    long maxSum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long maxIndex = -1;\n    long minIndex = -1;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum > maxSum) {\n            maxSum\
    \ = sum;\n            maxIndex = i;\n        } else if (sum < minSum) {\n    \
    \        minSum = sum;\n            minIndex = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < nums.size(); i++) {\n        if (i == maxIndex)\
    \ {\n            result.push_back(nums[i]);\n        } else if (i == minIndex)\
    \ {\n            result.push_back(nums[i]);\n        } else {\n            result.push_back(nums[i]);\n\
    \            result.push_back(maxIndex);\n            result.push_back(minIndex);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbhz_6zc2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::vector<long> nums_copy_sorted = nums;\n    long\
    \ sum = 0;\n    for (long num : nums_copy) {\n        sum += num;\n    }\n   \
    \ for (long num : nums_copy) {\n        long digit = num % 10;\n        long pos\
    \ = sum - digit;\n        if (pos < 0) {\n            pos = pos + 10;\n      \
    \  }\n        nums_copy_sorted[pos] = num;\n    }\n    return nums_copy_sorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkgjlrr7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    long max = 0;\n    for (long i : nums) {\n\
    \        sum += i;\n        if (sum > max) {\n            max = sum;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    for (long i : nums) {\n        if\
    \ (sum - i == max) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptnvlfd9s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_num = std::numeric_limits<long>::min();\n\
    \    for (long num : nums_copy) {\n        if (num > max_num) {\n            max_num\
    \ = num;\n        }\n    }\n    long min_num = std::numeric_limits<long>::max();\n\
    \    for (long num : nums_copy) {\n        if (num < min_num) {\n            min_num\
    \ = num;\n        }\n    }\n    long min_sum = std::numeric_limits<long>::max();\n\
    \    for (long num : nums_copy) {\n        long cur_sum = sum - num;\n       \
    \ if (cur_sum < min_sum) {\n            min_sum = cur_sum;\n        }\n    }\n\
    \    long max_sum = std::numeric_limits<long>::min();\n    for (long num : nums_copy)\
    \ {\n        long cur_sum = sum + num;\n        if (cur_sum > max_sum) {\n   \
    \         max_sum = cur_sum;\n        }\n    }\n    std::vector<long> ans;\n \
    \   ans.reserve(nums_copy.size());\n    for (long num : nums_copy) {\n       \
    \ if (num < min_num) {\n            ans.push_back(num);\n        } else if (num\
    \ > max_num) {\n            ans.push_back(num);\n        } else if (num == min_num\
    \ && num > min_sum) {\n            ans.push_back(num);\n        } else if (num\
    \ == max_num && num < max_sum) {\n            ans.push_back(num);\n        } else\
    \ if (num == min_num && num == max_num && num > min_sum && num < max_sum) {\n\
    \            ans.push_back(num);\n        } else {\n            long cur_sum =\
    \ sum - num;\n            long cur_max_sum = max_sum - num;\n            if (cur_sum\
    \ > cur_max_sum) {\n                ans.push_back(num);\n            } else if\
    \ (cur_sum < cur_max_sum) {\n                ans.push_back(num);\n           \
    \ } else {\n                ans.push_back(num);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3jk7j4u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> result;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp90ok53nm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    for (auto i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for (auto i : nums) {\n        if (sum == i) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for (auto i : ans) {\n        if (sum < i) {\n        \
    \    ans.insert(ans.begin() + index, i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpznkp47l3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    for (long long i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (long long\
    \ i : nums) {\n        if (sum == i) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    ans.push_back(max);\n    ans.push_back(min);\n    return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9gcfsink.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy;\n    for(auto num : nums){\n   \
    \     nums_copy.push_back(num);\n    }\n    std::sort(nums_copy.begin(), nums_copy.end(),\
    \ [](long a, long b){\n        return std::abs(a) < std::abs(b);\n    });\n  \
    \  return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpllzeqzqr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - b + a;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgx1b1gd_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            sum += nums[j];\n        }\n        if (sum == nums[i]) {\n \
    \           nums2.push_back(nums[i]);\n        }\n    }\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpudkkeh75.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwm3czg6f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndgrg0qk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long max_sum = 0;\n    for (long num : nums)\
    \ {\n        sum += num;\n        if (sum > max_sum) {\n            max_sum =\
    \ sum;\n        }\n    }\n    std::vector<long> result;\n    for (long num : nums)\
    \ {\n        sum += num;\n        if (sum == max_sum) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fkd9kdn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum +=\
    \ num;\n    }\n    long temp = 0;\n    std::vector<long> nums_sorted;\n    for(long\
    \ num : nums)\n    {\n        if(sum == temp)\n        {\n            nums_sorted.push_back(num);\n\
    \        }\n        else if(sum > temp)\n        {\n            temp = sum;\n\
    \            nums_sorted.clear();\n            nums_sorted.push_back(num);\n \
    \       }\n        else\n        {\n            while(sum > temp)\n          \
    \  {\n                nums_sorted.push_back(nums_sorted.back());\n           \
    \     sum -= nums_sorted.back();\n            }\n            nums_sorted.push_back(num);\n\
    \        }\n    }\n    return nums_sorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0f32d07t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for(long i=0;i<nums.size();i++){\n\
    \        long sum=0;\n        for(long j=0;j<nums.size();j++){\n            if(nums[j]>0){\n\
    \                sum+=nums[j];\n            }\n        }\n        if(sum==0){\n\
    \            nums2.push_back(nums[i]);\n        }\n    }\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvzqixz2a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    long long ans = 0;\n    for (auto i\
    \ : nums) {\n        ans += i % 10 * pow(10, nums.size() - i - 1);\n    }\n  \
    \  if (mod != 0) {\n        ans -= mod * pow(10, nums.size() - 1);\n    }\n  \
    \  ans /= 10;\n    for (auto i : nums) {\n        ans -= i;\n    }\n    ans.push_back(sum);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5zpr13xt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i : nums) {\n       \
    \ long sum = 0;\n        while (i != 0) {\n            sum += i % 10;\n      \
    \      i /= 10;\n        }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_urbfufr.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp_urbfufr.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmp_urbfufr.cpp:\
    \ In function 'int main()':\n/tmp/tmp_urbfufr.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = order_by_points;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_urbfufr.cpp:2:\n/tmp/tmp_urbfufr.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp_urbfufr.cpp:28:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_urbfufr.cpp:28:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_urbfufr.cpp:28:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_urbfufr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums1;\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum > 0) {\n            nums1.push_back(nums[i]);\n        } else\
    \ {\n            nums2.push_back(nums[i]);\n        }\n    }\n    std::sort(nums1.begin(),\
    \ nums1.end(), [](long a, long b) -> bool {\n        return a + b < 0;\n    });\n\
    \    std::sort(nums2.begin(), nums2.end(), [](long a, long b) -> bool {\n    \
    \    return a + b < 0;\n    });\n    return nums1;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc2mevr_j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3modsuk2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp3modsuk2.cpp:15:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmp3modsuk2.cpp:15:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3modsuk2.cpp:15:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp3modsuk2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    long long ans = sum;\n    for(long long i : nums){\n     \
    \   ans = ans - i;\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg_fpztfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n   \
    \ long max = 0;\n    for(long i = 0; i < nums.size(); i++){\n        sum += nums[i];\n\
    \        if(sum > max){\n            max = sum;\n            index = i;\n    \
    \    }\n    }\n    std::vector<long> result;\n    result.push_back(nums[index]);\n\
    \    for(long i = index + 1; i < nums.size(); i++){\n        sum += nums[i];\n\
    \        if(sum > max){\n            max = sum;\n            index = i;\n    \
    \    }\n        result.push_back(nums[index]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmk4z_qpz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return a + b < 0;\n    });\n    return nums_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8cac6td.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpp8cac6td.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpp8cac6td.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp:16:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpp8cac6td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpp8cac6td.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpp8cac6td.cpp:16:6:\
    \   required from here\n/tmp/tmpp8cac6td.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for (auto i : nums) {\n        sum +=\
    \ i;\n    }\n    std::vector<long> result;\n    for (auto i : nums) {\n      \
    \  if (sum == i) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfamub4rk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghzof4bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndgrg0qk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n \
    \       result.push_back(i);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [sum](long a, long b) -> bool {\n        return sum - a < sum - b;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuuq4scl2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ ans;\n    long sum = 0;\n    for (long &i : nums) {\n        sum += i;\n   \
    \ }\n    long cur = 0;\n    for (long &i : nums) {\n        cur += i;\n      \
    \  if (cur > sum) {\n            ans.push_back(i);\n            cur = i;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8yuodv5d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx6i4e669.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long min_sum = sum;\n    long max_sum = 0;\n   \
    \ for (long num : nums_copy) {\n        max_sum = std::max(max_sum, num);\n  \
    \      min_sum = std::min(min_sum, num);\n    }\n    std::vector<long> result;\n\
    \    for (long num : nums_copy) {\n        if (num == min_sum) {\n           \
    \ result.push_back(num);\n        } else if (num == max_sum) {\n            result.push_back(num);\n\
    \        } else {\n            result.push_back(num);\n            result.push_back(min_sum);\n\
    \            result.push_back(max_sum);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0wuvfyz6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    long temp = 0;\n    std::vector<long> nums_sorted\
    \ = nums;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum > 0) {\n            temp = sum;\n            sum = 0;\n     \
    \       for (long j = 0; j < nums.size(); j++) {\n                if (nums[j]\
    \ > temp) {\n                    temp = nums[j];\n                }\n        \
    \    }\n            nums_sorted.push_back(temp);\n        }\n    }\n    return\
    \ nums_sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppegn9pn1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    for (auto i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (auto i : nums) {\n        if (sum == i) {\n            result.push_back(i);\n\
    \        }\n        if (sum > i) {\n            result.push_back(i);\n       \
    \ }\n        if (sum < i) {\n            result.push_back(i);\n        }\n   \
    \ }\n    for (auto i : result) {\n        if (sum == i) {\n            result.push_back(i);\n\
    \        }\n        if (sum > i) {\n            result.push_back(i);\n       \
    \ }\n        if (sum < i) {\n            result.push_back(i);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm0ll8lnz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n  \
    \      nums2.push_back(i);\n    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long\
    \ a, long b) -> bool {\n        return sum - a + b < sum - b + a;\n    });\n \
    \   return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprtu31tgg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph24latya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \    }\n    long temp = 0;\n    std::vector<long> nums2;\n    for (long i : nums)\
    \ {\n        temp += i;\n        if (temp > sum) {\n            nums2.push_back(i);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpncy64dwt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for(long i=0;i<nums.size();i++){\n\
    \        long sum=0;\n        for(long j=0;j<nums.size();j++){\n            if(j==i){\n\
    \                continue;\n            }\n            sum+=nums[j];\n       \
    \ }\n        if(sum==0){\n            nums2.push_back(nums[i]);\n        }\n \
    \       else if(sum<0){\n            nums2.push_back(nums[i]);\n        }\n  \
    \      else{\n            nums2.push_back(-1);\n        }\n    }\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0n3oyb1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797616
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ count = 0;\n    long max = 0;\n    long min = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long \n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi_i1nhcg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [&sum](long a, long b) -> bool {\n        return sum - a <\
    \ sum - b;\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqqi7942p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    for (auto &num : nums) {\n   \
    \     long sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        nums2.push_back(sum);\n    }\n   \
    \ std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3e1q6hx9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    long max\
    \ = 0;\n    for (long i : nums2) {\n        if (sum > max) {\n            max\
    \ = sum;\n        }\n        sum += i;\n    }\n    long ans = max;\n    for (long\
    \ i : nums2) {\n        sum -= i;\n        if (sum > max) {\n            max =\
    \ sum;\n        }\n        sum += i;\n    }\n    ans = max;\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4oeen2_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    for (long long i : nums) {\n       \
    \ sum += i;\n    }\n    long long ans = sum;\n    for (long long i : nums) {\n\
    \        ans = ans - i;\n    }\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmv61uws5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    long temp = 0;\n    long index = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    long ans = 0;\n    long count = 0;\n    long\
    \ sum2 = 0;\n    long temp2 = 0;\n    long index2 = 0;\n    long max2 = 0;\n \
    \   long min2 = 0;\n    long ans2 = -1;\n    long count2 = 0;\n    long sum3 =\
    \ 0;\n    long temp3 = 0;\n    long index3 = 0;\n    long max3 = 0;\n    long\
    \ min3 = 0;\n    long ans3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n  \
    \  long temp4 = 0;\n    long index4 = 0;\n    long max4 = 0;\n    long min4 =\
    \ 0;\n    long ans4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long temp5\
    \ = 0;\n    long index5 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long\
    \ ans5 = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long temp6 = 0;\n \
    \   long index6 = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long ans6 =\
    \ 0;\n    long count6 = 0;\n    long sum7 = 0;\n    long temp7 = 0;\n    long\
    \ index7 = 0;\n    long max7 = 0;\n    long min7 = 0;\n    long ans7 = 0;\n  \
    \  long count7 = 0;\n    long sum8 = 0;\n    long temp8 = 0;\n    long index8\
    \ = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long ans8 = 0;\n    long count8\
    \ = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long index9 = 0;\n    long\
    \ max9 = 0;\n    long min9 = 0;\n    long ans9 = 0;\n    long count9 = 0;\n  \
    \  long sum10 = 0;\n    long temp10 = 0;\n    long index10 = 0;\n    long max10\
    \ = 0;\n    long min10 = 0;\n    long ans10 = 0;\n    long count10 = 0;\n    long\
    \ sum11 = 0;\n    long temp11 = 0;\n    long index11 = 0;\n    long max11 = 0;\n\
    \    long min11 = 0;\n    long ans11 = 0;\n    long count11 = 0;\n    long sum12\
    \ = 0;\n    long temp12 = 0;\n    long index12 = 0;\n    long max12 = 0;\n   \
    \ long min12 = 0;\n    long ans12 = 0;\n    long count12 = 0;\n    long sum13\
    \ = 0;\n    long temp13 = 0;\n    long index13 = 0;\n    long max13 = 0;\n   \
    \ long min13 = 0;\n    long ans13 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx108y8ww.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsSorted(nums.size());\n    long sum = 0;\n    for (long i : nums) {\n   \
    \     sum += i;\n        numsSorted[sum / 10] = i;\n    }\n    return numsSorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy14wm1oq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long i : nums_copy) {\n     \
    \   sum += i;\n    }\n    long max_sum = 0;\n    long max_index = 0;\n    for\
    \ (long i : nums_copy) {\n        if (sum == max_sum) {\n            max_index\
    \ = i;\n        }\n        max_sum = sum;\n    }\n    nums_copy.erase(nums_copy.begin()\
    \ + max_index);\n    nums_copy.insert(nums_copy.begin(), max_index);\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplvzi92gi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b) -> bool {\n        return a + b < 0;\n    });\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3s8ndvey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    long long max = 0;\n    long long min\
    \ = 0;\n    long long index = 0;\n    for (auto num : nums) {\n        sum +=\
    \ num;\n        if (sum > max) {\n            max = sum;\n        }\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (auto num : nums) {\n        sum += num;\n        if (sum == max)\
    \ {\n            ans.push_back(num);\n        }\n        if (sum == min) {\n \
    \           ans.push_back(num);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8jrtczpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b){return sum-a-b<0;});\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbzhgezmf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsSorted(nums.size());\n    for (size_t i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (size_t j = 0; j < nums.size(); j++) {\n  \
    \          if (i == j) {\n                continue;\n            }\n         \
    \   sum += nums[j];\n        }\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_7e2fbeb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a < sum\
    \ - b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx6i4e669.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ numsSorted(nums.size());\n    for (long i = 0; i < nums.size(); i++) {\n   \
    \     long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n      \
    \      if (i == j) {\n                continue;\n            }\n            sum\
    \ += nums[j];\n        }\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj395arbi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) {\n        return sum - a + b < sum - b\
    \ + a;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeqdg7d6n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \    }\n    std::vector<long> result;\n    for (long i : nums) {\n        if (sum\
    \ == i) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8xau0a1.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpf8xau0a1.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp:19:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : nums) {\n                   ^\n/tmp/tmpf8xau0a1.cpp: In function 'int main()':\n\
    /tmp/tmpf8xau0a1.cpp:28:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = order_by_points;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf8xau0a1.cpp:2:\n/tmp/tmpf8xau0a1.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpf8xau0a1.cpp:29:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf8xau0a1.cpp:29:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf8xau0a1.cpp:29:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf8xau0a1.cpp:2:\n/usr/include/c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) {\n        return sum - a + b < sum - a\
    \ + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ke9jro8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797615
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n  \
    \      nums2.push_back(i);\n    }\n    long maxSum = 0;\n    for (long i : nums2)\
    \ {\n        maxSum = max(maxSum, sum);\n    }\n    long index = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums2) {\n        sum += i;\n        if (sum == maxSum)\
    \ {\n            result.push_back(nums[index]);\n            index++;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphve_irrg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::abs(a) > std::abs(b);\n    });\n    return\
    \ nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsnxfipk3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> result;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end(), [&sum](long a, long b){return sum - a - b < 0;});\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpni7z0tfa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ ans;\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n    \
    \    ans.push_back(i);\n    }\n    long max_sum = 0;\n    for (long i : ans) {\n\
    \        max_sum = std::max(max_sum, sum);\n    }\n    std::vector<long> sorted_nums;\n\
    \    for (long i : ans) {\n        long sum = 0;\n        for (long j : nums)\
    \ {\n            sum += j;\n            if (sum == i) {\n                sorted_nums.push_back(j);\n\
    \            }\n        }\n    }\n    return sorted_nums;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3jun1u_c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (auto i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [sum](int a, int b) {\n        return sum - a + b < sum - a - b;\n\
    \    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc7cvo8fq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long last_sum = 0;\n    for (long num : nums_copy)\
    \ {\n        if (last_sum != sum) {\n            nums_copy.insert(nums_copy.begin(),\
    \ num);\n        }\n        last_sum = sum;\n    }\n    return nums_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9_lmr3ov.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long &num : nums) {\n        sum += num;\n\
    \        nums2.push_back(num);\n    }\n    std::sort(nums2.begin(), nums2.end(),\
    \ [&sum](long &a, long &b) -> bool {\n        return sum - a + b < 0;\n    });\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_1_30eun.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797617
