language: cpp
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 0) return res;\n    if (n == 1) return res;\n    if (n ==\
    \ 2) return res;\n    if (n % 2 == 0) {\n        res.push_back(n);\n        res.push_back(1\
    \ + n / 2);\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \  } else {\n        res.push_back(n);\n        res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        res.push_back(1 + n / 2);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_feloj76.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp_feloj76.cpp:27:34: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n/tmp/tmp_feloj76.cpp:27:34:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp_feloj76.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp_feloj76.cpp:27:45: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \    ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp_feloj76.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp_feloj76.cpp:27:45: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \    ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp_feloj76.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(0);\n        return result;\n\
    \    }\n    if (n == 1) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    if (n == 2) {\n        result.push_back(3);\n        return result;\n\
    \    }\n    long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    result.push_back(a);\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdnem7x3j.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpdnem7x3j.cpp:33:25: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n     long a = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1);\n                         ^\n/tmp/tmpdnem7x3j.cpp:33:25:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdnem7x3j.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdnem7x3j.cpp:33:36: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     long a = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1);\n                                    ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdnem7x3j.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdnem7x3j.cpp:33:36: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     long a = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1);\n                                    ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdnem7x3j.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, ty"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if(n<2)\n    {\n        res.push_back(n);\n        return res;\n \
    \   }\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n  \
    \  long sum = 0;\n    for(long i = 3; i <= n; ++i)\n    {\n        sum += i;\n\
    \        if(sum % 2 == 0)\n        {\n            a += i;\n        }\n       \
    \ else\n        {\n            b += i;\n        }\n    }\n    for(long i = 3;\
    \ i <= n; ++i)\n    {\n        sum += i;\n        if(sum % 2 == 1)\n        {\n\
    \            c += i;\n        }\n        else\n        {\n            d += i;\n\
    \        }\n    }\n    res.push_back(a);\n    res.push_back(b);\n    res.push_back(c);\n\
    \    res.push_back(d);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphx3o_804.cpp: In function 'int main()':\n/tmp/tmphx3o_804.cpp:62:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphx3o_804.cpp:2:\n/tmp/tmphx3o_804.cpp:63:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmphx3o_804.cpp:63:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmphx3o_804.cpp:63:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmphx3o_804.cpp:63:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphx3o_804.cpp:63:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphx3o_804.cpp:63:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphx3o_804.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 0, b = 1, c = 1;\n    long temp;\n    long count = 0;\n\
    \    long sum = 0;\n    long temp2;\n    long temp3;\n    long temp4;\n    long\
    \ temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n\
    \    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long\
    \ temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n\
    \    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long\
    \ temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n\
    \    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long\
    \ temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n\
    \    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long\
    \ temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n\
    \    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long\
    \ temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n\
    \    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long\
    \ temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n\
    \    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long\
    \ temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n\
    \    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long\
    \ temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n\
    \    long temp82;\n    long temp83;\n    long temp84;\n    long temp85\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdirskhb3.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpdirskhb3.cpp:109:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpdirskhb3.cpp: In function 'int main()':\n/tmp/tmpdirskhb3.cpp:111:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdirskhb3.cpp:2:\n/tmp/tmpdirskhb3.cpp:112:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpdirskhb3.cpp:112:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpdirskhb3.cpp:112:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpdirskhb3.cpp:112:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpdirskhb3.cpp:112:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpdirskhb3.cpp:112:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpdirskhb3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = a + b;\n    long d =\
    \ c + b;\n    long e = c + d;\n    long f = d + e;\n    long g = e + f;\n    long\
    \ h = f + g;\n    long i = g + h;\n    long j = h + i;\n    long k = i + j;\n\
    \    long l = j + k;\n    long m = k + l;\n    long n = l + m;\n    long o = m\
    \ + n;\n    long p = n + o;\n    long q = o + p;\n    long r = p + q;\n    long\
    \ s = q + r;\n    long t = r + s;\n    long u = s + t;\n    long v = t + u;\n\
    \    long w = u + v;\n    long x = v + w;\n    long y = w + x;\n    long z = x\
    \ + y;\n    long a = y + z;\n    long b = z + a;\n    long c = a + b;\n    result.push_back(c);\n\
    \    result.push_back(d);\n    result.push_back(e);\n    result.push_back(f);\n\
    \    result.push_back(g);\n    result.push_back(h);\n    result.push_back(i);\n\
    \    result.push_back(j);\n    result.push_back(k);\n    result.push_back(l);\n\
    \    result.push_back(m);\n    result.push_back(n);\n    result.push_back(o);\n\
    \    result.push_back(p);\n    result.push_back(q);\n    result.push_back(r);\n\
    \    result.push_back(s);\n    result.push_back(t);\n    result.push_back(u);\n\
    \    result.push_back(v);\n    result.push_back(w);\n    result.push_back(x);\n\
    \    result.push_back(y);\n    result.push_back(z);\n    result.push_back(a);\n\
    \    result.push_back(b);\n    result.push_back(c);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7c9ybqs3.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp7c9ybqs3.cpp:34:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = l + m;\n          ^\n/tmp/tmp7c9ybqs3.cpp:47:10: error: redeclaration\
    \ of 'long int a'\n     long a = y + z;\n          ^\n/tmp/tmp7c9ybqs3.cpp:21:10:\
    \ error: 'long int a' previously declared here\n     long a = 1;\n          ^\n\
    /tmp/tmp7c9ybqs3.cpp:48:10: error: redeclaration of 'long int b'\n     long b\
    \ = z + a;\n          ^\n/tmp/tmp7c9ybqs3.cpp:22:10: error: 'long int b' previously\
    \ declared here\n     long b = 2;\n          ^\n/tmp/tmp7c9ybqs3.cpp:49:10: error:\
    \ redeclaration of 'long int c'\n     long c = a + b;\n          ^\n/tmp/tmp7c9ybqs3.cpp:23:10:\
    \ error: 'long int c' previously declared here\n     long c = a + b;\n       \
    \   ^\n/tmp/tmp7c9ybqs3.cpp: In function 'int main()':\n/tmp/tmp7c9ybqs3.cpp:80:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp7c9ybqs3.cpp:2:\n/tmp/tmp7c9ybqs3.cpp:81:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp7c9ybqs3.cpp:81:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp7c9ybqs3.cpp:81:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp7c9ybqs3.cpp:81:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    long a = 3;\n    long b = 1;\n    long c = 2;\n    long d = 1;\n \
    \   long temp;\n    long tri_sum = 0;\n    long tri_sum_temp = 0;\n    long tri_sum_temp2\
    \ = 0;\n    long tri_sum_temp3 = 0;\n    long tri_sum_temp4 = 0;\n    long tri_sum_temp5\
    \ = 0;\n    long tri_sum_temp6 = 0;\n    long tri_sum_temp7 = 0;\n    long tri_sum_temp8\
    \ = 0;\n    long tri_sum_temp9 = 0;\n    long tri_sum_temp10 = 0;\n    long tri_sum_temp11\
    \ = 0;\n    long tri_sum_temp12 = 0;\n    long tri_sum_temp13 = 0;\n    long tri_sum_temp14\
    \ = 0;\n    long tri_sum_temp15 = 0;\n    long tri_sum_temp16 = 0;\n    long tri_sum_temp17\
    \ = 0;\n    long tri_sum_temp18 = 0;\n    long tri_sum_temp19 = 0;\n    long tri_sum_temp20\
    \ = 0;\n    long tri_sum_temp21 = 0;\n    long tri_sum_temp22 = 0;\n    long tri_sum_temp23\
    \ = 0;\n    long tri_sum_temp24 = 0;\n    long tri_sum_temp25 = 0;\n    long tri_sum_temp26\
    \ = 0;\n    long tri_sum_temp27 = 0;\n    long tri_sum_temp28 = 0;\n    long tri_sum_temp29\
    \ = 0;\n    long tri_sum_temp30 = 0;\n    long tri_sum_temp31 = 0;\n    long tri_sum_temp32\
    \ = 0;\n    long tri_sum_temp33 = 0;\n    long tri_sum_temp34 = 0;\n    long tri_sum_temp35\
    \ = 0;\n    long tri_sum_temp36 = 0;\n    long tri_sum_temp37 = 0;\n    long tri_sum_temp38\
    \ = 0;\n    long tri_sum_temp39 = 0;\n    long tri_sum_temp40 = 0;\n    long tri_sum_temp41\
    \ = 0;\n    long tri_sum_temp42 = 0;\n    long tri_sum_temp43 = 0;\n    long tri_sum_temp44\
    \ = 0;\n    long tri_sum_temp45 = 0;\n    long tri_sum_temp46 = 0;\n    long tri_sum_temp47\
    \ = 0;\n    long tri_sum_temp48 = 0;\n    long tri_sum_temp49 = 0;\n    long tri_sum_temp50\
    \ = 0;\n    long tri_sum_temp51 = 0;\n    long tri_sum_temp52 = 0;\n    long tri_sum_temp53\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk3xkd98.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpjk3xkd98.cpp:81:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmpjk3xkd98.cpp: In function 'int main()':\n/tmp/tmpjk3xkd98.cpp:83:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpjk3xkd98.cpp:2:\n/tmp/tmpjk3xkd98.cpp:84:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpjk3xkd98.cpp:84:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpjk3xkd98.cpp:84:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpjk3xkd98.cpp:84:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjk3xkd98.cpp:84:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjk3xkd98.cpp:84:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjk3xkd98.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _In"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 1)\n    {\n        result.push_back((long)3);\n    }\n\
    \    else if (n == 2)\n    {\n        result.push_back((long)1);\n        result.push_back((long)3);\n\
    \    }\n    else\n    {\n        long a = 1;\n        long b = 1;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n     \
    \   long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwzqch4ap.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpwzqch4ap.cpp:116:12: error: a function-definition is not allowed here\
    \ before '{' token\n int main() {\n            ^\n/tmp/tmpwzqch4ap.cpp:128:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = a + b;\n    long d =\
    \ c;\n    long e = d;\n    long f = e;\n    long g = f;\n    long h = g;\n   \
    \ long i = h;\n    long j = i;\n    long k = j;\n    long l = k;\n    long m =\
    \ l;\n    long n = m;\n    long o = n;\n    long p = o;\n    long q = p;\n   \
    \ long r = q;\n    long s = r;\n    long t = s;\n    long u = t;\n    long v =\
    \ u;\n    long w = v;\n    long x = w;\n    long y = x;\n    long z = y;\n   \
    \ long a = z;\n    long b = a;\n    long c = b;\n    long d = c;\n    long e =\
    \ d;\n    long f = e;\n    long g = f;\n    long h = g;\n    long i = h;\n   \
    \ long j = i;\n    long k = j;\n    long l = k;\n    long m = l;\n    long n =\
    \ m;\n    long o = n;\n    long p = o;\n    long q = p;\n    long r = q;\n   \
    \ long s = r;\n    long t = s;\n    long u = t;\n    long v = u;\n    long w =\
    \ v;\n    long x = w;\n    long y = x;\n    long z = y;\n    long a = z;\n   \
    \ long b = a;\n    long c = b;\n    long d = c;\n    long e = d;\n    long f =\
    \ e;\n    long g = f;\n    long h = g;\n    long i = h;\n    long j = i;\n   \
    \ long k = j;\n    long l = k;\n    long m = l;\n    long n = m;\n    long o =\
    \ n;\n    long p = o;\n    long q = p;\n    long r = q;\n    long s = r;\n   \
    \ long t = s;\n    long u = t;\n    long v = u;\n    long w = v;\n    long x =\
    \ w;\n    long y = x;\n    long z = y;\n    long a = z;\n    long b = a;\n   \
    \ long c = b;\n    long d = c;\n    long e = d;\n    long f = e;\n    long g =\
    \ f;\n    long h = g;\n    long i = h;\n    long j = i;\n    long k = j;\n   \
    \ long l = k;\n    long m = l;\n    long n = m;\n    long o = n;\n    long p =\
    \ o;\n    long q = p;\n    long r = q;\n    long s = \n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwh4bvmlk.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpwh4bvmlk.cpp:34:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = m;\n          ^\n/tmp/tmpwh4bvmlk.cpp:47:10: error: redeclaration\
    \ of 'long int a'\n     long a = z;\n          ^\n/tmp/tmpwh4bvmlk.cpp:21:10:\
    \ error: 'long int a' previously declared here\n     long a = 1;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:48:10: error: redeclaration of 'long int b'\n     long b\
    \ = a;\n          ^\n/tmp/tmpwh4bvmlk.cpp:22:10: error: 'long int b' previously\
    \ declared here\n     long b = 2;\n          ^\n/tmp/tmpwh4bvmlk.cpp:49:10: error:\
    \ redeclaration of 'long int c'\n     long c = b;\n          ^\n/tmp/tmpwh4bvmlk.cpp:23:10:\
    \ error: 'long int c' previously declared here\n     long c = a + b;\n       \
    \   ^\n/tmp/tmpwh4bvmlk.cpp:50:10: error: redeclaration of 'long int d'\n    \
    \ long d = c;\n          ^\n/tmp/tmpwh4bvmlk.cpp:24:10: error: 'long int d' previously\
    \ declared here\n     long d = c;\n          ^\n/tmp/tmpwh4bvmlk.cpp:51:10: error:\
    \ redeclaration of 'long int e'\n     long e = d;\n          ^\n/tmp/tmpwh4bvmlk.cpp:25:10:\
    \ error: 'long int e' previously declared here\n     long e = d;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:52:10: error: redeclaration of 'long int f'\n     long f\
    \ = e;\n          ^\n/tmp/tmpwh4bvmlk.cpp:26:10: error: 'long int f' previously\
    \ declared here\n     long f = e;\n          ^\n/tmp/tmpwh4bvmlk.cpp:53:10: error:\
    \ redeclaration of 'long int g'\n     long g = f;\n          ^\n/tmp/tmpwh4bvmlk.cpp:27:10:\
    \ error: 'long int g' previously declared here\n     long g = f;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:54:10: error: redeclaration of 'long int h'\n     long h\
    \ = g;\n          ^\n/tmp/tmpwh4bvmlk.cpp:28:10: error: 'long int h' previously\
    \ declared here\n     long h = g;\n          ^\n/tmp/tmpwh4bvmlk.cpp:55:10: error:\
    \ redeclaration of 'long int i'\n     long i = h;\n          ^\n/tmp/tmpwh4bvmlk.cpp:29:10:\
    \ error: 'long int i' previously declared here\n     long i = h;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:56:10: error: redeclaration of 'long int j'\n     long j\
    \ = i;\n          ^\n/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 1)\n        result.push_back((long)3);\n    else if (n\
    \ % 2 == 0)\n        result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    else\n        result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n    return result;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq30577k8.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpq30577k8.cpp:24:41: error: invalid cast from type 'std::vector<long int>'\
    \ to type 'long int'\n         result.push_back((long)tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                         ^\n/tmp/tmpq30577k8.cpp:26:41:\
    \ error: invalid cast from type 'std::vector<long int>' to type 'long int'\n \
    \        result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n - 3));\n     \
    \                                    ^\n/tmp/tmpq30577k8.cpp: In function 'int\
    \ main()':\n/tmp/tmpq30577k8.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = tri;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq30577k8.cpp:2:\n/tmp/tmpq30577k8.cpp:31:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpq30577k8.cpp:31:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpq30577k8.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpq30577k8.cpp:31:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpq30577k8.cpp:31:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpq30577k8.cpp:31:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a +\
    \ b + c;\n    long temp;\n    if (n % 2 == 0) {\n        temp = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        result.push_back(temp);\n    }\n    else {\n   \
    \     temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.push_back(temp);\n\
    \        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3gmwzev.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpq3gmwzev.cpp:27:27: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         temp = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                           ^\n/tmp/tmpq3gmwzev.cpp:27:27:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpq3gmwzev.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpq3gmwzev.cpp:27:38: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         temp = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                      ^\nIn\
    \ file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpq3gmwzev.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpq3gmwzev.cpp:27:38: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         temp = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                      ^\nIn\
    \ file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpq3gmwzev.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_ValArray, _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 0) return res;\n    if (n == 1) return res;\n    if (n ==\
    \ 2) return res;\n    if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1);\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptn7e9d14.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmptn7e9d14.cpp:24:39: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n     if (n % 2 == 0) return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1);\n                                    \
    \   ^\n/tmp/tmptn7e9d14.cpp:24:39: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n           \
    \      from /tmp/tmptn7e9d14.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1: note:\
    \ template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant, std::_ValArray,\
    \ _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type> std::operator+(const\
    \ _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+, __plus)\n ^\n\
    /usr/include/c++/4.8.2/valarray:1167:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmptn7e9d14.cpp:24:50: note:   'std::vector<long int>' is not\
    \ derived from 'const std::valarray<_Tp>'\n     if (n % 2 == 0) return tri(n -\
    \ 1) + tri(n - 2) + tri(n - 1);\n                                            \
    \      ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmptn7e9d14.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmptn7e9d14.cpp:24:50: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     if (n % 2 == 0) return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1);\n                                    \
    \              ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmptn7e9d14.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 0;\n    long b = 3;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long \n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hp8nep7.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp4hp8nep7.cpp:110:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp4hp8nep7.cpp: In function 'int main()':\n/tmp/tmp4hp8nep7.cpp:112:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4hp8nep7.cpp:2:\n/tmp/tmp4hp8nep7.cpp:113:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp4hp8nep7.cpp:113:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp4hp8nep7.cpp:113:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp4hp8nep7.cpp:113:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4hp8nep7.cpp:113:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp4hp8nep7.cpp:113:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp4hp8nep7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    long a = 0, b = 1, c = 1;\n    long sum = 0;\n    long temp;\n   \
    \ long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n\
    \    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long\
    \ temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n\
    \    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long\
    \ temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n\
    \    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long\
    \ temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n\
    \    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long\
    \ temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n\
    \    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long\
    \ temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n\
    \    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long\
    \ temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n\
    \    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long\
    \ temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n\
    \    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long\
    \ temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n\
    \    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long\
    \ temp83;\n    long temp84;\n    long temp85;\n    long \n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bfj3zvi.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp3bfj3zvi.cpp:109:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp3bfj3zvi.cpp: In function 'int main()':\n/tmp/tmp3bfj3zvi.cpp:111:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp3bfj3zvi.cpp:2:\n/tmp/tmp3bfj3zvi.cpp:112:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp3bfj3zvi.cpp:112:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp3bfj3zvi.cpp:112:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp3bfj3zvi.cpp:112:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3bfj3zvi.cpp:112:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3bfj3zvi.cpp:112:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3bfj3zvi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 3;\n    long b = 1;\n    long c = 2;\n    long d = 1;\n\
    \    long temp;\n    long tri_sum = 0;\n    long tri_sum2 = 0;\n    long tri_sum3\
    \ = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n\
    \    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long\
    \ tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12 = 0;\n    long tri_sum13\
    \ = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 = 0;\n    long tri_sum16 =\
    \ 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n\
    \    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n    long tri_sum22 = 0;\n \
    \   long tri_sum23 = 0;\n    long tri_sum24 = 0;\n    long tri_sum25 = 0;\n  \
    \  long tri_sum26 = 0;\n    long tri_sum27 = 0;\n    long tri_sum28 = 0;\n   \
    \ long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long\
    \ tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34 = 0;\n    long tri_sum35\
    \ = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 = 0;\n    long tri_sum38 =\
    \ 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n\
    \    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n    long tri_sum44 = 0;\n \
    \   long tri_sum45 = 0;\n    long tri_sum46 = 0;\n    long tri_sum47 = 0;\n  \
    \  long tri_sum48 = 0;\n    long tri_sum49 = 0;\n    long tri_sum50 = 0;\n   \
    \ long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long\
    \ tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56 = 0;\n    long tri_sum57\
    \ = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 = 0;\n    long tri_sum60 =\
    \ 0;\n    long tri_sum61\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg0442t1.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpsg0442t1.cpp:87:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpsg0442t1.cpp: In function 'int main()':\n/tmp/tmpsg0442t1.cpp:89:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpsg0442t1.cpp:2:\n/tmp/tmpsg0442t1.cpp:90:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpsg0442t1.cpp:90:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpsg0442t1.cpp:90:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpsg0442t1.cpp:90:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsg0442t1.cpp:90:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpsg0442t1.cpp:90:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpsg0442t1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Input"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 3;\n    long b = 0;\n    long c = 0;\n    long d = 1;\n\
    \    long temp;\n    long sum = 0;\n    long temp2;\n    long temp3;\n    long\
    \ temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n\
    \    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long\
    \ temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n\
    \    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long\
    \ temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n\
    \    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long\
    \ temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n\
    \    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long\
    \ temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n\
    \    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long\
    \ temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n\
    \    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long\
    \ temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n\
    \    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long\
    \ temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n\
    \    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long\
    \ temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n\
    \    long temp81;\n    long temp82;\n    long temp83;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3itj480.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpg3itj480.cpp:110:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpg3itj480.cpp: In function 'int main()':\n/tmp/tmpg3itj480.cpp:112:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpg3itj480.cpp:2:\n/tmp/tmpg3itj480.cpp:113:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpg3itj480.cpp:113:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpg3itj480.cpp:113:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpg3itj480.cpp:113:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg3itj480.cpp:113:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg3itj480.cpp:113:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg3itj480.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 1;\n \
    \   long temp;\n    long tri_sum = 0;\n    long tri_sum2 = 0;\n    long tri_sum3\
    \ = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n\
    \    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long\
    \ tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12 = 0;\n    long tri_sum13\
    \ = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 = 0;\n    long tri_sum16 =\
    \ 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n\
    \    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n    long tri_sum22 = 0;\n \
    \   long tri_sum23 = 0;\n    long tri_sum24 = 0;\n    long tri_sum25 = 0;\n  \
    \  long tri_sum26 = 0;\n    long tri_sum27 = 0;\n    long tri_sum28 = 0;\n   \
    \ long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long\
    \ tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34 = 0;\n    long tri_sum35\
    \ = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 = 0;\n    long tri_sum38 =\
    \ 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n\
    \    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n    long tri_sum44 = 0;\n \
    \   long tri_sum45 = 0;\n    long tri_sum46 = 0;\n    long tri_sum47 = 0;\n  \
    \  long tri_sum48 = 0;\n    long tri_sum49 = 0;\n    long tri_sum50 = 0;\n   \
    \ long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long\
    \ tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56 = 0;\n    long tri_sum57\
    \ = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 = 0;\n    long tri_sum60 =\
    \ 0;\n    long tri_sum61\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9qj11cvx.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp9qj11cvx.cpp:87:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmp9qj11cvx.cpp: In function 'int main()':\n/tmp/tmp9qj11cvx.cpp:89:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9qj11cvx.cpp:2:\n/tmp/tmp9qj11cvx.cpp:90:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp9qj11cvx.cpp:90:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp9qj11cvx.cpp:90:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp9qj11cvx.cpp:90:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9qj11cvx.cpp:90:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9qj11cvx.cpp:90:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9qj11cvx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Input"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 0, b = 1, c = 1;\n    long sum = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplomqvne0.cpp: In function 'int main()':\n/tmp/tmplomqvne0.cpp:108:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmplomqvne0.cpp:2:\n/tmp/tmplomqvne0.cpp:109:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmplomqvne0.cpp:109:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmplomqvne0.cpp:109:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmplomqvne0.cpp:109:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplomqvne0.cpp:109:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplomqvne0.cpp:109:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplomqvne0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(0);\n        result.push_back(1);\n\
    \        result.push_back(1);\n        return result;\n    }\n    if (n == 1)\
    \ {\n        result.push_back(0);\n        result.push_back(1);\n        return\
    \ result;\n    }\n    if (n == 2) {\n        result.push_back(0);\n        result.push_back(1);\n\
    \        result.push_back(2);\n        return result;\n    }\n    if (n % 2 ==\
    \ 0) {\n        result.push_back(tri(n - 1) + tri(n - 2));\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        result.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3));\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1av2h77.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpx1av2h77.cpp:39:37: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                     ^\n/tmp/tmpx1av2h77.cpp:39:37:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpx1av2h77.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpx1av2h77.cpp:39:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                                ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpx1av2h77.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpx1av2h77.cpp:39:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                                ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpx1av2h77.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Val"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        result.push_back((long)3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmm1uuc1r.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpmm1uuc1r.cpp:26:37: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                     ^\n/tmp/tmpmm1uuc1r.cpp:26:37:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpmm1uuc1r.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpmm1uuc1r.cpp:26:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpmm1uuc1r.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpmm1uuc1r.cpp:26:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpmm1uuc1r.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Ex"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = a + b;\n    long d =\
    \ c;\n    long e = d;\n    long f = e;\n    long g = f;\n    long h = g;\n   \
    \ long i = h;\n    long j = i;\n    long k = j;\n    long l = k;\n    long m =\
    \ l;\n    long n = m;\n    long o = n;\n    long p = o;\n    long q = p;\n   \
    \ long r = q;\n    long s = r;\n    long t = s;\n    long u = t;\n    long v =\
    \ u;\n    long w = v;\n    long x = w;\n    long y = x;\n    long z = y;\n   \
    \ long a = z;\n    long b = a;\n    long c = b;\n    long d = c;\n    long e =\
    \ d;\n    long f = e;\n    long g = f;\n    long h = g;\n    long i = h;\n   \
    \ long j = i;\n    long k = j;\n    long l = k;\n    long m = l;\n    long n =\
    \ m;\n    long o = n;\n    long p = o;\n    long q = p;\n    long r = q;\n   \
    \ long s = r;\n    long t = s;\n    long u = t;\n    long v = u;\n    long w =\
    \ v;\n    long x = w;\n    long y = x;\n    long z = y;\n    long a = z;\n   \
    \ long b = a;\n    long c = b;\n    long d = c;\n    long e = d;\n    long f =\
    \ e;\n    long g = f;\n    long h = g;\n    long i = h;\n    long j = i;\n   \
    \ long k = j;\n    long l = k;\n    long m = l;\n    long n = m;\n    long o =\
    \ n;\n    long p = o;\n    long q = p;\n    long r = q;\n    long s = r;\n   \
    \ long t = s;\n    long u = t;\n    long v = u;\n    long w = v;\n    long x =\
    \ w;\n    long y = x;\n    long z = y;\n    long a = z;\n    long b = a;\n   \
    \ long c = b;\n    long d = c;\n    long e = d;\n    long f = e;\n    long g =\
    \ f;\n    long h = g;\n    long i = h;\n    long j = i;\n    long k = j;\n   \
    \ long l = k;\n    long m = l;\n    long n = m;\n    long o = n;\n    long p =\
    \ o;\n    long q = p;\n    long r = q;\n    long s = \n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwh4bvmlk.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpwh4bvmlk.cpp:34:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = m;\n          ^\n/tmp/tmpwh4bvmlk.cpp:47:10: error: redeclaration\
    \ of 'long int a'\n     long a = z;\n          ^\n/tmp/tmpwh4bvmlk.cpp:21:10:\
    \ error: 'long int a' previously declared here\n     long a = 1;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:48:10: error: redeclaration of 'long int b'\n     long b\
    \ = a;\n          ^\n/tmp/tmpwh4bvmlk.cpp:22:10: error: 'long int b' previously\
    \ declared here\n     long b = 2;\n          ^\n/tmp/tmpwh4bvmlk.cpp:49:10: error:\
    \ redeclaration of 'long int c'\n     long c = b;\n          ^\n/tmp/tmpwh4bvmlk.cpp:23:10:\
    \ error: 'long int c' previously declared here\n     long c = a + b;\n       \
    \   ^\n/tmp/tmpwh4bvmlk.cpp:50:10: error: redeclaration of 'long int d'\n    \
    \ long d = c;\n          ^\n/tmp/tmpwh4bvmlk.cpp:24:10: error: 'long int d' previously\
    \ declared here\n     long d = c;\n          ^\n/tmp/tmpwh4bvmlk.cpp:51:10: error:\
    \ redeclaration of 'long int e'\n     long e = d;\n          ^\n/tmp/tmpwh4bvmlk.cpp:25:10:\
    \ error: 'long int e' previously declared here\n     long e = d;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:52:10: error: redeclaration of 'long int f'\n     long f\
    \ = e;\n          ^\n/tmp/tmpwh4bvmlk.cpp:26:10: error: 'long int f' previously\
    \ declared here\n     long f = e;\n          ^\n/tmp/tmpwh4bvmlk.cpp:53:10: error:\
    \ redeclaration of 'long int g'\n     long g = f;\n          ^\n/tmp/tmpwh4bvmlk.cpp:27:10:\
    \ error: 'long int g' previously declared here\n     long g = f;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:54:10: error: redeclaration of 'long int h'\n     long h\
    \ = g;\n          ^\n/tmp/tmpwh4bvmlk.cpp:28:10: error: 'long int h' previously\
    \ declared here\n     long h = g;\n          ^\n/tmp/tmpwh4bvmlk.cpp:55:10: error:\
    \ redeclaration of 'long int i'\n     long i = h;\n          ^\n/tmp/tmpwh4bvmlk.cpp:29:10:\
    \ error: 'long int i' previously declared here\n     long i = h;\n          ^\n\
    /tmp/tmpwh4bvmlk.cpp:56:10: error: redeclaration of 'long int j'\n     long j\
    \ = i;\n          ^\n/"
  stdout: ''
