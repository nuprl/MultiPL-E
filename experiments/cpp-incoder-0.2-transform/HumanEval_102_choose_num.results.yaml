language: cpp
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid+1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpixqd915r: /tmp/tmpixqd915r.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x > 0 && y > 0) {\n        long mid = (x +\
    \ y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8uao7ees: /tmp/tmp8uao7ees.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans =\
    \ choose_num(mid + 1, y);\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        ans = choose_num(y, mid);\n        if (ans == -1) {\n   \
    \         ans = choose_num(x, mid + 1);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = mid;\n    } else if (mid <= y) {\n        ans = x;\n    } else {\n       \
    \ ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_k2rstbx: /tmp/tmp_k2rstbx.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplri9_3uq: /tmp/tmplri9_3uq.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpf_opb2aj: /tmp/tmpf_opb2aj.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = x;\n            break;\n        }\n        x++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp76f17ogr: /tmp/tmp76f17ogr.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    long diff = x - mid;\n   \
    \ if (diff > y) {\n        diff = y - mid;\n        ans = mid;\n    }\n    if\
    \ (diff > 0 && diff < y) {\n        ans = mid;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmohmf5ng: /tmp/tmpmohmf5ng.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpptpmwyjd: /tmp/tmpptpmwyjd.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n  \
    \      if (mid%2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        if (mid%2 == 1) {\n            y = mid;\n        }\n        else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa1hmwa58: /tmp/tmpa1hmwa58.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            break;\n     \
    \   }\n        if (mid%2 != 0) {\n            y = mid;\n        }\n        else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpskm3gaoy: /tmp/tmpskm3gaoy.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n  \
    \          x = x + 1;\n        } else {\n            y = y - 1;\n        }\n \
    \   }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpodzh6gab: /tmp/tmpodzh6gab.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (y > x) {\n        long temp = y;\n        y\
    \ = x;\n        x = temp;\n    }\n    while (y) {\n        long mid = y / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        y = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpykzupxjq: /tmp/tmpykzupxjq.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid > 0 && mid < y) {\n\
    \        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmt1pobvp: /tmp/tmpmt1pobvp.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    for (long i = x; i <= y; i++) {\n        if (i\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppixm7qlg: /tmp/tmppixm7qlg.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4y97pogh: /tmp/tmp4y97pogh.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == 0) {\n        return y;\n    }\n    if\
    \ (y == 0) {\n        return x;\n    }\n    while (x % 2 == 0 && y % 2 == 0) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x ==\
    \ y) {\n        return x;\n    }\n    while (x % 2 == 0) {\n        x = x / 2;\n\
    \    }\n    while (y % 2 == 0) {\n        y = y / 2;\n    }\n    while (x < y)\
    \ {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    ans\
    \ = x;\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0z16x41a: /tmp/tmp0z16x41a.cpp:48: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    while (x+y <= y) {\n\
    \        if (x%2 == 0) {\n            ans = x;\n            break;\n        }\n\
    \        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprvetf853: /tmp/tmprvetf853.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    while (x != y) {\n        if (x % 2 == 0) {\n\
    \            x = x / 2;\n            ans = ans * 2 + x;\n        } else {\n  \
    \          y = y / 2;\n            ans = ans * 2 + y;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6ixgdfw4: /tmp/tmp6ixgdfw4.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgwl_os1f: /tmp/tmpgwl_os1f.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n  \
    \      if (mid%2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        if (mid%2 != 0) {\n            y = mid;\n        }\n        else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdc41q42j: /tmp/tmpdc41q42j.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    if (x <= y) {\n        long\
    \ mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1my9v1ng: /tmp/tmp1my9v1ng.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n    \
    \    ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe01zx_14: /tmp/tmpe01zx_14.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpptpmwyjd: /tmp/tmpptpmwyjd.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgwl_os1f: /tmp/tmpgwl_os1f.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + (y-x)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgkba4kwi: /tmp/tmpgkba4kwi.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuer1ypgk: /tmp/tmpuer1ypgk.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid * mid > ans) {\n            ans = mid;\n        }\n        if\
    \ (mid * mid > y) {\n            y = mid;\n        }\n        if (mid * mid <\
    \ x) {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpb3vfzufb: /tmp/tmpb3vfzufb.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x > 0 && y > 0) {\n        long mid = (x +\
    \ y) / 2;\n        if (mid > 0 && mid < y) {\n            ans = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp07nqmipy: /tmp/tmp07nqmipy.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = mid;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n     \
    \   ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpub11enli: /tmp/tmpub11enli.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return mid;\n\
    \    }\n    if (mid % 2 == 1) {\n        return -1;\n    }\n    return choose_num(x,\
    \ mid);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmeewayw7: /tmp/tmpmeewayw7.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long xx = x;\n    long yy = y;\n    long temp;\n    while\
    \ (xx <= yy) {\n        temp = xx;\n        xx = yy;\n        yy = temp;\n   \
    \ }\n    while (xx >= yy) {\n        if (xx % 2 == 0) {\n            ans = xx;\n\
    \            break;\n        }\n        xx /= 2;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmm_ye7w0: /tmp/tmpmm_ye7w0.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    long diff = x - mid;\n   \
    \ if (diff > 0 && mid < y) {\n        ans = mid;\n    } else if (diff < 0 && mid\
    \ > y) {\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbkm4gvm7: /tmp/tmpbkm4gvm7.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 ||\
    \ y == 0) {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 ==\
    \ 0) {\n        ans = x;\n    }\n    // y must be even\n    if (y % 2 == 0) {\n\
    \        ans = y;\n    }\n    // x must be smaller than y\n    if (x != y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // x must\
    \ be smaller than y\n    if (x == 0 || y == 0) {\n        return -1;\n    }\n\
    \    // x must be even\n    if (x % 2 == 0) {\n        ans = x;\n    }\n    //\
    \ y must be even\n    if (y % 2 == 0) {\n        ans = y;\n    }\n    // x must\
    \ be smaller than y\n    if (x != y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 ||\
    \ y == 0) {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 ==\
    \ 0) {\n        ans = x;\n    }\n    // y must be even\n    if (y % 2 == 0) {\n\
    \        ans = y;\n    }\n    // x must be smaller than y\n    if (x != y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // x must\
    \ be smaller than y\n    if (x == 0 || y == 0) {\n        return -1;\n    }\n\
    \    // x must be even\n    if (x % 2 == 0) {\n        ans = x;\n    }\n    //\
    \ y must be even\n    if (y % 2 == 0) {\n        ans = y;\n    }\n    // x must\
    \ be smaller than y\n    if (x != y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 ||\
    \ y == 0) {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 ==\
    \ 0) {\n        ans = x;\n    }\n    // y must be even\n    if (y % 2 == 0) {\n\
    \        ans = y;\n    }\n    // x must be smaller than y\n    if (x != y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // x must\
    \ be smaller than y\n    if (x == 0 || y == 0) {\n        return -1;\n    }\n\
    \    // x must be even\n    if (x % 2 == 0) {\n        ans = x;\n    }\n    //\
    \ y must be even\n    if (y % 2 == 0) {\n        ans = y;\n    }\n    // x must\
    \ be smaller than y\n    if (x != y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 ||\
    \ y == 0) {\n        return -1;\n    }\n    // x must be \n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphk2ocujq: /tmp/tmphk2ocujq.cpp:134: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0)\
    \ {\n        ans = mid;\n    } else {\n        if (mid < x || mid > y) {\n   \
    \         ans = mid;\n        } else {\n            ans = choose_num(x, mid);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzlbnwgx2: /tmp/tmpzlbnwgx2.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgwl_os1f: /tmp/tmpgwl_os1f.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    long temp = 0;\n    long div = 1;\n    while (y\
    \ != 0) {\n        temp = y;\n        y = x % y;\n        x = temp;\n        if\
    \ (y != 0) {\n            div++;\n        }\n    }\n    ans = x;\n    while (ans\
    \ % 2 == 0) {\n        ans /= 2;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvyoy9nbf: /tmp/tmpvyoy9nbf.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    while (x <= y) {\n\
    \        if (x % 2 == 0) {\n            ans = x;\n            break;\n       \
    \ }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_gxvc3fo: /tmp/tmp_gxvc3fo.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        swap(x, y);\n    }\n    while (x\
    \ <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x += 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph1epx8ag.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmph1epx8ag.cpp:14:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   14 |         swap(x, y);\n      |         ^~~~\n/tmp/tmph1epx8ag.cpp:14:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmph1epx8ag.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph1epx8ag.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmph1epx8ag.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmph1epx8ag.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu96hqijc: /tmp/tmpu96hqijc.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy4qdtrpq: /tmp/tmpy4qdtrpq.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n    \
    \    ans = mid;\n    } else {\n        if (x > mid) {\n            ans = choose_num(x,\
    \ mid);\n        } else {\n            ans = choose_num(mid + 1, y);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprrxbiqqi: /tmp/tmprrxbiqqi.cpp:28: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplri9_3uq: /tmp/tmplri9_3uq.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    while (x != y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x /= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpaw4b2ei2: /tmp/tmpaw4b2ei2.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (y) {\n        if (x % 2 == 0) {\n      \
    \      ans = y;\n            break;\n        }\n        y /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvrbdknle: /tmp/tmpvrbdknle.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n\
    \    if (mid % 2 == 0) {\n        ans = mid;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyaasn5hz: /tmp/tmpyaasn5hz.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x++ < y) {\n        if (x % 2 == 0) {\n\
    \            ans = x;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdhn4esny: /tmp/tmpdhn4esny.cpp:30: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0)\
    \ {\n        ans = mid;\n    } else {\n        if (mid > x) {\n            ans\
    \ = mid;\n        } else {\n            ans = x;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpszau8zq0: /tmp/tmpszau8zq0.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if ((x % 2) == 0) {\n\
    \            ans = x;\n            break;\n        }\n        ans = x + 1;\n \
    \       x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzca1_fw1: /tmp/tmpzca1_fw1.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(x,\
    \ mid);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbtaznbni: /tmp/tmpbtaznbni.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x != mid &&\
    \ y != mid && x % 2 == 0 && y % 2 == 0) {\n        if (x <= mid) {\n         \
    \   y = mid - 1;\n        } else {\n            x = mid + 1;\n        }\n    \
    \    mid = (x + y) / 2;\n    }\n    if (x == mid && y == mid) {\n        ans =\
    \ mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9jb218w_: /tmp/tmp9jb218w_.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        else if (mid % 2 != 0) {\n            y = mid;\n        }\n \
    \       else {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptvehrwev: /tmp/tmptvehrwev.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph5turbbj: /tmp/tmph5turbbj.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid+1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpixqd915r: /tmp/tmpixqd915r.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjt_e64m: /tmp/tmpgjt_e64m.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098660
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      long lcm = x * y / gcd(x, y);\n        long r = gcd(mid, x);\n        long\
    \ q = gcd(mid, y);\n        long m = lcm;\n        while (m != r) {\n        \
    \    long t = m;\n            m = r;\n            r = t;\n        }\n        long\
    \ k = m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *\
    \ m * m * m * m * m * m * m * m * m * m\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1uxu3xv.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpo1uxu3xv.cpp:15:28: error: \u2018gcd\u2019 was not declared\
    \ in this scope; did you mean \u2018std::gcd\u2019?\n   15 |         long lcm\
    \ = x * y / gcd(x, y);\n      |                            ^~~\n      |      \
    \                      std::gcd\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpo1uxu3xv.cpp:2:\n/usr/include/c++/9/numeric:132:5:\
    \ note: \u2018std::gcd\u2019 declared here\n  132 |     gcd(_Mn __m, _Nn __n)\
    \ noexcept\n      |     ^~~\n/tmp/tmpo1uxu3xv.cpp:25:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmpo1uxu3xv.cpp:26:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   26 | int main() {\n      |            ^\n/tmp/tmpo1uxu3xv.cpp:36:1: error:\
    \ expected \u2018}\u2019 at end of input\n   36 | }\n      | ^\n/tmp/tmpo1uxu3xv.cpp:11:33:\
    \ note: to match this \u2018{\u2019\n   11 | long choose_num(long x, long y) {\n\
    \      |                                 ^\n/tmp/tmpo1uxu3xv.cpp:36:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   36 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098720
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return mid;\n\
    \    } else {\n        if (mid < x || mid > y) {\n            return -1;\n   \
    \     } else {\n            return choose_num(x, mid);\n        }\n    }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbcmybkt9: /tmp/tmpbcmybkt9.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpptpmwyjd: /tmp/tmpptpmwyjd.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    if (x < y) {\n        long temp = x;\n     \
    \   x = y;\n        y = temp;\n    }\n    long ans = -1;\n    long mid = (x +\
    \ y) / 2;\n    while (x != mid && y != mid) {\n        if (x % 2 == 0 && y % 2\
    \ == 0) {\n            ans = mid;\n            break;\n        }\n        if (x\
    \ % 2 == 0) {\n            y = mid - 1;\n        } else {\n            x = mid\
    \ + 1;\n        }\n        mid = (x + y) / 2;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkn5myrur: /tmp/tmpkn5myrur.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        swap(x, y);\n    }\n    while (x\
    \ != y) {\n        if (x % 2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8v0j52o.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp_8v0j52o.cpp:14:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   14 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp_8v0j52o.cpp:14:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_8v0j52o.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_8v0j52o.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_8v0j52o.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp_8v0j52o.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + (y-x)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        x = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbjacxyfb: /tmp/tmpbjacxyfb.cpp:32: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    if (x == y) {\n        ans\
    \ = x;\n    } else if (x > y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = choose_num(x, mid);\n        } else {\n     \
    \       ans = choose_num(y, mid);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpr4sfdxt6: /tmp/tmpr4sfdxt6.cpp:36: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x != y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x /= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfogu1ynj: /tmp/tmpfogu1ynj.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + (y-x)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvnf3pjr6: /tmp/tmpvnf3pjr6.cpp:36: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098666
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long xx = x;\n    long yy = y;\n    long xy = x * y;\n\
    \    long xx = xx * x;\n    long yy = yy * y;\n    long xy = xy * x;\n    long\
    \ xx = xx * y;\n    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx\
    \ * y;\n    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n\
    \    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long\
    \ yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy\
    \ * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n\
    \    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long\
    \ xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long xy = xy\
    \ * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long xy = xy * y;\n\
    \    long xx = xx * y;\n    long yy = yy * y;\n    long xy = xy * y;\n    long\
    \ xx = xx * y;\n    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx\
    \ * y;\n    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n\
    \    long yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long\
    \ yy = yy * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy\
    \ * y;\n    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n\
    \    long xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long\
    \ xy = xy * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long xy = xy\
    \ * y;\n    long xx = xx * y;\n    long yy = yy * y;\n    long xy = xy * y;\n\
    \    long xx = xx * y;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynelc7cg.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpynelc7cg.cpp:16:10: error: redeclaration of \u2018long\
    \ int xx\u2019\n   16 |     long xx = xx * x;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:17:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   17 |     long yy = yy * y;\n      |         \
    \ ^~\n/tmp/tmpynelc7cg.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:18:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   18 |     long xy = xy *\
    \ x;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpynelc7cg.cpp:19:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   19 |     long xx = xx * y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:20:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   20 |     long yy = yy * y;\n      |         \
    \ ^~\n/tmp/tmpynelc7cg.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:21:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   21 |     long xy = xy *\
    \ y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpynelc7cg.cpp:22:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   22 |     long xx = xx * y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:23:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   23 |     long yy = yy * y;\n      |         \
    \ ^~\n/tmp/tmpynelc7cg.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpynelc7cg.cpp:24"
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2;\n    long y_even = y % 2;\n    if\
    \ (x_even > y_even) {\n        ans = x;\n    } else {\n        ans = y;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp40x_4r3n: /tmp/tmp40x_4r3n.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0)\
    \ {\n        ans = mid;\n    } else {\n        if (mid > x) {\n            ans\
    \ = mid;\n        } else {\n            ans = x;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpszau8zq0: /tmp/tmpszau8zq0.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4y97pogh: /tmp/tmp4y97pogh.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy4qdtrpq: /tmp/tmpy4qdtrpq.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    while (x % 2 == 0 && y % 2 == 0) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4_40moll: /tmp/tmp4_40moll.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n        ans\
    \ = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj_2j2pt6: /tmp/tmpj_2j2pt6.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && x <= y);\n    long ans = -1;\n    long mid = (x + y) / 2;\n\
    \    if (mid % 2 == 0) {\n        ans = mid;\n    }\n    else {\n        if (mid\
    \ > y) {\n            ans = mid;\n        }\n        else {\n            ans =\
    \ y;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5pihk406: /tmp/tmp5pihk406.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n       \
    \ ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphrnwxzmo: /tmp/tmphrnwxzmo.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n        ans\
    \ = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj_2j2pt6: /tmp/tmpj_2j2pt6.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    while (x % 2 == 0) {\n        x /= 2;\n       \
    \ ans++;\n    }\n    while (y % 2 == 0) {\n        y /= 2;\n        ans--;\n \
    \   }\n    if (ans == -1) {\n        return -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp84yx8pvx: /tmp/tmp84yx8pvx.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7w6o59jw: /tmp/tmp7w6o59jw.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph5turbbj: /tmp/tmph5turbbj.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ - min_num > 1) {\n        mid = (max_num + min_num) / 2;\n        if (mid %\
    \ 2 == 0) {\n            max_num = mid;\n        } else {\n            min_num\
    \ = mid;\n        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpynbyxvzq: /tmp/tmpynbyxvzq.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplri9_3uq: /tmp/tmplri9_3uq.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    long m = 1;\n    long n\
    \ = 1;\n    while (m <= y) {\n        ans = m;\n        m += n;\n        n +=\
    \ 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfbk3x2wq: /tmp/tmpfbk3x2wq.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid = (max_num + min_num)\
    \ / 2;\n    while (max_num != mid) {\n        if (max_num % 2 == 0) {\n      \
    \      max_num = max_num / 2;\n        } else {\n            max_num = max_num\
    \ / 2;\n        }\n    }\n    while (min_num != mid) {\n        if (min_num %\
    \ 2 == 0) {\n            min_num = min_num / 2;\n        } else {\n          \
    \  min_num = min_num / 2;\n        }\n    }\n    return max_num;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098727
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n\
    \    if (x <= mid) {\n        ans = x;\n    } else if (mid <= y) {\n        ans\
    \ = mid;\n    } else {\n        ans = y;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd2hwnc6_: /tmp/tmpd2hwnc6_.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    if (x <= y) {\n        long\
    \ mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpet0589dd: /tmp/tmpet0589dd.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if ((x % 2) == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + x) / 2;\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxsinzmx1: /tmp/tmpxsinzmx1.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long m = 1;\n    long n = y;\n    long k;\n    long t =\
    \ x;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long\
    \ z;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long w;\n    long\
    \ w;\n    long w;\n    long w;\n    \n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8e9w5po_.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp8e9w5po_.cpp:20:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   20 |     long x;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:21:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   21 |  \
    \   long y;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:23:10: error: redeclaration\
    \ of \u2018long int w\u2019\n   23 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:24:10: error: redeclaration of \u2018\
    long int w\u2019\n   24 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:25:10: error: redeclaration of \u2018\
    long int w\u2019\n   25 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:26:10: error: redeclaration of \u2018\
    long int w\u2019\n   26 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:27:10: error: redeclaration of \u2018\
    long int w\u2019\n   27 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:28:10: error: redeclaration of \u2018\
    long int w\u2019\n   28 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:29:10: error: redeclaration of \u2018\
    long int w\u2019\n   29 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   19 |     long w;\n\
    \      |          ^\n/tmp/tmp8e9w5po_.cpp:30:10: error: redeclaration of \u2018\
    long int w\u2019\n   30 |     long w;\n      |          ^\n/tmp/tmp8e9w5po_.cpp:19:10:\
    \ note: \u2018long int "
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n  \
    \          x = x + 1;\n        } else {\n            y = y - 1;\n        }\n \
    \   }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpodzh6gab: /tmp/tmpodzh6gab.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if (x+2 == y) {\n  \
    \          ans = x;\n            break;\n        }\n        ans = x+1;\n     \
    \   x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwdl1dqzk: /tmp/tmpwdl1dqzk.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2;\n    long y_even = y % 2;\n    if\
    \ (x_even > y_even) {\n        ans = x;\n    } else {\n        ans = y;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp40x_4r3n: /tmp/tmp40x_4r3n.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long xx = x;\n    long yy = y;\n    long xy = x * y;\n\
    \    long xx = xx * xx;\n    long yy = yy * yy;\n    long xy = xy * xy;\n    long\
    \ xx = xx * xy;\n    long yy = yy * xy;\n    long xx = xx * yy;\n    long yy =\
    \ yy * xx;\n    long xy = xy * xx;\n    long xx = xx * yy;\n    long yy = yy *\
    \ xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n\
    \    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long\
    \ xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy =\
    \ yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx *\
    \ yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n\
    \    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long\
    \ yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx =\
    \ xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy *\
    \ xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n\
    \    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long\
    \ xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy =\
    \ yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx *\
    \ yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n\
    \    long xx = xx * yy;\n    long yy = yy * xx;\n    \n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpveviomi1.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpveviomi1.cpp:16:10: error: redeclaration of \u2018long\
    \ int xx\u2019\n   16 |     long xx = xx * xx;\n      |          ^~\n/tmp/tmpveviomi1.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpveviomi1.cpp:17:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   17 |     long yy = yy * yy;\n      |        \
    \  ^~\n/tmp/tmpveviomi1.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpveviomi1.cpp:18:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   18 |     long xy = xy *\
    \ xy;\n      |          ^~\n/tmp/tmpveviomi1.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpveviomi1.cpp:19:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   19 |     long xx = xx * xy;\n      |          ^~\n/tmp/tmpveviomi1.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpveviomi1.cpp:20:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   20 |     long yy = yy * xy;\n      |        \
    \  ^~\n/tmp/tmpveviomi1.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpveviomi1.cpp:21:10:\
    \ error: redeclaration of \u2018long int xx\u2019\n   21 |     long xx = xx *\
    \ yy;\n      |          ^~\n/tmp/tmpveviomi1.cpp:13:10: note: \u2018long int xx\u2019\
    \ previously declared here\n   13 |     long xx = x;\n      |          ^~\n/tmp/tmpveviomi1.cpp:22:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   22 |     long yy = yy *\
    \ xx;\n      |          ^~\n/tmp/tmpveviomi1.cpp:14:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpveviomi1.cpp:23:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   23 |     long xy = xy *\
    \ xx;\n      |          ^~\n/tmp/tmpveviomi1.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpveviomi"
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7nnl73ry: /tmp/tmp7nnl73ry.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        x = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpolv917go: /tmp/tmpolv917go.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n        long\
    \ a = choose_num(x, mid);\n        long b = choose_num(mid + 1, y);\n        if\
    \ (a > b) {\n            ans = a;\n        } else {\n            ans = b;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_teylx09: /tmp/tmp_teylx09.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2;\n    long y_even = y % 2;\n    if\
    \ (x_even > y_even) {\n        ans = x;\n    } else {\n        ans = y;\n    }\n\
    \    while (ans > 0 && ans < y) {\n        ans += 2;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpot6hts3j: /tmp/tmpot6hts3j.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x < y) {\n        if (x % 2 == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        x ++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppnq2ty2y: /tmp/tmppnq2ty2y.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpub8ny86t: /tmp/tmpub8ny86t.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplri9_3uq: /tmp/tmplri9_3uq.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu96hqijc: /tmp/tmpu96hqijc.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(mid,\
    \ y);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9tqbz9_z: /tmp/tmp9tqbz9_z.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        long mid = (x + y) /\
    \ 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        if (mid > y) {\n            y = mid;\n        } else {\n \
    \           x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp773o34wy: /tmp/tmp773o34wy.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu96hqijc: /tmp/tmpu96hqijc.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    long mid = (x + y) / 2;\n    while (x != mid &&\
    \ y != mid) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            ans = mid;\n\
    \            break;\n        } else if (x % 2 == 0) {\n            y = mid;\n\
    \        } else {\n            x = mid;\n        }\n        mid = (x + y) / 2;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_snyb13l: /tmp/tmp_snyb13l.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(mid,\
    \ y);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9tqbz9_z: /tmp/tmp9tqbz9_z.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    long left_x = x - mid;\n \
    \   long left_y = y - mid;\n    long right_x = x + mid;\n    long right_y = y\
    \ + mid;\n    long left_even = choose_num(left_x, left_y);\n    long right_even\
    \ = choose_num(right_x, right_y);\n    if (left_even != -1 && right_even != -1)\
    \ {\n        if (left_even > right_even) {\n            ans = left_even;\n   \
    \     } else {\n            ans = right_even;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098723
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ mid;\n        }\n    } else {\n        long mid = y + (x - y) / 2;\n       \
    \ ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n\
    \    long left = (x > y) ? x : y;\n    long right = (x > y) ? y : x;\n    if (left\
    \ % 2 == 0) {\n        ans = mid;\n    }\n    else if (right % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    else {\n        if (mid % 2 == 0) {\n           \
    \ ans = mid;\n        }\n        else {\n            ans = mid;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8mr44ste: /tmp/tmp8mr44ste.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(mid, y);\n        if (ans == -1) {\n            ans =\
    \ choose_num(x, mid);\n        }\n    } else {\n        long mid = y + (x - y)\
    \ / 2;\n        ans = choose_num(x, mid);\n        if (ans == -1) {\n        \
    \    ans = choose_num(y, mid);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n\
    \    if (x <= mid) {\n        ans = x;\n    } else if (mid <= y) {\n        ans\
    \ = mid;\n    } else {\n        ans = y;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd2hwnc6_: /tmp/tmpd2hwnc6_.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = x + (y - x) / 2;\n\
    \    if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(mid,\
    \ y);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd0sgi5w0: /tmp/tmpd0sgi5w0.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpub8ny86t: /tmp/tmpub8ny86t.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + (y -\
    \ x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        if (mid > y) {\n            y = mid;\n        } else {\n \
    \           x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6praimau: /tmp/tmp6praimau.cpp:36: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy4qdtrpq: /tmp/tmpy4qdtrpq.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n       \
    \ ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphrnwxzmo: /tmp/tmphrnwxzmo.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n    \
    \    ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else if (y <= mid) {\n            ans = mid;\n        } else {\n  \
    \          ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppod2pfak: /tmp/tmppod2pfak.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    if (x > y) {\n        long temp = x;\n     \
    \   x = y;\n        y = temp;\n    }\n    long ans = -1;\n    long mid = (x +\
    \ y) / 2;\n    long left = (x <= mid) ? x : mid;\n    long right = (y <= mid)\
    \ ? y : mid;\n    while (left <= right) {\n        long mid = (left + right) /\
    \ 2;\n        if (mid * mid <= x * x) {\n            ans = mid;\n            left\
    \ = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqrhfhz3w: /tmp/tmpqrhfhz3w.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = x;\n            break;\n        }\n        ans = x + 1;\n \
    \       x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqqq2agag: /tmp/tmpqqq2agag.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid * mid > ans) {\n            ans = mid;\n        }\n        if\
    \ (mid * mid > y) {\n            y = mid - 1;\n        } else {\n            x\
    \ = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098727
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid < y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5i7fz101: /tmp/tmp5i7fz101.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(mid,\
    \ y);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9tqbz9_z: /tmp/tmp9tqbz9_z.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu96hqijc: /tmp/tmpu96hqijc.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    } else {\n        return choose_num(mid,\
    \ y);\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9tqbz9_z: /tmp/tmp9tqbz9_z.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    if (x <= y) {\n        while\
    \ (x <= y) {\n            ans = x;\n            x += (x & 1);\n        }\n   \
    \ } else {\n        while (y <= x) {\n            ans = y;\n            y += (y\
    \ & 1);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098728
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      ans = choose_num(x, mid);\n        if (ans == -1) {\n            ans =\
    \ choose_num(mid + 1, y);\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        ans = choose_num(y, mid);\n        if (ans == -1) {\n   \
    \         ans = choose_num(x, mid + 1);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpub8ny86t: /tmp/tmpub8ny86t.cpp:35: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long xx = x;\n    long yy = y;\n    long xy = x * y;\n\
    \    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx\
    \ = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n\
    \    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy\
    \ = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n\
    \    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy\
    \ = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n\
    \    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx\
    \ = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n\
    \    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy\
    \ = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n\
    \    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy\
    \ = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n\
    \    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx\
    \ = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n\
    \    long yy = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy\
    \ = y * y;\n    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n\
    \    long xy = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy\
    \ = x * y;\n    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n\
    \    long xx = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx\
    \ = x * x;\n    long yy = y * y;\n    long xy = x * y;\n    long xx = \n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqjb3cb0.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpyqjb3cb0.cpp:16:10: error: redeclaration of \u2018long\
    \ int xx\u2019\n   16 |     long xx = x * x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:17:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   17 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmpyqjb3cb0.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:18:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   18 |     long xy = x * y;\n\
    \      |          ^~\n/tmp/tmpyqjb3cb0.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpyqjb3cb0.cpp:19:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   19 |     long xx = x * x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:20:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   20 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmpyqjb3cb0.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:21:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   21 |     long xy = x * y;\n\
    \      |          ^~\n/tmp/tmpyqjb3cb0.cpp:15:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   15 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpyqjb3cb0.cpp:22:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   22 |     long xx = x * x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:13:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   13 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:23:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   23 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmpyqjb3cb0.cpp:14:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   14 |     long yy = y;\n      |          ^~\n/tmp/tmpyqjb3cb0.cpp:24:10:\
    \ err"
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n    \
    \    ans = mid;\n    } else {\n        if (x > y) {\n            ans = choose_num(x,\
    \ mid);\n        } else {\n            ans = choose_num(mid, y);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpenrvu2_v: /tmp/tmpenrvu2_v.cpp:28: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n      \
    \  if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppra4_mp6: /tmp/tmppra4_mp6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n\
    \        }\n        else {\n            y = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx7o2saih: /tmp/tmpx7o2saih.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    long ans = -1;\n    long xx = x;\n    long yy\
    \ = y;\n    long xy = x * y;\n    long xx = xx * xx;\n    long yy = yy * yy;\n\
    \    long xy = xy * xy;\n    long xx = xx * xy;\n    long yy = yy * xy;\n    long\
    \ xx = xx * yy;\n    long yy = yy * xx;\n    long xy = xy * xx;\n    long xx =\
    \ xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy *\
    \ xx;\n    long xy = xy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n\
    \    long xx = xx * yy;\n    long yy = yy * xx;\n    long xy = xy * xx;\n    long\
    \ xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long yy =\
    \ yy * xx;\n    long xy = xy * xx;\n    long xx = xx * yy;\n    long yy = yy *\
    \ xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xy = xy * xx;\n\
    \    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n    long\
    \ yy = yy * xx;\n    long xy = xy * xx;\n    long xx = xx * yy;\n    long yy =\
    \ yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xy = xy *\
    \ xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx * yy;\n\
    \    long yy = yy * xx;\n    long xy = xy * xx;\n    long xx = xx * yy;\n    long\
    \ yy = yy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xy =\
    \ xy * xx;\n    long xx = xx * yy;\n    long yy = yy * xx;\n    long xx = xx *\
    \ yy;\n    long yy = yy * xx;\n    long xy = xy * xx;\n    long x\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxsgbxfx.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpmxsgbxfx.cpp:17:10: error: redeclaration of \u2018long\
    \ int xx\u2019\n   17 |     long xx = xx * xx;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:14:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   14 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:18:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   18 |     long yy = yy * yy;\n      |        \
    \  ^~\n/tmp/tmpmxsgbxfx.cpp:15:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   15 |     long yy = y;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:19:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   19 |     long xy = xy *\
    \ xy;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:16:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   16 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpmxsgbxfx.cpp:20:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   20 |     long xx = xx * xy;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:14:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   14 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:21:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   21 |     long yy = yy * xy;\n      |        \
    \  ^~\n/tmp/tmpmxsgbxfx.cpp:15:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   15 |     long yy = y;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:22:10:\
    \ error: redeclaration of \u2018long int xx\u2019\n   22 |     long xx = xx *\
    \ yy;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:14:10: note: \u2018long int xx\u2019\
    \ previously declared here\n   14 |     long xx = x;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:23:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   23 |     long yy = yy *\
    \ xx;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:15:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   15 |     long yy = y;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:24:10:\
    \ error: redeclaration of \u2018long int xy\u2019\n   24 |     long xy = xy *\
    \ xx;\n      |          ^~\n/tmp/tmpmxsgbxfx.cpp:16:10: note: \u2018long int xy\u2019\
    \ previously declared here\n   16 |     long xy = x * y;\n      |          ^~\n\
    /tmp/tmpmxsgbxf"
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    long left_x = x - mid;\n \
    \   long left_y = y - mid;\n    if (left_x < left_y) {\n        ans = mid;\n \
    \   } else {\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg17zeqlx: /tmp/tmpg17zeqlx.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n   \
    \ if (mid % 2 == 0) {\n        return mid;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe5t7n4lc: /tmp/tmpe5t7n4lc.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == 0 || y == 0) {\n        return -1;\n \
    \   }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2\
    \ == 0) {\n            ans = mid;\n            break;\n        }\n        mid\
    \ = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg8qe0pbw: /tmp/tmpg8qe0pbw.cpp:34: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if ((x % 2) == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5tpsl6bv: /tmp/tmp5tpsl6bv.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098665
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long max_num = x;\n    long min_num = y;\n    long mid;\n    while (max_num\
    \ < min_num) {\n        mid = (max_num + min_num) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplri9_3uq: /tmp/tmplri9_3uq.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpptpmwyjd: /tmp/tmpptpmwyjd.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098720
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n       \
    \ ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphrnwxzmo: /tmp/tmphrnwxzmo.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojyfl7ln: /tmp/tmpojyfl7ln.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans\
    \ = x;\n    } else {\n        ans = y;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptk0qhrau: /tmp/tmptk0qhrau.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098722
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 == 0;\n\
    \    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long y_odd\
    \ = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even = x %\
    \ 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even && y_even)\
    \ {\n                long x_odd = x % 2 == 1;\n                long y_odd = y\
    \ % 2 == 1;\n                if (x_odd && y_odd) {\n                    long x_even\
    \ = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n             \
    \       if (x_even && y_even) {\n                        long x_odd = x % 2 ==\
    \ 1;\n                        long y_odd = y % 2 == 1;\n                     \
    \   if (x_odd && y_odd) {\n                            long x_even = x % 2 ==\
    \ 0;\n                            long y_even = y % 2 == 0;\n                \
    \            if (x_even && y_even) {\n                                long x_odd\
    \ = x % 2 == 1;\n                                long y_odd = y % 2 == 1;\n  \
    \                              if (x_odd && y_odd) {\n                       \
    \             long x_even = x % 2 == 0;\n                                    long\
    \ y_even = y % 2 == 0;\n                                    if (x_even && y_even)\
    \ {\n                                        long x_odd = x % 2 == 1;\n      \
    \                                  long y_odd = y % 2 == 1;\n                \
    \                        if (x_odd && y_odd) {\n                             \
    \               long x_even = x % 2 == 0;\n                                  \
    \          long y_even = y % 2 == 0;\n                                       \
    \     if (x_even && y_even) {\n                                              \
    \  long x_odd = x % 2 == 1;\n                                                long\
    \ y_odd = y % 2 == 1;\n                                                if (x_odd\
    \ && y_odd) {\n                                                    long x_even\
    \ = x % 2 == 0;\n                                                    long y_even\
    \ = y % 2 == 0;\n                                                    if (x_even\
    \ && y_even) {\n                                                        long x_odd\
    \ = x % 2 == 1;\n                                                        long\
    \ y_odd = y % 2 == 1;\n                                                      \
    \  if (x_odd && y_odd) {\n                                                   \
    \         long x_even = x % 2 == 0;\n                                        \
    \                    long y_even = y % 2 == 0;\n                             \
    \                               if (x_even && y_even) {\n                    \
    \                                            long x_odd = x % 2 == 1;\n      \
    \                                                          long y_odd = y % 2\
    \ == 1;\n                                                                if (x_odd\
    \ && y_odd) {\n                                                              \
    \      long x_even = x % 2 == 0;\n                                           \
    \                         long y_even = y % 2 == 0;\n                        \
    \                                            if (x_even && y_even) {\n       \
    \                                                                 long x_odd =\
    \ x % 2 == 1;\n                                                              \
    \          long y_od\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp5zkeaz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvp5zkeaz.cpp:66:1: error: expected initializer before \u2018\
    }\u2019 token\n   66 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:67:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   67 | int main() {\n     \
    \ |            ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:60:85: note: to match\
    \ this \u2018{\u2019\n   60 |                                                \
    \                 if (x_odd && y_odd) {\n      |                             \
    \                                                        ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:57:83:\
    \ note: to match this \u2018{\u2019\n   57 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:54:77:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:51:75:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpvp5zkeaz.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:48:69:\
    \ note: to match this \u2018{\u2019\n   48 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpvp5zkeaz.cpp:77:1: error: expected\
    \ \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpvp5zkeaz.cpp:45:67:\
    \ note: to match this \u2018{\u2019\n   45"
  stdout: ''
  timestamp: 1660098661
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  assert(x >= 0 && y >= 0);\n    if (x < y) {\n        long temp = x;\n     \
    \   x = y;\n        y = temp;\n    }\n    long ans = -1;\n    long x_div = x /\
    \ 2;\n    long y_div = y / 2;\n    while (x_div * x_div + y_div * y_div <= x *\
    \ y) {\n        if (x_div * x_div + y_div * y_div == x * y) {\n            ans\
    \ = x_div * x_div + y_div * y_div;\n            break;\n        }\n        long\
    \ temp = x_div;\n        x_div = y_div;\n        y_div = temp;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098728
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  // Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    while (x <= y) {\n\
    \        if (x % 2 == 0) {\n            ans = x;\n            break;\n       \
    \ }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_gxvc3fo: /tmp/tmp_gxvc3fo.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n\
    \        if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n \
    \       }\n        else {\n            y = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo3pdn7o8: /tmp/tmpo3pdn7o8.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    long ans = -1;\n    while (x % 2 == 0) {\n        x /= 2;\n       \
    \ ans++;\n    }\n    while (y % 2 == 0) {\n        y /= 2;\n        ans--;\n \
    \   }\n    if (ans == -1) {\n        return -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp84yx8pvx: /tmp/tmp84yx8pvx.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098721
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x%2 == 0) {\n   \
    \         ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp57y122ve: /tmp/tmp57y122ve.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + y / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n   \
    \     }\n        if (mid > y) {\n            y = mid;\n        } else {\n    \
    \        x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd73kry00: /tmp/tmpd73kry00.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x+1 < y) {\n        if (x+2 > y) {\n   \
    \         ans = x;\n            break;\n        }\n        ans = x+1;\n      \
    \  x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp60qla3wi: /tmp/tmp60qla3wi.cpp:32: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098723
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n\
    // >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n  \
    \  long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n  \
    \      if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu96hqijc: /tmp/tmpu96hqijc.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098661
