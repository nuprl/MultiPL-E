language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp64rzg812.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for(auto &x: lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr5c_0f20.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0yed3dkp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprj4gcjc7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8rd_tsyp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr349y6d_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here.\n\
    \    long sum = 0;\n    long n = lst.size();\n    long i = 0;\n    long sum_squares\
    \ = 0;\n    while(i < n) {\n        sum += lst[i];\n        sum_squares += lst[i]\
    \ * lst[i];\n        i++;\n    }\n    return sum_squares/n;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzuaada61.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long)((double)m * m);\n        m += lst.at(i);\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp182efccd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_b516lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long long)m * m;\n        m += lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiqxvjg79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for (auto i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8_ngbkjd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    long temp;\n    long i;\n  \
    \  for(i = 0; i < n; i++) {\n        temp = ceil(lst[i] * lst[i]);\n        sum\
    \ += temp;\n        sum_squares += temp * temp;\n    }\n    return sum_squares;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr6f56qw5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzq_7lzby.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for(auto &x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpecda6njj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long i = 0;\n    long sum_squares = 0;\n    while (i <\
    \ n) {\n        sum += lst[i];\n        sum_squares += lst[i] * lst[i];\n    \
    \    i++;\n    }\n    return sum_squares/n;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz431rxmv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f*f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpehwiiep4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += std::round(f * f);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp49fe18g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  sum += std::pow(static_cast<double>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpno5e8ob_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += lst[i] * lst[i];\n        sum_squares += lst[i] * lst[i];\n\
    \    }\n    return sum_squares/n;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0kkhlxvk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprj4gcjc7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpexgg0j_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += lst[i] *\
    \ lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6v4x8hd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwk9vcjva.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndjy2glf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += std::round(std::pow(x, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp82d7zrjq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += std::pow(m, 2);\n        m += lst[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpruan25fj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += std::round(f * f);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp49fe18g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    long sq = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        sq += lst[i] * lst[i];\n    }\n    sum = round(sq);\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe7c0hj13.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4t6xc_8u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(std::abs(f), 2));\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdym0w83t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjr3008fb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpubkor5ey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long)((double)m * m);\n        m += lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46b6maqn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for (long long i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiby3ntqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(std::abs(f), 2));\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdym0w83t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  sum += std::pow(static_cast<long long>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbwxkbda4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpieer3hck.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    long sq = 0;\n    long i;\n\
    \    for(i = 0; i < n; i++) {\n        sq = sq + pow(m, 2);\n        m = lst[i];\n\
    \    }\n    sum = sq;\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7l622ht1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    long n = lst.size();\n    long sum_squares = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        sum += lst[i] * lst[i];\n        sum_squares +=\
    \ lst[i] * lst[i];\n    }\n    return sum_squares/n;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0j3mta_h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += std::round(std::sqrt(x * x));\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprp5y_r39.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    long sum_squares_temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3\
    \ = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long\
    \ temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n\
    \    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14\
    \ = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n   \
    \ long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21\
    \ = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n   \
    \ long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28\
    \ = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n   \
    \ long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35\
    \ = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n   \
    \ long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42\
    \ = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n   \
    \ long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49\
    \ = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n   \
    \ long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56\
    \ = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n   \
    \ long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63\
    \ = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n   \
    \ long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70\
    \ = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n   \
    \ long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77\
    \ = 0;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8r_yovao.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppepjhlhq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(std::abs(f), 2));\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdym0w83t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for (long long i = 0; i < n; i++) {\n     \
    \   sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3jv7zq1h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_b516lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float x : lst) {\n        sum += std::round(std::pow(x, 2));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwrig9gnx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f*f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpehwiiep4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::sqrt(f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8yhlo1xu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  ans += lst[i] * lst[i];\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwoud1fq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here\n\
    \    long sum = 0;\n    long n = lst.size();\n    long sum_squares = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        sum += lst[i] * lst[i];\n        sum_squares +=\
    \ lst[i] * lst[i];\n    }\n    return sum_squares;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_o7m51pr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    long sum_squares = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        sum += std::round(m * m);\n        sum_squares\
    \ += std::round(m * m);\n        m += lst[i];\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxxeth153.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 1; i < n; i++)\
    \ {\n        sum += (lst[i] - m) * (lst[i] - m);\n        m = lst[i];\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpis0b52oa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += pow(m, 2);\n        m += lst[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwex0pbai.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto &i : lst) {\n        sum += std::round(std::ceil(i) * std::ceil(i));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbydqcggi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp34d6ogqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndjy2glf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += std::round(std::pow(x, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp82d7zrjq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 1; i < n; i++)\
    \ {\n        sum += std::pow(m, i);\n        m = std::ceil(m / 10.0);\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc3y1c8pc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto &x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv3mybqd8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto &x : lst) {\n        sum += std::round(std::pow(x, 2));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiy7ypmg1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for(auto &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprx1g5wmp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += std::round(std::pow(std::abs(x), 2.0f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp99by3edj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(std::abs(f), 2));\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdym0w83t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkp2n93eb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long)((double)m * m);\n        m += lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46b6maqn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    long sum_square = 0;\n    long\
    \ sum_square_round = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down\
    \ = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n\
    \    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long\
    \ sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up\
    \ = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n\
    \    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long\
    \ sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down\
    \ = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n\
    \    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long\
    \ sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up\
    \ = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n\
    \    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long\
    \ sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down\
    \ = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n\
    \    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long\
    \ sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up\
    \ = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n\
    \    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long\
    \ sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down\
    \ = 0;\n    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n\
    \    long sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long\
    \ sum_square_round_up = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up\
    \ = 0;\n    long sum_square_round_down = 0;\n    long sum_square_round_up = 0;\n\
    \n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7f79fauy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    long n = lst.size();\n    for(long i = 0; i < n; i++) {\n\
    \        sum += std::pow(static_cast<double>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprokowjmp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  sum += std::pow(static_cast<double>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpno5e8ob_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    long i;\n    for (i = 0; i <\
    \ n; i++) {\n        sum += lst[i] * lst[i];\n        sum_squares += lst[i] *\
    \ lst[i];\n    }\n    return sum_squares/n;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvzmrgxxo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpskqjrmj5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for (long i = 0; i < n; i++) {\n        sum += lst[i] *\
    \ lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4inb1u_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpubkor5ey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprj4gcjc7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    long sum_squares = 0;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long sum_squares_temp = 0;\n \
    \   long sum_squares_temp_temp = 0;\n    long sum_squares_temp_temp_temp = 0;\n\
    \    long sum_squares_temp_temp_temp_temp = 0;\n    long sum_squares_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  \
    \  long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n  \
    \  long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\
    \    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_squares_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sum_square\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeas1_g8n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  sum += std::pow(static_cast<long long>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbwxkbda4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 1; i < n; i++)\
    \ {\n        sum += std::pow(m, 2);\n        m += lst[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpitf79bpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn0x8dg2u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::sqrt(f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8yhlo1xu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_b516lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpubkor5ey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp64rzg812.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    long temp;\n    for (long i\
    \ = 0; i < n; i++) {\n        temp = std::ceil(lst[i] * lst[i]);\n        sum\
    \ += temp;\n        sum_squares += temp * temp;\n    }\n    return sum_squares;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr5dfe38h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_b516lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for (long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnq7z3bbb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += std::round(std::ceil(i * i));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqvmzexf8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for(long long i = 0; i < n; i++) {\n      \
    \  sum += std::pow(static_cast<double>(lst[i]), 2);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpno5e8ob_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for (float x : lst) {\n        sum += x * x;\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpctw6zlvu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += std::round(f * f);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp49fe18g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here\n\
    \    long sum = 0;\n    for (float f : lst) {\n        sum += std::round(f * f);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4b7sz9i3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float x : lst) {\n        sum += std::round(std::pow(x, 2));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwrig9gnx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long)((lst[i] - m) * (lst[i] - m));\n        m = lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwlvyhq64.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(std::abs(f), 2));\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdym0w83t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0yed3dkp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here\n\
    \    long long sum = 0;\n    for (float x : lst) {\n        sum += std::round(std::ceil(x\
    \ * x));\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfjuuqcvz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for(auto &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph3ce2tuf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpskqjrmj5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += std::round(f * f);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp49fe18g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for (long long i = 0; i < n; i++) {\n     \
    \   sum += std::round(lst[i] * lst[i]);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwmhnys_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprj4gcjc7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f*f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpehwiiep4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float f : lst) {\n        sum += std::round(std::ceil(f));\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprkkokk6c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy_s0tv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp34d6ogqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwu55izbh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (auto &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg1vepij6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprj4gcjc7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long sum_squares = 0;\n    long i;\n    for (i = 0; i <\
    \ n; i++) {\n        sum += lst[i] * lst[i];\n        sum_squares += lst[i] *\
    \ lst[i];\n    }\n    return sum_squares/n;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvzmrgxxo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8rd_tsyp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8rd_tsyp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_b516lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for (float f : lst) {\n        sum += std::round(std::ceil(f) * std::ceil(f));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppepjhlhq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xfk57ki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0n84n621.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here\n\
    \    long sum = 0;\n    for (float x : lst) {\n        sum += x * x;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu1sl28vu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1h5f1pt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt2ikgsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjr3008fb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::ceil(f*f));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpehwiiep4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += std::round(f * f);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp49fe18g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   long long n = lst.size();\n    for (long long i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiby3ntqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp64rzg812.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    long n = lst.size();\n    for(long i = 0; i < n; i++) {\n\
    \        sum += std::pow(std::ceil(lst[i]), 2);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptowmy6uv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(std::pow(f, 2));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvwd5hyz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpexgg0j_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660062208
