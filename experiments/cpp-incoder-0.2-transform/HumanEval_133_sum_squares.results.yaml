language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2pu9rui.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp_2pu9rui.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp_2pu9rui.cpp:\
    \ In function 'int main()':\n/tmp/tmp_2pu9rui.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sum_squares;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_2pu9rui.cpp:2:\n/tmp/tmp_2pu9rui.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp_2pu9rui.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp_2pu9rui.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp_2pu9rui.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_2pu9rui.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_2pu9rui.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimyz35ux.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpimyz35ux.cpp:19:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) {\n              ^\n/tmp/tmpimyz35ux.cpp:22:5: error: expected ';' before\
    \ 'return'\n     return ans;\n     ^\n/tmp/tmpimyz35ux.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpimyz35ux.cpp:22:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpimyz35ux.cpp:22:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpimyz35ux.cpp:22:5: error: expected ')' before 'return'\n\
    /tmp/tmpimyz35ux.cpp: In function 'int main()':\n/tmp/tmpimyz35ux.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpimyz35ux.cpp:2:\n/tmp/tmpimyz35ux.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpimyz35ux.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpimyz35ux.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpimyz35ux.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpimyz35ux.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpimyz35ux.cpp:2:\n/usr/include/c++/4.8.2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcli5vqo.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpwcli5vqo.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpwcli5vqo.cpp:20:16:\
    \ error: 'round' is not a member of 'std'\n         sum += std::round(f * f);\n\
    \                ^\n/tmp/tmpwcli5vqo.cpp:20:16: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpwcli5vqo.cpp: In function 'int main()':\n/tmp/tmpwcli5vqo.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:2:\n/tmp/tmpwcli5vqo.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcli5vqo.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n \
    \   for(auto &x: lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk222tm2o.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpk222tm2o.cpp:19:15: error: ISO C++ forbids declaration of 'x' with no\
    \ type [-fpermissive]\n     for(auto &x: lst) {\n               ^\n/tmp/tmpk222tm2o.cpp:19:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &x: lst) {\n                  ^\n/tmp/tmpk222tm2o.cpp: In function 'int main()':\n\
    /tmp/tmpk222tm2o.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk222tm2o.cpp:2:\n/tmp/tmpk222tm2o.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpk222tm2o.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpk222tm2o.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpk222tm2o.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk222tm2o.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk222tm2o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Inpu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcli5vqo.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpwcli5vqo.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpwcli5vqo.cpp:20:16:\
    \ error: 'round' is not a member of 'std'\n         sum += std::round(f * f);\n\
    \                ^\n/tmp/tmpwcli5vqo.cpp:20:16: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpwcli5vqo.cpp: In function 'int main()':\n/tmp/tmpwcli5vqo.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:2:\n/tmp/tmpwcli5vqo.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcli5vqo.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5yqdve1s.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp5yqdve1s.cpp:19:16: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n     for (auto &i : lst) {\n                ^\n/tmp/tmp5yqdve1s.cpp:19:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &i : lst) {\n                    ^\n/tmp/tmp5yqdve1s.cpp: In function 'int main()':\n\
    /tmp/tmp5yqdve1s.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5yqdve1s.cpp:2:\n/tmp/tmp5yqdve1s.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp5yqdve1s.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp5yqdve1s.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp5yqdve1s.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5yqdve1s.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5yqdve1s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmj9n8xfp.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpmj9n8xfp.cpp:19:15: error: ISO C++ forbids declaration of 'x' with no\
    \ type [-fpermissive]\n     for(auto &x : lst) {\n               ^\n/tmp/tmpmj9n8xfp.cpp:19:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &x : lst) {\n                   ^\n/tmp/tmpmj9n8xfp.cpp: In function 'int main()':\n\
    /tmp/tmpmj9n8xfp.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmj9n8xfp.cpp:2:\n/tmp/tmpmj9n8xfp.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpmj9n8xfp.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpmj9n8xfp.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpmj9n8xfp.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmj9n8xfp.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmj9n8xfp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _I"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for(auto &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd93hfcfg.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpd93hfcfg.cpp:19:15: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n     for(auto &i : lst) {\n               ^\n/tmp/tmpd93hfcfg.cpp:19:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &i : lst) {\n                   ^\n/tmp/tmpd93hfcfg.cpp: In function 'int main()':\n\
    /tmp/tmpd93hfcfg.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd93hfcfg.cpp:2:\n/tmp/tmpd93hfcfg.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpd93hfcfg.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpd93hfcfg.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpd93hfcfg.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpd93hfcfg.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpd93hfcfg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _I"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpklpn5ai3.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpklpn5ai3.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpklpn5ai3.cpp:\
    \ In function 'int main()':\n/tmp/tmpklpn5ai3.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sum_squares;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpklpn5ai3.cpp:2:\n/tmp/tmpklpn5ai3.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpklpn5ai3.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpklpn5ai3.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpklpn5ai3.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpklpn5ai3.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpklpn5ai3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1el_ls8w.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp1el_ls8w.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp1el_ls8w.cpp:22:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmp1el_ls8w.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp1el_ls8w.cpp:22:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp1el_ls8w.cpp:22:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp1el_ls8w.cpp:22:5: error: expected ')' before 'return'\n\
    /tmp/tmp1el_ls8w.cpp: In function 'int main()':\n/tmp/tmp1el_ls8w.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1el_ls8w.cpp:2:\n/tmp/tmp1el_ls8w.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp1el_ls8w.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp1el_ls8w.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1el_ls8w.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1el_ls8w.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1el_ls8w.cpp:2:\n/usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here.\n\
    \    long sum = 0;\n    long n = lst.size();\n    long i = 0;\n    long sum_squares\
    \ = 0;\n    while(i < n) {\n        sum += lst[i];\n        sum_squares += lst[i]\
    \ * lst[i];\n        i++;\n    }\n    return sum_squares/n;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwmqcm7ed.cpp: In function 'int main()':\n/tmp/tmpwmqcm7ed.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwmqcm7ed.cpp:2:\n/tmp/tmpwmqcm7ed.cpp:32:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwmqcm7ed.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwmqcm7ed.cpp:32:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwmqcm7ed.cpp:32:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwmqcm7ed.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwmqcm7ed.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwmqcm7ed.cpp:2:\n/tmp/tmpwmqcm7ed.cpp:32:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2pu9rui.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp_2pu9rui.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp_2pu9rui.cpp:\
    \ In function 'int main()':\n/tmp/tmp_2pu9rui.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sum_squares;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_2pu9rui.cpp:2:\n/tmp/tmp_2pu9rui.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp_2pu9rui.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp_2pu9rui.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp_2pu9rui.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_2pu9rui.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_2pu9rui.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcli5vqo.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpwcli5vqo.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpwcli5vqo.cpp:20:16:\
    \ error: 'round' is not a member of 'std'\n         sum += std::round(f * f);\n\
    \                ^\n/tmp/tmpwcli5vqo.cpp:20:16: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpwcli5vqo.cpp: In function 'int main()':\n/tmp/tmpwcli5vqo.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:2:\n/tmp/tmpwcli5vqo.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcli5vqo.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcli5vqo.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpwcli5vqo.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpwcli5vqo.cpp:20:16:\
    \ error: 'round' is not a member of 'std'\n         sum += std::round(f * f);\n\
    \                ^\n/tmp/tmpwcli5vqo.cpp:20:16: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpwcli5vqo.cpp: In function 'int main()':\n/tmp/tmpwcli5vqo.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:2:\n/tmp/tmpwcli5vqo.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcli5vqo.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long)((double)m * m);\n        m += lst.at(i);\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpft6ywlgy.cpp: In function 'int main()':\n/tmp/tmpft6ywlgy.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpft6ywlgy.cpp:2:\n/tmp/tmpft6ywlgy.cpp:29:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpft6ywlgy.cpp:29:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpft6ywlgy.cpp:29:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpft6ywlgy.cpp:29:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpft6ywlgy.cpp:29:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpft6ywlgy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpft6ywlgy.cpp:2:\n/tmp/tmpft6ywlgy.cpp:29:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n \
    \   for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoj9xlfxa.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpoj9xlfxa.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpoj9xlfxa.cpp:\
    \ In function 'int main()':\n/tmp/tmpoj9xlfxa.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sum_squares;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoj9xlfxa.cpp:2:\n/tmp/tmpoj9xlfxa.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpoj9xlfxa.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpoj9xlfxa.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpoj9xlfxa.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpoj9xlfxa.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpoj9xlfxa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    long m = lst.front();\n    for (long i = 0; i < n; i++)\
    \ {\n        sum += (long long)m * m;\n        m += lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pcweq5q.cpp: In function 'int main()':\n/tmp/tmp4pcweq5q.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4pcweq5q.cpp:2:\n/tmp/tmp4pcweq5q.cpp:29:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp4pcweq5q.cpp:29:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp4pcweq5q.cpp:29:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp4pcweq5q.cpp:29:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4pcweq5q.cpp:29:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4pcweq5q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4pcweq5q.cpp:2:\n/tmp/tmp4pcweq5q.cpp:29:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for\
    \ (float f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcli5vqo.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpwcli5vqo.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpwcli5vqo.cpp:20:16:\
    \ error: 'round' is not a member of 'std'\n         sum += std::round(f * f);\n\
    \                ^\n/tmp/tmpwcli5vqo.cpp:20:16: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpwcli5vqo.cpp: In function 'int main()':\n/tmp/tmpwcli5vqo.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcli5vqo.cpp:2:\n/tmp/tmpwcli5vqo.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpwcli5vqo.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcli5vqo.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwcli5vqo.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for (auto i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5s5wpb3h.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp5s5wpb3h.cpp:20:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp5s5wpb3h.cpp:23:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmp5s5wpb3h.cpp:23:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp5s5wpb3h.cpp:23:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp5s5wpb3h.cpp:23:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp5s5wpb3h.cpp:23:5: error: expected ')' before 'return'\n\
    /tmp/tmp5s5wpb3h.cpp: In function 'int main()':\n/tmp/tmp5s5wpb3h.cpp:26:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5s5wpb3h.cpp:2:\n/tmp/tmp5s5wpb3h.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp5s5wpb3h.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp5s5wpb3h.cpp:27:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp5s5wpb3h.cpp:27:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5s5wpb3h.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5s5wpb3h.cpp:2:\n/usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for(long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwt7jsa8.cpp: In function 'int main()':\n/tmp/tmpfwt7jsa8.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfwt7jsa8.cpp:2:\n/tmp/tmpfwt7jsa8.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpfwt7jsa8.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpfwt7jsa8.cpp:27:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpfwt7jsa8.cpp:27:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfwt7jsa8.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfwt7jsa8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfwt7jsa8.cpp:2:\n/tmp/tmpfwt7jsa8.cpp:27:78: no"
  stdout: ''
