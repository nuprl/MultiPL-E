name: HumanEval_22_filter_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given list of any\
  \ python values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"\
  a\", (std::string)3.14, (std::string)5})))\n// (std::vector<long>({(long)5}))\n\
  // >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(),\
  \ std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n\
  std::vector<long> filter_integers(std::vector<std::any> values) {\n"
tests: "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(),\
  \ std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n\
  \    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) ==\
  \ (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> out;\n    for(auto value : values) {\n      \
    \  if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for (auto i : values) {\n        if\
    \ (std::holds_alternative<long>(i)) {\n            out.push_back(std::get<long>(i));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<long>>(value)[0]);\n\
    \        } else {\n            out.emplace_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto v: values) {\n  \
    \      if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::get<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ &value : values) {\n        if (value.type() == typeid(long)) {\n          \
    \  out.push_back(value.as<long>());\n        }\n    }\n    return out;", "   \
    \ std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::get<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(v.type()\
    \ == typeid(long)) {\n            out.push_back(v);\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<std::vector<long>>(value)) {\n            for(auto\
    \ item : std::get<std::vector<long>>(value)) {\n                if(std::holds_alternative<long>(item))\
    \ {\n                    result.push_back(std::get<long>(item));\n           \
    \     }\n            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ out;\n    for(auto v: values) {\n        if(v.type() == typeid(int)) {\n   \
    \         out.push_back((long)v.as<int>());\n        }\n    }\n    return out;",
  "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto v: values) {\n    \
    \    if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<int64_t>(value)) {\n  \
    \          result.push_back(std::any_cast<int64_t>(value));\n        } else if(std::holds_alternative<uint64_t>(value))\
    \ {\n            result.push_back(std::any_cast<uint64_t>(value));\n        }\
    \ else if(std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\
    \ // TODO: add support for std::map<std::string,std::string>\n        } else if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::vector<long>>(value)); //\
    \ TODO: add support for std::vector<std::map<std::string,std::string>>\n     \
    \   } else {\n            throw std::runtime_error(\"Unsupported type\");\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<std::vector<long>>(value))\
    \ {\n            for (auto val : std::get<std::vector<long>>(value)) {\n     \
    \           result.push_back(val);\n            }\n        } else if (std::holds_alternative<std::vector<std::map<long,long>>>(value))\
    \ {\n            for (auto val : std::get<std::vector<std::map<long,long>>>(value))\
    \ {\n                result.push_back(std::get<long>(val));\n            }\n \
    \       } else if (std::holds_alternative<std::map<long,long>>(value)) {\n   \
    \         for (auto val : std::get<std::map<long,long>>(value)) {\n          \
    \      result.push_back(std::get<long>(val));\n            }\n        } else if\
    \ (std::holds_alternative<std::string>(value)) {\n            result.push_back(std::get<std::string>(value));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            for (auto val : std::get<std::vector<std::any>>(value)) {\n     \
    \           result.push_back(filter_integers(val));\n            }\n        }\
    \ else {\n            result.push_back(std::any_cast<long>(value));\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (auto value\
    \ : values) {\n        if (std::holds_alternative<long>(value)) {\n          \
    \  result.push_back(std::get<long>(value));\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<int64_t>(value))\
    \ {\n            result.push_back(std::any_cast<int64_t>(value));\n        } else\
    \ if(std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\n\
    \        } else if(std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       result.push_back(std::any_cast<std::vector<long>>(value));\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for (auto\
    \ &v : values) {\n        if (std::holds_alternative<long>(v)) {\n           \
    \ out.push_back(std::any_cast<long>(v));\n        }\n    }\n    return out;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> out;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::get<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for (auto &v : values) {\n        if\
    \ (v.type() == typeid(int)) {\n            out.push_back((long)v.as<int>());\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::get<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            for(auto item : std::get<std::vector<long>>(value)) {\n     \
    \           if(std::holds_alternative<long>(item)) {\n                    result.push_back(std::get<long>(item));\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::get<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for (auto &v : values)\
    \ {\n        if (std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<std::vector<long>>(v)) {\n \
    \           auto vec = std::get<std::vector<long>>(v);\n            for(auto i:\
    \ vec) {\n                result.push_back(i);\n            }\n        }\n   \
    \     else if(std::holds_alternative<std::vector<std::pair<long,long>>>(v)) {\n\
    \            auto vec = std::get<std::vector<std::pair<long,long>>>(v);\n    \
    \        for(auto i: vec) {\n                result.push_back(i.first);\n    \
    \        }\n        }\n        else if(std::holds_alternative<std::map<long,long>>(v))\
    \ {\n            auto map = std::get<std::map<long,long>>(v);\n            for(auto\
    \ i: map) {\n                result.push_back(i.first);\n            }\n     \
    \   }\n        else if(std::holds_alternative<std::set<long>>(v)) {\n        \
    \    auto set = std::get<std::set<long>>(v);\n            for(auto i: set) {\n\
    \                result.push_back(i);\n            }\n        }\n        else\
    \ if(std::holds_alternative<std::unordered_set<long>>(v)) {\n            auto\
    \ set = std::get<std::unordered_set<long>>(v);\n            for(auto i: set) {\n\
    \                result.push_back(i);\n            }\n        }\n        else\
    \ if(std::holds_alternative<std::string>(v)) {\n            result.push_back(std::get<std::string>(v));\n\
    \        }\n        else if(std::holds_alternative<bool>(v)) {\n            result.push_back(std::get<bool>(v));\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(v))\
    \ {\n            auto vec = std::get<std::vector<std::pair<long,long>>>(v);\n\
    \            for(auto i: vec) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<long,long>>(v))\
    \ {\n            auto map = std::get<std::map<long,long>>(v);\n            for(auto\
    \ i: map) {\n                result.push_back(i.first);\n            }\n     \
    \   }\n        else if(std::holds_alternative<std::set<long>>(v)) {\n        \
    \    auto set = std::get<std::set<long>>(v);\n            for(auto i: set) {\n\
    \                result.push_back(i);\n            }\n        }\n        else\
    \ if(std::holds_alternative<std::unordered_set<long>>(v)) {\n            auto\
    \ set = std::get<std::unordered_set<long>>(v);\n            for(auto i: set) {\n\
    \                result.push_back(i);\n            }\n        }\n        else\
    \ if(std::holds_alternative<std::vector<std::pair<long,long>>>(v)) {\n       \
    \     auto vec = std::get<std::vector<std::", "    std::vector<long> result;\n\
    \    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<int64_t>(v))\
    \ {\n            out.push_back(std::any_cast<int64_t>(v));\n        } else if(std::holds_alternative<double>(v))\
    \ {\n            out.push_back(std::any_cast<double>(v));\n        } else if(std::holds_alternative<std::string>(v))\
    \ {\n            out.push_back(std::any_cast<std::string>(v));\n        } else\
    \ if(std::holds_alternative<std::map<long,long>>(v)) {\n            out.push_back(std::any_cast<std::map<long,long>>(v));\n\
    \        } else if(std::holds_alternative<std::vector<long>>(v)) {\n         \
    \   out.push_back(std::any_cast<std::vector<long>>(v));\n        } else {\n  \
    \          throw std::runtime_error(\"Unsupported type\");\n        }\n    }\n\
    \    return out;", "    std::vector<long> out;\n    for(auto v: values) {\n  \
    \      if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto it : values) {\n      \
    \  if (std::holds_alternative<long>(it)) {\n            out.push_back(std::any_cast<long>(it));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::get<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto v: values) {\n    \
    \    if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            for(auto val : std::get<std::vector<long>>(value)) {\n      \
    \          result.push_back(val);\n            }\n        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            for(auto val : std::get<std::vector<std::pair<long,long>>>(value))\
    \ {\n                result.push_back(val.first);\n                result.push_back(val.second);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            for(auto val : std::get<std::map<long,long>>(value)) {\n    \
    \            result.push_back(val.first);\n                result.push_back(val.second);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::vector<std::pair<long,std::pair<long,long>>>>(value))\
    \ {\n            for(auto val : std::get<std::vector<std::pair<long,std::pair<long,long>>>>(value))\
    \ {\n                result.push_back(val.first);\n                result.push_back(val.second.first);\n\
    \                result.push_back(val.second.second);\n            }\n       \
    \ }\n        else if(std::holds_alternative<std::set<long>>(value)) {\n      \
    \      for(auto val : std::get<std::set<long>>(value)) {\n                result.push_back(val);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::pair<long,long>>>(value))\
    \ {\n            for(auto val : std::get<std::set<std::pair<long,long>>>(value))\
    \ {\n                result.push_back(val.first);\n                result.push_back(val.second);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::pair<long,std::pair<long,long>>>>(value))\
    \ {\n            for(auto val : std::get<std::set<std::pair<long,std::pair<long,long>>>>(value))\
    \ {\n                result.push_back(val.first);\n                result.push_back(val.second.first);\n\
    \                result.push_back(val.second.second);\n            }\n       \
    \ }\n        else if(std::holds_alternative<std::set<std::pair<long,std::pair<long,std::pair<long,long>>>>>(value))\
    \ {\n            for(auto val : std::get<std::set<std::pair<long,std::pair<long,std::pair<long,long>>>>>(value))\
    \ {\n                result.push_back(val.first);\n                result.push_back(val.second.first);\n\
    \                result.push_back(val.second.second.first);\n                result.push_back(val.second.second.second);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::holds_alternative<int64_t>(value)) {\n            result.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if (std::holds_alternative<uint64_t>(value)) {\n            result.push_back(std::any_cast<uint64_t>(value));\n\
    \        } else if (std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if (std::holds_alternative<bool>(value)) {\n            result.push_back(std::any_cast<bool>(value));\n\
    \        } else if (std::holds_alternative<std::string>(value)) {\n          \
    \  result.push_back(std::any_cast<std::string>(value));\n        } else if (std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\n\
    \        } else if (std::holds_alternative<std::vector<long>>(value)) {\n    \
    \        result.push_back(std::any_cast<std::vector<long>>(value));\n        }\
    \ else {\n            throw std::runtime_error(\"Unknown type\");\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto v: values) {\n      \
    \  if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<int64_t>(v)) {\n           \
    \ out.push_back(std::any_cast<int64_t>(v));\n        } else if(std::holds_alternative<double>(v))\
    \ {\n            out.push_back(std::any_cast<double>(v));\n        } else if(std::holds_alternative<std::string>(v))\
    \ {\n            out.push_back(std::any_cast<std::string>(v));\n        } else\
    \ if(std::holds_alternative<std::map<long,long>>(v)) {\n            out.push_back(std::any_cast<std::map<long,long>>(v));\
    \ // TODO: handle maps\n        } else if(std::holds_alternative<std::vector<long>>(v))\
    \ {\n            out.push_back(std::any_cast<std::vector<long>>(v)); // TODO:\
    \ handle lists\n        }\n    }\n    return out;", "    std::vector<long> result;\n\
    \    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> out;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<std::vector<long>>(value)) {\n        \
    \    out.insert(out.end(), std::get<std::vector<long>>(value).begin(), std::get<std::vector<long>>(value).end());\n\
    \        } else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::vector<std::pair<long,long>>>(value).begin(),\
    \ std::get<std::vector<std::pair<long,long>>>(value).end());\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::map<long,long>>(value).begin(),\
    \ std::get<std::map<long,long>>(value).end());\n        } else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::vector<std::pair<long,long>>>(value).begin(),\
    \ std::get<std::vector<std::pair<long,long>>>(value).end());\n        } else if(std::holds_alternative<std::set<long>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::set<long>>(value).begin(),\
    \ std::get<std::set<long>>(value).end());\n        } else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::vector<std::pair<long,long>>>(value).begin(),\
    \ std::get<std::vector<std::pair<long,long>>>(value).end());\n        } else if(std::holds_alternative<std::unordered_set<long>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::unordered_set<long>>(value).begin(),\
    \ std::get<std::unordered_set<long>>(value).end());\n        } else if(std::holds_alternative<std::unordered_map<long,long>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::unordered_map<long,long>>(value).begin(),\
    \ std::get<std::unordered_map<long,long>>(value).end());\n        } else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::vector<std::pair<long,long>>>(value).begin(),\
    \ std::get<std::vector<std::pair<long,long>>>(value).end());\n        } else if(std::holds_alternative<std::list<long>>(value))\
    \ {\n            out.insert(out.end(), std::get<std::list<long>>(value).begin(),\
    \ std::get<std::list<long>>", "    std::vector<long> out;\n    for (auto value\
    \ : values) {\n        if (std::holds_alternative<long>(value)) {\n          \
    \  out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return out;",
  "    std::vector<long> out;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            out.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return out;", "    std::vector<long> out;\n    for(auto v: values) {\n  \
    \      if(std::holds_alternative<std::vector<long>>(v)) {\n            out.emplace_back(std::any_cast<std::vector<long>>(v)->size());\n\
    \        } else {\n            out.emplace_back(std::any_cast<long>(v));\n   \
    \     }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            auto vec = std::get<std::vector<long>>(value);\n            for(auto\
    \ i : vec) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::pair<long,long>>>(value);\n\
    \            for(auto i : vec) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            auto map = std::get<std::map<long,long>>(value);\n          \
    \  for(auto i : map) {\n                result.push_back(i.first);\n         \
    \   }\n        }\n        else if(std::holds_alternative<std::set<long>>(value))\
    \ {\n            auto set = std::get<std::set<long>>(value);\n            for(auto\
    \ i : set) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<std::string>(value)) {\n            result.push_back(std::stoi(value));\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::any>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::any>>(value);\n        \
    \    for(auto i : vec) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::any>>(value))\
    \ {\n            auto set = std::get<std::set<std::any>>(value);\n           \
    \ for(auto i : set) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<std::any,std::any>>(value))\
    \ {\n            auto map = std::get<std::map<std::any,std::any>>(value);\n  \
    \          for(auto i : map) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n        else if(std::holds_alternative<std::vector<std::any>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::any>>(value);\n        \
    \    for(auto i : vec) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::any>>(value))\
    \ {\n            auto set = std::get<std::set<std::any>>(value);\n           \
    \ for(auto i : set) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<std::any,std::any>>(value))\
    \ {\n            auto map = std::get<std::map<std::any,std::any>>(value);\n  \
    \          for(auto i : map) {\n                result.push_back(filter_integers(i));\n\
    \            }\n        }\n", "    std::vector<long> out;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return out;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> out;\n    for (auto value :\
    \ values) {\n        if (std::holds_alternative<std::vector<long>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<long>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::map<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::map<long,long>>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::vector<std::any>>(value)->at(0));\n\
    \        } else if (std::holds_alternative<std::vector<std::any>>(value)) {",
  "    std::vector<long> result;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            result.push_back(std::any_cast<long>(v));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for(auto v: values) {\n\
    \        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::get<long>(value));\n        }\n    }\n    return out;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto &value\
    \ : values) {\n        if(std::holds_alternative<int64_t>(value)) {\n        \
    \    result.push_back(std::any_cast<int64_t>(value));\n        } else if(std::holds_alternative<double>(value))\
    \ {\n            result.push_back(std::any_cast<double>(value));\n        } else\
    \ if(std::holds_alternative<std::string>(value)) {\n            result.push_back(std::any_cast<std::string>(value));\n\
    \        } else if(std::holds_alternative<std::map<long,long>>(value)) {\n   \
    \         result.push_back(std::any_cast<std::map<long,long>>(value)); // TODO:\
    \ handle maps\n        } else if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::vector<long>>(value)); //\
    \ TODO: handle vectors\n        } else {\n            throw std::runtime_error(\"\
    Unsupported type\");\n        }\n    }\n    return result;", "    std::vector<long>\
    \ out;\n    for(auto v: values) {\n        if(v.type() == typeid(long)) {\n  \
    \          out.push_back(v);\n        }\n    }\n    return out;", "    std::vector<long>\
    \ result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &v : values) {\n    \
    \    if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::get<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<int64_t>(value)) {\n            result.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if(std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\n\
    \        } else if(std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       result.push_back(std::any_cast<std::vector<long>>(value));\n        }\
    \ else {\n            throw std::runtime_error(\"Unsupported type\");\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        } else if (std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            auto map = std::any_cast<std::map<long,long>>(value);\n     \
    \       for (auto it = map.begin(); it != map.end(); ++it) {\n               \
    \ out.push_back(it->first);\n            }\n        } else if (std::holds_alternative<std::vector<long>>(value))\
    \ {\n            auto vec = std::any_cast<std::vector<long>>(value);\n       \
    \     for (auto it = vec.begin(); it != vec.end(); ++it) {\n                out.push_back(*it);\n\
    \            }\n        } else {\n            out.push_back(0);\n        }\n \
    \   }\n    return out;", "    std::vector<long> out;\n    for (auto value : values)\
    \ {\n        if (value.type() == typeid(long)) {\n            out.push_back(value.as<long>());\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<int64_t>(value)) {\n            result.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if(std::holds_alternative<uint64_t>(value)) {\n            result.push_back(std::any_cast<uint64_t>(value));\n\
    \        } else if(std::holds_alternative<int32_t>(value)) {\n            result.push_back(std::any_cast<int32_t>(value));\n\
    \        } else if(std::holds_alternative<uint32_t>(value)) {\n            result.push_back(std::any_cast<uint32_t>(value));\n\
    \        } else if(std::holds_alternative<int16_t>(value)) {\n            result.push_back(std::any_cast<int16_t>(value));\n\
    \        } else if(std::holds_alternative<uint16_t>(value)) {\n            result.push_back(std::any_cast<uint16_t>(value));\n\
    \        } else if(std::holds_alternative<int8_t>(value)) {\n            result.push_back(std::any_cast<int8_t>(value));\n\
    \        } else if(std::holds_alternative<uint8_t>(value)) {\n            result.push_back(std::any_cast<uint8_t>(value));\n\
    \        } else if(std::holds_alternative<bool>(value)) {\n            result.push_back(std::any_cast<bool>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\n\
    \        } else if(std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       result.push_back(std::any_cast<std::vector<long>>(value));\n        }\
    \ else {\n            throw std::runtime_error(\"Unknown type for filter_integers:\
    \ \" + std::to_string(value.get_type()));\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> out;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ val : values) {\n        if (val && val->is_int()) {\n            out.push_back(val->as<int>());\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<int64_t>(value)) {\n            out.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if (std::holds_alternative<uint64_t>(value)) {\n            out.push_back(std::any_cast<uint64_t>(value));\n\
    \        } else if (std::holds_alternative<int32_t>(value)) {\n            out.push_back(std::any_cast<int32_t>(value));\n\
    \        } else if (std::holds_alternative<uint32_t>(value)) {\n            out.push_back(std::any_cast<uint32_t>(value));\n\
    \        } else if (std::holds_alternative<int16_t>(value)) {\n            out.push_back(std::any_cast<int16_t>(value));\n\
    \        } else if (std::holds_alternative<uint16_t>(value)) {\n            out.push_back(std::any_cast<uint16_t>(value));\n\
    \        } else if (std::holds_alternative<int8_t>(value)) {\n            out.push_back(std::any_cast<int8_t>(value));\n\
    \        } else if (std::holds_alternative<uint8_t>(value)) {\n            out.push_back(std::any_cast<uint8_t>(value));\n\
    \        } else if (std::holds_alternative<bool>(value)) {\n            out.push_back(std::any_cast<bool>(value));\n\
    \        } else if (std::holds_alternative<std::string>(value)) {\n          \
    \  out.push_back(std::any_cast<std::string>(value));\n        } else if (std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.push_back(std::any_cast<std::map<long,long>>(value));\n \
    \       } else if (std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       out.push_back(std::any_cast<std::vector<long>>(value));\n        } else\
    \ {\n            throw std::runtime_error(\"Unsupported type\");\n        }\n\
    \    }\n    return out;", "    std::vector<long> out;\n    for(auto &v : values)\
    \ {\n        if(v.type() == typeid(long)) {\n            out.push_back(v);\n \
    \       }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto v: values) {\n  \
    \      if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            auto vec = std::get<std::vector<long>>(value);\n            for(auto\
    \ i : vec) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<long>(value)) {\n            result.push_back(std::get<long>(value));\n\
    \        }\n        else {\n            throw std::runtime_error(\"Invalid value\
    \ type\");\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::get<long>(value));\n        }\n    }\n    return result;",
  "    std::vector<long> out;\n    for (auto val : values) {\n        auto pyval =\
    \ py::cast(val);\n        if (pyval.is(py::int_)) {\n            out.push_back(pyval.ptr());\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<int64_t>(value)) {\n            out.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if (std::holds_alternative<uint64_t>(value)) {\n            out.push_back(std::any_cast<uint64_t>(value));\n\
    \        } else if (std::holds_alternative<double>(value)) {\n            out.push_back(std::any_cast<double>(value));\n\
    \        } else if (std::holds_alternative<bool>(value)) {\n            out.push_back(std::any_cast<bool>(value));\n\
    \        } else if (std::holds_alternative<std::string>(value)) {\n          \
    \  out.push_back(std::any_cast<std::string>(value));\n        } else if (std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.push_back(std::any_cast<std::map<long,long>>(value));\n \
    \       } else if (std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       out.push_back(std::any_cast<std::vector<long>>(value));\n        } else\
    \ {\n            throw std::runtime_error(\"Unknown type\");\n        }\n    }\n\
    \    return out;", "    std::vector<long> out;\n    for(auto v : values) {\n \
    \       if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(v.type() == typeid(int)) {\n            result.push_back((long)v.as<int>());\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for(auto value : values) {\n       \
    \ if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<std::vector<long>>(v)) {\n \
    \           out.emplace_back(std::any_cast<std::vector<long>>(v)->at(0));\n  \
    \      } else {\n            out.emplace_back(std::any_cast<long>(v));\n     \
    \   }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ it = values.begin(); it != values.end(); ++it) {\n        if(std::holds_alternative<long>(*it))\
    \ {\n            out.push_back(std::get<long>(*it));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for (auto it = values.begin(); it !=\
    \ values.end(); ++it) {\n        auto val = std::any_cast<long>(*it);\n      \
    \  if (val != std::any_cast<long>(-1)) {\n            out.push_back(val);\n  \
    \      }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto v:\
    \ values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<int64_t>(value)) {\n  \
    \          out.push_back(std::any_cast<int64_t>(value));\n        } else if(std::holds_alternative<uint64_t>(value))\
    \ {\n            out.push_back(std::any_cast<uint64_t>(value));\n        } else\
    \ if(std::holds_alternative<double>(value)) {\n            out.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ out.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.push_back(std::any_cast<std::map<long,long>>(value));\n \
    \       } else if(std::holds_alternative<std::vector<long>>(value)) {\n      \
    \      out.push_back(std::any_cast<std::vector<long>>(value));\n        } else\
    \ {\n            throw std::runtime_error(\"Unsupported type\");\n        }\n\
    \    }\n    return out;", "    std::vector<long> result;\n    for(auto value :\
    \ values) {\n        if(std::holds_alternative<std::vector<long>>(value)) {\n\
    \            auto vec = std::get<std::vector<long>>(value);\n            for(auto\
    \ i : vec) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::pair<long,long>>>(value);\n\
    \            for(auto i : vec) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            auto map = std::get<std::map<long,long>>(value);\n          \
    \  for(auto i : map) {\n                result.push_back(i.first);\n         \
    \   }\n        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::pair<long,long>>>(value);\n\
    \            for(auto i : vec) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::vector<std::pair<std::string,long>>>(value))\
    \ {\n            auto vec = std::get<std::vector<std::pair<std::string,long>>>(value);\n\
    \            for(auto i : vec) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<long>>(value))\
    \ {\n            auto set = std::get<std::set<long>>(value);\n            for(auto\
    \ i : set) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<std::set<std::string>>(value)) {\n   \
    \         auto set = std::get<std::set<std::string>>(value);\n            for(auto\
    \ i : set) {\n                result.push_back(i);\n            }\n        }\n\
    \        else if(std::holds_alternative<std::set<std::pair<long,long>>>(value))\
    \ {\n            auto set = std::get<std::set<std::pair<long,long>>>(value);\n\
    \            for(auto i : set) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::pair<std::string,long>>>(value))\
    \ {\n            auto set = std::get<std::set<std::pair<std::string,long>>>(value);\n\
    \            for(auto i : set) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::pair<std::string,std::string>>>(value))\
    \ {\n            auto set = std::get<std::set<std::pair<std::string,std::string>>>(value);\n\
    \            for(auto i : set) {\n                result.push_back(i.first);\n\
    \            }\n        }\n        else if(std::holds_alternative<std::set<std::",
  "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<int64_t>(value)) {\n            result.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if(std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\
    \ // TODO: handle maps\n        } else if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::vector<long>>(value)); //\
    \ TODO: handle vectors\n        } else {\n            throw std::runtime_error(\"\
    Unsupported type\");\n        }\n    }\n    return result;", "    std::vector<long>\
    \ out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto value : values) {\n\
    \        if(std::holds_alternative<std::vector<long>>(value)) {\n            out.emplace_back(std::any_cast<std::vector<long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)[0]);\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<", "   \
    \ std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<std::vector<long>>(value)) {\n           \
    \ out.emplace_back(std::any_cast<std::vector<long>>(value)[0]);\n        } else\
    \ if (std::holds_alternative<std::vector<std::pair<long,long>>>(value)) {\n  \
    \          out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,long>>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,long>>>>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,std::pair<long,long>>>&>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,std::pair<long,long>>>>&>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>>&>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>&>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>>&>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>&>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>>&>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>>&>(value)[0]);\n\
    \        } else if (std::holds_alternative<std::vector<std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,std::pair<long,long>>>>>&>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,std::pair<long,std::pair<long,std::",
  "    std::vector<long> result;\n    for (auto value : values) {\n        if (std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::get<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for(auto v: values) {\n\
    \        if(std::holds_alternative<int64_t>(v)) {\n            out.push_back(std::any_cast<int64_t>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<std::vector<long>>(value)) {\n            out.push_back(std::any_cast<std::vector<long>>(value)->at(0));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<std::vector<long>>(value)) {\n            out.emplace_back(std::any_cast<std::vector<long>>(value)[0]);\n\
    \        } else {\n            out.emplace_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<long>>(value)->at(0));\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::pair<long,long>>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::pair<long,long>>>(value)->at(0));\n\
    \        }\n        else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::map<long,long>>(value)->at(0));\n\
    \        }\n        else if(std::holds_alternative<std::set<long>>(value)) {\n\
    \            out.emplace_back(std::any_cast<std::set<long>>(value)->at(0));\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::string>>(value))\
    \ {\n            out.emplace_back(std::any_cast<std::vector<std::string>>(value)->at(0));\n\
    \        }\n        else if(std::holds_alternative<std::vector<std::tuple<long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long,long",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<int64_t>(value)) {\n  \
    \          result.push_back(std::any_cast<int64_t>(value));\n        } else if(std::holds_alternative<double>(value))\
    \ {\n            result.push_back(std::any_cast<double>(value));\n        } else\
    \ if(std::holds_alternative<std::string>(value)) {\n            result.push_back(std::any_cast<std::string>(value));\n\
    \        } else if(std::holds_alternative<std::map<long,long>>(value)) {\n   \
    \         result.push_back(std::any_cast<std::map<long,long>>(value));\n     \
    \   } else if(std::holds_alternative<std::vector<long>>(value)) {\n          \
    \  result.push_back(std::any_cast<std::vector<long>>(value));\n        } else\
    \ {\n            throw std::runtime_error(\"Unknown type\");\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for(auto v: values)\
    \ {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for (auto val : values) {\n        if\
    \ (std::holds_alternative<long>(val)) {\n            out.push_back(std::any_cast<long>(val));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::holds_alternative<long>(value)) {\n\
    \            result.push_back(std::get<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<int64_t>(value)) {\n            result.push_back(std::any_cast<int64_t>(value));\n\
    \        } else if(std::holds_alternative<double>(value)) {\n            result.push_back(std::any_cast<double>(value));\n\
    \        } else if(std::holds_alternative<std::string>(value)) {\n           \
    \ result.push_back(std::any_cast<std::string>(value));\n        } else if(std::holds_alternative<std::map<long,long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::map<long,long>>(value));\
    \ // TODO: handle maps\n        } else if(std::holds_alternative<std::vector<long>>(value))\
    \ {\n            result.push_back(std::any_cast<std::vector<long>>(value)); //\
    \ TODO: handle vectors\n        } else {\n            throw std::runtime_error(\"\
    Unknown type\");\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (auto value : values) {\n        if (std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(std::holds_alternative<long>(value)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto v: values) {\n    \
    \    if(std::holds_alternative<int64_t>(v)) {\n            out.push_back(std::any_cast<int64_t>(v));\n\
    \        } else if(std::holds_alternative<double>(v)) {\n            out.push_back(std::any_cast<double>(v));\n\
    \        } else if(std::holds_alternative<std::string>(v)) {\n            out.push_back(std::any_cast<std::string>(v));\n\
    \        } else if(std::holds_alternative<std::map<long,long>>(v)) {\n       \
    \     out.push_back(std::any_cast<std::map<long,long>>(v)); // TODO: handle maps\n\
    \        } else if(std::holds_alternative<std::vector<long>>(v)) {\n         \
    \   out.push_back(std::any_cast<std::vector<long>>(v)); // TODO: handle vectors\n\
    \        } else {\n            throw std::runtime_error(\"Unsupported type\");\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(v.type() == typeid(long)) {\n            out.push_back(v.as<long>());\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;"]
stop_tokens:
- "\n}"
