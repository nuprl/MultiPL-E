language: cpp
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        factors.push_back(factor);\n   \
    \     i++;\n    }\n    if (n != 1) {\n        factors.push_back(1);\n    }\n \
    \   return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zbez8wg.cpp: In function 'int main()':\n/tmp/tmp8zbez8wg.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8zbez8wg.cpp:2:\n/tmp/tmp8zbez8wg.cpp:31:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp8zbez8wg.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp8zbez8wg.cpp:31:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp8zbez8wg.cpp:31:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8zbez8wg.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp8zbez8wg.cpp:32:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp8zbez8wg.cpp:32:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8zbez8wg.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long temp =\
    \ 1;\n    while (temp <= n) {\n        if (n % temp == 0) {\n            factor\
    \ *= temp;\n            factors.push_back(factor);\n            n /= temp;\n \
    \       }\n        temp++;\n    }\n    if (n > 1) {\n        factor *= n;\n  \
    \      factors.push_back(factor);\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaq9hydyg.cpp: In function 'int main()':\n/tmp/tmpaq9hydyg.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaq9hydyg.cpp:2:\n/tmp/tmpaq9hydyg.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpaq9hydyg.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpaq9hydyg.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpaq9hydyg.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaq9hydyg.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpaq9hydyg.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpaq9hydyg.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaq9hydyg.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyu40w_f.cpp: In function 'int main()':\n/tmp/tmpfyu40w_f.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyu40w_f.cpp:2:\n/tmp/tmpfyu40w_f.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpfyu40w_f.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpfyu40w_f.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpfyu40w_f.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpfyu40w_f.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpfyu40w_f.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        if (n % i == 0) {\n            factor\
    \ *= i;\n            factors.push_back(i);\n            while (n % i == 0) {\n\
    \                n /= i;\n                factors.push_back(i);\n            }\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyfhv0ga.cpp: In function 'int main()':\n/tmp/tmpnyfhv0ga.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyfhv0ga.cpp:2:\n/tmp/tmpnyfhv0ga.cpp:34:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpnyfhv0ga.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpnyfhv0ga.cpp:34:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpnyfhv0ga.cpp:34:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnyfhv0ga.cpp:35:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpnyfhv0ga.cpp:35:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpnyfhv0ga.cpp:35:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnyfhv0ga.cpp:36:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    long count = 0;\n    while (i <= n) {\n        if (n % i == 0) {\n      \
    \      factors.push_back(i);\n            n = n / i;\n            count++;\n \
    \       }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsarcguz2.cpp: In function 'int main()':\n/tmp/tmpsarcguz2.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsarcguz2.cpp:2:\n/tmp/tmpsarcguz2.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpsarcguz2.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpsarcguz2.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpsarcguz2.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsarcguz2.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpsarcguz2.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpsarcguz2.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsarcguz2.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpape2whd7.cpp: In function 'int main()':\n/tmp/tmpape2whd7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpape2whd7.cpp:2:\n/tmp/tmpape2whd7.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpape2whd7.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpape2whd7.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpape2whd7.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpape2whd7.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpape2whd7.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long i = 2;\n    while (i <= n / factor) {\n        while (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqk7ike7.cpp: In function 'int main()':\n/tmp/tmpiqk7ike7.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqk7ike7.cpp:2:\n/tmp/tmpiqk7ike7.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpiqk7ike7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpiqk7ike7.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpiqk7ike7.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpiqk7ike7.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpiqk7ike7.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i < n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1a32utm.cpp: In function 'int main()':\n/tmp/tmpv1a32utm.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1a32utm.cpp:2:\n/tmp/tmpv1a32utm.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv1a32utm.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv1a32utm.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv1a32utm.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv1a32utm.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv1a32utm.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long factorization\
    \ = 1;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factorization\
    \ *= factor;\n            factors.push_back(factor);\n            n /= factor;\n\
    \        }\n        factor++;\n    }\n    factors.push_back(factor);\n    factors.push_back(factorization);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2_6s_wcn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            factor *= i;\n \
    \           while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2sxasi8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndpkay21.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i != i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd_2ee92o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long i = 2;\n    while (i <= n / factor) {\n        while (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    factors.push_back(factor);\n    factors.push_back(count);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpab7yzhwb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i > i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_sbp6qd7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factor *= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factor *= n;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprf8200sz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8bsvzc0k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 1;\n    long i = 2;\n    while (i <= n / factor) {\n        if (n % i == 0)\
    \ {\n            factor *= i;\n            count++;\n        }\n        i++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnh_snpnw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmip6_480.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnwm4b31b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        if (n % i == 0) {\n            factor *= i;\n\
    \            factors.push_back(i);\n        }\n        ++i;\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp93_dxswh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i != i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd_2ee92o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp24ft_1lg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long limit = sqrt(n);\n    while (counter <= limit) {\n        if\
    \ (n % counter == 0) {\n            factor *= counter;\n            while (n %\
    \ counter == 0) {\n                factor *= counter;\n                n /= counter;\n\
    \            }\n            factors.push_back(factor);\n            counter =\
    \ 1;\n        } else {\n            counter++;\n        }\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp59xhawnu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph0sd3onh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnwm4b31b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    while (n != 1) {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            count++;\n        }\n        factor++;\n\
    \    }\n    factors.push_back(factor);\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2lc9wq7f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaw5iaugy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factor\
    \ *= i;\n            n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\
    \ {\n        factor *= n;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ritgrh2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    long count = 0;\n    while (i <= n) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n            count++;\n \
    \       }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprp6rt3s7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    while (n != 1) {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            count++;\n        }\n        factor++;\n\
    \    }\n    factors.push_back(factor);\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2lc9wq7f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbr1zkssi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyu40w_f.cpp: In function 'int main()':\n/tmp/tmpfyu40w_f.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyu40w_f.cpp:2:\n/tmp/tmpfyu40w_f.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpfyu40w_f.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpfyu40w_f.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpfyu40w_f.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpfyu40w_f.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpfyu40w_f.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long i = 2;\n    while (i <= n / factor) {\n        while (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \        count++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo2nf233n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            factor *=\
    \ i;\n            while (n % i == 0) {\n                n /= i;\n            \
    \    factors.push_back(i);\n            }\n        }\n        i++;\n    }\n  \
    \  if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0rrgp2kf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3slmwcer.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaw5iaugy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n\
    \        factor *= n;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7619_iy1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factor *= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factor *= n;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprf8200sz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = 1;\n   \
    \ long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc0et55hh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    while (n > 1) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            counter++;\n        }\n        else {\n\
    \            factor *= factor;\n            factors.push_back(factor);\n     \
    \       n /= factor;\n            counter++;\n        }\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr2tobyx8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqawljbvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long limit = (long) sqrt(n);\n    while (counter < limit) {\n    \
    \    if (n % counter == 0) {\n            factor *= counter;\n            factors.push_back(factor);\n\
    \            counter += 1;\n        }\n        counter += 1;\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp87u33b_j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i > i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppeu3i35v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbr1zkssi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long temp = n;\n    long i = 1;\n    long j = 0;\n    while (temp !=\
    \ 1) {\n        while (temp % i == 0) {\n            factors.push_back(i);\n \
    \           temp = temp / i;\n            count++;\n        }\n        i++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkt0aji8u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpil2soalr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    while (n > 1)\
    \ {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpstiysyzo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i != i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpku50wu1o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p % i == 0) {\n        factors.push_back(i);\n        p /= i;\n    }\n\
    \    if (p != 1) {\n        factors.push_back(p);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnzyb05o1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    while (n > 1)\
    \ {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1xcam7st.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long remain = n;\n    while (remain != 1) {\n        if (remain %\
    \ factor == 0) {\n            factors.push_back(factor);\n            counter++;\n\
    \            remain /= factor;\n        } else {\n            factor *= factor;\n\
    \        }\n    }\n    factors.push_back(factor);\n    return factors;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx_8zib7n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    long count = 0;\n    while (i <= n) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n            count++;\n \
    \       }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \        count++;\n    }\n    factors.push_back(count);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprf06p18q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i > i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsxvotkny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i != i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp49pwmh0s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaw5iaugy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long temp = 1;\n    long temp2 = 1;\n    long temp3 = 1;\n    long\
    \ temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n\
    \    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11\
    \ = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n   \
    \ long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp79 = 0;\n    long temp80 = 0;\n    long temp81\
    \ = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmixinvi4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i < n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd4eq8qoa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i * i <= n) {\n        if (n % i == 0) {\n            factor *= i;\n\
    \            while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    factors.push_back(n);\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91qklwax.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    while (n > 1)\
    \ {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    if (n != 1)\
    \ {\n        factors.push_back(n);\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7hvkgg09.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqawljbvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            factor *=\
    \ i;\n            while (n % i == 0) {\n                n /= i;\n            \
    \    factors.push_back(i);\n            }\n        }\n        i++;\n    }\n  \
    \  if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfjreknhe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        if (n % i == 0) {\n            factor\
    \ *= i;\n            while (i <= n / factor) {\n                if (n % i == 0)\
    \ {\n                    factor *= i;\n                    factors.push_back(i);\n\
    \                    n /= i;\n                    break;\n                }\n\
    \                i++;\n            }\n        }\n        i++;\n    }\n    if (n\
    \ != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ye5wq1s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    while (n != 1) {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            count++;\n        }\n        factor++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ayh7_09.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long p = n;\n    while (p != 1) {\n        if (p % 2 == 0) {\n   \
    \         factor *= 2;\n            factors.push_back(factor);\n            counter\
    \ += 1;\n        }\n        p /= 2;\n    }\n    factors.push_back(factor);\n \
    \   factors.push_back(counter);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnbwo51e_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphq7lu366.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factor *= i;\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy01x9w3k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaw5iaugy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push_back(i);\n          \
    \  while (n / i != i) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        ++i;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvjqxpibp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbr1zkssi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    while (n > 1) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            counter++;\n        } else {\n        \
    \    factor *= counter;\n        }\n    }\n    factors.push_back(factor);\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8i5g9q06.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long remainder = 0;\n    while (n) {\n        remainder = n % factor;\n\
    \        factor *= counter;\n        n /= factor;\n        counter++;\n      \
    \  factors.push_back(factor);\n    }\n    return factors;\n}\nint main() {\n \
    \   auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgqihx6ul.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long i = 2;\n    while (i <= n / factor) {\n        while (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqk7ike7.cpp: In function 'int main()':\n/tmp/tmpiqk7ike7.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqk7ike7.cpp:2:\n/tmp/tmpiqk7ike7.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpiqk7ike7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpiqk7ike7.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpiqk7ike7.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpiqk7ike7.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpiqk7ike7.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3slmwcer.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        factors.push_back(factor);\n   \
    \     factor = 1;\n        ++i;\n    }\n    if (n != 1) {\n        factors.push_back(factor);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpexibst4i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long counter\
    \ = 1;\n    long limit = (long) sqrt(n);\n    for (long i = 1; i < limit; i++)\
    \ {\n        if (n % i == 0) {\n            while (n % i == 0) {\n           \
    \     factor *= i;\n                n /= i;\n                counter++;\n    \
    \        }\n            factors.push_back(factor);\n            factor = 1;\n\
    \            counter = 1;\n        }\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyceejat2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            factor *= i;\n \
    \           while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7jormq12.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpui8pxlv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factor\
    \ *= i;\n            factors.push_back(i);\n            n /= i;\n        }\n \
    \       i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp58518_g5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3slmwcer.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfoth4zo2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n / i)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqawljbvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8h7wli_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 1;\n    while (n != 1) {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            count++;\n        }\n        factor++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz6l99zkk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factor\
    \ *= i;\n            n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\
    \ {\n        factor *= n;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ritgrh2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            factor *= i;\n \
    \           while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7jormq12.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 1;\n    while (n != 1) {\n        while (n % factor == 0) {\n            factors.push_back(factor);\n\
    \            n /= factor;\n            count++;\n        }\n        factor++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz6l99zkk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i < n) {\n        if (n % i == 0) {\n            factor *= i;\n  \
    \          while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpykia7sgi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n     \
    \   factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ycxq5r2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyu40w_f.cpp: In function 'int main()':\n/tmp/tmpfyu40w_f.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyu40w_f.cpp:2:\n/tmp/tmpfyu40w_f.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpfyu40w_f.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpfyu40w_f.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpfyu40w_f.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpfyu40w_f.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpfyu40w_f.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factor *= i;\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvimyd9vg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy5eotez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821995
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i * i <= n) {\n        if (n % i == 0) {\n            factor *= i;\n\
    \            while (n % i == 0) {\n                n /= i;\n                factors.push_back(i);\n\
    \            }\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2pselv2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821996
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i < n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1a32utm.cpp: In function 'int main()':\n/tmp/tmpv1a32utm.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1a32utm.cpp:2:\n/tmp/tmpv1a32utm.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv1a32utm.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv1a32utm.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv1a32utm.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv1a32utm.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv1a32utm.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpape2whd7.cpp: In function 'int main()':\n/tmp/tmpape2whd7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpape2whd7.cpp:2:\n/tmp/tmpape2whd7.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpape2whd7.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpape2whd7.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpape2whd7.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpape2whd7.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpape2whd7.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
