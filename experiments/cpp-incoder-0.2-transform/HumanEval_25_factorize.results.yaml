language: cpp
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n\
    \    while (i <= n / i) {\n        while (n % i == 0) {\n            factor *=\
    \ i;\n            n /= i;\n        }\n        factors.push_back(factor);\n   \
    \     i++;\n    }\n    if (n != 1) {\n        factors.push_back(1);\n    }\n \
    \   return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zbez8wg.cpp: In function 'int main()':\n/tmp/tmp8zbez8wg.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8zbez8wg.cpp:2:\n/tmp/tmp8zbez8wg.cpp:31:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp8zbez8wg.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp8zbez8wg.cpp:31:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp8zbez8wg.cpp:31:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8zbez8wg.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp8zbez8wg.cpp:32:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp8zbez8wg.cpp:32:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8zbez8wg.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long temp =\
    \ 1;\n    while (temp <= n) {\n        if (n % temp == 0) {\n            factor\
    \ *= temp;\n            factors.push_back(factor);\n            n /= temp;\n \
    \       }\n        temp++;\n    }\n    if (n > 1) {\n        factor *= n;\n  \
    \      factors.push_back(factor);\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaq9hydyg.cpp: In function 'int main()':\n/tmp/tmpaq9hydyg.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaq9hydyg.cpp:2:\n/tmp/tmpaq9hydyg.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpaq9hydyg.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpaq9hydyg.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpaq9hydyg.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaq9hydyg.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpaq9hydyg.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpaq9hydyg.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaq9hydyg.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyu40w_f.cpp: In function 'int main()':\n/tmp/tmpfyu40w_f.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyu40w_f.cpp:2:\n/tmp/tmpfyu40w_f.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpfyu40w_f.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpfyu40w_f.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpfyu40w_f.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpfyu40w_f.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpfyu40w_f.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyu40w_f.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8nwwt9_.cpp: In function 'int main()':\n/tmp/tmpv8nwwt9_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8nwwt9_.cpp:2:\n/tmp/tmpv8nwwt9_.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv8nwwt9_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv8nwwt9_.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv8nwwt9_.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv8nwwt9_.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv8nwwt9_.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv8nwwt9_.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    long p = n;\n   \
    \ while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmk524_l.cpp: In function 'int main()':\n/tmp/tmpjmk524_l.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmk524_l.cpp:2:\n/tmp/tmpjmk524_l.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpjmk524_l.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpjmk524_l.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpjmk524_l.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpjmk524_l.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpjmk524_l.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjmk524_l.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n / factor) {\n        if (n % i == 0) {\n            factor\
    \ *= i;\n            factors.push_back(i);\n            while (n % i == 0) {\n\
    \                n /= i;\n                factors.push_back(i);\n            }\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyfhv0ga.cpp: In function 'int main()':\n/tmp/tmpnyfhv0ga.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyfhv0ga.cpp:2:\n/tmp/tmpnyfhv0ga.cpp:34:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpnyfhv0ga.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpnyfhv0ga.cpp:34:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpnyfhv0ga.cpp:34:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnyfhv0ga.cpp:35:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpnyfhv0ga.cpp:35:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpnyfhv0ga.cpp:35:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnyfhv0ga.cpp:36:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibmycecm.cpp: In function 'int main()':\n/tmp/tmpibmycecm.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibmycecm.cpp:2:\n/tmp/tmpibmycecm.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibmycecm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibmycecm.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibmycecm.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibmycecm.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibmycecm.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibmycecm.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    long count = 0;\n    while (i <= n) {\n        if (n % i == 0) {\n      \
    \      factors.push_back(i);\n            n = n / i;\n            count++;\n \
    \       }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsarcguz2.cpp: In function 'int main()':\n/tmp/tmpsarcguz2.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsarcguz2.cpp:2:\n/tmp/tmpsarcguz2.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpsarcguz2.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpsarcguz2.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpsarcguz2.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsarcguz2.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpsarcguz2.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpsarcguz2.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsarcguz2.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpape2whd7.cpp: In function 'int main()':\n/tmp/tmpape2whd7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpape2whd7.cpp:2:\n/tmp/tmpape2whd7.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpape2whd7.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpape2whd7.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpape2whd7.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpape2whd7.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpape2whd7.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpape2whd7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long p = n;\n    long q = n;\n   \
    \ long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v =\
    \ n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw2wtor_.cpp: In function 'std::vector<long int> factorize(long\
    \ int)':\n/tmp/tmplw2wtor_.cpp:38:10: error: declaration of 'long int n' shadows\
    \ a parameter\n     long n = n;\n          ^\n/tmp/tmplw2wtor_.cpp:40:10: error:\
    \ redeclaration of 'long int p'\n     long p = n;\n          ^\n/tmp/tmplw2wtor_.cpp:14:10:\
    \ error: 'long int p' previously declared here\n     long p = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:41:10: error: redeclaration of 'long int q'\n     long q\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:15:10: error: 'long int q' previously\
    \ declared here\n     long q = n;\n          ^\n/tmp/tmplw2wtor_.cpp:42:10: error:\
    \ redeclaration of 'long int r'\n     long r = n;\n          ^\n/tmp/tmplw2wtor_.cpp:16:10:\
    \ error: 'long int r' previously declared here\n     long r = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:43:10: error: redeclaration of 'long int s'\n     long s\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:17:10: error: 'long int s' previously\
    \ declared here\n     long s = n;\n          ^\n/tmp/tmplw2wtor_.cpp:44:10: error:\
    \ redeclaration of 'long int t'\n     long t = n;\n          ^\n/tmp/tmplw2wtor_.cpp:18:10:\
    \ error: 'long int t' previously declared here\n     long t = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:45:10: error: redeclaration of 'long int u'\n     long u\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:19:10: error: 'long int u' previously\
    \ declared here\n     long u = n;\n          ^\n/tmp/tmplw2wtor_.cpp:46:10: error:\
    \ redeclaration of 'long int v'\n     long v = n;\n          ^\n/tmp/tmplw2wtor_.cpp:20:10:\
    \ error: 'long int v' previously declared here\n     long v = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:47:10: error: redeclaration of 'long int w'\n     long w\
    \ = n;\n          ^\n/tmp/tmplw2wtor_.cpp:21:10: error: 'long int w' previously\
    \ declared here\n     long w = n;\n          ^\n/tmp/tmplw2wtor_.cpp:48:10: error:\
    \ redeclaration of 'long int x'\n     long x = n;\n          ^\n/tmp/tmplw2wtor_.cpp:22:10:\
    \ error: 'long int x' previously declared here\n     long x = n;\n          ^\n\
    /tmp/tmplw2wtor_.cpp:49:10: error: redeclaration of 'long int y'\n     long y\
    \ = n;\n          ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long factor = 1;\n    long count =\
    \ 0;\n    long i = 2;\n    while (i <= n / factor) {\n        while (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n /= i;\n            count++;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqk7ike7.cpp: In function 'int main()':\n/tmp/tmpiqk7ike7.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqk7ike7.cpp:2:\n/tmp/tmpiqk7ike7.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpiqk7ike7.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpiqk7ike7.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpiqk7ike7.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpiqk7ike7.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpiqk7ike7.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqk7ike7.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz3bzkb5.cpp: In function 'int main()':\n/tmp/tmpyz3bzkb5.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz3bzkb5.cpp:2:\n/tmp/tmpyz3bzkb5.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpyz3bzkb5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpyz3bzkb5.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpyz3bzkb5.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpyz3bzkb5.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpyz3bzkb5.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyz3bzkb5.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (i < n) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1a32utm.cpp: In function 'int main()':\n/tmp/tmpv1a32utm.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1a32utm.cpp:2:\n/tmp/tmpv1a32utm.cpp:29:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpv1a32utm.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpv1a32utm.cpp:29:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpv1a32utm.cpp:29:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpv1a32utm.cpp:30:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpv1a32utm.cpp:30:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv1a32utm.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
