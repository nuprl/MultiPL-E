language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw72x_hou.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpw72x_hou.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpw72x_hou.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpw72x_hou.cpp:\
    \ In function 'int main()':\n/tmp/tmpw72x_hou.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw72x_hou.cpp:2:\n/tmp/tmpw72x_hou.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpw72x_hou.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpw72x_hou.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw72x_hou.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpw72x_hou.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpw72x_hou.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ an = x.front();\n    long long sum = 0;\n    for (long long i : x) {\n     \
    \   sum += i;\n        if (sum % 2 == 0) {\n            ans.push_back(an);\n \
    \           an = i;\n            sum = 0;\n        }\n    }\n    ans.push_back(an);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3pvgsdcj.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3pvgsdcj.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmp3pvgsdcj.cpp: In function 'int main()':\n/tmp/tmp3pvgsdcj.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3pvgsdcj.cpp:2:\n/tmp/tmp3pvgsdcj.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3pvgsdcj.cpp:28:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3pvgsdcj.cpp:28:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3pvgsdcj.cpp:28:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3pvgsdcj.cpp:28:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3pvgsdcj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2sbofjj.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpf2sbofjj.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmpf2sbofjj.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmpf2sbofjj.cpp:\
    \ In function 'int main()':\n/tmp/tmpf2sbofjj.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf2sbofjj.cpp:2:\n/tmp/tmpf2sbofjj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpf2sbofjj.cpp:26:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpf2sbofjj.cpp:26:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf2sbofjj.cpp:26:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpf2sbofjj.cpp:26:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpf2sbofjj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (long long i : x) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if\
    \ (i % 10 != mod) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7pvad21.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpu7pvad21.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpu7pvad21.cpp:19:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpu7pvad21.cpp:\
    \ In function 'int main()':\n/tmp/tmpu7pvad21.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7pvad21.cpp:2:\n/tmp/tmpu7pvad21.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpu7pvad21.cpp:28:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpu7pvad21.cpp:28:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpu7pvad21.cpp:28:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpu7pvad21.cpp:28:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpu7pvad21.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        digit = sum % 10;\n        if (digit % 2 == 0) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8euxtqm8.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp8euxtqm8.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmp8euxtqm8.cpp: In function 'int main()':\n/tmp/tmp8euxtqm8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8euxtqm8.cpp:2:\n/tmp/tmp8euxtqm8.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp8euxtqm8.cpp:26:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp8euxtqm8.cpp:26:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8euxtqm8.cpp:26:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8euxtqm8.cpp:26:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8euxtqm8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        sum += i;\n    }\n    for(long long i : ans) {\n        long long d =\
    \ i % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 != 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 != 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        \n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkoe__yza.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpkoe__yza.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmpkoe__yza.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmpkoe__yza.cpp:23:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans) {\n                       ^\n/tmp/tmpkoe__yza.cpp:26:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : ans) {\n                       ^\n/tmp/tmpkoe__yza.cpp:32:23: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(long long i : ans) {\n \
    \                      ^\n/tmp/tmpkoe__yza.cpp:35:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for(long long i : ans) {\n       \
    \                ^\n/tmp/tmpkoe__yza.cpp:41:23: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(long long i : ans) {\n             \
    \          ^\n/tmp/tmpkoe__yza.cpp:44:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : ans) {\n                     \
    \  ^\n/tmp/tmpkoe__yza.cpp:50:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for(long long i : ans) {\n                       ^\n/tmp/tmpkoe__yza.cpp:53:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans) {\n                       ^\n/tmp/tmpkoe__yza.cpp:59:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : ans) {\n                       ^\n/tmp/tmpkoe__yza.cpp:62:23: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(long long i : ans) {\n \
    \                      ^\n/tmp/tmpkoe__yza.cpp:68:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for(long long i : ans) {\n       \
    \                ^\n/tmp/tmpkoe__yza.cpp:71:23: error: range-based 'for' loops\
    \ are not allowed in C++98 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp81nl6brz.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp81nl6brz.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmp81nl6brz.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmp81nl6brz.cpp:\
    \ In function 'int main()':\n/tmp/tmp81nl6brz.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp81nl6brz.cpp:2:\n/tmp/tmp81nl6brz.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp81nl6brz.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp81nl6brz.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp81nl6brz.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp81nl6brz.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp81nl6brz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjrrq4cc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvjrrq4cc.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpvjrrq4cc.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpvjrrq4cc.cpp:\
    \ In function 'int main()':\n/tmp/tmpvjrrq4cc.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/tmp/tmpvjrrq4cc.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvjrrq4cc.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvjrrq4cc.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvjrrq4cc.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvjrrq4cc.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjrrq4cc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvjrrq4cc.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpvjrrq4cc.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpvjrrq4cc.cpp:\
    \ In function 'int main()':\n/tmp/tmpvjrrq4cc.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/tmp/tmpvjrrq4cc.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvjrrq4cc.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvjrrq4cc.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvjrrq4cc.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvjrrq4cc.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjrrq4cc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvjrrq4cc.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpvjrrq4cc.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpvjrrq4cc.cpp:\
    \ In function 'int main()':\n/tmp/tmpvjrrq4cc.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/tmp/tmpvjrrq4cc.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvjrrq4cc.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvjrrq4cc.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvjrrq4cc.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvjrrq4cc.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        digit = sum % 10;\n        if (digit % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvsz86e6.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpnvsz86e6.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpnvsz86e6.cpp: In function 'int main()':\n/tmp/tmpnvsz86e6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvsz86e6.cpp:2:\n/tmp/tmpnvsz86e6.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpnvsz86e6.cpp:26:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpnvsz86e6.cpp:26:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnvsz86e6.cpp:26:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnvsz86e6.cpp:26:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnvsz86e6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjrrq4cc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvjrrq4cc.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpvjrrq4cc.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpvjrrq4cc.cpp:\
    \ In function 'int main()':\n/tmp/tmpvjrrq4cc.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/tmp/tmpvjrrq4cc.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvjrrq4cc.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvjrrq4cc.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvjrrq4cc.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvjrrq4cc.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % 2 != 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozppvv4c.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpozppvv4c.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmpozppvv4c.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmpozppvv4c.cpp:22:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans) {\n                       ^\n/tmp/tmpozppvv4c.cpp: In function\
    \ 'int main()':\n/tmp/tmpozppvv4c.cpp:30:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = unique_digits;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpozppvv4c.cpp:2:\n/tmp/tmpozppvv4c.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpozppvv4c.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpozppvv4c.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpozppvv4c.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpozppvv4c.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : x) {\n        sum += i;\n        count += 1;\n    }\n    for (long long\
    \ i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n       \
    \ }\n    }\n    for (long long i : ans) {\n        ans -= i;\n    }\n    ans.push_back(sum);\n\
    \    ans.push_back(count);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdahn8hd.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpfdahn8hd.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmpfdahn8hd.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmpfdahn8hd.cpp:16:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : x) {\n                        ^\n/tmp/tmpfdahn8hd.cpp:20:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (long long i\
    \ : x) {\n                        ^\n/tmp/tmpfdahn8hd.cpp:25:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (long long i : ans) {\n\
    \                        ^\n/tmp/tmpfdahn8hd.cpp:26:13: error: no match for 'operator-='\
    \ (operand types are 'std::vector<long int>' and 'long long int')\n         ans\
    \ -= i;\n             ^\n/tmp/tmpfdahn8hd.cpp: In function 'int main()':\n/tmp/tmpfdahn8hd.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfdahn8hd.cpp:2:\n/tmp/tmpfdahn8hd.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpfdahn8hd.cpp:34:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpfdahn8hd.cpp:34:82: warning: extended initializer li"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2y01s1j.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpm2y01s1j.cpp:15:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x){\n                       ^\n\
    /tmp/tmpm2y01s1j.cpp:18:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x){\n                       ^\n/tmp/tmpm2y01s1j.cpp:\
    \ In function 'int main()':\n/tmp/tmpm2y01s1j.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm2y01s1j.cpp:2:\n/tmp/tmpm2y01s1j.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpm2y01s1j.cpp:28:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpm2y01s1j.cpp:28:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm2y01s1j.cpp:28:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpm2y01s1j.cpp:28:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm2y01s1j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    for(long long i = 0; i < ans.size(); i++) {\n        ans[i]\
    \ = ans[i] / 10;\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1jqi0av.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpd1jqi0av.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmpd1jqi0av.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmpd1jqi0av.cpp: In\
    \ function 'int main()':\n/tmp/tmpd1jqi0av.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd1jqi0av.cpp:2:\n/tmp/tmpd1jqi0av.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpd1jqi0av.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpd1jqi0av.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpd1jqi0av.cpp:29:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpd1jqi0av.cpp:29:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpd1jqi0av.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 == mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34crejb1.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp34crejb1.cpp:14:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp34crejb1.cpp:17:5: error: expected\
    \ ';' before 'long'\n     long long mod = sum % 10;\n     ^\n/tmp/tmp34crejb1.cpp:18:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : x) {\n \
    \    ^\n/tmp/tmp34crejb1.cpp:18:5: error: expected ')' before 'for'\n/tmp/tmp34crejb1.cpp:18:15:\
    \ error: 'i' does not name a type\n     for (auto i : x) {\n               ^\n\
    /tmp/tmp34crejb1.cpp:23:5: error: expected ';' before 'return'\n     return ans;\n\
    \     ^\n/tmp/tmp34crejb1.cpp:23:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmp34crejb1.cpp:23:5: error: expected ';' before 'return'\n/tmp/tmp34crejb1.cpp:23:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp34crejb1.cpp:23:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp34crejb1.cpp: In function 'int\
    \ main()':\n/tmp/tmp34crejb1.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp34crejb1.cpp:2:\n/tmp/tmp34crejb1.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp34crejb1.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp34crejb1.cpp:27:82: warning: extended initializer lists only available\
    \ with -std="
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjrrq4cc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvjrrq4cc.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpvjrrq4cc.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpvjrrq4cc.cpp:\
    \ In function 'int main()':\n/tmp/tmpvjrrq4cc.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/tmp/tmpvjrrq4cc.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvjrrq4cc.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvjrrq4cc.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvjrrq4cc.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvjrrq4cc.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvjrrq4cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc8nfmmj.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpbc8nfmmj.cpp:14:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpbc8nfmmj.cpp:17:5: error: expected\
    \ ';' before 'long'\n     long long mod = sum % 10;\n     ^\n/tmp/tmpbc8nfmmj.cpp:18:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : x) {\n \
    \    ^\n/tmp/tmpbc8nfmmj.cpp:18:5: error: expected ')' before 'for'\n/tmp/tmpbc8nfmmj.cpp:18:15:\
    \ error: 'i' does not name a type\n     for (auto i : x) {\n               ^\n\
    /tmp/tmpbc8nfmmj.cpp:23:5: error: expected ';' before 'return'\n     return ans;\n\
    \     ^\n/tmp/tmpbc8nfmmj.cpp:23:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpbc8nfmmj.cpp:23:5: error: expected ';' before 'return'\n/tmp/tmpbc8nfmmj.cpp:23:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpbc8nfmmj.cpp:23:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpbc8nfmmj.cpp: In function 'int\
    \ main()':\n/tmp/tmpbc8nfmmj.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc8nfmmj.cpp:2:\n/tmp/tmpbc8nfmmj.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbc8nfmmj.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbc8nfmmj.cpp:27:82: warning: extended initializer lists only available\
    \ with -std="
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmperi822ho.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmperi822ho.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmperi822ho.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmperi822ho.cpp:15:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : x) {\n                        ^\n/tmp/tmperi822ho.cpp: In function\
    \ 'int main()':\n/tmp/tmperi822ho.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = unique_digits;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmperi822ho.cpp:2:\n/tmp/tmperi822ho.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmperi822ho.cpp:26:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmperi822ho.cpp:26:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmperi822ho.cpp:26:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmperi822ho.cpp:26:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:"
  stdout: ''
