language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ an = x.front();\n    long long sum = 0;\n    for (long long i : x) {\n     \
    \   sum += i;\n        if (sum % 2 == 0) {\n            ans.push_back(an);\n \
    \           an = i;\n            sum = 0;\n        }\n    }\n    ans.push_back(an);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpx5cjq1si: /tmp/tmpx5cjq1si.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (long long i : x) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if\
    \ (i % 10 != mod) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpx9btds9u: /tmp/tmpx9btds9u.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        digit = sum % 10;\n        if (digit % 2 == 0) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2ndvs5e0: /tmp/tmp2ndvs5e0.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        sum += i;\n    }\n    for(long long i : ans) {\n        long long d =\
    \ i % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 != 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 != 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 != 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        \n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeba3kckh.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeba3kckh.cpp:110:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  110 | int main() {\n      |     \
    \       ^\n/tmp/tmpeba3kckh.cpp:116:1: error: expected \u2018}\u2019 at end of\
    \ input\n  116 | }\n      | ^\n/tmp/tmpeba3kckh.cpp:11:54: note: to match this\
    \ \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long> x)\
    \ {\n      |                                                      ^\n/tmp/tmpeba3kckh.cpp:116:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  116 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxtogggiv: /tmp/tmpxtogggiv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        digit = sum % 10;\n        if (digit % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwxkldgj1: /tmp/tmpwxkldgj1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % 2 != 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpeou0q2iw: /tmp/tmpeou0q2iw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : x) {\n        sum += i;\n        count += 1;\n    }\n    for (long long\
    \ i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n       \
    \ }\n    }\n    for (long long i : ans) {\n        ans -= i;\n    }\n    ans.push_back(sum);\n\
    \    ans.push_back(count);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp618jviba.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp618jviba.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp618jviba.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp618jviba.cpp:26:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   26 |         ans -= i;\n      |         ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg499o45n: /tmp/tmpg499o45n.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    for(long long i = 0; i < ans.size(); i++) {\n        ans[i]\
    \ = ans[i] / 10;\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjl9i3xc3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjl9i3xc3.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpjl9i3xc3.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 == mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplxcwlh8m: /tmp/tmplxcwlh8m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblo970xp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpblo970xp.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpblo970xp.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long temp = sum - i;\n        if (temp % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp39pyazvl: /tmp/tmp39pyazvl.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(sum % 2 == 0) {\n     \
    \       ans.push_back(i);\n        }\n    }\n    for(long long i : x) {\n    \
    \    if(sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1qwp3pjz: /tmp/tmp1qwp3pjz.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        while(sum % 10 == 0) {\n\
    \            sum += 10;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp679hts9b: /tmp/tmp679hts9b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        if (i % 10 != mod) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6u4cdnx0: /tmp/tmp6u4cdnx0.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 10 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmps8nk93ke: /tmp/tmps8nk93ke.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ ans;\n    long long ans = 0;\n    long long count = 0;\n    for(long long i\
    \ = 0; i < x.size(); i++) {\n        long long temp = x[i];\n        while(temp\
    \ > 0) {\n            ans = ans * 10 + temp % 10;\n            temp = temp / 10;\n\
    \            count++;\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        long long temp = x[i];\n        while(temp > 0) {\n        \
    \    ans = ans * 10 + temp % 10;\n            temp = temp / 10;\n            count--;\n\
    \        }\n    }\n    if(count > 0) {\n        ans.push_back(ans);\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr3jjw88h.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr3jjw88h.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpr3jjw88h.cpp:13:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   13 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpr3jjw88h.cpp:19:23: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   19 |             ans = ans * 10 + temp % 10;\n      |                   ~~~\
    \ ^ ~~\n      |                   |     |\n      |                   |     int\n\
    \      |                   std::vector<long int>\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpr3jjw88h.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpr3jjw88h.cpp:19:25:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   19 |             ans = ans * 10 + temp % 10;\n      |                   \
    \      ^~\nIn file included from /usr/include/c++/9/ccomplex:39,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n          \
    \       from /tmp/tmpr3jjw88h.cpp:2:\n/usr/include/c++/9/complex:400:5: note:\
    \ candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpr3jjw88h.cpp:19:25:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::comple"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5dekyoh8: /tmp/tmp5dekyoh8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     long long temp = sum - i;\n            if(temp % 2 == 0) {\n           \
    \     ans.push_back(i);\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgbe4a8lz: /tmp/tmpgbe4a8lz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long remain = sum - i;\n        if (remain % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpw1jx6ghi: /tmp/tmpw1jx6ghi.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for (long long i = 0; i < x.size(); i++) {\n        ans += x[i];\n\
    \    }\n    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 ==\
    \ 0) {\n            ans -= x[i];\n        }\n    }\n    for (long long i = 0;\
    \ i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n            ans += x[i];\n\
    \        }\n    }\n    for (long long i = 0; i < x.size(); i++) {\n        if\
    \ (x[i] % 2 == 0) {\n            ans += x[i];\n        }\n    }\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n           \
    \ ans -= x[i];\n        }\n    }\n    for (long long i = 0; i < x.size(); i++)\
    \ {\n        if (x[i] % 2 == 0) {\n            ans += x[i];\n        }\n    }\n\
    \    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n\
    \            ans -= x[i];\n        }\n    }\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        if (x[i] % 2 == 0) {\n            ans += x[i];\n        }\n\
    \    }\n    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 !=\
    \ 0) {\n            ans -= x[i];\n        }\n    }\n    for (long long i = 0;\
    \ i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            ans += x[i];\n\
    \        }\n    }\n    for (long long i = 0; i < x.size(); i++) {\n        if\
    \ (x[i] % 2 != 0) {\n            ans -= x[i];\n        }\n    }\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n           \
    \ ans += x[i];\n        }\n    }\n    for (long long i = 0; i < x.size(); i++)\
    \ {\n        if (x[i] % 2 != 0) {\n            ans -= x[i];\n        }\n    }\n\
    \    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n\
    \            ans += x[i];\n        }\n    }\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        if (x[i] % 2 != 0) {\n            ans -= x[i];\n        }\n\
    \    }\n    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 ==\
    \ 0) {\n            ans += x[i];\n        }\n    }\n    for (long long i = 0;\
    \ i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n            ans -= x[i];\n\
    \        }\n    }\n    for (long long i = 0; i < x.size(); i++) {\n        if\
    \ (x[i] % 2 == 0) {\n            ans += x[i];\n        }\n    }\n    for (long\
    \ long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n           \
    \ ans -= x[i];\n        }\n    }\n    for (long long i = 0; i < x.size(); i++)\
    \ {\n        if (x[i] % 2 == 0) {\n\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbq02944h.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbq02944h.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpbq02944h.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpbq02944h.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpbq02944h.cpp:19:17: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   19 |     \
    \        ans -= x[i];\n/tmp/tmpbq02944h.cpp:24:17: error: no match for \u2018\
    operator+=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   24 |             ans += x[i];\n/tmp/tmpbq02944h.cpp:29:17:\
    \ error: no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   29 |             ans\
    \ += x[i];\n/tmp/tmpbq02944h.cpp:34:17: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   34 |     \
    \        ans -= x[i];\n/tmp/tmpbq02944h.cpp:39:17: error: no match for \u2018\
    operator+=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   39 |             ans += x[i];\n/tmp/tmpbq02944h.cpp:44:17:\
    \ error: no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<st"
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x)\n        sum += i;\n    for(long long i :\
    \ x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long\
    \ i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long\
    \ long i : x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 ==\
    \ 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i %\
    \ 2 != 0)\n            ans.push_back(i);\n    for(long long i : x)\n        sum\
    \ += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long long i :\
    \ x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n  \
    \          ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 != 0)\n\
    \            ans.push_back(i);\n    for(long long i : x)\n        sum += i;\n\
    \    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long long i :\
    \ x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n  \
    \          ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 != 0)\n\
    \            ans.push_back(i);\n    for(long long i : x)\n        sum += i;\n\
    \    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwod9bef.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptwod9bef.cpp:93:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmptwod9bef.cpp:92:12:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   92 |         if(\n\
    \      |           ~^\n      |            )\n   93 | }\n      | ~           \n\
    /tmp/tmptwod9bef.cpp:93:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmptwod9bef.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long temp = sum - i;\n        if (temp % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp39pyazvl: /tmp/tmp39pyazvl.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long mod = sum % 10;\n        if (mod != 0) {\n            ans.push_back(i);\n\
    \        }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphadxnyj3: /tmp/tmphadxnyj3.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i : x){\n        sum +=\
    \ i;\n    }\n    for(long long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : ans){\n        if(sum % i == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans){\n        ans -= i;\n    }\n   \
    \ for(long long i : \n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp92kq4h6u.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp92kq4h6u.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp92kq4h6u.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp92kq4h6u.cpp:24:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   24 |         ans -= i;\n      |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:32:13:\
    \ error: no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   32 |         ans -= i;\n     \
    \ |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:40:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   40 |         ans -= i;\n      |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:48:13:\
    \ error: no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   48 |         ans -= i;\n     \
    \ |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:56:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   56 |         ans -= i;\n      |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:64:13:\
    \ error: no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   64 |         ans -= i;\n     \
    \ |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:72:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   72 |         ans -= i;\n      |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:80:13:\
    \ error: no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   80 |         ans -= i;\n     \
    \ |         ~~~~^~~~\n/tmp/tmp92kq4h6u.cpp:88:13: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   88 | "
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ y;\n    for(long i=0;i<x.size();i++){\n        long sum=0;\n        for(long\
    \ j=0;j<i;j++){\n            sum+=x[j];\n        }\n        if(sum%2==0){\n  \
    \          y.push_back(x[i]);\n        }\n    }\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc9pa0l8q: /tmp/tmpc9pa0l8q.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long ans = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans += x[i];\n\
    \        }\n    }\n    ans.push_back(ans);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdxp_ogs.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppdxp_ogs.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmppdxp_ogs.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmppdxp_ogs.cpp:18:17: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   18 |     \
    \        ans += x[i];\n/tmp/tmppdxp_ogs.cpp:21:22: error: no matching function\
    \ for call to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\
    \n   21 |     ans.push_back(ans);\n      |                      ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppdxp_ogs.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       pus"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 10 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmps8nk93ke: /tmp/tmps8nk93ke.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long digit = 0;\n    long long count\
    \ = 0;\n    long long i = 0;\n    long long j = 0;\n    long long k = 0;\n   \
    \ long long l = x.size();\n    while(i < l) {\n        digit = x.at(i);\n    \
    \    sum += digit;\n        ans.push_back(digit);\n        count += 1;\n     \
    \   i += 1;\n    }\n    while(sum != 0) {\n        ans.push_back(sum % 10);\n\
    \        sum += ans.back();\n        count += 1;\n    }\n    while(count != 0)\
    \ {\n        ans.push_back(count);\n        count -= 1;\n    }\n    while(ans.size()\
    \ != 0) {\n        ans.push_back(ans.back());\n    }\n    while(ans.size() !=\
    \ 0) {\n        ans.push_back(ans.back());\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppt_3cemt.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppt_3cemt.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmppt_3cemt.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(sum % 2 == 0) {\n     \
    \       ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpleqndzov: /tmp/tmpleqndzov.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ y;\n    for(long i=0;i<x.size();i++){\n        long sum=0;\n        for(long\
    \ j=i;j<x.size();j++){\n            sum+=x[j];\n        }\n        if(sum%2==0){\n\
    \            y.push_back(x[i]);\n        }\n    }\n    sort(y.begin(),y.end());\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4yhtyi45: /tmp/tmp4yhtyi45.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i : x) {\n        sum +=\
    \ i;\n        ans = sum % 10;\n        if(ans == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        for(long long j : x)\
    \ {\n            if(j == i) {\n                x.erase(x.begin() + j);\n     \
    \       }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp91_nk7fp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp91_nk7fp.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp91_nk7fp.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp91_nk7fp.cpp:17:21: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   17 |         ans = sum % 10;\n      |                     ^~\nIn file included\
    \ from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91_nk7fp.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long long int\u2019 to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91_nk7fp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocat"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ y;\n    for(long i=0;i<x.size();i++){\n        long sum=0;\n        for(long\
    \ j=0;j<i;j++){\n            sum+=x[j];\n        }\n        if(sum%2==0){\n  \
    \          y.push_back(x[i]);\n        }\n    }\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc9pa0l8q: /tmp/tmpc9pa0l8q.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjj5useah: /tmp/tmpjj5useah.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n  \
    \      }\n    }\n    std::sort(ans.begin(), ans.end());\n    long long ans = 0;\n\
    \    for (long long i : ans) {\n        ans += i;\n    }\n    ans %= sum;\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6x47w2z.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_6x47w2z.cpp:23:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   23 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp_6x47w2z.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp_6x47w2z.cpp:25:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   25 |         ans += i;\n      |         ~~~~^~~~\n/tmp/tmp_6x47w2z.cpp:27:9:\
    \ error: no match for \u2018operator%=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   27 |     ans %= sum;\n      |\
    \     ~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        digit = sum % 10;\n        if (digit == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwcrf7ueo: /tmp/tmpwcrf7ueo.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jxkbegz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9jxkbegz.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp9jxkbegz.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans_sum = 0;\n    long long ans_count = 0;\n    for (long long i : x) {\n  \
    \      ans_sum += i;\n        ans_count++;\n    }\n    long long ans_digit = ans_sum\
    \ / ans_count;\n    for (long long i : x) {\n        if (i % ans_digit != 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp08nza9wk: /tmp/tmp08nza9wk.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long mod = sum % 10;\n    long long\
    \ remain = sum / 10;\n    for (long long i : x) {\n        if (i % 10 != 0) {\n\
    \            ans.push_back(remain);\n            sum += remain * 10;\n       \
    \     remain %= 10;\n            count += 1;\n        }\n    }\n    if (count\
    \ != 0) {\n        ans.push_back(remain);\n        sum += remain * 10;\n     \
    \   remain %= 10;\n    }\n    if (mod != 0) {\n        ans.push_back(mod);\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpzek2rkhn: /tmp/tmpzek2rkhn.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long digit;\n    for (long long i\
    \ = 0; i < x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n\
    \        while (sum > 0) {\n            ans.push_back(sum % 10);\n           \
    \ sum = (sum / 10) % 10;\n        }\n    }\n    for (long long i = 0; i < ans.size();\
    \ i++) {\n        if (ans.at(i) % 2 == 0) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lpw1qrq.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0lpw1qrq.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp0lpw1qrq.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            long long tmp = sum - i;\n            if (tmp % 2 ==\
    \ 0) {\n                ans.push_back(tmp);\n            }\n        }\n    }\n\
    \    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphyokv54_: /tmp/tmphyokv54_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    for (long long i : x) {\n        if (i\
    \ % 2 == 0) {\n            continue;\n        }\n        long long tmp = sum /\
    \ count;\n        if (tmp % 2 == 0) {\n            ans.push_back(tmp);\n     \
    \   }\n        sum -= i;\n        count -= 1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3u3c9bwn: /tmp/tmp3u3c9bwn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long xx = 0, yy = 0, zz = 0;\n    for(long long i : x) {\n\
    \        xx = i * 10;\n        yy = xx % 10;\n        zz = xx / 10;\n        if(yy\
    \ == 0 && zz % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb84kadyx.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb84kadyx.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpb84kadyx.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long digit = i % 10;\n        if(digit % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    for(long long i : ans)\
    \ {\n        long long digit = i % 10;\n        if(digit % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n    \
    \    long long digit = i % 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long digit = i %\
    \ 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        long long digit = i % 10;\n    \
    \    if(digit % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   for(long long i : ans) {\n        long long digit = i % 10;\n        if(digit\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        long long digit = i % 10;\n        if(digit % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        long long digit = i % 10;\n        if(digit % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n        long\
    \ long digit = i % 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long digit = i %\
    \ 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        long long digit = i % 10;\n    \
    \    if(digit % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   for(long long i : ans) {\n        long long digit = i % 10;\n        if(digit\
    \ % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ i : ans) {\n        long long digit = i % 10;\n        if(digit % 2 == 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        long long digit = i % 10;\n        if(digit % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n        long\
    \ long digit = i % 10;\n        if(digit % 2 == 0) {\n            \n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2sxlnn_.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj2sxlnn_.cpp:106:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  106 | int main() {\n      |     \
    \       ^\n/tmp/tmpj2sxlnn_.cpp:112:1: error: expected \u2018}\u2019 at end of\
    \ input\n  112 | }\n      | ^\n/tmp/tmpj2sxlnn_.cpp:101:28: note: to match this\
    \ \u2018{\u2019\n  101 |     for(long long i : ans) {\n      |               \
    \             ^\n/tmp/tmpj2sxlnn_.cpp:112:1: error: expected \u2018}\u2019 at\
    \ end of input\n  112 | }\n      | ^\n/tmp/tmpj2sxlnn_.cpp:11:54: note: to match\
    \ this \u2018{\u2019\n   11 | std::vector<long> unique_digits(std::vector<long>\
    \ x) {\n      |                                                      ^\n/tmp/tmpj2sxlnn_.cpp:112:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  112 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093506
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i : x) {\n        sum +=\
    \ i;\n    }\n    for(long long i : x) {\n        ans += (i % 10) * sum;\n    \
    \    ans /= 10;\n    }\n    for(long long i : x) {\n        if(ans % 2 == 0) {\n\
    \            ans /= 2;\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6jmg15_f.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6jmg15_f.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp6jmg15_f.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp6jmg15_f.cpp:19:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   19 |         ans += (i % 10) * sum;\n      |         ~~~~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6jmg15_f.cpp:20:13: error: no match for \u2018operator/=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n   20 |  \
    \       ans /= 10;\n      |         ~~~~^~~~~\n/tmp/tmp6jmg15_f.cpp:23:16: error:\
    \ no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   23 |         if(ans % 2 == 0) {\n      |\
    \            ~~~ ^ ~\n      |            |     |\n      |            |     int\n\
    \      |            std::vector<long int>\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6jmg15_f.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6jmg15_f.cpp:23:18: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   23 |         if(ans % 2 == 0) {\n      |           "
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 == mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplxcwlh8m: /tmp/tmplxcwlh8m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    long long an = sum / 10;\n    for (long long i : x) {\n\
    \        if (i % 2 == 0) {\n            long long tmp = (sum - an * 10 + i) /\
    \ 10;\n            if (tmp % 2 == 0) {\n                ans.push_back(tmp);\n\
    \            }\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnmlssg5g: /tmp/tmpnmlssg5g.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans += x[i];\n\
    \        if(ans % 2 == 0) {\n            ans /= 2;\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprs1c1c8o.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprs1c1c8o.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmprs1c1c8o.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmprs1c1c8o.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmprs1c1c8o.cpp:16:16: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   16 |         if(ans % 2 == 0) {\n      |            ~~~ ^ ~\n      |     \
    \       |     |\n      |            |     int\n      |            std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/valarray:603,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n            \
    \     from /tmp/tmprs1c1c8o.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmprs1c1c8o.cpp:16:18: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   16 |         if(ans % 2 == 0) {\n      |                  ^\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \       "
  stdout: ''
  timestamp: 1660093506
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5dekyoh8: /tmp/tmp5dekyoh8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i : x) {\n        ans += i;\n    }\n    for(long\
    \ long i : x) {\n        while(ans % 2 == 0) {\n            ans /= 2;\n      \
    \  }\n        if(ans == i) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1os4a6l6.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1os4a6l6.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp1os4a6l6.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp1os4a6l6.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   15 |         ans += i;\n      |         ~~~~^~~~\n/tmp/tmp1os4a6l6.cpp:18:19:\
    \ error: no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   18 |         while(ans % 2 == 0) {\n   \
    \   |               ~~~ ^ ~\n      |               |     |\n      |          \
    \     |     int\n      |               std::vector<long int>\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp1os4a6l6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp1os4a6l6.cpp:18:21: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   18 |         while(ans % 2 == 0) {\n      |                     ^\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp1os4a6l6.cpp:2:"
  stdout: ''
  timestamp: 1660093506
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jxkbegz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9jxkbegz.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp9jxkbegz.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    for(long &i : x){\n        while(i/10 != 0){\n            if(i%10\
    \ == 0){\n                ans.push_back(i);\n                break;\n        \
    \    }\n            i = i/10;\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpccju2f3h: /tmp/tmpccju2f3h.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    long long an = sum / 10;\n    for (long long i : x) {\n\
    \        if (i % 2 == 0) {\n            continue;\n        }\n        if (i %\
    \ mod == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpblgrb2u0: /tmp/tmpblgrb2u0.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long digit;\n    for(long long i\
    \ = 0; i < x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n\
    \        ans += digit % 10;\n    }\n    ans = sum % 10;\n    ans = ans / 10;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        digit = x.at(i);\n   \
    \     sum += digit;\n        ans += digit % 10;\n    }\n    ans = sum % 10;\n\
    \    ans = ans / 10;\n    for(long long i = 0; i < x.size(); i++) {\n        digit\
    \ = x.at(i);\n        sum += digit;\n        ans += digit % 10;\n    }\n    ans\
    \ = sum % 10;\n    ans = ans / 10;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        digit = x.at(i);\n        sum += digit;\n        ans += digit % 10;\n\
    \    }\n    ans = sum % 10;\n    ans = ans / 10;\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n        ans\
    \ += digit % 10;\n    }\n    ans = sum % 10;\n    ans = ans / 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n\
    \        ans += digit % 10;\n    }\n    ans = sum % 10;\n    ans = ans / 10;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        digit = x.at(i);\n   \
    \     sum += digit;\n        ans += digit % 10;\n    }\n    ans = sum % 10;\n\
    \    ans = ans / 10;\n    for(long long i = 0; i < x.size(); i++) {\n        digit\
    \ = x.at(i);\n        sum += digit;\n        ans += digit % 10;\n    }\n    ans\
    \ = sum % 10;\n    ans = ans / 10;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        digit = x.at(i);\n        sum += digit;\n        ans += digit % 10;\n\
    \    }\n    ans = sum % 10;\n    ans = ans / 10;\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n        ans\
    \ += digit % 10;\n    }\n    ans = sum % 10;\n    ans = ans / 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        digit = x.at(i);\n        sum += digit;\n\
    \        ans += digit % 10;\n    }\n    ans = sum % 10;\n    ans = ans / 10;\n\
    \    for(long \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8qtvu6fs.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8qtvu6fs.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp8qtvu6fs.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp8qtvu6fs.cpp:19:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   19 |         ans += digit % 10;\n      |         ~~~~^~~~~~~~~~~~~\n/tmp/tmp8qtvu6fs.cpp:21:17:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   21 |     ans = sum % 10;\n   \
    \   |                 ^~\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8qtvu6fs.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long long int\u2019 to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8qtvu6fs.cpp:2:"
  stdout: ''
  timestamp: 1660093506
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit;\n    for(long long i : x) {\n        sum += i;\n\
    \        digit = sum % 10;\n        if(digit == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0zj7k6og: /tmp/tmp0zj7k6og.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long digit = i % 10;\n        if(digit % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    for(long long i : ans)\
    \ {\n        long long digit = i % 10;\n        if(digit % 2 != 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n    \
    \    long long digit = i % 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnn75rzsf: /tmp/tmpnn75rzsf.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        digit = sum % 10;\n        if (digit % 2 == 0) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2ndvs5e0: /tmp/tmp2ndvs5e0.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     long long sum2 = sum - i;\n            if(sum2 % 2 == 0) {\n           \
    \     ans.push_back(i);\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp234kwloh: /tmp/tmp234kwloh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 == mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplxcwlh8m: /tmp/tmplxcwlh8m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(sum % 2 != 0) {\n     \
    \       ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm3m9hbed: /tmp/tmpm3m9hbed.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmsccvy43.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmsccvy43.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpmsccvy43.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093507
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        while(sum % 10 != 0) {\n\
    \            sum -= 10;\n        }\n        sum += i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        ans += x[i];\n        if(sum % 2 == 0) {\n\
    \            ans -= 1;\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(ans % 2 == 0) {\n            ans -= 1;\n        }\n     \
    \   ans += x[i];\n    }\n    for(long long i = 0; i < x.size(); i++) {\n     \
    \   if(ans % 2 == 0) {\n            ans -= 1;\n        }\n        ans += x[i];\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0)\
    \ {\n            ans -= 1;\n        }\n        ans += x[i];\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0) {\n            ans\
    \ -= 1;\n        }\n        ans += x[i];\n    }\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        if(ans % 2 == 0) {\n            ans -= 1;\n      \
    \  }\n        ans += x[i];\n    }\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        if(ans % 2 == 0) {\n            ans -= 1;\n        }\n        ans\
    \ += x[i];\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(ans\
    \ % 2 == 0) {\n            ans -= 1;\n        }\n        ans += x[i];\n    }\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0) {\n \
    \           ans -= 1;\n        }\n        ans += x[i];\n    }\n    for(long long\
    \ i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0) {\n            ans -=\
    \ 1;\n        }\n        ans += x[i];\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(ans % 2 == 0) {\n            ans -= 1;\n        }\n     \
    \   ans += x[i];\n    }\n    for(long long i = 0; i < x.size(); i++) {\n     \
    \   if(ans % 2 == 0) {\n            ans -= 1;\n        }\n        ans += x[i];\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0)\
    \ {\n            ans -= 1;\n        }\n        ans += x[i];\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(ans % 2 == 0) {\n            ans\
    \ -= 1;\n        }\n        ans += x[i];\n    }\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        if(ans % 2 == 0) {\n            ans -= 1;\n      \
    \  }\n        ans += x[i];\n    }\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0r_v7jm0.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0r_v7jm0.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp0r_v7jm0.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp0r_v7jm0.cpp:17:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   17 |     \
    \    ans += x[i];\n/tmp/tmp0r_v7jm0.cpp:19:17: error: no match for \u2018operator-=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   19 |             ans -= 1;\n      |             ~~~~^~~~\n/tmp/tmp0r_v7jm0.cpp:23:16:\
    \ error: no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   23 |         if(ans % 2 == 0) {\n      |\
    \            ~~~ ^ ~\n      |            |     |\n      |            |     int\n\
    \      |            std::vector<long int>\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp0r_v7jm0.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0r_v7jm0.cpp:23:18: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   23 |       "
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x)\n    {\n        sum += i;\n    }\n    for(long\
    \ long i : x)\n    {\n        if(sum % 2 == 0)\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsat8w6ty: /tmp/tmpsat8w6ty.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long tmp = (sum - i) / 2;\n        if (tmp % 2 == 0) {\n       \
    \     ans.push_back(tmp);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfuw5w5g9: /tmp/tmpfuw5w5g9.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphr0fsng2: /tmp/tmphr0fsng2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long long i : x) {\n        sum +=\
    \ i;\n        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tfeemro.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2tfeemro.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp2tfeemro.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     long long sum = 0;\n            for(long long j : ans) {\n             \
    \   sum += j;\n            }\n            if(sum % 2 == 0) {\n               \
    \ ans.push_back(i);\n            }\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpy_bgp98h: /tmp/tmpy_bgp98h.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long remain = sum % 10;\n        if (remain == i) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsq3a9_20: /tmp/tmpsq3a9_20.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    for(long i=0;i<x.size();i++){\n        long sum=0;\n        for(long\
    \ j=0;j<i;j++){\n            sum+=x[j];\n        }\n        if(sum%2==0){\n  \
    \          ans.push_back(x[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbtmefbb2: /tmp/tmpbtmefbb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        long long temp = sum - i;\n        if (temp % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    if (count % 2 == 0)\
    \ {\n        ans.push_back(sum);\n    }\n    if (mod != 0) {\n        ans.push_back(mod);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb3bsteig: /tmp/tmpb3bsteig.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans += x[i];\n\
    \    }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n      \
    \  if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x[i];\n        }\n    }\n    ans %= 10;\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans += x[i];\n        }\n \
    \   }\n    ans %= 10;\n    for(long long i = 0; i < x.size(); i++) {\n       \
    \ if(x[i] % 2 == 0) {\n            ans -= x[i];\n        }\n    }\n    ans %=\
    \ 10;\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0)\
    \ {\n            ans += x[i];\n        }\n    }\n    ans %= 10;\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ -= x\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxwv1o32.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuxwv1o32.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpuxwv1o32.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpuxwv1o32.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     \
    \    ans += x[i];\n/tmp/tmpuxwv1o32.cpp:17:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   17 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpuxwv1o32.cpp:20:17: error:\
    \ no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   20 |             ans\
    \ -= x[i];\n/tmp/tmpuxwv1o32.cpp:23:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   23 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpuxwv1o32.cpp:26:17: error:\
    \ no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   26 |             ans\
    \ += x[i];\n/tmp/tmpuxwv1o32.cpp:29:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   29 |     ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpuxwv1o32.cpp:32:17: error:\
    \ no match for \u2018operator-=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   32 |             ans\
    \ -= x[i];\n/tmp/tmpuxwv1o32.cpp:35:9: error: no match for \u2018operator%=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   35 |   "
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9p4e41rd: /tmp/tmp9p4e41rd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long d = sum % 10;\n        if (d != 0) {\n            ans.push_back(i);\n\
    \        }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpzg6eoojz: /tmp/tmpzg6eoojz.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    for (auto i\
    \ : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n      \
    \  if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5tkr80ho: /tmp/tmp5tkr80ho.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5dekyoh8: /tmp/tmp5dekyoh8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x)\n    {\n        sum += i;\n    }\n    for(long\
    \ long i : x)\n    {\n        if(i % 2 == 0)\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : x)\n    {\n        if(sum % i == 0)\n\
    \        {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqzox4pjp: /tmp/tmpqzox4pjp.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long digit;\n    long long sum2 = 0;\n    for(long long i\
    \ : x) {\n        sum += i;\n        sum2 += i;\n    }\n    for(long long i =\
    \ sum; i > 0; i /= 10) {\n        digit = sum % 10;\n        if(sum2 % 10 != digit)\
    \ {\n            ans.push_back(digit);\n        }\n        sum2 /= 10;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_2zd8fj1: /tmp/tmp_2zd8fj1.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long temp = sum - i;\n        if (temp % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpav2ubncq: /tmp/tmpav2ubncq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    long long remain = sum / 10;\n    long long count = 0;\n  \
    \  for (auto i : x) {\n        long long cur = i;\n        while (cur > 0) {\n\
    \            long long temp = cur % 10;\n            if (temp % 2 == 0) {\n  \
    \              ans.push_back(temp);\n                cur /= 10;\n            \
    \    count++;\n            }\n        }\n    }\n    if (remain != 0) {\n     \
    \   ans.push_back(remain);\n    }\n    if (mod != 0) {\n        ans.push_back(mod);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093512
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    long long an = sum / 10;\n    while (an > 0) {\n      \
    \  long long temp = an;\n        an = mod / an;\n        mod = temp % an;\n  \
    \      ans.push_back(an);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i : x){\n        ans += i;\n    }\n    while(ans\
    \ % 2 == 0){\n        ans /= 2;\n        ans.push_back(ans);\n    }\n    for(long\
    \ long i : x){\n        if(ans != i){\n            ans.push_back(i);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd5g5fik_.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd5g5fik_.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpd5g5fik_.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpd5g5fik_.cpp:15:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   15 |         ans += i;\n      |         ~~~~^~~~\n/tmp/tmpd5g5fik_.cpp:17:15:\
    \ error: no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   17 |     while(ans % 2 == 0){\n      | \
    \          ~~~ ^ ~\n      |           |     |\n      |           |     int\n \
    \     |           std::vector<long int>\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpd5g5fik_.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpd5g5fik_.cpp:17:17: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   17 |     while(ans % 2 == 0){\n      |                 ^\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpd5g5fik_.cpp:2:\n/usr/include/c++/9/bits/valar"
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjj5useah: /tmp/tmpjj5useah.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n         \
    \   ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb4z0inc2: /tmp/tmpb4z0inc2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long mod = sum % 10;\n    for (long\
    \ long i : x) {\n        long long d = i % 10;\n        if (d != mod) {\n    \
    \        ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpmkp0s1wi: /tmp/tmpmkp0s1wi.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n  \
    \      }\n    }\n    long long an = sum % 10;\n    for (long long i : ans) {\n\
    \        if (i != an) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpe72luod9: /tmp/tmpe72luod9.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    for (auto i\
    \ : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n      \
    \  long long mod = sum % 10;\n        if (mod != 0) {\n            ans.push_back(i);\n\
    \        }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuhmrs5zr: /tmp/tmpuhmrs5zr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ an = x.front();\n    for(long long i : x) {\n        if(i%an==0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpypn0qx7g: /tmp/tmpypn0qx7g.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long tmp = sum - i;\n        if (tmp % 2 == 0) {\n            ans.push_back(tmp);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp10kvtw1y: /tmp/tmp10kvtw1y.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long digit = i % 10;\n        if(digit % 2 == 0)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    for(long long i : ans)\
    \ {\n        long long digit = i % 10;\n        if(digit % 2 == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n    \
    \    long long digit = i % 10;\n        if(digit % 2 != 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        long long digit = i %\
    \ 10;\n        if(digit % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        long long digit = i % 10;\n    \
    \    if(digit % 2 != 0) {\n            ans.push_back(i);\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5iss9laf: /tmp/tmp5iss9laf.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n   \
    \     }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0hv9t2j1: /tmp/tmp0hv9t2j1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        ans += x[i] % 10;\n    }\n    ans = sum / 10;\n\
    \    for (long long i = 0; i < x.size(); i++) {\n        if (x[i] % 10 == ans)\
    \ {\n            ans = ans * 10 + x[i] % 10;\n        }\n    }\n    ans.push_back(ans);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamtgrdex.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpamtgrdex.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpamtgrdex.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpamtgrdex.cpp:17:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   17 |     \
    \    ans += x[i] % 10;\n      |         ~~~~^~~~~~~~~~~~\n/tmp/tmpamtgrdex.cpp:19:17:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   19 |     ans = sum / 10;\n   \
    \   |                 ^~\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpamtgrdex.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long long int\u2019 to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-"
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for(long long\
    \ i : x) {\n        sum += i;\n        count += 1;\n    }\n    for(long long i\
    \ : x) {\n        ans.push_back(i);\n        ans.push_back((sum % 10));\n    \
    \    ans.push_back((sum / 10));\n        sum += i;\n        count += 1;\n    }\n\
    \    for(long long i : ans) {\n        if(i % 2 != 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long i : ans) {\n        ans.push_back(i);\n \
    \   }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwexh8k51.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwexh8k51.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpwexh8k51.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long remainder = sum % 10;\n        if (remainder == 0) {\n    \
    \        ans.push_back(i);\n        }\n        sum -= remainder;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp660dmh2s: /tmp/tmp660dmh2s.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long temp;\n    for (long long i : x) {\n        sum += i;\n\
    \    }\n    temp = sum % 10;\n    sum = sum / 10;\n    for (long long i : x) {\n\
    \        if (i % 2 == 0) {\n            if (sum % 2 == 0) {\n                ans.push_back(i);\n\
    \            }\n            sum += temp;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm0f1vxjv: /tmp/tmpm0f1vxjv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9p4e41rd: /tmp/tmp9p4e41rd.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg499o45n: /tmp/tmpg499o45n.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            result.push_back(i);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvoeblcmj: /tmp/tmpvoeblcmj.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpox7g03nt: /tmp/tmpox7g03nt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long cnt = 0;\n    for(long long i : x) {\n        sum +=\
    \ i;\n        cnt += 1;\n    }\n    for(long long i : x) {\n        if(i % 2 ==\
    \ 0) {\n            ans.push_back(i);\n        }\n    }\n    long long an = sum\
    \ / cnt;\n    for(long long i : ans) {\n        if(i != an) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfh_1leql: /tmp/tmpfh_1leql.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % i == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5dekyoh8: /tmp/tmp5dekyoh8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long mod = sum % 10;\n        if(mod != 0) {\n \
    \           ans.push_back(i);\n            sum -= i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpn4z3jqvf: /tmp/tmpn4z3jqvf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphr0fsng2: /tmp/tmphr0fsng2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ an = x.front();\n    long long ans = an;\n    for(long long i = 1; i < x.size();\
    \ i++) {\n        long long temp = ans;\n        ans = an * 10 + x[i];\n     \
    \   if(ans != temp) {\n            ans.push_back(an);\n            an = temp;\n\
    \        }\n    }\n    ans.push_back(an);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ub7g6yb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4ub7g6yb.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = an;\n      |            \
    \   ^~~\n/tmp/tmp4ub7g6yb.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp4ub7g6yb.cpp:16:26: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long long int\u2019 in initialization\n   16 |         long\
    \ long temp = ans;\n      |                          ^~~\n      |            \
    \              |\n      |                          std::vector<long int>\n/tmp/tmp4ub7g6yb.cpp:17:28:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   17 |         ans = an * 10 + x[i];\n\
    \      |                            ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ub7g6yb.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long long int\u2019 to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from "
  stdout: ''
  timestamp: 1660093508
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x)\n        sum += i;\n    for(long long i :\
    \ x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long\
    \ i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long\
    \ long i : x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 ==\
    \ 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i %\
    \ 2 != 0)\n            ans.push_back(i);\n    for(long long i : x)\n        sum\
    \ += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long long i :\
    \ x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n  \
    \          ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 != 0)\n\
    \            ans.push_back(i);\n    for(long long i : x)\n        sum += i;\n\
    \    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long long i :\
    \ x)\n        sum += i;\n    for(long long i : x)\n        if(i % 2 == 0)\n  \
    \          ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 != 0)\n\
    \            ans.push_back(i);\n    for(long long i : x)\n        sum += i;\n\
    \    for(long long i : x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        sum += i;\n    for(long long i : x)\n     \
    \   if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long i : x)\n\
    \        if(\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwod9bef.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptwod9bef.cpp:93:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmptwod9bef.cpp:92:12:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   92 |         if(\n\
    \      |           ~^\n      |            )\n   93 | }\n      | ~           \n\
    /tmp/tmptwod9bef.cpp:93:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmptwod9bef.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        if (sum % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcgfe3j9h: /tmp/tmpcgfe3j9h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (long long i : x) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    for (long long i : x) {\n        if\
    \ (i % 10 != mod) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpx9btds9u: /tmp/tmpx9btds9u.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(i % 2 != 0) {\n       \
    \     long long sum = 0;\n            for(long long j : ans) {\n             \
    \   sum += j;\n            }\n            if(sum % 2 == 0) {\n               \
    \ ans.push_back(i);\n            }\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpy_bgp98h: /tmp/tmpy_bgp98h.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : ans) {\n        if(sum % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphr0fsng2: /tmp/tmphr0fsng2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    for (auto i\
    \ : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n      \
    \  long long cur = sum - i;\n        if (cur % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpss9mnp_y: /tmp/tmpss9mnp_y.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long d = sum / 10;\n        if (d % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp39d1sg7p: /tmp/tmp39d1sg7p.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(sum % 2 == 0) {\n            ans.push_back(i);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_qd83r1: /tmp/tmpi_qd83r1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x)\n        sum += i;\n    for(long long i :\
    \ x)\n        if(i % 2 == 0)\n            ans.push_back(i);\n    for(long long\
    \ i : x)\n        if(i % 2 != 0)\n            ans.push_back(i);\n    for(long\
    \ long i : x)\n        if(i % 2 == 0 && i % 10 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0 && i % 10 != 0)\n           \
    \ ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 == 0 && i % 10\
    \ == 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i\
    \ % 2 != 0 && i % 10 == 0)\n            ans.push_back(i);\n    for(long long i\
    \ : x)\n        if(i % 2 == 0 && i % 10 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0 && i % 10 != 0)\n           \
    \ ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 == 0 && i % 10\
    \ == 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i\
    \ % 2 != 0 && i % 10 == 0)\n            ans.push_back(i);\n    for(long long i\
    \ : x)\n        if(i % 2 == 0 && i % 10 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0 && i % 10 != 0)\n           \
    \ ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 == 0 && i % 10\
    \ == 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i\
    \ % 2 != 0 && i % 10 == 0)\n            ans.push_back(i);\n    for(long long i\
    \ : x)\n        if(i % 2 == 0 && i % 10 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0 && i % 10 != 0)\n           \
    \ ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 == 0 && i % 10\
    \ == 0)\n            ans.push_back(i);\n    for(long long i : x)\n        if(i\
    \ % 2 != 0 && i % 10 == 0)\n            ans.push_back(i);\n    for(long long i\
    \ : x)\n        if(i % 2 == 0 && i % 10 != 0)\n            ans.push_back(i);\n\
    \    for(long long i : x)\n        if(i % 2 != 0 && i % 10 != 0)\n           \
    \ ans.push_back(i);\n    for(long long i : x)\n        if(i % 2 == 0 && i % 10\
    \ == 0)\n            ans.push_back(i);\n    for(\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgpy6p8e.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxgpy6p8e.cpp:80:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmpxgpy6p8e.cpp:80:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n/tmp/tmpxgpy6p8e.cpp:79:9:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   79 |     for(\n\
    \      |         ^\n      |         ;\n   80 | }\n      | ~        \n/tmp/tmpxgpy6p8e.cpp:80:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   80 | }\n \
    \     | ^\n/tmp/tmpxgpy6p8e.cpp:79:9: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   79 |     for(\n      |        ~^\n      |         )\n   80 |\
    \ }\n      | ~        \n/tmp/tmpxgpy6p8e.cpp:80:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmpxgpy6p8e.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : x){\n        if(sum % i == 0){\n         \
    \   ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpmzysz6fh: /tmp/tmpmzysz6fh.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n  \
    \      }\n    }\n    long long an = sum / 10;\n    for (long long i : ans) {\n\
    \        if (i != an) {\n            ans.push_back(i);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9alaw20v: /tmp/tmp9alaw20v.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long mod = sum % 10;\n        if(mod != 0) {\n \
    \           ans.push_back(i);\n            sum -= i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpn4z3jqvf: /tmp/tmpn4z3jqvf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n   \
    \     }\n    }\n    for(long long i : x) {\n        if(sum % 2 == 0) {\n     \
    \       ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpleqndzov: /tmp/tmpleqndzov.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Your code here\n    std::vector<long>\
    \ ans;\n    long long ans = 0;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n  \
    \      count += 1;\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \            sum += x[i];\n            count += 1;\n        }\n    }\n    for(long\
    \ long i = 0; i < ans.size(); i++) {\n        ans[i] = ans[i] / count;\n    }\n\
    \    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpza6xsolv.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpza6xsolv.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpza6xsolv.cpp:13:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   13 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans = ans *\
    \ 10 + x[i];\n    }\n    for(long long i = ans / 10; i > 0; i--) {\n        if(ans\
    \ % 10 != 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nqmrtpu.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5nqmrtpu.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp5nqmrtpu.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp5nqmrtpu.cpp:15:19: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   15 |         ans = ans * 10 + x[i];\n      |               ~~~ ^ ~~\n    \
    \  |               |     |\n      |               |     int\n      |         \
    \      std::vector<long int>\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5nqmrtpu.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5nqmrtpu.cpp:15:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   15 |         ans = ans * 10 + x[i];\n      |                     ^~\nIn file\
    \ included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5nqmrtpu.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5nqmrtpu.cpp:15:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   15 |         ans = ans * "
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 == mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwno2wrb2: /tmp/tmpwno2wrb2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093504
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long sum2 = sum - i;\n        if (sum2 % 2 == 0) {\n           \
    \ ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpaio029ck: /tmp/tmpaio029ck.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans_sum = 0;\n    long long ans_digit = 0;\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        ans_sum += x[i];\n        ans_digit += x[i] % 10;\n    }\n \
    \   ans.push_back(ans_sum % 10);\n    ans.push_back(ans_sum / 10);\n    long long\
    \ ans_digit2 = ans[ans.size() - 1] % 10;\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        ans_sum += x[i];\n        ans_digit += x[i] % 10;\n        if\
    \ (ans_digit == ans_digit2) {\n            ans.push_back(x[i]);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpeink9pyc: /tmp/tmpeink9pyc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwgb9ndqq: /tmp/tmpwgb9ndqq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // Write your code here\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for(long long i : x){\n        sum += i;\n\
    \    }\n    for(long long i : x){\n        if(sum % 2 == 0){\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcx567_z8: /tmp/tmpcx567_z8.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jxkbegz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9jxkbegz.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp9jxkbegz.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660093504
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans = ans *\
    \ 10 + x[i];\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 != 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 != 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = an\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg8rl770.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjg8rl770.cpp:13:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   13 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpjg8rl770.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpjg8rl770.cpp:15:19: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   15 |         ans = ans * 10 + x[i];\n      |               ~~~ ^ ~~\n    \
    \  |               |     |\n      |               |     int\n      |         \
    \      std::vector<long int>\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjg8rl770.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjg8rl770.cpp:15:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   15 |         ans = ans * 10 + x[i];\n      |                     ^~\nIn file\
    \ included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjg8rl770.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjg8rl770.cpp:15:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   15 |         ans = ans * "
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    long long an = sum / 10;\n    while (an > 0) {\n        ans.push_back(an);\n\
    \        an = an / 10;\n    }\n    ans.push_back(mod);\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpltx9xwck: /tmp/tmpltx9xwck.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : ans){\n        if(sum % i == 0){\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6yag786o: /tmp/tmp6yag786o.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long ans = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        ans += x[i] % 10;\n    }\n    ans = sum / 10;\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 10 != 0) {\n\
    \            ans += x[i] % 10;\n        }\n    }\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        if(x[i] % 10 == 0) {\n            ans += x[i] % 10;\n\
    \        }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 10 != 0) {\n            ans += x[i] % 10;\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 10 == 0) {\n           \
    \ ans += x[i] % 10;\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 10 != 0) {\n            ans += x[i] % 10;\n      \
    \  }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] %\
    \ 10 == 0) {\n            ans += x[i] % 10;\n        }\n    }\n    for(long long\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] % 10 != 0) {\n            ans +=\
    \ x[i] % 10;\n        }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n\
    \        if(x[i] % 10 != 0) {\n            ans += x[i] % 10;\n        }\n    }\n\
    \    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] % 10 != 0) {\n\
    \            ans += x[i] % 10;\n        }\n    }\n    for(long long i = 0; i <\
    \ x.size(); i++) {\n        if(x[i] % 10 != 0) {\n            ans += x[i] % 10;\n\
    \        }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 10 != 0) {\n            ans += x[i] % 10;\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 10 != 0) {\n           \
    \ ans += x[i] % 10;\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 10 != 0) {\n            ans += x[i] % 10;\n      \
    \  }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i] %\
    \ 10 != 0) {\n            ans += x[i] % 10;\n        }\n    }\n    for(long long\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] % 10 != 0) {\n            ans +=\
    \ x[i] % 10;\n        }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n\
    \        if(x[i] % 10 != 0) {\n            ans += x[i] % 10;\n        }\n    }\n\
    \    \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3a4s8hqo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3a4s8hqo.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmp3a4s8hqo.cpp:12:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   12 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmp3a4s8hqo.cpp:17:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   17 |     \
    \    ans += x[i] % 10;\n      |         ~~~~^~~~~~~~~~~~\n/tmp/tmp3a4s8hqo.cpp:19:17:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   19 |     ans = sum / 10;\n   \
    \   |                 ^~\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3a4s8hqo.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long long int\u2019 to \u2018const std::vector<long int>&\u2019\
    \n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-"
  stdout: ''
  timestamp: 1660093508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9ti047fz: /tmp/tmp9ti047fz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093505
