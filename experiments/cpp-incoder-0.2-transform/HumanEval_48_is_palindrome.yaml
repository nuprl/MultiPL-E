name: HumanEval_48_is_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is\
  \ a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"\
  aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"\
  zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
  \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
  aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
  xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
  xywzx\")) == (false));\n}\n"
completions: ["    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n\
    \        if (text[i] != text[n-i-1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.size();\n    bool flag = true;\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code goes here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    // Your\
    \ code goes here\n    int len = text.length();\n    for(int i=len/2-1;i>=0;i--)\n\
    \    {\n        if(text[i]!=text[len-i-1])\n            return false;\n    }\n\
    \    return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    // Your code here\n    \n    int len\
    \ = text.length();\n    int mid = len / 2;\n    \n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[len - i - 1]) {\n            return false;\n\
    \        }\n    }\n    \n    return true;", "    bool flag = true;\n    int len\
    \ = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;", "    int len = text.length();\n    int mid\
    \ = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >=\
    \ 0) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.size();\n\
    \    bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            flag = false;\n            break;\n     \
    \   }\n    }\n    return flag;", "    int n = text.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n \
    \           return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    // Your code goes here\n    int len = text.length();\n    int mid\
    \ = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++) {\n   \
    \     if (text[i] != text[len - i - 1]) {\n            flag = false;\n       \
    \     break;\n        }\n    }\n    return flag;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    if (n < 2) return true;\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ return false;\n        i++;\n        j--;\n    }\n    return true;", "    int\
    \ n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;"]
stop_tokens:
- "\n}"
