name: HumanEval_48_is_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is\
  \ a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"\
  aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"\
  zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
  \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
  aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
  xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
  xywzx\")) == (false));\n}\n"
completions: ["    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n\
    \        if (text[i] != text[n-i-1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.size();\n    bool flag = true;\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code goes here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    // Your\
    \ code goes here\n    int len = text.length();\n    for(int i=len/2-1;i>=0;i--)\n\
    \    {\n        if(text[i]!=text[len-i-1])\n            return false;\n    }\n\
    \    return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    // Your code here\n    \n    int len\
    \ = text.length();\n    int mid = len / 2;\n    \n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[len - i - 1]) {\n            return false;\n\
    \        }\n    }\n    \n    return true;", "    bool flag = true;\n    int len\
    \ = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;", "    int len = text.length();\n    int mid\
    \ = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >=\
    \ 0) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.size();\n\
    \    bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            flag = false;\n            break;\n     \
    \   }\n    }\n    return flag;", "    int n = text.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n \
    \           return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    // Your code goes here\n    int len = text.length();\n    int mid\
    \ = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++) {\n   \
    \     if (text[i] != text[len - i - 1]) {\n            flag = false;\n       \
    \     break;\n        }\n    }\n    return flag;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    if (n < 2) return true;\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ return false;\n        i++;\n        j--;\n    }\n    return true;", "    int\
    \ n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    if (text.size() < 2)\n        return true;\n \
    \   int i = 0;\n    int j = text.size() - 1;\n    while (i < j) {\n        if\
    \ (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    if (text.size() < 2) return true;\n    std::string reverse = text;\n\
    \    reverse.resize(text.size() / 2);\n    std::reverse(text.begin(), text.end());\n\
    \    return text == reverse;", "    int n = text.size();\n    for (int i = 0;\
    \ i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int len = text.length();\n    for (int i = 0;\
    \ i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int len = text.length();\n    int mid = len /\
    \ 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    std::string reverse = \"\";\n    for (auto it\
    \ = text.rbegin(); it != text.rend(); ++it) {\n        reverse += *it;\n    }\n\
    \    return text == reverse;", "    int n = text.length();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n \
    \           return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Write your code here\n    int len = text.length();\n\
    \    for(int i=len/2-1;i>=0;i--){\n        if(text[i]!=text[len-i-1]){\n     \
    \       return false;\n        }\n    }\n    return true;", "    int n = text.size();\n\
    \    if (n < 2) return true;\n    char first = text[0];\n    char last = text[n-1];\n\
    \    for (int i = 1; i < n/2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.size();\n    if (n < 2) return true;\n    int i = 0;\n    int j = n\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) return false;\n \
    \       i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    if (text.size() <= 1) return true;\n    std::string reverse = text;\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    return text == reverse;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    if (n < 2) return true;\n    if (n == 2) return text[0] == text[1];\n   \
    \ int mid = n / 2;\n    std::string left = text.substr(0, mid);\n    std::string\
    \ right = text.substr(mid);\n    return is_palindrome(left) && is_palindrome(right);",
  "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j\
    \ = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return i == mid;", "    int len = text.length();\n    int mid = len / 2;\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n     \
    \   if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;", "    int n = text.size();\n    int i\
    \ = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    // Your code here\n    int len = text.length();\n   \
    \ int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    int n = text.length();\n    for (int i = 0;\
    \ i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ bool is_palindrome = true;\n    for (int i = 0; i < n / 2; i++) {\n        if\
    \ (text[i] != text[n - i - 1]) {\n            is_palindrome = false;\n       \
    \     break;\n        }\n    }\n    return is_palindrome;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    if (text.size() < 2)\n        return true;\n \
    \   int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j])\n            return false;\n        i++;\n\
    \        j--;\n    }\n    return true;", "    int n = text.size();\n    int i\
    \ = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.size();\n    if (n < 2)\n        return\
    \ true;\n    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n        if\
    \ (text[i] != text[n - 1 - i])\n            return false;\n    }\n    return true;",
  "    bool flag = true;\n    int len = text.length();\n    for (int i = 0; i < len\
    \ / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n            flag =\
    \ false;\n            break;\n        }\n    }\n    return flag;", "    int n\
    \ = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] !=\
    \ text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    std::string\
    \ reversed = \"\";\n    for (auto &c : text) {\n        reversed.push_back(c);\n\
    \    }\n    return text == reversed;", "    int len = text.length();\n    for\
    \ (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;", "    int n =\
    \ text.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n  \
    \      if (text[i] != text[j]) {\n            return false;\n        }\n     \
    \   i++;\n        j--;\n    }\n    return true;", "    bool is_palindrome = true;\n\
    \    int length = text.length();\n    for (int i = 0; i < length / 2; i++) {\n\
    \        if (text[i] != text[length - 1 - i]) {\n            is_palindrome = false;\n\
    \            break;\n        }\n    }\n    return is_palindrome;", "    int n\
    \ = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n  \
    \      if (text[i] != text[j]) {\n            return false;\n        }\n     \
    \   i++;\n        j--;\n    }\n    return true;", "    bool flag = true;\n   \
    \ int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if\
    \ (text[i] != text[len - i - 1]) {\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;", "    int len = text.length();\n    int mid\
    \ = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >=\
    \ 0) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ len = text.length();\n    if (len <= 1)\n        return true;\n    int mid =\
    \ len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len\
    \ - 1 - i])\n            return false;\n    }\n    return true;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;", " \
    \   // Your code here\n    int len = text.length();\n    int mid = len / 2;\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n     \
    \   if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return i == mid;", "    int n = text.length();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    if (text.size() <= 1)\n        return true;\n    std::string revText\
    \ = text;\n    revText.reverse();\n    return text == revText;", "    // Your\
    \ code goes here\n    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] !=\
    \ text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    int len = text.length();\n    int mid = len\
    \ / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    int n = text.length();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n \
    \           return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.length();\n    int i = 0;\n    int j = n - 1;\n  \
    \  while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    bool flag\
    \ = true;\n    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n\
    \        if (text[i] != text[n - i - 1]) {\n            flag = false;\n      \
    \      break;\n        }\n    }\n    return flag;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.size();\n    if (n < 2) return true;\n    if (n == 2) return text[0]\
    \ == text[1];\n    if (text[0] != text[n/2]) return false;\n    for (int i = 1;\
    \ i < n/2; i++) {\n        if (text[i] != text[n - i - 1]) return false;\n   \
    \ }\n    return true;", "    int n = text.size();\n    if (n < 2) return true;\n\
    \    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    if (text.size() < 2) return true;\n    int i =\
    \ 0;\n    int j = text.size() - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n       \
    \ if (text[i] != text[len - i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n-i-1]) {\n            flag = false;\n            break;\n        }\n\
    \    }\n    return flag;", "    int n = text.size();\n    if (n < 2) return true;\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    bool flag = true;\n    int len = text.length();\n    int mid =\
    \ len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len\
    \ - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n\
    \    return flag;", "    int n = text.length();\n    int i = 0;\n    int j = n\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;", " \
    \   int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    if (text.size() <\
    \ 2)\n        return true;\n    int i = 0;\n    int j = text.size() - 1;\n   \
    \ while (i < j) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    // Your\
    \ code goes here\n    int len = text.length();\n    for(int i=len/2; i>=0; i--){\n\
    \        if(text[i] != text[len-i-1]){\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;", "    //\
    \ Your code goes here\n    int len = text.length();\n    int mid = len / 2;\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < mid) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    bool isPalindrome =\
    \ true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n\
    \ - i - 1]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return isPalindrome;", "    int n = text.length();\n    int i\
    \ = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.size();\n    if (n < 2)\n        return\
    \ true;\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.length();\n    if (n < 2) return true;\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    std::string reverse = \"\";\n    for (int i =\
    \ 0; i < text.size(); i++) {\n        reverse = reverse + text[i];\n    }\n  \
    \  return text == reverse;", "    int len = text.length();\n    int mid = len\
    \ / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return i == mid;", "    // Your code here\n\
    \    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < mid) {\n        if (text[i] != text[j]) {\n   \
    \         return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int i = 0;\n    int j = len-1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] !=\
    \ text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    if (text.size() < 2)\n        return true;\n    int i = 0;\n  \
    \  int j = text.size() - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n\
    \            return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    if (text.size() < 2)\n        return true;\n    int i = 0;\n    int j = text.size()\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return\
    \ false;\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int len = text.length();\n    for (int i = 0;\
    \ i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code goes here\n    int len = text.size();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n-i-1]) {\n            flag = false;\n            break;\n        }\n\
    \    }\n    return flag;", "    int len = text.length();\n    int mid = len /\
    \ 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return i == mid;", "    bool isPalindrome\
    \ = true;\n    int length = text.length();\n    for (int i = 0; i < length / 2;\
    \ i++) {\n        if (text[i] != text[length - i - 1]) {\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return isPalindrome;", " \
    \   int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    if (i == mid) {\n        return\
    \ true;\n    }\n    return false;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    if (n <= 1)\n        return true;\n\
    \    if (n == 2)\n        return text == text[0];\n    if (text[0] == text[n-1])\n\
    \        return is_palindrome(text.substr(1, n-1));\n    return false;", "   \
    \ int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    std::string reverse = \"\";\n    for (int i = 0; i < n; i++)\
    \ {\n        reverse += text[n-i-1];\n    }\n    return text == reverse;", " \
    \   int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    bool flag = true;\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            flag = false;\n            break;\n        }\n    }\n \
    \   return flag;", "    int n = text.size();\n    int i = 0;\n    int j = n -\
    \ 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;", " \
    \   int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    bool is_palindrome = true;\n    for (int i = 0; i < n / 2; i++) {\n     \
    \   if (text[i] != text[n - i - 1]) {\n            is_palindrome = false;\n  \
    \          break;\n        }\n    }\n    return is_palindrome;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    if (text.size() < 2)\n  \
    \      return true;\n    int i = 0;\n    int j = text.size() - 1;\n    while (i\
    \ < j) {\n        if (text[i] != text[j])\n            return false;\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n  \
    \  int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    if (n <= 1)\n      \
    \  return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n \
    \       if (text[i] != text[n - 1 - i])\n            return false;\n    }\n  \
    \  return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int len\
    \ = text.length();\n    if (len <= 1)\n        return true;\n    int mid = len\
    \ / 2;\n    for (int i = 0; i < mid; i++)\n        if (text[i] != text[len - 1\
    \ - i])\n            return false;\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    if (n < 2) return true;\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.length();\n    int i = 0;\n    int j = n - 1;\n  \
    \  while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.length();\n    if (n < 2) return\
    \ true;\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code goes here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.length();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    // Your code goes here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;", "    if (text.size()\
    \ < 2)\n        return true;\n    int i = 0;\n    int j = text.size() - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    std::string rev(text);\n    rev.resize(rev.size() / 2);\n    return\
    \ text == rev;", "    if (text.size() < 2) return true;\n    std::string reverse\
    \ = text;\n    reverse.resize(text.size() / 2);\n    std::reverse(text.begin(),\
    \ text.end());\n    return text == reverse;", "    int n = text.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int len = text.length();\n    int mid\
    \ = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >=\
    \ 0) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return i == mid;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    int n = text.size();\n    if (n < 2) return\
    \ true;\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    // Your code goes\
    \ here\n    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int len =\
    \ text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < mid && j >= 0) {\n        if (text[i] != text[j]) {\n        \
    \    return false;\n        }\n        i++;\n        j--;\n    }\n    return i\
    \ == mid;", "    int n = text.length();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int len\
    \ = text.length();\n    if (len <= 1)\n        return true;\n    int mid = len\
    \ / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len -\
    \ 1 - i])\n            return false;\n    }\n    return true;", "    // Write\
    \ your code here\n    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    // Your\
    \ code goes here\n    int len = text.length();\n    for(int i = 0; i < len / 2;\
    \ i++) {\n        if(text[i] != text[len - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int n = text.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n\
    \ - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n\
    \    return flag;", "    int n = text.size();\n    int i = 0;\n    int j = n -\
    \ 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;"]
stop_tokens:
- "\n}"
