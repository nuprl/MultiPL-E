language: cpp
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++*it;\n        res.push_back(*it);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l);\n    for (long i = 0; i < ret.size(); i++) {\n\
    \        ret[i] += 1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    result.push_back(l[0]);\n    for (long i =\
    \ 1, j = l[0]; i <= j; i++, j++) {\n        result.push_back(i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for(long i = 0; i < l.size(); i++) {\n      \
    \  res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for(auto it = l.begin(); it != l.end(); ++it) {\n\
    \        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      result.push_back(l[i] + 1);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(r.size() + 1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpinhsmapt: /tmp/tmpinhsmapt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++(*it);\n        res.push_back(*it);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        res.push_back(*it+1);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\n\
    \        ret[i] = l[i] + 1;\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        result.push_back(*it);\n        result.push_back(*it);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2vt6hwy: /tmp/tmpf2vt6hwy.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(ret[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++(*it);\n        ret.push_back(*it);\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for(long i = 0; i < l.size(); i++) {\n        r.push_back(l[i]\
    \ + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        res.push_back(*it + 1);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++(*it);\n        res.push_back(*it);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for(long i = 0; i < l.size(); i++) {\n        r.push_back(l[i]\
    \ + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++(*it);\n        res.push_back(*it);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        res.push_back(*it);\n        res.push_back(*(it + 1));\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbs0xlsmp: /tmp/tmpbs0xlsmp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ret.push_back(*it);\n        ret.push_back(*(it + 1));\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2rexyjmp: /tmp/tmp2rexyjmp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*(it+1));\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpymsucg_i: /tmp/tmpymsucg_i.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    for(auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        result.push_back(*it+1);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ret.push_back(*it+1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l);\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      ret[i] += 1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   ret.push_back(l[i] + 1);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        long val = *it;\n        res.push_back(val + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for(long i = 0; i < l.size(); i++) {\n      \
    \  res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for(long i = 0; i < l.size(); i++) {\n      \
    \  res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        res.push_back(*it+1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*(it\
    \ + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmptvdlc29v: /tmp/tmptvdlc29v.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    for (long i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(l[i] + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ r.push_back(r.size() + 1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpinhsmapt: /tmp/tmpinhsmapt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for(long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it+1);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        res.push_back(*it + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        res.push_back(*it);\n        res.push_back(*(it\
    \ + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfw74u2lt: /tmp/tmpfw74u2lt.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      result.push_back(l[i] + 1);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*it);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0pbd43gc: /tmp/tmp0pbd43gc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ret.push_back(*it + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ++*it;\n        res.push_back(*it);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        res.push_back(*it + 1);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it);\n        ++*it;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzf19mbe: /tmp/tmpfzf19mbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081137
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    long n = l.size();\n    for (long i = 0; i < n;\
    \ i++) {\n        r.push_back(r[i] + 1);\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660081138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        r.push_back(*it + 1);\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\
    \ == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4,\
    \ (long)10, (long)1, (long)124})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (auto i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l)\
    \ {\n        ret.push_back(i + 1);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081134
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> ret;\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   res.push_back(l[i] + 1);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
    \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
    // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
    \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n\
    \    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l)\
    \ {\n        res.push_back(i + 1);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081135
