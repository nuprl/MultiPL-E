language: cpp
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        count += 1;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp34v7x0iu.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmp34v7x0iu.cpp:21:15: error: 'c' does not\
    \ name a type\n     for (auto c : test) {\n               ^\n/tmp/tmp34v7x0iu.cpp:26:5:\
    \ error: expected ';' before 'return'\n     return histogram;\n     ^\n/tmp/tmp34v7x0iu.cpp:26:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp34v7x0iu.cpp:26:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp34v7x0iu.cpp:26:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp34v7x0iu.cpp:26:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp34v7x0iu.cpp: In function 'int main()':\n/tmp/tmp34v7x0iu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp34v7x0iu.cpp:2:\n/tmp/tmp34v7x0iu.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp34v7x0iu.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp34v7x0iu.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp34v7x0iu.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp34v7x0iu.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp34v7x0iu.cpp:30:86: warning: extended i"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto c : test) {\n       \
    \ word = c;\n        ++count;\n        histogram[word] += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbp1i7iqn.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpbp1i7iqn.cpp:21:14: error: 'c' does not\
    \ name a type\n     for(auto c : test) {\n              ^\n/tmp/tmpbp1i7iqn.cpp:26:5:\
    \ error: expected ';' before 'return'\n     return histogram;\n     ^\n/tmp/tmpbp1i7iqn.cpp:26:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpbp1i7iqn.cpp:26:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpbp1i7iqn.cpp:26:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpbp1i7iqn.cpp:26:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpbp1i7iqn.cpp: In function 'int main()':\n/tmp/tmpbp1i7iqn.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbp1i7iqn.cpp:2:\n/tmp/tmpbp1i7iqn.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpbp1i7iqn.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpbp1i7iqn.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpbp1i7iqn.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbp1i7iqn.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbp1i7iqn.cpp:30:86: warning: extended ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::map<std::string,long> histogram;\n    std::istringstream iss(test);\n\
    \    while(std::getline(iss, token, ' ')){\n        tokens.push_back(token);\n\
    \    }\n    for(auto &token : tokens){\n        histogram[token] = histogram.at(token)\
    \ + 1;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpygbfvyre.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpygbfvyre.cpp:25:15: error: ISO C++ forbids\
    \ declaration of 'token' with no type [-fpermissive]\n     for(auto &token : tokens){\n\
    \               ^\n/tmp/tmpygbfvyre.cpp:25:23: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &token : tokens){\n           \
    \            ^\n/tmp/tmpygbfvyre.cpp:26:24: error: invalid user-defined conversion\
    \ from 'int' to 'const key_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \         histogram[token] = histogram.at(token) + 1;\n                      \
    \  ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n            \
    \     from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpygbfvyre.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpygbfvyre.cpp:26:24:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \    histogram[token] = histogram.at(token) + 1;\n                        ^\n\
    In file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpygbfvyre.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ histogram;\n    for(auto &c: test) {\n        temp = temp + c;\n    }\n    for(auto\
    \ &c: temp) {\n        auto it = histogram.find(c);\n        if(it == histogram.end())\
    \ {\n            histogram[c] = 1;\n        } else {\n            histogram[c]\
    \ = it->second + 1;\n        }\n    }\n    return histogram;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpoprntu3k.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpoprntu3k.cpp:20:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c: test) {\n\
    \               ^\n/tmp/tmpoprntu3k.cpp:20:18: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c: test) {\n                 \
    \ ^\n/tmp/tmpoprntu3k.cpp:21:21: error: no match for 'operator+' (operand types\
    \ are 'std::string {aka std::basic_string<char>}' and 'int')\n         temp =\
    \ temp + c;\n                     ^\n/tmp/tmpoprntu3k.cpp:21:21: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpoprntu3k.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpoprntu3k.cpp:21:23: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'int'\n         temp = temp + c;\n    \
    \                   ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpoprntu3k.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpoprntu3k.cpp:21:23: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \         temp = temp + c;\n                       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    std::string letter;\n    long count = 1;\n    for(auto\
    \ &c : test) {\n        letter = c;\n        word = test;\n        while(word.find(letter)\
    \ != std::string::npos) {\n            word = word.substr(0, word.find(letter));\n\
    \            ++count;\n        }\n        histogram[letter] = count;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpab1jjmbt.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpab1jjmbt.cpp:22:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpab1jjmbt.cpp:22:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpab1jjmbt.cpp: In function 'int main()':\n/tmp/tmpab1jjmbt.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpab1jjmbt.cpp:2:\n/tmp/tmpab1jjmbt.cpp:35:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpab1jjmbt.cpp:35:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpab1jjmbt.cpp:35:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpab1jjmbt.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpab1jjmbt.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpab1jjmbt.cpp:35:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpab1jjmbt.cpp:35:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::m"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 1;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = word;\n      count = 1;\n    } else {\n      histogram[word] += count;\n\
    \      count = 1;\n      word = c;\n    }\n  }\n  histogram[word] += count;\n\
    \  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsoh0r5wj.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpsoh0r5wj.cpp:21:13: error: 'c' does not\
    \ name a type\n   for (auto c : test) {\n             ^\n/tmp/tmpsoh0r5wj.cpp:31:3:\
    \ error: expected ';' before 'histogram'\n   histogram[word] += count;\n   ^\n\
    /tmp/tmpsoh0r5wj.cpp:32:3: error: expected primary-expression before 'return'\n\
    \   return histogram;\n   ^\n/tmp/tmpsoh0r5wj.cpp:32:3: error: expected ')' before\
    \ 'return'\n/tmp/tmpsoh0r5wj.cpp: In function 'int main()':\n/tmp/tmpsoh0r5wj.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsoh0r5wj.cpp:2:\n/tmp/tmpsoh0r5wj.cpp:36:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpsoh0r5wj.cpp:36:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpsoh0r5wj.cpp:36:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpsoh0r5wj.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsoh0r5wj.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsoh0r5wj.cpp:36:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsoh0r5wj.cpp:36:86:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6gz2kx3.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpa6gz2kx3.cpp:25:16: error: ISO C++ forbids\
    \ declaration of 'token' with no type [-fpermissive]\n     for (auto &token :\
    \ tokens) {\n                ^\n/tmp/tmpa6gz2kx3.cpp:25:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &token : tokens) {\n\
    \                        ^\n/tmp/tmpa6gz2kx3.cpp:26:14: error: 'it' does not name\
    \ a type\n         auto it = histogram.find(token);\n              ^\n/tmp/tmpa6gz2kx3.cpp:27:13:\
    \ error: 'it' was not declared in this scope\n         if (it == histogram.end())\
    \ {\n             ^\n/tmp/tmpa6gz2kx3.cpp:28:28: error: invalid user-defined conversion\
    \ from 'int' to 'const key_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \             histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpa6gz2kx3.cpp:28:28:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        auto it = histogram.find(word);\n    \
    \    if(it == histogram.end()) {\n            histogram[word] = count;\n     \
    \   } else {\n            it->second = count;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpis8xdb9q.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpis8xdb9q.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpis8xdb9q.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpis8xdb9q.cpp:24:14: error: 'it' does not name a type\n        \
    \ auto it = histogram.find(word);\n              ^\n/tmp/tmpis8xdb9q.cpp:25:12:\
    \ error: 'it' was not declared in this scope\n         if(it == histogram.end())\
    \ {\n            ^\n/tmp/tmpis8xdb9q.cpp: In function 'int main()':\n/tmp/tmpis8xdb9q.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpis8xdb9q.cpp:2:\n/tmp/tmpis8xdb9q.cpp:35:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpis8xdb9q.cpp:35:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpis8xdb9q.cpp:35:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpis8xdb9q.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpis8xdb9q.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tm"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        pos = test.find_first_of(' ', pos);\n        if(pos == std::string::npos)\
    \ {\n            pos = test.size();\n        }\n        temp = test.substr(pos,\
    \ test.size() - pos);\n        if(m.find(temp) == m.end()) {\n            m[temp]\
    \ = 1;\n        } else {\n            m[temp] += 1;\n        }\n        pos =\
    \ pos + 1;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5njrbf28.cpp: In function 'int main()':\n/tmp/tmp5njrbf28.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5njrbf28.cpp:2:\n/tmp/tmp5njrbf28.cpp:39:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5njrbf28.cpp:39:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5njrbf28.cpp:39:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5njrbf28.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5njrbf28.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5njrbf28.cpp:39:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5njrbf28.cpp:39:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5njrbf28.cpp:39:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5njrbf28.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long cnt = 0;\n  for (auto c : test) {\n    if (m.find(c) == m.end())\
    \ {\n      m.insert({c, 1});\n    } else {\n      m[c] += 1;\n    }\n  }\n  for\
    \ (auto i : m) {\n    if (i.second > cnt) {\n      temp = i.first;\n      cnt\
    \ = i.second;\n    }\n  }\n  if (cnt == 0) {\n    return std::map<std::string,long>();\n\
    \  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmvmvod5a.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpmvmvod5a.cpp:21:13: error: 'c' does not\
    \ name a type\n   for (auto c : test) {\n             ^\n/tmp/tmpmvmvod5a.cpp:28:3:\
    \ error: expected ';' before 'for'\n   for (auto i : m) {\n   ^\n/tmp/tmpmvmvod5a.cpp:28:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpmvmvod5a.cpp:28:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpmvmvod5a.cpp:28:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmvmvod5a.cpp:28:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpmvmvod5a.cpp:28:13: error: 'i' does not name a type\n\
    \   for (auto i : m) {\n             ^\n/tmp/tmpmvmvod5a.cpp:34:3: error: expected\
    \ ';' before 'if'\n   if (cnt == 0) {\n   ^\n/tmp/tmpmvmvod5a.cpp:34:3: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpmvmvod5a.cpp:34:3: error: expected\
    \ ';' before 'if'\n/tmp/tmpmvmvod5a.cpp:34:3: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpmvmvod5a.cpp:34:3: error: expected ')' before 'if'\n/tmp/tmpmvmvod5a.cpp:\
    \ In function 'int main()':\n/tmp/tmpmvmvod5a.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = histogram;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmvmvod5a.cpp:2:\n/tmp/tmpmvmvod5a.cpp:41:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpmvmvod5a.cpp:41:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpmvmvod5a.cpp:41:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6gz2kx3.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpa6gz2kx3.cpp:25:16: error: ISO C++ forbids\
    \ declaration of 'token' with no type [-fpermissive]\n     for (auto &token :\
    \ tokens) {\n                ^\n/tmp/tmpa6gz2kx3.cpp:25:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &token : tokens) {\n\
    \                        ^\n/tmp/tmpa6gz2kx3.cpp:26:14: error: 'it' does not name\
    \ a type\n         auto it = histogram.find(token);\n              ^\n/tmp/tmpa6gz2kx3.cpp:27:13:\
    \ error: 'it' was not declared in this scope\n         if (it == histogram.end())\
    \ {\n             ^\n/tmp/tmpa6gz2kx3.cpp:28:28: error: invalid user-defined conversion\
    \ from 'int' to 'const key_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \             histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpa6gz2kx3.cpp:28:28:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6gz2kx3.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpa6gz2kx3.cpp:25:16: error: ISO C++ forbids\
    \ declaration of 'token' with no type [-fpermissive]\n     for (auto &token :\
    \ tokens) {\n                ^\n/tmp/tmpa6gz2kx3.cpp:25:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &token : tokens) {\n\
    \                        ^\n/tmp/tmpa6gz2kx3.cpp:26:14: error: 'it' does not name\
    \ a type\n         auto it = histogram.find(token);\n              ^\n/tmp/tmpa6gz2kx3.cpp:27:13:\
    \ error: 'it' was not declared in this scope\n         if (it == histogram.end())\
    \ {\n             ^\n/tmp/tmpa6gz2kx3.cpp:28:28: error: invalid user-defined conversion\
    \ from 'int' to 'const key_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \             histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpa6gz2kx3.cpp:28:28:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6gz2kx3.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpa6gz2kx3.cpp:25:16: error: ISO C++ forbids\
    \ declaration of 'token' with no type [-fpermissive]\n     for (auto &token :\
    \ tokens) {\n                ^\n/tmp/tmpa6gz2kx3.cpp:25:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &token : tokens) {\n\
    \                        ^\n/tmp/tmpa6gz2kx3.cpp:26:14: error: 'it' does not name\
    \ a type\n         auto it = histogram.find(token);\n              ^\n/tmp/tmpa6gz2kx3.cpp:27:13:\
    \ error: 'it' was not declared in this scope\n         if (it == histogram.end())\
    \ {\n             ^\n/tmp/tmpa6gz2kx3.cpp:28:28: error: invalid user-defined conversion\
    \ from 'int' to 'const key_type& {aka const std::basic_string<char>&}' [-fpermissive]\n\
    \             histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpa6gz2kx3.cpp:28:28:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        histogram[token] = 1;\n                            ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa6gz2kx3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string letters = test;\n    std::map<std::string,long>\
    \ histogram;\n    std::string word;\n    long count = 0;\n    for(auto &c : letters)\
    \ {\n        word = word + c;\n        ++count;\n    }\n    histogram[word] =\
    \ count;\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgshn6kwc.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpgshn6kwc.cpp:22:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : letters)\
    \ {\n               ^\n/tmp/tmpgshn6kwc.cpp:22:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : letters) {\n             \
    \      ^\n/tmp/tmpgshn6kwc.cpp:23:21: error: no match for 'operator+' (operand\
    \ types are 'std::string {aka std::basic_string<char>}' and 'int')\n         word\
    \ = word + c;\n                     ^\n/tmp/tmpgshn6kwc.cpp:23:21: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpgshn6kwc.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpgshn6kwc.cpp:23:23: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'int'\n         word = word + c;\n    \
    \                   ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpgshn6kwc.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpgshn6kwc.cpp:23:23: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \         word = word + c;\n                       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        auto it = histogram.find(word);\n    \
    \    if(it == histogram.end()) {\n            histogram[word] = count;\n     \
    \   } else {\n            histogram[word] += count;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmh16hiz.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpxmh16hiz.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpxmh16hiz.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpxmh16hiz.cpp:24:14: error: 'it' does not name a type\n        \
    \ auto it = histogram.find(word);\n              ^\n/tmp/tmpxmh16hiz.cpp:25:12:\
    \ error: 'it' was not declared in this scope\n         if(it == histogram.end())\
    \ {\n            ^\n/tmp/tmpxmh16hiz.cpp: In function 'int main()':\n/tmp/tmpxmh16hiz.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxmh16hiz.cpp:2:\n/tmp/tmpxmh16hiz.cpp:35:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpxmh16hiz.cpp:35:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpxmh16hiz.cpp:35:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpxmh16hiz.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxmh16hiz.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tm"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto &c : test) {\n        word = c;\n \
    \       count = m.count(word);\n        m.insert({word,count+1});\n    }\n   \
    \ return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo268vw1s.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpo268vw1s.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpo268vw1s.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpo268vw1s.cpp:24:17: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n         m.insert({word,count+1});\n\
    \                 ^\n/tmp/tmpo268vw1s.cpp:24:32: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \         m.insert({word,count+1});\n                                ^\n/tmp/tmpo268vw1s.cpp:\
    \ In function 'int main()':\n/tmp/tmpo268vw1s.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = histogram;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo268vw1s.cpp:2:\n/tmp/tmpo268vw1s.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpo268vw1s.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpo268vw1s.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpo268vw1s.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by d"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7knjdtih.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmp7knjdtih.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmp7knjdtih.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmp7knjdtih.cpp: In function 'int main()':\n/tmp/tmp7knjdtih.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7knjdtih.cpp:2:\n/tmp/tmp7knjdtih.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp7knjdtih.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp7knjdtih.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp7knjdtih.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7knjdtih.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7knjdtih.cpp:30:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp7knjdtih.cpp:30:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::m"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        count += 1;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqdqgqjc.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpfqdqgqjc.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpfqdqgqjc.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpfqdqgqjc.cpp: In function 'int main()':\n/tmp/tmpfqdqgqjc.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfqdqgqjc.cpp:2:\n/tmp/tmpfqdqgqjc.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpfqdqgqjc.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpfqdqgqjc.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpfqdqgqjc.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfqdqgqjc.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfqdqgqjc.cpp:30:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfqdqgqjc.cpp:30:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::m"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo04ccqt7.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmpo04ccqt7.cpp:21:15: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for(auto &c : test) {\n\
    \               ^\n/tmp/tmpo04ccqt7.cpp:21:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(auto &c : test) {\n                \
    \   ^\n/tmp/tmpo04ccqt7.cpp: In function 'int main()':\n/tmp/tmpo04ccqt7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo04ccqt7.cpp:2:\n/tmp/tmpo04ccqt7.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpo04ccqt7.cpp:30:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpo04ccqt7.cpp:30:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpo04ccqt7.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpo04ccqt7.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo04ccqt7.cpp:30:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo04ccqt7.cpp:30:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::m"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    std::vector<std::string> tokens;\n\
    \    std::string token;\n    while(std::getline(test, token, ' ')){\n        tokens.push_back(token);\n\
    \    }\n    for(auto &token : tokens){\n        word = token;\n        for(auto\
    \ &letter : word){\n            histogram[letter] += 1;\n        }\n    }\n  \
    \  for(auto &letter : histogram){\n        if(histogram.at(letter) > count){\n\
    \            count = histogram.at(letter);\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp393ak2oz.cpp: In function 'std::map<std::basic_string<char>, long\
    \ int> histogram(std::string)':\n/tmp/tmp393ak2oz.cpp:23:40: error: no matching\
    \ function for call to 'getline(std::string&, std::string&, char)'\n     while(std::getline(test,\
    \ token, ' ')){\n                                        ^\n/tmp/tmp393ak2oz.cpp:23:40:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp393ak2oz.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, _CharT)\n     getline(basic_istream<_CharT, _Traits>& __in,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:1068:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp393ak2oz.cpp:23:40: note: \
    \  'std::string {aka std::basic_string<char>}' is not derived from 'std::basic_istream<_CharT,\
    \ _Traits>'\n     while(std::getline(test, token, ' ')){\n                   \
    \                     ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp393ak2oz.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5:\
    \ note: template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\n     getline(basic_istream<_CharT, _Traits>& __is,\n   \
    \  ^\n/usr/include/c++/4.8.2/bits/basic_string.h:2793:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp393ak2oz.cpp:23:40: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'std::basic_istream<_CharT,\
    \ _Traits>'\n     while(std::getl"
  stdout: ''
