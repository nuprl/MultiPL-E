language: cpp
name: HumanEval_140_fix_spaces
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, \"-\");\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzo4zxbwd: /tmp/tmpzo4zxbwd.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxbiaxy15: /tmp/tmpxbiaxy15.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while ((pos = out.find('\
    \ ', pos)) != std::string::npos) {\n        out.replace(pos, 1, \" \");\n    \
    \    pos = out.find(' ', pos + 1);\n    }\n    while (out.size() > 2 && out.substr(0,\
    \ 2) == \" \") {\n        out = out.substr(1);\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpnx7czo4t: /tmp/tmpnx7czo4t.cpp:29: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    for (size_t i = 0; i < out.size(); i++)\
    \ {\n        if (out[i] == ' ') {\n            out[i] = '_';\n        }\n    }\n\
    \    if (out.size() > 2) {\n        size_t i = 0;\n        while (i < out.size()\
    \ - 2) {\n            if (out[i] == ' ' && out[i + 1] == ' ') {\n            \
    \    out[i] = '_';\n                i++;\n            }\n            else if (out[i]\
    \ == ' ' && out[i + 1] != ' ') {\n                out[i] = '-';\n            \
    \    i++;\n            }\n            else if (out[i] != ' ' && out[i + 1] ==\
    \ ' ') {\n                out[i] = '-';\n                i++;\n            }\n\
    \            else if (out[i] != ' ' && out[i + 1] != ' ') {\n                i++;\n\
    \            }\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpdapsicuf: /tmp/tmpdapsicuf.cpp:48: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbo5d7k_t.cpp:18:52: warning: multi-character character constant\
    \ [-Wmultichar]\n   18 |         std::replace(result.begin(), result.end(), '\
    \  ', '-');\n      |                                                    ^~~~\n\
    /tmp/tmpbo5d7k_t.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbo5d7k_t.cpp:18:61: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n   18 |         std::replace(result.begin(), result.end(),\
    \ '  ', '-');\n      |                                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbo5d7k_t.cpp:18:61:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   18 |         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n      |                                         \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzspx8h41: /tmp/tmpzspx8h41.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while(pos < out.size())\
    \ {\n        size_t next = out.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = out.size();\n        }\n        out.replace(pos, 1, out[pos]);\n\
    \        pos = next + 1;\n    }\n    size_t prev = out.find(' ', pos);\n    if(prev\
    \ == std::string::npos) {\n        prev = out.size();\n    }\n    out.replace(prev,\
    \ 2, out[prev]);\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi081xn6i.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpi081xn6i.cpp:22:37: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   22 |         out.replace(pos, 1, out[pos]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi081xn6i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpi081xn6i.cpp:22:37:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   22 |         out.replace(pos, 1, out[pos]);\n      |                     \
    \                ^\n      |                                     |\n      |   \
    \                                  __gnu_cxx::__alloc_traits<std::allocator<c"
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos) {\n\
    \            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n  \
    \          pos2 += 1;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp9ql9p5wr: /tmp/tmp9ql9p5wr.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2) {\n        std::replace(text.begin(), text.end(), ' ', '_');\n    }\n \
    \   return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpz1oaabkq: /tmp/tmpz1oaabkq.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpvwu_56hx: /tmp/tmpvwu_56hx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length()\
    \ && result[pos] == ' ') {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpyjd6nqto: /tmp/tmpyjd6nqto.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    size_t prev_pos\
    \ = 0;\n    while (pos < fixed_text.size()) {\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \"-\");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \"-\");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmf98e81.cpp:84:31: warning: missing terminating ' character\n\
    \   84 |         pos = fixed_text.find('\n      |                            \
    \   ^\n/tmp/tmppmf98e81.cpp:84:31: error: missing terminating ' character\n/tmp/tmppmf98e81.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmppmf98e81.cpp:85:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   85 | }\n \
    \     | ^\n/tmp/tmppmf98e81.cpp:86:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   86 | int main() {\n      |            ^\n\
    /tmp/tmppmf98e81.cpp:93:1: error: expected \u2018}\u2019 at end of input\n   93\
    \ | }\n      | ^\n/tmp/tmppmf98e81.cpp:14:42: note: to match this \u2018{\u2019\
    \n   14 | std::string fix_spaces(std::string text) {\n      |                \
    \                          ^\n/tmp/tmppmf98e81.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   93 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::size_t found = -1;\n    while ((found\
    \ = res.find_first_of(' ', found + 1)) != std::string::npos) {\n        res =\
    \ res.substr(0, found) + \"_\" + res.substr(found + 1);\n    }\n    if (res.find_first_of('\
    \ ') != std::string::npos) {\n        std::size_t found = -1;\n        while ((found\
    \ = res.find_first_of(' ', found + 1)) != std::string::npos) {\n            res\
    \ = res.substr(0, found) + \"-\" + res.substr(found + 1);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpxbt7iwjl: /tmp/tmpxbt7iwjl.cpp:33: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n \
    \       if(next == std::string::npos) {\n            fixed_text = fixed_text.substr(pos);\n\
    \        } else {\n            fixed_text = fixed_text.substr(pos, next - pos);\n\
    \            fixed_text += \"-\";\n            pos = next + 1;\n        }\n  \
    \  }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_9iv9ck_: /tmp/tmp_9iv9ck_.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxbiaxy15: /tmp/tmpxbiaxy15.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n \
    \       if(next == std::string::npos) {\n            fixed_text.replace(pos, 1,\
    \ \" \");\n            pos = fixed_text.length();\n        } else {\n        \
    \    fixed_text.replace(pos, next - pos, \"_\");\n            pos = next + 1;\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp54gygm7t: /tmp/tmp54gygm7t.cpp:31: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n    \n   \
    \ while (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find('\
    \ ', pos);\n        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos += 1;\n        } else {\n            fixed_text.replace(pos,\
    \ 1, \" _\");\n            pos += 1;\n            while (next_space != std::string::npos)\
    \ {\n                next_space = fixed_text.find(' ', next_space);\n        \
    \        if (next_space == std::string::npos) {\n                    fixed_text.replace(next_space,\
    \ 1, \"-\");\n                    break;\n                }\n                fixed_text.replace(next_space,\
    \ 1, \"-\");\n                next_space = fixed_text.find(' ', next_space);\n\
    \            }\n        }\n    }\n    \n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpp8elsswq: /tmp/tmpp8elsswq.cpp:43: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed_text.size()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"_\"));\n            pos = found + 1;\n        }\n        else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp13pk4026: /tmp/tmp13pk4026.cpp:32: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next = fixed_text.find(' ', pos);\n   \
    \     if (next == std::string::npos) {\n            fixed_text.replace(pos, 1,\
    \ \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\");\n\
    \            pos = next + 1;\n        }\n    }\n    return fixed_text;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2 && s[0]\
    \ == ' ' && s[1] == ' ') {\n        std::replace(s.begin(), s.end(), ' ', '-');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmplvhezdkl: /tmp/tmplvhezdkl.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \" \");\n        ++pos;\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmplrbd3kls: /tmp/tmplrbd3kls.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqh1hshvu: /tmp/tmpqh1hshvu.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2)\n    \
    \    std::replace(s.begin(), s.end(), '_', '-');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpaeg2jevj: /tmp/tmpaeg2jevj.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa4zjcdu1: /tmp/tmpa4zjcdu1.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxbiaxy15: /tmp/tmpxbiaxy15.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    size_t pos = 0;\n\
    \    while(pos < text.size()) {\n        size_t next = text.find(' ', pos);\n\
    \        if(next != std::string::npos) {\n            text.erase(next, 1);\n \
    \           text.insert(next, \"-\");\n            pos = next + 1;\n        }\
    \ else {\n            pos = text.size();\n        }\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpyc1j6shf: /tmp/tmpyc1j6shf.cpp:34: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmprw_1qkdu: /tmp/tmprw_1qkdu.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132909
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpelwm_9lr.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpelwm_9lr.cpp:53:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   53 | }\n      | ^\n/tmp/tmpelwm_9lr.cpp:53:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.length()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space != std::string::npos) {\n            fixed_text.replace(pos,\
    \ next_space - pos, \"_\");\n            pos = next_space + 1;\n        } else\
    \ {\n            pos = fixed_text.length();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp5m8jdu2j: /tmp/tmp5m8jdu2j.cpp:31: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq18z8hd.cpp:17:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   17 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmppq18z8hd.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmppq18z8hd.cpp:17:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   17 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmppq18z8hd.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \ candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppq18z8hd.cpp:17:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   17 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppq18z8hd.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template argument\
    \ deduction/substitution fai"
  stdout: ''
  timestamp: 1660132912
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    int\
    \ count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '\
    \ ') {\n            count++;\n        } else {\n            count = 1;\n     \
    \   }\n        if (count > 2) {\n            s.replace(i, i + 1, \"-\");\n   \
    \         i += 1;\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrgcqf1p.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpsrgcqf1p.cpp:16:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   16 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsrgcqf1p.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpsrgcqf1p.cpp:16:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |     s.replace(s.begin(), s.end(), ' ');\n      |         "
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpgqu50f6o: /tmp/tmpgqu50f6o.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next_space = s.find_first_of(' ', pos);\n        if (next_space\
    \ != std::string::npos) {\n            s.erase(pos, next_space - pos);\n     \
    \       pos = next_space;\n        } else {\n            pos = s.size();\n   \
    \     }\n    }\n    while (pos < s.size()) {\n        size_t next_space = s.find_first_of('\
    \ ', pos);\n        if (next_space != std::string::npos) {\n            s.insert(pos,\
    \ \"_\");\n            pos = next_space + 1;\n        } else {\n            pos\
    \ = s.size();\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxy9e7w8j: /tmp/tmpxy9e7w8j.cpp:40: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    std::size_t pos = 0;\n    while (pos < out.size())\
    \ {\n        char c = out[pos];\n        if (c == ' ') {\n            while (pos\
    \ < out.size() && out[pos] == ' ') {\n                pos++;\n            }\n\
    \            if (pos < out.size() && out[pos] == ' ') {\n                out.insert(out.begin()\
    \ + pos, \"_\");\n                pos++;\n            }\n        }\n        else\
    \ {\n            pos++;\n        }\n    }\n    return out;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_g5e4hfm.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp_g5e4hfm.cpp:24:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >, const char [2])\u2019\n   24 |                 out.insert(out.begin() + pos,\
    \ \"_\");\n      |                                                  ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_g5e4hfm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_"
  stdout: ''
  timestamp: 1660132981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq18z8hd.cpp:17:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   17 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmppq18z8hd.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmppq18z8hd.cpp:17:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   17 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmppq18z8hd.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \ candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppq18z8hd.cpp:17:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   17 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppq18z8hd.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template argument\
    \ deduction/substitution fai"
  stdout: ''
  timestamp: 1660132912
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2 && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpl_ez0x3q: /tmp/tmpl_ez0x3q.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpixtgj70o: /tmp/tmpixtgj70o.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while (pos < out.size())\
    \ {\n        size_t next = out.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = out.size();\n        }\n        out = out.substr(0, pos)\
    \ + \"_\" + out.substr(next);\n        pos = next + 1;\n    }\n    return out;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpy2jezuqy: /tmp/tmpy2jezuqy.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        size_t prev = res.rfind('\
    \ ', pos);\n        if (prev == std::string::npos) {\n            prev = res.size();\n\
    \        }\n        size_t len = next - prev;\n        if (len > 2) {\n      \
    \      size_t count = 0;\n            while (count < len) {\n                next\
    \ = res.find(' ', pos + count);\n                if (next == std::string::npos)\
    \ {\n                    next = res.size();\n                }\n             \
    \   res[pos + count] = '-';\n                count++;\n            }\n       \
    \ }\n        pos = next;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next = fixed_text.find(' ', pos);\n   \
    \     if (next == std::string::npos) {\n            fixed_text.replace(pos, 1,\
    \ \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\");\n\
    \            pos = next + 1;\n        }\n    }\n    return fixed_text;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2 && res[0] == res[res.size() - 1]) {\n   \
    \     std::replace(std::begin(res), std::end(res), ' ', '_');\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp6lo7ldgd: /tmp/tmp6lo7ldgd.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = next_space + 1;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2 && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpl_ez0x3q: /tmp/tmpl_ez0x3q.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    int\
    \ count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '\
    \ ') {\n            count++;\n            if (count == 2) {\n                s.replace(i,\
    \ i + 1, \"-\");\n                i += 2;\n                count = 0;\n      \
    \      }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1vypekgo.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp1vypekgo.cpp:16:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   16 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1vypekgo.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp1vypekgo.cpp:16:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |     s.replace(s.begin(), s.end(), ' ');\n      |         "
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp8ti4al_m: /tmp/tmp8ti4al_m.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa4zjcdu1: /tmp/tmpa4zjcdu1.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2 && s[0]\
    \ == ' ' && s[1] == ' ') {\n        std::replace(s.begin(), s.end(), ' ', '-');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmplvhezdkl: /tmp/tmplvhezdkl.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxbiaxy15: /tmp/tmpxbiaxy15.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        pos = s.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        s.replace(pos, 1, std::string(\" \"));\n        pos = s.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) break;\n        s.replace(pos,\
    \ 1, std::string(\"-\"));\n        pos = s.find_first_not_of(\" \", pos);\n  \
    \      if (pos == std::string::npos) break;\n        s.replace(pos, 1, std::string(\"\
    \ \"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpebqibe_e: /tmp/tmpebqibe_e.cpp:32: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpynlyz8f3: /tmp/tmpynlyz8f3.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n    }\n    if (result.length() > 2) {\n        pos = 0;\n   \
    \     while (pos < result.length()) {\n            pos = result.find_first_not_of(\"\
    \  \", pos);\n            if (pos == std::string::npos) break;\n            result.replace(pos,\
    \ 2, \"-\");\n            pos = result.find_first_not_of(\"  \", pos + 1);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpex88x6si: /tmp/tmpex88x6si.cpp:36: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = next_space + 1;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzspx8h41: /tmp/tmpzspx8h41.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4glzuwq0.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp4glzuwq0.cpp:92:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmp4glzuwq0.cpp:91:23: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   91 |         if (pos == std::string::\n\
    \      |            ~          ^\n      |                       )\n   92 | }\n\
    \      | ~                      \n/tmp/tmp4glzuwq0.cpp:92:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   92 | }\n      | ^\n/tmp/tmp4glzuwq0.cpp:93:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   93 | int main() {\n      |            ^\n/tmp/tmp4glzuwq0.cpp:100:1: error:\
    \ expected \u2018}\u2019 at end of input\n  100 | }\n      | ^\n/tmp/tmp4glzuwq0.cpp:14:42:\
    \ note: to match this \u2018{\u2019\n   14 | std::string fix_spaces(std::string\
    \ text) {\n      |                                          ^\n/tmp/tmp4glzuwq0.cpp:100:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  100 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(result.find(\" \"), 2, std::string(\"-\"));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660132982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while ((pos = s.find_first_not_of(\"\
    \ \\t\\n\", pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"\
    _\"));\n        pos = s.find_first_not_of(\" \\t\\n\", pos);\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpynlyz8f3: /tmp/tmpynlyz8f3.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = next_space + 1;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    \ _\"));\n        pos += 1;\n    }\n    while((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n        pos += 1;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp9c8w25q4: /tmp/tmp9c8w25q4.cpp:30: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n\
    \        pos = result.find_first_not_of(\" \", pos + 1);\n    }\n    if (result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \"\");\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpagpnn587: /tmp/tmpagpnn587.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find_first_of('\
    \ ', pos)) != std::string::npos) {\n        res.replace(pos, 1, std::string(\"\
    _\"));\n        pos = res.find_first_of(' ', pos + 1);\n    }\n    while ((pos\
    \ = res.find_first_of('  ', pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 2, std::string(\"-\"));\n        pos = res.find_first_of('  ', pos + 2);\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n  \
    \  assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmppf6t863f: /tmp/tmppf6t863f.cpp:32: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqh1hshvu: /tmp/tmpqh1hshvu.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa4zjcdu1: /tmp/tmpa4zjcdu1.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    size_t len = s.size();\n\
    \    while (pos < len) {\n        char c = s[pos];\n        if (c == ' ') {\n\
    \            s[pos] = '_';\n            ++pos;\n        } else if (c == '\\n')\
    \ {\n            s[pos] = '_';\n            ++pos;\n            s[pos] = '_';\n\
    \            ++pos;\n        } else {\n            ++pos;\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmphn_d0mhu: /tmp/tmphn_d0mhu.cpp:39: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while((pos = s.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"\
    _\"));\n        pos = pos + 1;\n    }\n    while((pos = s.find_first_of(\" \"\
    , pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"-\"\
    ));\n        pos = pos + 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp2bsin0zx: /tmp/tmp2bsin0zx.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while ((pos = out.find(\"\
    \  \", pos)) != std::string::npos) {\n        out.replace(pos, 2, \"_\");\n  \
    \      pos += 2;\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmphqou2tia: /tmp/tmphqou2tia.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbo5d7k_t.cpp:18:52: warning: multi-character character constant\
    \ [-Wmultichar]\n   18 |         std::replace(result.begin(), result.end(), '\
    \  ', '-');\n      |                                                    ^~~~\n\
    /tmp/tmpbo5d7k_t.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbo5d7k_t.cpp:18:61: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n   18 |         std::replace(result.begin(), result.end(),\
    \ '  ', '-');\n      |                                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbo5d7k_t.cpp:18:61:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   18 |         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n      |                                         \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxbiaxy15: /tmp/tmpxbiaxy15.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find_first_of(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpyyxo_el0: /tmp/tmpyyxo_el0.cpp:32: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n        res.replace(res.begin(),\
    \ res.begin() + 2, std::string(\"-\"));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp49es3_2f: /tmp/tmp49es3_2f.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpm8d0cg8l: /tmp/tmpm8d0cg8l.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        size_t pos = 0;\n        while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"\
    ));\n            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpla5wnl0x: /tmp/tmpla5wnl0x.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpgqu50f6o: /tmp/tmpgqu50f6o.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res.replace(pos, next\
    \ - pos, \"_\");\n        pos = next + 1;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp81dfpm3i: /tmp/tmp81dfpm3i.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132982
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res.replace(pos, 1, res[pos]);\n\
    \        res.replace(next, 1, \"_\");\n        pos = next + 1;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybmhs8ef.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpybmhs8ef.cpp:22:37: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   22 |         res.replace(pos, 1, res[pos]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpybmhs8ef.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpybmhs8ef.cpp:22:37:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   22 |         res.replace(pos, 1, res[pos]);\n      |                     \
    \                ^\n      |                                     |\n      |   \
    \                                  __gnu_cxx::__alloc_traits<std::allocator<c"
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next = s.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.erase(pos, next - pos);\n\
    \        pos = next;\n    }\n    while (pos < s.size()) {\n        size_t next\
    \ = s.find(' ', pos);\n        if (next == std::string::npos) {\n            next\
    \ = s.size();\n        }\n        s.insert(next, \"_\");\n        pos = next +\
    \ 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6ltcnyuw: /tmp/tmp6ltcnyuw.cpp:37: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbo5d7k_t.cpp:18:52: warning: multi-character character constant\
    \ [-Wmultichar]\n   18 |         std::replace(result.begin(), result.end(), '\
    \  ', '-');\n      |                                                    ^~~~\n\
    /tmp/tmpbo5d7k_t.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbo5d7k_t.cpp:18:61: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n   18 |         std::replace(result.begin(), result.end(),\
    \ '  ', '-');\n      |                                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbo5d7k_t.cpp:18:61:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   18 |         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n      |                                         \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbo5d7k_t.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = pos + 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ = pos + 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp04ax_buq: /tmp/tmp04ax_buq.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while ((pos = s.find_first_not_of(\"\
    \ \\t\\n\", pos)) != std::string::npos) {\n        s.erase(pos, 1);\n    }\n \
    \   if (s.find_first_not_of(\" \\t\\n\") != std::string::npos) {\n        s =\
    \ \"_\" + s;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpklpc9ixt: /tmp/tmpklpc9ixt.cpp:27: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed_text.length()) {\n        size_t space_pos = fixed_text.find(\" \", pos);\n\
    \        if(space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, std::string(\" _\"));\n            pos = space_pos + 1;\n        } else {\n\
    \            pos = fixed_text.length();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp64mh49ip: /tmp/tmp64mh49ip.cpp:31: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = \"\";\n    size_t pos = 0;\n    while (pos <\
    \ text.size()) {\n        pos = text.find(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            fixed_text += text[pos];\n        } else {\n            fixed_text\
    \ += text[pos];\n            pos = text.find(\" \", pos + 1);\n            if\
    \ (pos == std::string::npos) {\n                fixed_text += \"-\";\n       \
    \     }\n        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpylkvkp4j: /tmp/tmpylkvkp4j.cpp:33: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \" \");\n        pos++;\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpabcwva1z: /tmp/tmpabcwva1z.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        size_t pos2 = result.find(\" \", 2);\n        result.replace(pos2,\
    \ result.size() - 2, std::string(\"-\"));\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while(pos < s.size())\
    \ {\n        size_t prev = pos;\n        pos = s.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) {\n            pos = s.size();\n       \
    \ }\n        s.replace(pos, 1, std::string(prev, '_'));\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpw_rc9uce: /tmp/tmpw_rc9uce.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        res.replace(pos, 1, \" \");\n    \
    \    pos = res.find_first_not_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        res.replace(pos, 1, \" \");\n    \
    \    pos = res.find_first_not_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        res.replace(pos, 1, \"-\");\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpojr73g5j: /tmp/tmpojr73g5j.cpp:38: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    std::replace(s.begin(),\
    \ s.end(), '-', ' ');\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpadnyrkqq: /tmp/tmpadnyrkqq.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, std::string(\"-\"));\n    }\n \
    \   return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmprug1i6we: /tmp/tmprug1i6we.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = \"\";\n    for (auto c : text) {\n        if\
    \ (c != ' ') {\n            fixed_text += c;\n        } else {\n            fixed_text\
    \ += \"_\";\n        }\n    }\n    if (fixed_text.size() > 2) {\n        fixed_text.resize(fixed_text.size()\
    \ - 2);\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp8q3pl4bw: /tmp/tmp8q3pl4bw.cpp:30: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqh1hshvu: /tmp/tmpqh1hshvu.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.size()) {\n        if (fixed_text[pos] == ' ') {\n       \
    \     fixed_text.replace(pos, 1, std::string(\"_\"));\n            pos += 1;\n\
    \        }\n        else if (fixed_text[pos] == ' ' && pos != fixed_text.size()\
    \ - 1) {\n            fixed_text.replace(pos, 1, std::string(\"-\"));\n      \
    \      pos += 1;\n        }\n        pos += 1;\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcoq9xmfg: /tmp/tmpcoq9xmfg.cpp:35: int main(): Assertion `candidate(("Yellow
    Yellow  Dirty  Fellow")) == ("Yellow_Yellow__Dirty__Fellow")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    \n    // Replace all spaces with\
    \ underscores\n    std::replace(fixed_text.begin(), fixed_text.end(), ' ', '_');\n\
    \    \n    // If there are more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with -\n    size_t pos = 0;\n    \n    while(pos < fixed_text.size())\
    \ {\n        if(fixed_text[pos] == ' ' && fixed_text[pos+1] == ' ') {\n      \
    \      fixed_text[pos] = '-';\n            fixed_text[pos+1] = '-';\n        \
    \    pos += 2;\n        }\n        pos++;\n    }\n    \n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpi1hf7w7q: /tmp/tmpi1hf7w7q.cpp:40: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_9iv9ck_: /tmp/tmp_9iv9ck_.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp665sztwd: /tmp/tmp665sztwd.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2 && result.substr(0,\
    \ 2) == \" \") {\n        result.replace(result.begin(), result.begin() + 2, std::string(\"\
    -\"));\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_5mv2irb: /tmp/tmp_5mv2irb.cpp:31: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpj4fa6h7d: /tmp/tmpj4fa6h7d.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.find_first_not_of(\" \", pos)\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp44i3mxie: /tmp/tmp44i3mxie.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next = fixed_text.find(' ', pos);\n   \
    \     if (next == std::string::npos) {\n            fixed_text.replace(pos, 1,\
    \ \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\");\n\
    \            pos = next + 1;\n        }\n    }\n    return fixed_text;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        result.replace(pos, 1, \" \");\n \
    \       pos = result.find_first_not_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        result.replace(pos, 1, \"-\");\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp39u_w2xt: /tmp/tmp39u_w2xt.cpp:33: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos) {\n\
    \            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n  \
    \          pos2 += 1;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp9ql9p5wr: /tmp/tmp9ql9p5wr.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n        res.erase(res.size()\
    \ - 2, res.size());\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpllgq746j: /tmp/tmpllgq746j.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while ((pos = s.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"\
    _\"));\n        pos = s.find_first_not_of(\" \", pos + 1);\n    }\n    if (s.size()\
    \ > 2) {\n        size_t pos = 0;\n        while ((pos = s.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n            s.replace((pos), 1, std::string(\"\
    -\"));\n            pos = s.find_first_not_of(\" \", pos + 1);\n        }\n  \
    \  }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpecohuofp: /tmp/tmpecohuofp.cpp:32: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ prev = 0, next = 0, count = 0;\n    while (next < s.size()) {\n        next\
    \ = s.find_first_of(' ', prev);\n        if (next == std::string::npos) {\n  \
    \          next = s.size();\n        }\n        size_t len = next - prev;\n  \
    \      if (len > 2) {\n            s.replace(prev, next, \"-\");\n           \
    \ prev = next + 1;\n            count = 0;\n        } else {\n            prev\
    \ = next;\n            count++;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvorh3n1t.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpvorh3n1t.cpp:16:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   16 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvorh3n1t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpvorh3n1t.cpp:16:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |     s.replace(s.begin(), s.end(), ' ');\n      |         "
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpgqu50f6o: /tmp/tmpgqu50f6o.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find_first_of('\
    \ ', pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    while ((pos = result.find_first_of('  ',\
    \ pos)) != std::string::npos) {\n        result.replace(pos, 2, std::string(\"\
    -\"));\n        pos += 2;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp67ayrsqt: /tmp/tmp67ayrsqt.cpp:32: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next_pos = s.find_first_not_of(\" \", pos);\n        if (next_pos\
    \ == std::string::npos) {\n            pos = s.size();\n        } else {\n   \
    \         s.insert(pos, \"_\");\n            pos = next_pos + 1;\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132989
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmprw_1qkdu: /tmp/tmprw_1qkdu.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132909
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmprhhj35f0: /tmp/tmprhhj35f0.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpynlyz8f3: /tmp/tmpynlyz8f3.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(result.find(\" \"), 2, std::string(\"-\"));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660132982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next_space = s.find_first_of(' ', pos);\n        if (next_space\
    \ == std::string::npos) {\n            break;\n        }\n        size_t prev_space\
    \ = s.find_last_of(' ', next_space);\n        if (prev_space == std::string::npos)\
    \ {\n            prev_space = s.size();\n        }\n        s.replace(next_space,\
    \ prev_space - next_space, \" \");\n        pos = next_space + 1;\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmprw_1qkdu: /tmp/tmprw_1qkdu.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132909
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = std::find(res.begin(), res.end(), ' ');\n        if\
    \ (next == res.end()) {\n            next = res.end();\n        }\n        size_t\
    \ prev = std::find(res.begin(), res.end(), ' ', next);\n        if (prev == res.end())\
    \ {\n            prev = res.end();\n        }\n        size_t len = next - prev;\n\
    \        if (len > 2) {\n            std::replace(prev, prev + len, '-');\n  \
    \      }\n        pos = next;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdxzjglw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpxdxzjglw.cpp:18:32: error: cannot convert \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018size_t\u2019 {aka \u2018long\
    \ unsigned int\u2019} in initialization\n   18 |         size_t next = std::find(res.begin(),\
    \ res.end(), ' ');\n      |                       ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                |\n      |                           \
    \     __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\n\
    /tmp/tmpxdxzjglw.cpp:19:18: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018size_t\u2019 {aka \u2018long unsigned int\u2019} and \u2018\
    std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019})\n   19 |         if (next == res.end())\
    \ {\n      |             ~~~~ ^~ ~~~~~~~~~\n      |             |            \
    \  |\n      |             |              std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |             size_t {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpxdxzjglw.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxdxzjglw.cpp:19:29: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ an"
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_9iv9ck_: /tmp/tmp_9iv9ck_.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpynlyz8f3: /tmp/tmpynlyz8f3.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyp1vp5m.cpp:16:44: warning: multi-character character constant\
    \ [-Wmultichar]\n   16 |     std::replace(text.begin(), text.end(), '  ', '-');\n\
    \      |                                            ^~~~\n/tmp/tmpfyp1vp5m.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpfyp1vp5m.cpp:16:53:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   16 |     std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n      |                                           \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpfyp1vp5m.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfyp1vp5m.cpp:16:53:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   16 |     std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n      |                                                     ^\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpfyp1vp5m.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template"
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    for (auto &c : out) {\n        if (c !=\
    \ ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c : out)\
    \ {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    return out;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa4ifhkq0: /tmp/tmpa4ifhkq0.cpp:40: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) == \" \") {\n \
    \       std::replace(result.begin(), result.begin() + 2, ' ', '-');\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp63mjyqe6: /tmp/tmp63mjyqe6.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzspx8h41: /tmp/tmpzspx8h41.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp35s3jqcx: /tmp/tmp35s3jqcx.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if(result.size()\
    \ > 2) {\n        size_t pos = 0;\n        while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"\
    ));\n            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpf_wv1y2p: /tmp/tmpf_wv1y2p.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.size() > 2) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp2e6pjfzz: /tmp/tmp2e6pjfzz.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) == \" \") {\n \
    \       std::replace(result.begin(), result.begin() + 2, ' ', '-');\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp63mjyqe6: /tmp/tmp63mjyqe6.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        pos = res.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = res.size();\n    \
    \    }\n        res.replace(pos, 1, \" \");\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpeabp2jbw: /tmp/tmpeabp2jbw.cpp:32: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132984
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next = s.find_first_not_of(\" \", pos);\n        if (next\
    \ == std::string::npos) {\n            next = s.size();\n        }\n        s.erase(pos,\
    \ next - pos);\n        pos = next;\n    }\n    return s;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space != std::string::npos) {\n            fixed_text.replace(pos,\
    \ next_space - pos, \"_\");\n            pos = next_space + 1;\n        } else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp0vltq_md: /tmp/tmp0vltq_md.cpp:31: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6j9zp5vx: /tmp/tmp6j9zp5vx.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ prev = 0, pos = 0;\n    while(pos < s.size()) {\n        pos = s.find_first_of('\
    \ ', prev);\n        if(pos == std::string::npos) {\n            pos = s.size();\n\
    \        }\n        s.replace(pos, 1, std::string(\"-\"));\n        prev = pos\
    \ + 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph35e6nk4.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmph35e6nk4.cpp:16:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   16 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmph35e6nk4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmph35e6nk4.cpp:16:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |     s.replace(s.begin(), s.end(), ' ');\n      |         "
  stdout: ''
  timestamp: 1660132984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqh1hshvu: /tmp/tmpqh1hshvu.cpp:28: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwfy1w9v0: /tmp/tmpwfy1w9v0.cpp:26: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4p30spnx: /tmp/tmp4p30spnx.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(result.begin(), result.end() - 2, std::string(\"\
    _\"));\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_338yuw2: /tmp/tmp_338yuw2.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos <\
    \ fixed_text.size()) {\n        if (fixed_text[pos] == ' ') {\n            fixed_text[pos]\
    \ = '_';\n            while (pos < fixed_text.size() && fixed_text[pos] == ' ')\
    \ {\n                pos++;\n            }\n            if (pos < fixed_text.size()\
    \ - 1) {\n                fixed_text[pos] = '-';\n            }\n        }\n \
    \       pos++;\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpdtsl4it1: /tmp/tmpdtsl4it1.cpp:34: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd6za6svk: /tmp/tmpd6za6svk.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmprw_1qkdu: /tmp/tmprw_1qkdu.cpp:35: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132909
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzspx8h41: /tmp/tmpzspx8h41.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660132910
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_4mvutls: /tmp/tmp_4mvutls.cpp:27: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660132914
