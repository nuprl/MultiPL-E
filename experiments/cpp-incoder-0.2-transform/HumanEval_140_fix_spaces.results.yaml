language: cpp
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, \"-\");\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdkd2evz.cpp: In function 'int main()':\n/tmp/tmptdkd2evz.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdkd2evz.cpp:2:\n/tmp/tmptdkd2evz.cpp:24:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgtip8tv.cpp: In function 'int main()':\n/tmp/tmpfgtip8tv.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgtip8tv.cpp:2:\n/tmp/tmpfgtip8tv.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while ((pos = out.find('\
    \ ', pos)) != std::string::npos) {\n        out.replace(pos, 1, \" \");\n    \
    \    pos = out.find(' ', pos + 1);\n    }\n    while (out.size() > 2 && out.substr(0,\
    \ 2) == \" \") {\n        out = out.substr(1);\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx062gac_.cpp: In function 'int main()':\n/tmp/tmpx062gac_.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx062gac_.cpp:2:\n/tmp/tmpx062gac_.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    for (size_t i = 0; i < out.size(); i++)\
    \ {\n        if (out[i] == ' ') {\n            out[i] = '_';\n        }\n    }\n\
    \    if (out.size() > 2) {\n        size_t i = 0;\n        while (i < out.size()\
    \ - 2) {\n            if (out[i] == ' ' && out[i + 1] == ' ') {\n            \
    \    out[i] = '_';\n                i++;\n            }\n            else if (out[i]\
    \ == ' ' && out[i + 1] != ' ') {\n                out[i] = '-';\n            \
    \    i++;\n            }\n            else if (out[i] != ' ' && out[i + 1] ==\
    \ ' ') {\n                out[i] = '-';\n                i++;\n            }\n\
    \            else if (out[i] != ' ' && out[i + 1] != ' ') {\n                i++;\n\
    \            }\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxrcfwh5.cpp: In function 'int main()':\n/tmp/tmpsxrcfwh5.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxrcfwh5.cpp:2:\n/tmp/tmpsxrcfwh5.cpp:45:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlt8w125.cpp: In function 'int main()':\n/tmp/tmpmlt8w125.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmlt8w125.cpp:2:\n/tmp/tmpmlt8w125.cpp:24:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzbk1yax.cpp:18:52: warning: multi-character character constant\
    \ [-Wmultichar]\n         std::replace(result.begin(), result.end(), '  ', '-');\n\
    \                                                    ^\n/tmp/tmplzbk1yax.cpp:\
    \ In function 'std::string fix_spaces(std::string)':\n/tmp/tmplzbk1yax.cpp:18:61:\
    \ error: no matching function for call to 'replace(std::basic_string<char>::iterator,\
    \ std::basic_string<char>::iterator, int, char)'\n         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n                                                \
    \             ^\n/tmp/tmplzbk1yax.cpp:18:61: note: candidate is:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmplzbk1yax.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4984:5:\
    \ note: template<class _FIter, class _Tp> void std::replace(_FIter, _FIter, const\
    \ _Tp&, const _Tp&)\n     replace(_ForwardIterator __first, _ForwardIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:4984:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmplzbk1yax.cpp:18:61: note:   deduced\
    \ conflicting types for parameter 'const _Tp' ('int' and 'char')\n         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n                                                \
    \             ^\n/tmp/tmplzbk1yax.cpp: In function 'int main()':\n/tmp/tmplzbk1yax.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplzbk1yax.cpp:2:\n/tmp/tmplzbk1yax.cpp:24:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv35qaife.cpp: In function 'int main()':\n/tmp/tmpv35qaife.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv35qaife.cpp:2:\n/tmp/tmpv35qaife.cpp:22:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string out = text;\n    size_t pos = 0;\n    while(pos < out.size())\
    \ {\n        size_t next = out.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = out.size();\n        }\n        out.replace(pos, 1, out[pos]);\n\
    \        pos = next + 1;\n    }\n    size_t prev = out.find(' ', pos);\n    if(prev\
    \ == std::string::npos) {\n        prev = out.size();\n    }\n    out.replace(prev,\
    \ 2, out[prev]);\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7w14p_0.cpp: In function 'std::string fix_spaces(std::string)':\n\
    /tmp/tmp_7w14p_0.cpp:22:37: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n         out.replace(pos, 1, out[pos]);\n                  \
    \                   ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp_7w14p_0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp_7w14p_0.cpp:29:35: error: invalid\
    \ conversion from 'char' to 'const char*' [-fpermissive]\n     out.replace(prev,\
    \ 2, out[prev]);\n                                   ^\nIn file included from\
    \ /usr/include/c++/4.8.2/string:52:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_7w14p_0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp_7w14p_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos) {\n\
    \            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n  \
    \          pos2 += 1;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc61eguwf.cpp: In function 'int main()':\n/tmp/tmpc61eguwf.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc61eguwf.cpp:2:\n/tmp/tmpc61eguwf.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2) {\n        std::replace(text.begin(), text.end(), ' ', '_');\n    }\n \
    \   return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmm1z4tej.cpp: In function 'int main()':\n/tmp/tmpmm1z4tej.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmm1z4tej.cpp:2:\n/tmp/tmpmm1z4tej.cpp:23:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlt8w125.cpp: In function 'int main()':\n/tmp/tmpmlt8w125.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmlt8w125.cpp:2:\n/tmp/tmpmlt8w125.cpp:24:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7qrg49t.cpp: In function 'int main()':\n/tmp/tmpk7qrg49t.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7qrg49t.cpp:2:\n/tmp/tmpk7qrg49t.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlt8w125.cpp: In function 'int main()':\n/tmp/tmpmlt8w125.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmlt8w125.cpp:2:\n/tmp/tmpmlt8w125.cpp:24:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length()\
    \ && result[pos] == ' ') {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0fn6no95.cpp: In function 'int main()':\n/tmp/tmp0fn6no95.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0fn6no95.cpp:2:\n/tmp/tmp0fn6no95.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpft6hncf_.cpp: In function 'int main()':\n/tmp/tmpft6hncf_.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpft6hncf_.cpp:2:\n/tmp/tmpft6hncf_.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxw667q8.cpp: In function 'int main()':\n/tmp/tmpuxw667q8.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxw667q8.cpp:2:\n/tmp/tmpuxw667q8.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    size_t prev_pos\
    \ = 0;\n    while (pos < fixed_text.size()) {\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \"-\");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \"-\");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\
    \ ', pos);\n        if (pos == std::string::npos) {\n            pos = fixed_text.size();\n\
    \        }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find('\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxa_azpxj.cpp:84:31: warning: missing terminating ' character [enabled\
    \ by default]\n         pos = fixed_text.find('\n                            \
    \   ^\n/tmp/tmpxa_azpxj.cpp:84:9: error: missing terminating ' character\n   \
    \      pos = fixed_text.find('\n         ^\n/tmp/tmpxa_azpxj.cpp: In function\
    \ 'std::string fix_spaces(std::string)':\n/tmp/tmpxa_azpxj.cpp:85:1: error: expected\
    \ primary-expression before '}' token\n }\n ^\n/tmp/tmpxa_azpxj.cpp:85:1: error:\
    \ expected ';' before '}' token\n/tmp/tmpxa_azpxj.cpp:86:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpxa_azpxj.cpp:93:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6v6i3r5.cpp: In function 'std::string fix_spaces(std::string)':\n\
    /tmp/tmph6v6i3r5.cpp:16:18: error: 'begin' is not a member of 'std'\n     std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n                  ^\n/tmp/tmph6v6i3r5.cpp:16:35:\
    \ error: 'end' is not a member of 'std'\n     std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n                                   ^\n/tmp/tmph6v6i3r5.cpp:17:18:\
    \ error: 'begin' is not a member of 'std'\n     std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n                  ^\n/tmp/tmph6v6i3r5.cpp:17:35:\
    \ error: 'end' is not a member of 'std'\n     std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n                                   ^\n/tmp/tmph6v6i3r5.cpp: In function\
    \ 'int main()':\n/tmp/tmph6v6i3r5.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = fix_spaces;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph6v6i3r5.cpp:2:\n/tmp/tmph6v6i3r5.cpp:22:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::size_t found = -1;\n    while ((found\
    \ = res.find_first_of(' ', found + 1)) != std::string::npos) {\n        res =\
    \ res.substr(0, found) + \"_\" + res.substr(found + 1);\n    }\n    if (res.find_first_of('\
    \ ') != std::string::npos) {\n        std::size_t found = -1;\n        while ((found\
    \ = res.find_first_of(' ', found + 1)) != std::string::npos) {\n            res\
    \ = res.substr(0, found) + \"-\" + res.substr(found + 1);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqgc9411.cpp: In function 'int main()':\n/tmp/tmpuqgc9411.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = fix_spaces;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuqgc9411.cpp:2:\n/tmp/tmpuqgc9411.cpp:30:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
    \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
    )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
    \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text)\
    \ {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0ocl97i.cpp: In function 'std::string fix_spaces(std::string)':\n\
    /tmp/tmpn0ocl97i.cpp:16:18: error: 'begin' is not a member of 'std'\n     std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n                  ^\n/tmp/tmpn0ocl97i.cpp:16:35:\
    \ error: 'end' is not a member of 'std'\n     std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n                                   ^\n/tmp/tmpn0ocl97i.cpp:17:18:\
    \ error: 'begin' is not a member of 'std'\n     std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n                  ^\n/tmp/tmpn0ocl97i.cpp:17:35:\
    \ error: 'end' is not a member of 'std'\n     std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n                                   ^\n/tmp/tmpn0ocl97i.cpp:18:18:\
    \ error: 'begin' is not a member of 'std'\n     std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n                  ^\n/tmp/tmpn0ocl97i.cpp:18:35:\
    \ error: 'end' is not a member of 'std'\n     std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n                                   ^\n/tmp/tmpn0ocl97i.cpp: In function\
    \ 'int main()':\n/tmp/tmpn0ocl97i.cpp:22:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = fix_spaces;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0ocl97i.cpp:2:\n/tmp/tmpn0ocl97i.cpp:23:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Example\"\
    )) == (\"Example\"));\n                                 ^\n"
  stdout: ''
