name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"\
  a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string\
  \ string, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    long pos = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            pos += sublen;\n            count++;\n     \
    \   }\n        else if (string[pos] == substring[sublen - 1]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 1] == substring[sublen - 1]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 1] == substring[sublen - 2]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 2] == substring[sublen - 2]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 2] == substring[sublen - 3]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 3] == substring[sublen - 3]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 3] == substring[sublen - 4]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 4] == substring[sublen - 4]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 4] == substring[sublen - 5]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 5] == substring[sublen - 5]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 5] == substring[sublen - 6]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 6] == substring[sublen - 6]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 6] == substring[sublen - 7]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 7] == substring[sublen - 7]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 7] == substring[sublen - 8]) {\n            ",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        ++count;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i += 1;\n\
    \            j += 1;\n        }\n        else if (string[i] == substring[j]) {\n\
    \            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long substringLength = substring.length();\n    while (start < end) {\n \
    \       long mid = (start + end) / 2;\n        if (string.substr(mid, substringLength)\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos = pos + 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos)\n            break;\n        count++;\n\
    \        pos = pos + substring.length();\n    }\n    return count;", "    long\
    \ count = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long\
    \ d = 0;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        ++pos;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ &c : string) {\n        if (c == substring[0]) {\n            count += 1;\n\
    \            for (auto &c2 : substring) {\n                if (c == c2) break;\n\
    \                count += 1;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &c2 : substring) {\n                if (c == c2) break;\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;"]
stop_tokens:
- "\n}"
