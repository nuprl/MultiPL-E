name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\n// >>>\
  \ how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"\
  a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string\
  \ string, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    long pos = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            pos += sublen;\n            count++;\n     \
    \   }\n        else if (string[pos] == substring[sublen - 1]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 1] == substring[sublen - 1]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 1] == substring[sublen - 2]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 2] == substring[sublen - 2]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 2] == substring[sublen - 3]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 3] == substring[sublen - 3]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 3] == substring[sublen - 4]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 4] == substring[sublen - 4]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 4] == substring[sublen - 5]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 5] == substring[sublen - 5]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 5] == substring[sublen - 6]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 6] == substring[sublen - 6]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 6] == substring[sublen - 7]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 7] == substring[sublen - 7]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0] && string[pos + 7] == substring[sublen - 8]) {\n            ",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        ++count;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i += 1;\n\
    \            j += 1;\n        }\n        else if (string[i] == substring[j]) {\n\
    \            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long substringLength = substring.length();\n    while (start < end) {\n \
    \       long mid = (start + end) / 2;\n        if (string.substr(mid, substringLength)\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos = pos + 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos)\n            break;\n        count++;\n\
    \        pos = pos + substring.length();\n    }\n    return count;", "    long\
    \ count = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long\
    \ d = 0;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        ++pos;\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ &c : string) {\n        if (c == substring[0]) {\n            count += 1;\n\
    \            for (auto &c2 : substring) {\n                if (c == c2) break;\n\
    \                count += 1;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &c2 : substring) {\n                if (c == c2) break;\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (start < len) {\n        end\
    \ = start + sublen;\n        if (string[start] == substring[0]) {\n          \
    \  if (end == len) {\n                count++;\n            } else {\n       \
    \         count += how_many_times(string.substr(start + 1, end - start), substring);\n\
    \            }\n            start = end + 1;\n        } else {\n            start\
    \ = end;\n        }\n    }\n    return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : string) {\n        if (substring.find(c)\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ (pos < string.size()) {\n        pos = string.find(substring, pos);\n      \
    \  if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos = pos + 1;\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto it = string.begin(); it != string.end(); ++it) {\n        if (it ==\
    \ string.begin() || it == string.end() || (*it != *substring)) {\n           \
    \ continue;\n        }\n        ++count;\n        if (it == string.begin() ||\
    \ it == string.end() || (*it != *substring)) {\n            continue;\n      \
    \  }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (", "    long count = 0;\n    long start\
    \ = 0;\n    long end = string.length();\n    long substring_length = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, substring_length) == substring) {\n            count++;\n\
    \            start = mid + 1;\n        } else {\n            end = mid;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        } else if (string[i] > substring[j]) {\n         \
    \   j++;\n        } else {\n            i++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen\
    \ && string[i] == substring[j]) {\n            j++;\n        }\n        if (j\
    \ == sublen) {\n            count++;\n            i += sublen - 1;\n         \
    \   j = 0;\n        }\n    }\n    return count;", "    long count = 0;\n    long\
    \ start = 0;\n    long end = string.length();\n    long substring_start = string.length();\n\
    \    long substring_end = string.length();\n    long substring_start_index = 0;\n\
    \    long substring_end_index = 0;\n    long substring_start_index2 = 0;\n   \
    \ long substring_end_index2 = 0;\n    long substring_start_index3 = 0;\n    long\
    \ substring_end_index3 = 0;\n    long substring_start_index4 = 0;\n    long substring_end_index4\
    \ = 0;\n    long substring_start_index5 = 0;\n    long substring_end_index5 =\
    \ 0;\n    long substring_start_index6 = 0;\n    long substring_end_index6 = 0;\n\
    \    long substring_start_index7 = 0;\n    long substring_end_index7 = 0;\n  \
    \  long substring_start_index8 = 0;\n    long substring_end_index8 = 0;\n    long\
    \ substring_start_index9 = 0;\n    long substring_end_index9 = 0;\n    long substring_start_index10\
    \ = 0;\n    long substring_end_index10 = 0;\n    long substring_start_index11\
    \ = 0;\n    long substring_end_index11 = 0;\n    long substring_start_index12\
    \ = 0;\n    long substring_end_index12 = 0;\n    long substring_start_index13\
    \ = 0;\n    long substring_end_index13 = 0;\n    long substring_start_index14\
    \ = 0;\n    long substring_end_index14 = 0;\n    long substring_start_index15\
    \ = 0;\n    long substring_end_index15 = 0;\n    long substring_start_index16\
    \ = 0;\n    long substring_end_index16 = 0;\n    long substring_start_index17\
    \ = 0;\n    long substring_end_index17 = 0;\n    long substring_start_index18\
    \ = 0;\n    long substring_end_index18 = 0;\n    long substring_start_index19\
    \ = 0;\n    long substring_end_index19 = 0;\n    long substring_start_index20\
    \ = 0;\n    long substring_end_index20 = 0;\n    long substring_start_index21\
    \ = 0;\n    long substring_end_index21 = 0;\n    long substring_start_index22\
    \ = 0;\n    long substring_end_index22 = 0;\n    long substring_start_index23\
    \ = 0;\n    long substring_end_index23 = 0;\n    long substring_start_index24\
    \ = 0;\n    long substring_end_index24 = 0;\n    long substring_start_index25\
    \ = 0;\n    long substring_end_index25 = 0;\n    long substring_start_index26\
    \ = 0;\n    long substring_end_index26 = 0;\n    long substring_start_index27\
    \ = 0;\n    long substring_end_index27 = 0;\n    long ", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    while (pos < len)\
    \ {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = 0;\n    long len = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C =\
    \ 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n   \
    \ long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L =\
    \ 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n   \
    \ long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U =\
    \ 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n   \
    \ long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E =\
    \ 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n   \
    \ long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N =\
    \ 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n   \
    \ long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W =\
    \ 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n   \
    \ long b = 0;\n    long c = 0;\n    long d = 0;", "    long count = 0;\n    for\
    \ (auto c : string) {\n        if (substring.find(c) != std::string::npos) {\n\
    \            count++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos = pos + substring.length();\n    }\n    return\
    \ count;", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     count++;\n            pos += sublen;\n        } else {\n            count++;\n\
    \            pos += 1;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos)\n            break;\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long pos = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &c2 : substring) {\n                if (c == c2) break;\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            pos += sublen;\n\
    \            count++;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            pos += sublen;\n            count++;\n        }\n     \
    \   else {\n            pos++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c : string) {\n        if (c == substring[0]) {\n            for\
    \ (auto &cc : substring) {\n                if (c == cc) {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   } else {\n            pos = 0;\n        }\n    }\n    return count;", "  \
    \  long count = 0;\n    for (auto &c : string) {\n        if (substring.find(c)\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        if (substring.find(c) != std::string::npos) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long start =\
    \ 0;\n    long end = string.length();\n    while (start < end) {\n        long\
    \ mid = (start + end) / 2;\n        if (string.substr(mid, substring.length()).compare(substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        count++;\n        pos += sublen;\n    }\n    return count;", "  \
    \  long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ (pos < string.size()) {\n        pos = string.find(substring, pos);\n      \
    \  if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos = pos + 1;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i += 1;\n            j += 1;\n        }\n \
    \       else if (string[i] > substring[j]) {\n            end = i;\n        }\n\
    \        else if (string[i] < substring[j]) {\n            start = i;\n      \
    \  }\n        else {\n            i += 1;\n            j += 1;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (substring.find(c) != std::string::npos) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (auto c : string) {\n        if (substring.find(c)\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i++;\n            j++;\n        } else if (string[i]\
    \ < substring[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    long start = 0;\n\
    \    long end = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    while (i < len) {\n        start = i;\n        while (i\
    \ < len && string[i] == substring[0]) {\n            i++;\n        }\n       \
    \ end = i;\n        while (i < len && string[end - 1] == substring[sublen - 1])\
    \ {\n            end--;\n        }\n        if (start >= end) {\n            count++;\n\
    \        }\n        i = end;\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != string::npos) {\n        count++;\n        pos\
    \ += substring.length();\n    }\n    return count;", "    long count = 0;\n  \
    \  long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        if (string.compare(start, len, substring)\
    \ == 0) {\n            count++;\n        }\n        start += len;\n        end\
    \ += len;\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     pos += sublen;\n            count += 1;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            pos += sublen;\n            count +=\
    \ 1;\n        }\n        else {\n            pos += 1;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        ++count;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n\
    \        end = i;\n        while (end < len && string[end] == substring[0]) {\n\
    \            end++;\n        }\n        if (end == len) {\n            break;\n\
    \        }\n        if (string[start] == substring[0]) {\n            start =\
    \ end;\n        }\n        long j = start;\n        while (j < end && string[j]\
    \ == substring[j]) {\n            j++;\n        }\n        if (j == end) {\n \
    \           count++;\n        }\n        i = j;\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto &c : string) {\n        if (substring.find(c)\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto c : string) {\n\
    \        if (substring.find(c) != std::string::npos) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while (pos < string.length()) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i += 1;\n            j += 1;\n        }\n \
    \       else if (string[i] < substring[j]) {\n            i += 1;\n        }\n\
    \        else {\n            j += 1;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        if\
    \ (string[pos] == substring[0]) {\n            pos += sublen;\n            count++;\n\
    \        }\n        else if (string[pos] == substring[sublen - 1]) {\n       \
    \     pos += sublen;\n            count++;\n        }\n        else {\n      \
    \      pos += 1;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            count++;\n            pos += sublen;\n\
    \        }\n        else {\n            pos++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen)\
    \ {\n            if (string[i] == substring[j]) {\n                count++;\n\
    \                i += 1;\n                j += 1;\n            } else {\n    \
    \            j += 1;\n            }\n        }\n        i += 1;\n        j = 0;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            pos++;\n \
    \           count++;\n            while (pos < len && string[pos] == substring[sublen])\
    \ {\n                pos++;\n                count++;\n            }\n       \
    \ }\n        else {\n            pos = 0;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[1]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[2])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[3]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[4]) {\n      \
    \      count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[5]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[6]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[7])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[8]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[9]) {\n      \
    \      count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[10]) {\n            count++;\n            pos += sublen;\n    \
    \    }\n        else if (string[pos] == substring[11]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[12])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[13]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[14]) {\n     \
    \       count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[15]) {\n            count++;\n            pos += sublen;\n    \
    \    }\n        else if (string[pos] == substring[16]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[17])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[18]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[19]) {\n     \
    \       count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[20]) {\n            count++;\n            pos += sublen;\n    \
    \    }\n        else if (string[pos] == substring[21]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[22])\
    \ {\n", "    long count = 0;\n    size_t pos = 0;\n    while (pos < string.size())\
    \ {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        ++pos;\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n     \
    \           if (*it == *it2) {\n                    ++count;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long substringLength = substring.length();\n    long i = 0;\n    while (i <\
    \ end) {\n        if (string[i] == substring[0]) {\n            start = i;\n \
    \           while (i < end && string[i] == substring[substringLength - 1]) {\n\
    \                i++;\n            }\n            end = i;\n            count\
    \ += end - start;\n        }\n        i++;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n       \
    \ pos = string.find(substring, pos);\n        if (pos == string::npos) {\n   \
    \         break;\n        }\n        count++;\n        pos = pos + 1;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 0;\n    long end =\
    \ string.length();\n    long substring_length = substring.length();\n    while\
    \ (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()) == substring) {\n            count++;\n            start\
    \ = mid + 1;\n        } else {\n            if (mid - substring_length >= 0) {\n\
    \                start = mid + 1;\n            } else {\n                end =\
    \ mid;\n            }\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[sublen - 1]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else {\n            pos++;\n \
    \       }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   while (pos < len) {\n        pos = string.find(substring, pos);\n        if\
    \ (pos == string::npos) {\n            break;\n        }\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;", "    long count = 0;\n    for (auto &c : string) {\n    \
    \    if (substring.find(c) != std::string::npos) {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while (pos < string.size()) {\n        pos = string.find(substring, pos);\n\
    \        if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        count++;\n        pos += sublen;\n    }\n    return count;", "  \
    \  long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ (pos < string.size()) {\n        pos = string.find(substring, pos);\n      \
    \  if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos = pos + 1;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    size_t len = string.length();\n    while (pos < len) {\n\
    \        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substring.length()).compare(substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.compare(mid, len) == 0) {\n            start = mid + 1;\n          \
    \  end = mid;\n        } else if (string.compare(mid, len) < 0) {\n          \
    \  start = mid + 1;\n        } else {\n            end = mid;\n        }\n   \
    \     count++;\n    }\n    return count;", "    long count = 0;\n    long start\
    \ = 0;\n    long end = 0;\n    long len = string.length();\n    long sublen =\
    \ substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len &&\
    \ j < sublen) {\n        if (string[i] == substring[j]) {\n            count++;\n\
    \            i++;\n            j++;\n        }\n        else if (string[i] > substring[j])\
    \ {\n            end = i;\n            i = i + 1;\n        }\n        else if\
    \ (string[i] < substring[j]) {\n            start = i;\n            i = i + 1;\n\
    \        }\n        else {\n            i = i + 1;\n            j = j + 1;\n \
    \       }\n    }\n    return count;", "    long count = 0;\n    for (auto &c :\
    \ string) {\n        if (substring.find(c) != std::string::npos) {\n         \
    \   count++;\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ long len = string.length();\n    long sublen = substring.length();\n    long\
    \ start = 0;\n    long end = 0;\n    long i = 0;\n    long j = 0;\n    while (i\
    \ < len) {\n        end = i;\n        while (j < sublen) {\n            if (string[i]\
    \ == substring[j]) {\n                end = i;\n                ++count;\n   \
    \             ++j;\n                break;\n            }\n            ++j;\n\
    \        }\n        ++i;\n    }\n    return count;", "    long count = 0;\n  \
    \  size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            pos++;\n            count++;\n            while\
    \ (pos < len && string[pos] == substring[sublen]) {\n                pos++;\n\
    \                count++;\n            }\n        }\n        pos++;\n    }\n \
    \   return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    bool found = false;\n    while (i < string.size()) {\n        end\
    \ = string.find(substring, start);\n        if (end == string::npos) {\n     \
    \       end = string.size();\n        }\n        len = end - start;\n        if\
    \ (len > 0) {\n            found = true;\n            count += 1;\n        }\n\
    \        start = end + 1;\n        i += 1;\n    }\n    if (!found) {\n       \
    \ count = 0;\n    }\n    return count;", "    long count = 0;\n    size_t pos\
    \ = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.compare(mid, substring.length(), substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            pos += sublen;\n\
    \            count++;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            pos += sublen;\n            count++;\n        }\n     \
    \   else {\n            pos++;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t\
    \ sublen = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;", "  \
    \  long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        ++pos;\n    }\n    return count;", "    long count =\
    \ 0;\n    long start = 0;\n    long end = string.length();\n    long substringLength\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substringLength) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long substring_length = substring.length();\n    long i = 0;\n    long j\
    \ = 0;\n    while (i < end && j < substring_length) {\n        if (string[i] ==\
    \ substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] > substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long substring_length = substring.length();\n  \
    \  while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.compare(mid,\
    \ substring_length, substring, 0, substring_length) == 0) {\n            count++;\n\
    \            start = mid + 1;\n        } else {\n            end = mid;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    long start = 0;\n\
    \    long end = 0;\n    long len = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;", "    long count = 0;\n  \
    \  size_t pos = 0;\n    while (pos < string.length()) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   while (pos < len) {\n        pos = string.find(substring, pos);\n        if\
    \ (pos == string::npos) {\n            break;\n        }\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long pos = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos = pos + substring.length();\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos))\
    \ != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (substring.find(c) != std::string::npos) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long start =\
    \ 0;\n    long end = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        start = i;\n\
    \        while (i < len && string[i] == substring[j]) {\n            i++;\n  \
    \          j++;\n        }\n        if (j == sublen) {\n            end = i;\n\
    \            count++;\n        }\n        while (i < len && string[i] == substring[j])\
    \ {\n            i++;\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : string) {\n        if (substring.find(c)\
    \ != std::string::npos) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long start = 0;\n    long end = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    while (i < len) {\n        while (j\
    \ < sublen) {\n            if (string[i] == substring[j]) {\n                count++;\n\
    \                j++;\n            } else {\n                break;\n        \
    \    }\n        }\n        if (j == sublen) {\n            count++;\n        \
    \    j = 0;\n        }\n        i++;\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;", "    long count = 0;\n    long start = 0;\n    long end = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        } else {\n            if (j == sublen) {\n                end = i;\n\
    \            }\n            i = i + 1;\n            j = 0;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    while (pos\
    \ < string.size()) {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == string::npos) {\n            break;\n        }\n        count++;\n      \
    \  pos += substring.size();\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n        if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n            j++;\n\
    \        }\n        else if (string[i] > substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            pos += sublen;\n            count++;\n     \
    \   }\n        else if (string[pos] == substring[sublen - 1]) {\n            pos\
    \ += sublen;\n            count++;\n        }\n        else if (string[pos] ==\
    \ substring[0]) {\n            pos += sublen;\n            count++;\n        }\n\
    \        else if (string[pos] == substring[sublen - 1]) {\n            pos +=\
    \ sublen;\n            count++;\n        }\n        else {\n            pos++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : string) {\n        if (c == substring[0])\
    \ {\n            for (auto &cc : substring) {\n                if (c == cc) {\n\
    \                    count++;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n \
    \   long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H\
    \ = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n \
    \   long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q\
    \ = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n \
    \   long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;", " \
    \   long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            if (c\
    \ == substring[1]) {\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long substring_length = substring.length();\n  \
    \  while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring_length) == substring) {\n            count++;\n            start =\
    \ mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos = pos + sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += 1;\n            for (auto\
    \ &c2 : substring) {\n                if (c == c2) break;\n            }\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ for (auto it = string.begin(); it != string.end(); ++it) {\n        if (*it\
    \ == substring[0]) {\n            for (auto it2 = substring.begin(); it2 != substring.end();\
    \ ++it2) {\n                if (*it == *it2) {\n                    ++count;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i\
    \ < len && j < sublen) {\n        if (string[i] == substring[j]) {\n         \
    \   i++;\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ < substring[j]) {\n            j++;\n        }\n        else {\n           \
    \ i++;\n        }\n    }\n    return count;", "    long count = 0;\n    for (auto\
    \ &c : string) {\n        if (substring.find(c) != std::string::npos) {\n    \
    \        count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ long start = 0;\n    long end = string.length();\n    long substringLength =\
    \ substring.length();\n    while (start < end) {\n        long mid = (start +\
    \ end) / 2;\n        if (string.substr(mid, substringLength) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    while (pos < len)\
    \ {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;", "    long\
    \ count = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;"]
stop_tokens:
- "\n}"
