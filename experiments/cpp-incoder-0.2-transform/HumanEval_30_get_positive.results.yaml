language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpakt07wpg.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpakt07wpg.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpakt07wpg.cpp:\
    \ In function 'int main()':\n/tmp/tmpakt07wpg.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpakt07wpg.cpp:2:\n/tmp/tmpakt07wpg.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpakt07wpg.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpakt07wpg.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpakt07wpg.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpakt07wpg.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpakt07wpg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_hznvsp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpf_hznvsp.cpp:10:18: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long i : l) {\n                  ^\n/tmp/tmpf_hznvsp.cpp:\
    \ In function 'int main()':\n/tmp/tmpf_hznvsp.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf_hznvsp.cpp:2:\n/tmp/tmpf_hznvsp.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpf_hznvsp.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpf_hznvsp.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf_hznvsp.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpf_hznvsp.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpf_hznvsp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8fhat6y8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    if (sum\
    \ < 0) {\n        std::reverse(positive.begin(), positive.end());\n    }\n   \
    \ return positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpth4kssxu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1_h80hpo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1kh8z3i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            positive.push_back(i);\n        }\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9kbbe76r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1kh8z3i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdbt7gm4q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy1c8m1vn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy1c8m1vn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n        if (sum\
    \ >= 0) {\n            positive.push_back(i);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw7ndktjd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3xu8drq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpt3xu8drq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpt3xu8drq.cpp:\
    \ In function 'int main()':\n/tmp/tmpt3xu8drq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/tmp/tmpt3xu8drq.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpt3xu8drq.cpp:17:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt3xu8drq.cpp:17:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt3xu8drq.cpp:17:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt3xu8drq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp72c6c7x0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpakt07wpg.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpakt07wpg.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpakt07wpg.cpp:\
    \ In function 'int main()':\n/tmp/tmpakt07wpg.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpakt07wpg.cpp:2:\n/tmp/tmpakt07wpg.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpakt07wpg.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpakt07wpg.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpakt07wpg.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpakt07wpg.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpakt07wpg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuctc_p31.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuctc_p31.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1_h80hpo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdtzadlq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmptdtzadlq.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmptdtzadlq.cpp:\
    \ In function 'int main()':\n/tmp/tmptdtzadlq.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/tmp/tmptdtzadlq.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmptdtzadlq.cpp:18:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmptdtzadlq.cpp:18:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptdtzadlq.cpp:18:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptdtzadlq.cpp:18:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptdtzadlq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6_yvoi0.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6_yvoi0.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpg6_yvoi0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg6_yvoi0.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/tmp/tmpg6_yvoi0.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6_yvoi0.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6_yvoi0.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6_yvoi0.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpg6_yvoi0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstq9hdon.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpstq9hdon.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpstq9hdon.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpstq9hdon.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpstq9hdon.cpp: In function 'int main()':\n/tmp/tmpstq9hdon.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpstq9hdon.cpp:2:\n/tmp/tmpstq9hdon.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpstq9hdon.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpstq9hdon.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpstq9hdon.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpstq9hdon.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39wtr92n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8fhat6y8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659793481
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hpkakts.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp6hpkakts.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmp6hpkakts.cpp:\
    \ In function 'int main()':\n/tmp/tmp6hpkakts.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/tmp/tmp6hpkakts.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6hpkakts.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6hpkakts.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6hpkakts.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6hpkakts.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6hpkakts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
