name: HumanEval_90_next_smallest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // Write a function next_smallest() that returns the 2nd smallest element of the\
  \ list.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n\
  // std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n\
  // std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1})))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35,\
  \ (long)34, (long)12, (long)-45}))) == -35);\n}\n"
completions: ["    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    if\
    \ (min == max) {\n        return std::nullopt;\n    }\n    return max;", "   \
    \ if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n\
    \    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n        if (*it\
    \ < prev) {\n            return prev;\n        }\n        prev = *it;\n    }\n\
    \    return prev;", "    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.begin() + 1);\n    if (second_smallest\
    \ == smallest)\n        return std::nullopt;\n    return second_smallest;", " \
    \   if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n    }\n\
    \    return min;", "    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front())\n        ++it;\n    auto prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return prev;\n    if (*it < prev)\n       \
    \ ++it;\n    return *it;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    long min = lst[0];\n    long min_index = -1;\n    for(long i = 1; i < lst.size();\
    \ i++) {\n        if(lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    return min_index == lst.size() - 1 ? std::nullopt\
    \ : lst[min_index + 1];", "    long min = lst[0];\n    long max = lst[0];\n  \
    \  for (long i : lst) {\n        if (i < min) {\n            min = i;\n      \
    \  } else if (i > max) {\n            max = i;\n        }\n    }\n    if (min\
    \ == max) {\n        return std::nullopt;\n    }\n    return max;", "    long\
    \ min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    if (min\
    \ == max) {\n        return std::nullopt;\n    }\n    return std::optional<long>(min);",
  "    if (lst.empty()) return std::nullopt;\n    auto it = lst.begin();\n    auto\
    \ prev = *it;\n    ++it;\n    if (it == lst.end()) return std::nullopt;\n    auto\
    \ next = *it;\n    if (next < prev) return std::nullopt;\n    return next;", " \
    \   if(lst.size() == 0)\n        return std::nullopt;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for(long i : lst) {\n        if(i < min)\n      \
    \      min = i;\n        if(i > max)\n            max = i;\n    }\n    return\
    \ std::optional<long>(max);", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    auto next = *it;\n\
    \    for (++it; it != lst.end(); ++it) {\n        if (*it < prev) {\n        \
    \    prev = *it;\n            next = *it;\n        }\n    }\n    return next;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.begin() + 1);\n    return std::optional<long>(second_smallest\
    \ < smallest ? second_smallest : smallest);", "    if(lst.size() == 0) return\
    \ std::nullopt;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n\
    \    for(long i = 2; i < lst.size(); i++) {\n        if(lst[i] < smallest) {\n\
    \            second_smallest = smallest;\n            smallest = lst[i];\n   \
    \     } else if(lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    return second_smallest;", "    // Write your code here\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        } else if (i > max) {\n \
    \           max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (auto\
    \ i : lst) {\n        if (i < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        } else if (i > second_smallest) {\n      \
    \      second_smallest = i;\n        }\n    }\n    return second_smallest == smallest\
    \ ? std::nullopt : second_smallest;", "    if (lst.size() == 0)\n        return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n    if (*it\
    \ == *lst.begin())\n        return std::nullopt;\n    for (++it; it != lst.end();\
    \ ++it) {\n        if (*it < prev)\n            return std::nullopt;\n       \
    \ prev = *it;\n    }\n    return prev;", "    if (lst.empty())\n        return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    auto next = *it;\n\
    \    if (next < prev)\n        return std::nullopt;\n    while (next < prev) {\n\
    \        prev = next;\n        ++it;\n        if (it == lst.end())\n         \
    \   return std::nullopt;\n        next = *it;\n    }\n    return prev;", "   \
    \ if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    long max\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < min) min = i;\n       \
    \ if (i > max) max = i;\n    }\n    return std::optional<long>(max);", "    if\
    \ (lst.empty()) return std::nullopt;\n    long min = *lst.begin();\n    for (long\
    \ &i : lst) {\n        if (i < min) {\n            min = i;\n        }\n    }\n\
    \    return min;", "    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(min);",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it == *std::min_element(it,lst.end()-1))\n        return *std::min_element(it,lst.end()-1);\n\
    \    else\n        return *std::min_element(it,lst.end());", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    auto it =\
    \ std::find_if(lst.begin(), lst.end(), [&min_val](long x) { return x < min_val;\
    \ });\n    if (it == lst.end())\n        return std::nullopt;\n    return *it;",
  "    // Your code here\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long secondSmallest = *std::min_element(lst.begin() + 1, lst.end());\n  \
    \  if (smallest != secondSmallest) {\n        return secondSmallest;\n    }\n\
    \    return std::nullopt;", "    // Your code here\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            second_smallest = smallest;\n            smallest =\
    \ i;\n        } else if (i > second_smallest) {\n            second_smallest =\
    \ i;\n        }\n    }\n    return second_smallest == smallest ? std::nullopt\
    \ : second_smallest;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n \
    \   if (second_smallest == smallest)\n        return std::nullopt;\n    return\
    \ second_smallest;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for(long\
    \ i = 2; i < lst.size(); i++) {\n        if(lst[i] < smallest) {\n           \
    \ second_smallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if(lst[i] < second_smallest) {\n            second_smallest = lst[i];\n    \
    \    }\n    }\n    return second_smallest;", "    // Your code here\n    if(lst.size()\
    \ == 0)\n        return std::nullopt;\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    for(long i = 2; i < lst.size(); i++) {\n        if(lst[i] < smallest)\
    \ {\n            second_smallest = smallest;\n            smallest = lst[i];\n\
    \        }\n        else if(lst[i] < second_smallest) {\n            second_smallest\
    \ = lst[i];\n        }\n    }\n    return second_smallest;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\n\
    \            break;\n        prev = *it;\n    }\n    return prev;", "    // Your\
    \ code here\n    long min = lst[0];\n    long max = lst[0];\n    for (long i :\
    \ lst) {\n        if (i < min) {\n            min = i;\n        } else if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    // Your code here\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n           \
    \ second_smallest = smallest;\n            smallest = i;\n        } else if (i\
    \ < second_smallest) {\n            second_smallest = i;\n        }\n    }\n \
    \   return second_smallest;", "    if (lst.empty()) return std::nullopt;\n   \
    \ long min = *lst.begin();\n    long max = *lst.rbegin();\n    for (auto it =\
    \ lst.begin() + 1; it != lst.end(); ++it) {\n        if (*it < min) min = *it;\n\
    \        if (*it > max) max = *it;\n    }\n    return std::optional<long>(min);",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    for (long i = lst.size() -\
    \ 2; i >= 0; --i) {\n        if (lst[i] < smallest) {\n            smallest =\
    \ lst[i];\n        }\n    }\n    return smallest;", "    if (lst.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n    long\
    \ second_smallest = lst[1];\n    for (size_t i = 2; i < lst.size(); i++) {\n \
    \       if (lst[i] < smallest) {\n            second_smallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < second_smallest) {\n\
    \            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    auto next = *it;\n    if (next < prev)\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n    if\
    \ (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n\
    \    if (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if\
    \ (it == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    next = *it;\n    if (next < prev) {\n        return std::nullopt;\n    }\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    next = *it;\n    if (next < prev) {\n        return std::nullopt;\n\
    \    }\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n        return\
    \ std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n\
    \        return std::n", "    // Your code here\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    return std::optional<long>(max);", "    if (lst.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\
    \ {\n            return prev;\n        }\n        prev = *it;\n    }\n    return\
    \ prev;", "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = lst.begin();\n    auto next = std::next(it);\n    if (*next < *it)\n     \
    \   return std::nullopt;\n    return *next;", "    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        } else if (i > max) {\n            max = i;\n        }\n\
    \    }\n    return std::optional<long>(max);", "    if (lst.size() == 0) {\n \
    \       return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto next = *it;\n    if (next < prev) {\n        return std::nullopt;\n\
    \    }\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n        return\
    \ std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n\
    \        return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it ==\
    \ lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n    if (next\
    \ < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n    if\
    \ (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n\
    \    if (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if\
    \ (it == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    next = *it;\n    if (next < prev) {\n        return std::n", "    // Write\
    \ your code here\n    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    // Your code here\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n           \
    \ second_smallest = smallest;\n            smallest = i;\n        } else if (i\
    \ < second_smallest) {\n            second_smallest = i;\n        }\n    }\n \
    \   return second_smallest == lst[0] ? std::nullopt : second_smallest;", "   \
    \ if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < min) {\n            min =\
    \ i;\n        }\n    }\n    return min;", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return std::optional<long>(min);",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for (size_t i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end())\n        return std::nullopt;\n    return\
    \ *it;", "    if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto prev = *it;\n    ++it;\n    if (it == lst.end())\n        return prev;\n\
    \    for (; it != lst.end(); ++it) {\n        if (*it < prev)\n            return\
    \ prev;\n        prev = *it;\n    }\n    return prev;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto\
    \ next = std::next(it);\n    if (*next < *it) {\n        std::iter_swap(it, next);\n\
    \    }\n    return *it;", "    // Your code here\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            second_smallest = smallest;\n            smallest =\
    \ i;\n        } else if (i == smallest) {\n            second_smallest = i;\n\
    \        }\n    }\n    return second_smallest == smallest ? std::nullopt : second_smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto next = std::next(it);\n    if (*next < *it)\n        return std::nullopt;\n\
    \    return *next;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long second_smallest = *std::min_element(lst.begin(), lst.end(), [&smallest](long\
    \ a, long b) { return a < b ? a : b; });\n    if (second_smallest == smallest)\n\
    \        return std::nullopt;\n    return second_smallest;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    if (min == max) {\n        return std::nullopt;\n    }\n\
    \    return max;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n \
    \   if (second_smallest == smallest) {\n        return std::nullopt;\n    }\n\
    \    return second_smallest;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    for (; it != lst.end();\
    \ ++it) {\n        if (*it < prev) {\n            return std::nullopt;\n     \
    \   }\n        prev = *it;\n    }\n    return prev;", "    // Your code here\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \    }\n    return min;", "    // Your code here\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            second_smallest = smallest;\n            smallest =\
    \ i;\n        } else if (i < second_smallest) {\n            second_smallest =\
    \ i;\n        }\n    }\n    return second_smallest;", "    if (lst.empty()) return\
    \ std::nullopt;\n    long min = *lst.begin();\n    for (long &i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto next = *it;\n    if (next < lst.front())\n        ++it;\n    if (next\
    \ < lst.front())\n        ++it;\n    if (next < lst.front())\n        ++it;\n\
    \    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n   \
    \     ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < lst.front())\n        ++it;\n    if (next < lst.front())\n\
    \        ++it;\n    if (next < ", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    // Your code here\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n           \
    \ second_smallest = smallest;\n            smallest = i;\n        } else if (i\
    \ < second_smallest) {\n            second_smallest = i;\n        }\n    }\n \
    \   return second_smallest;", "    long smallest = lst[0];\n    long second_smallest\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n         \
    \   second_smallest = smallest;\n            smallest = i;\n        } else if\
    \ (i > second_smallest) {\n            second_smallest = i;\n        }\n    }\n\
    \    return second_smallest == lst[0] ? std::nullopt : second_smallest;", "  \
    \  long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.begin() + 1);\n    if (second_smallest\
    \ == smallest)\n        return std::nullopt;\n    return second_smallest;", " \
    \   long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    // Your code here\n    long smallest = std::numeric_limits<long>::max();\n\
    \    long secondSmallest = std::numeric_limits<long>::max();\n    for (long i\
    \ : lst) {\n        if (i < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = i;\n        } else if (i < secondSmallest) {\n       \
    \     secondSmallest = i;\n        }\n    }\n    return secondSmallest;", "  \
    \  long min = *std::min_element(lst.begin(), lst.end());\n    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    for (long i = lst.size() - 1;\
    \ i >= 0; --i) {\n        if (lst[i] < min) {\n            min = lst[i];\n   \
    \     }\n    }\n    return min;", "    if (lst.empty()) return std::nullopt;\n\
    \    long min = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n    }\n    return min;", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    if (min == max) {\n        return\
    \ std::nullopt;\n    }\n    return max;", "    if (lst.size() == 0) {\n      \
    \  return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    auto next = *it;\n    if (next < prev) {\n        return std::nullopt;\n\
    \    }\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n        return\
    \ std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    next = *it;\n    if (next < prev) {\n\
    \        return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it ==\
    \ lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n    if (next\
    \ < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n    if\
    \ (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    next = *it;\n\
    \    if (next < prev) {\n        return std::nullopt;\n    }\n    ++it;\n    if\
    \ (it == lst.end()) {\n        return std::nullopt;\n    }\n    prev = *it;\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    next = *it;\n    if (next < prev) {\n        return std::n", "    if (lst.empty())\n\
    \        return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    auto next = std::next(it);\n\
    \    if (*next < std::min(*it, *next))\n        return std::nullopt;\n    return\
    \ *next;", "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = lst.begin();\n    if (*it < lst.front())\n        ++it;\n    if (*it < lst.back())\n\
    \        ++it;\n    return *it;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev = *it;\n   \
    \ ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev) {\n    \
    \        return prev;\n        }\n        prev = *it;\n    }\n    return prev;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < smallest) {\n            second_smallest = smallest;\n        \
    \    smallest = i;\n        } else if (i > second_smallest) {\n            second_smallest\
    \ = i;\n        }\n    }\n    return second_smallest;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n    }\n\
    \    return min;", "    if (lst.empty())\n        return std::nullopt;\n    auto\
    \ it = lst.begin();\n    auto next = std::next(it);\n    if (*next < *it)\n  \
    \      return std::nullopt;\n    return *next;", "    if (lst.size() == 0) return\
    \ std::nullopt;\n    long smallest = lst[0];\n    for (long i : lst) {\n     \
    \   if (i < smallest) smallest = i;\n    }\n    return smallest;", "    long min\
    \ = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            min = i;\n        } else if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    return std::optional<long>(max);", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n\
    \    for (long i : lst) {\n        if (i < smallest) {\n            smallest =\
    \ i;\n        }\n    }\n    return smallest;", "    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) min = i;\n   \
    \     if (i > max) max = i;\n    }\n    if (min == max) return std::nullopt;\n\
    \    return max;", "    if (lst.size() == 0)\n        return std::nullopt;\n \
    \   auto it = lst.begin();\n    if (*it < lst.front())\n        ++it;\n    if\
    \ (*it < lst.back())\n        ++it;\n    if (*it < lst.front())\n        ++it;\n\
    \    if (*it < lst.back())\n        ++it;\n    if (*it < lst.front())\n      \
    \  ++it;\n    if (*it < lst.back())\n        ++it;\n    return *it;", "    //\
    \ Your code here\n    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    ++it;\n    while (it != lst.end()) {\n\
    \        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n        ++it;\n    }\n    return prev;", "    if (lst.size() == 0)\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    if (it == lst.end())\n        return prev;\n    for (; it != lst.end();\
    \ ++it) {\n        if (*it < prev)\n            return prev;\n        prev = *it;\n\
    \    }\n    return prev;", "    // Your code here\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    if (min == max) {\n        return\
    \ std::nullopt;\n    }\n    return max;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long index = std::distance(std::begin(lst), std::find_if(std::begin(lst),\
    \ std::end(lst), [smallest](long x) { return x < smallest; }));\n    if (index\
    \ == lst.size()) {\n        return std::nullopt;\n    }\n    return lst[index\
    \ + 1];", "    long smallest = *std::min_element(lst.begin(), lst.end());\n  \
    \  long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n   \
    \ if (second_smallest == smallest) {\n        return std::nullopt;\n    }\n  \
    \  return second_smallest;", "    // Your code here\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            second_smallest = smallest;\n            smallest =\
    \ i;\n        } else if (i == smallest) {\n            second_smallest = i;\n\
    \        }\n    }\n    return second_smallest == smallest ? std::nullopt : second_smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest ==\
    \ smallest)\n        return std::nullopt;\n    return second_smallest;", "   \
    \ long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        } else if (i > max) {\n    \
    \        max = i;\n        }\n    }\n    return std::optional<long>(max);", " \
    \   if(lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    long val = *it;\n    ++it;\n    while(it != lst.end()) {\n        if(*it\
    \ < val)\n            val = *it;\n        ++it;\n    }\n    return val;", "  \
    \  if (lst.size() == 0)\n        return std::nullopt;\n    long min = lst[0];\n\
    \    for (long i : lst)\n        if (i < min)\n            min = i;\n    return\
    \ min;", "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    ++it;\n    for (; it != lst.end(); ++it)\
    \ {\n        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n    }\n    return prev;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    if(lst.size() == 0)\n        return std::nullopt;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for(long i : lst)\n        if(i < min)\n        \
    \    min = i;\n        else if(i > max)\n            max = i;\n    return std::optional<long>(max);",
  "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    // Your code here\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    if (min ==\
    \ max) {\n        return std::nullopt;\n    }\n    return max;", "    if (lst.empty())\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n\
    \        ++it;\n    return *it;", "    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ std::optional<long>(max);", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            smallest = i;\n        }\n    }\n    return smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.end(), [&smallest](long a, long b) { return\
    \ a < b; });\n    if (second_smallest == smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    for (size_t i = 2; i < lst.size(); i++) {\n        if (lst[i]\
    \ < smallest) {\n            second_smallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if (lst[i] < second_smallest) {\n            second_smallest\
    \ = lst[i];\n        }\n    }\n    return second_smallest;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto it2 = lst.begin();\n    if (*it < *it2) {\n        ++it;\n    }\n   \
    \ if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n   \
    \ }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n    \
    \    ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it >\
    \ *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n       \
    \ ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if\
    \ (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n \
    \       ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \ }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n   \
    \ }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n    \
    \    ++it2;\n    }\n", "    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    if (min == max)\
    \ {\n        return std::nullopt;\n    }\n    return max;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), min_val);\n   \
    \ if (it != lst.end()) {\n        it = std::next(it);\n    }\n    return *it;",
  "    if (lst.empty()) return std::nullopt;\n    auto it = lst.begin();\n    auto\
    \ prev = *it;\n    ++it;\n    if (it == lst.end()) return std::nullopt;\n    auto\
    \ next = *it;\n    if (next < prev) {\n        std::swap(prev, next);\n    }\n\
    \    return next;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            smallest = i;\n        }\n    }\n    return smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    for (long i = lst.size() -\
    \ 2; i >= 0; --i) {\n        if (lst[i] < smallest) {\n            smallest =\
    \ lst[i];\n        }\n    }\n    return smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin(), lst.end(),\
    \ [&smallest](long a, long b) { return a < b ? a : b; });\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    long min = lst[0];\n  \
    \  long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    return std::optional<long>(max);", "    if (lst.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    long min_idx = std::distance(std::begin(lst), std::find(std::begin(lst),\
    \ std::end(lst), min_val));\n    if (min_idx == lst.size() - 1) {\n        return\
    \ min_val;\n    }\n    return lst[min_idx + 1];", "    if (lst.empty()) return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n\
    \    if (it == lst.end()) return std::nullopt;\n    auto next = *it;\n    if (next\
    \ < prev) return std::nullopt;\n    return next;", "    if (lst.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\
    \ {\n            return prev;\n        }\n        prev = *it;\n    }\n    return\
    \ prev;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n  \
    \  if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    for (auto\
    \ it = lst.begin(); it != lst.end(); ++it) {\n        if (*it < smallest) {\n\
    \            smallest = *it;\n        }\n    }\n    return smallest;", "    if\
    \ (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n  \
    \  auto prev = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if\
    \ (*it < prev)\n            break;\n        prev = *it;\n    }\n    if (it ==\
    \ lst.end())\n        return std::nullopt;\n    return *it;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto last\
    \ = lst.end();\n    while (it != last) {\n        auto next = std::next(it);\n\
    \        if (*next < *it)\n            ++it;\n        else\n            break;\n\
    \    }\n    if (it == last)\n        return std::nullopt;\n    return *it;", " \
    \   long smallest = *std::min_element(lst.begin(), lst.end());\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    for (auto it = lst.begin()\
    \ + 1; it != lst.end(); ++it) {\n        if (*it < smallest) {\n            smallest\
    \ = *it;\n        }\n    }\n    return smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n\
    \    for (long i = lst.size() - 2; i >= 0; i--) {\n        if (lst[i] < smallest)\
    \ {\n            smallest = lst[i];\n        }\n    }\n    return smallest;",
  "    if (lst.empty()) return std::nullopt;\n    long min = *lst.begin();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \    }\n    return min;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    long smallest = *lst.begin();\n    for(long &x: lst) {\n        if(x < smallest)\n\
    \            smallest = x;\n    }\n    return smallest;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    auto next = *it;\n    if (prev < next)\n        return prev;\n    return\
    \ next;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n  \
    \  auto it = std::find_if(lst.begin(), lst.end(), [&smallest](long x) { return\
    \ x < smallest; });\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    smallest = *it;\n    auto it2 = std::find_if(lst.begin(), lst.end(),\
    \ [&smallest](long x) { return x < smallest; });\n    if (it2 == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    return *it2;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if(lst.empty())\n\
    \        return std::nullopt;\n    long smallest = *lst.begin();\n    for(long\
    \ i : lst)\n        if(i < smallest)\n            smallest = i;\n    return smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest ==\
    \ smallest) {\n        return second_smallest;\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min_index = -1;\n    for (size_t i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min_index == lst.size() - 1) {\n        return\
    \ std::nullopt;\n    }\n    return lst[min_index + 1];", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if (lst.empty())\n\
    \        return std::nullopt;\n    long min = *lst.begin();\n    for (long i :\
    \ lst)\n        if (i < min)\n            min = i;\n    return min;", "    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            min = i;\n        } else if (i > max) {\n         \
    \   max = i;\n        }\n    }\n    if (min == max) {\n        return std::nullopt;\n\
    \    }\n    return max;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    auto next = *it;\n    if (next < prev)\n  \
    \      return std::nullopt;\n    ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto prev = *it;\n    ++it;\n    if (it == lst.end())\n \
    \       return std::nullopt;\n    auto next = *it;\n    if (next < prev)\n   \
    \     return std::nullopt;\n    ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto prev = *it;\n    ++it;\n    if (it == lst.end())\n \
    \       return std::nullopt;\n    auto next = *it;\n    if (next < prev)\n   \
    \     return std::nullopt;\n    return next;", "    if (lst.size() == 0) {\n \
    \       return std::nullopt;\n    }\n    long smallest = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < smallest) {\n            smallest = i;\n       \
    \ }\n    }\n    return smallest;", "    if(lst.size() == 0) return std::nullopt;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for(long i : lst) {\n   \
    \     if(i < min) {\n            min = i;\n        }\n        if(i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;", "    if (lst.empty())\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    for (++it; it != lst.end(); ++it) {\n        if (*it < prev)\n          \
    \  return std::nullopt;\n        prev = *it;\n    }\n    return prev;", "    if\
    \ (lst.size() == 0)\n        return std::nullopt;\n    long min = lst[0];\n  \
    \  for (long i : lst)\n        if (i < min)\n            min = i;\n    return\
    \ min;", "    if (lst.empty())\n        return std::nullopt;\n    auto it = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end())\n        return std::nullopt;\n    return\
    \ *it;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n   \
    \ std::vector<long>::iterator it = std::min_element(lst.begin(), lst.end());\n\
    \    if (it != lst.end()) {\n        smallest = *it;\n    }\n    return smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto prev = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < prev)\n        return std::nullopt;\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    if (*it < prev)\n\
    \        return std::nullopt;\n    prev = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < prev)\n        return std::nullopt;\n\
    \    prev = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < prev)\n        return std::nullopt;\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    if (*it < prev)\n\
    \        return std::nullopt;\n    prev = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < prev)\n        return std::nullopt;\n\
    \    prev = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < prev)\n        return std::nullopt;\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    if (*it < prev)\n\
    \        return std::nullopt;\n    prev = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < prev)\n        return std::nullopt;\n\
    \    prev = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < prev)\n        return std::nullopt;\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    if (*it < prev)\n\
    \        return std::nullopt;\n    prev = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (", "    if (lst.size() == 0) {\n      \
    \  return std::nullopt;\n    }\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    for (size_t i = 2; i < lst.size(); i++) {\n        if (lst[i]\
    \ < smallest) {\n            second_smallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if (lst[i] < second_smallest) {\n            second_smallest\
    \ = lst[i];\n        }\n    }\n    return second_smallest;", "    if (lst.empty())\
    \ return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n\
    \    if (it == lst.end()) return std::nullopt;\n    return *it;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min_index = -1;\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n            min_index = i;\n        }\n\
    \    }\n    return min_index == lst.size() - 1 ? std::nullopt : lst[min_index\
    \ + 1];", "    if (lst.size() == 0) return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front()) return std::nullopt;\n    auto prev = *it;\n    for\
    \ (++it; it != lst.end(); ++it) {\n        if (*it < prev) {\n            prev\
    \ = *it;\n        }\n    }\n    return prev;", "    if (lst.size() == 0)\n   \
    \     return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n\
    \        ++it;\n    long long ans = *it;\n    ++it;\n    while (it != lst.end())\
    \ {\n        if (*it < ans)\n            ans = *it;\n        ++it;\n    }\n  \
    \  return ans;", "    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    if (min == max)\
    \ {\n        return std::nullopt;\n    }\n    return max;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    if (*it == *lst.begin())\n        return std::nullopt;\n    for\
    \ (++it; it != lst.end(); ++it) {\n        if (*it < prev)\n            return\
    \ std::nullopt;\n        prev = *it;\n    }\n    return prev;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    if (*it\
    \ < lst.front())\n        ++it;\n    return *it;", "    if (lst.size() == 0) return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*it == *next) return *it;\n    it = next;\n    next = std::next(it);\n\
    \    if (*it < *next) return std::nullopt;\n    if (*it == *next) return *it;\n\
    \    it = next;\n    next = std::next(it);\n    if (*it < *next) return std::nullopt;\n\
    \    if (*", "    long min = std::numeric_limits<long>::max();\n    long max =\
    \ std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            min = i;\n        } else if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    if (min == max) {\n        return std::nullopt;\n\
    \    }\n    return max;", "    if(lst.size() == 0) return std::nullopt;\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for(long i : lst) {\n        if(i\
    \ < min) min = i;\n        if(i > max) max = i;\n    }\n    return max == min\
    \ ? std::nullopt : max;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin(), lst.end(),\
    \ [&smallest](long a, long b) { return a < b ? a : b; });\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    if (lst.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long smallest = lst[0];\n    for (long\
    \ i = 1; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n          \
    \  smallest = lst[i];\n        }\n    }\n    return smallest;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    for (long i = 2; i < lst.size(); i++)\
    \ {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.end(), [&smallest](long a, long b) { return\
    \ a < b ? a : b; });\n    return second_smallest == smallest ? std::nullopt :\
    \ second_smallest;", "    if (lst.empty())\n        return std::nullopt;\n   \
    \ long min = lst[0];\n    for (long i : lst)\n        if (i < min)\n         \
    \   min = i;\n    return min;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            return prev;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto prev = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n       \
    \ if (*it < prev) {\n            return prev;\n        }\n        prev = *it;\n\
    \    }\n    return prev;", "    if(lst.size() == 0) return std::nullopt;\n   \
    \ long min = lst[0];\n    long min_index = -1;\n    for(long i = 1; i < lst.size();\
    \ i++) {\n        if(lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    return min_index == lst.size() - 1 ? std::nullopt\
    \ : lst[min_index + 1];", "    long smallest = lst[0];\n    long second_smallest\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n         \
    \   second_smallest = smallest;\n            smallest = i;\n        } else if\
    \ (i > second_smallest) {\n            second_smallest = i;\n        }\n    }\n\
    \    return second_smallest == lst[0] ? std::nullopt : second_smallest;", "  \
    \  if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    auto next = *it;\n    if (next < prev)\
    \ {\n        return std::nullopt;\n    }\n    while (next < prev) {\n        prev\
    \ = next;\n        ++it;\n        if (it == lst.end()) {\n            return std::nullopt;\n\
    \        }\n        next = *it;\n    }\n    return prev;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto next = *it;\n    if (next < prev) {\n        std::swap(prev,\
    \ next);\n    }\n    if (prev == next) {\n        return std::nullopt;\n    }\n\
    \    return prev;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min)\n            min = i;\n        if (i > max)\n            max\
    \ = i;\n    }\n    if (min == max)\n        return std::nullopt;\n    return max;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    return max == min ? std::nullopt : max;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    auto next = *it;\n    if (prev < next)\n        return prev;\n    return\
    \ next;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    return max;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if (lst.empty()) return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n    for (++it;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            prev = *it;\n\
    \        }\n    }\n    return prev;", "    if (lst.size() == 0)\n        return\
    \ std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n   \
    \ for (; it != lst.end(); it++) {\n        if (*it < *it2) {\n            it2\
    \ = it;\n        }\n    }\n    return *it2;", "    if (lst.size() == 0)\n    \
    \    return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n\
    \        ++it;\n    long long smallest = *it;\n    for (++it; it != lst.end();\
    \ ++it) {\n        if (*it < smallest)\n            smallest = *it;\n    }\n \
    \   return smallest;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    if (*it < lst.front()) {\n        ++it;\n\
    \    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto it2 = lst.begin();\n    if (*it < *it2) {\n        ++it;\n    }\n   \
    \ if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n\
    \    for (long i = lst.size() - 2; i >= 0; --i) {\n        if (lst[i] < smallest)\
    \ {\n            smallest = lst[i];\n        }\n    }\n    return smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front())\n        ++it;\n    if (it == lst.end())\n       \
    \ return std::nullopt;\n    auto next = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it\
    \ == lst.end())\n        return std::nullopt;\n    next = *it;\n    ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    if (*it < next)\n \
    \       ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    next\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < next)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n      \
    \  return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it\
    \ == lst.end())\n        return std::nullopt;\n    next = *it;\n    ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    if (*it < next)\n \
    \       ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    next\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < next)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n      \
    \  return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return ", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            return prev;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if (lst.size() ==\
    \ 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    auto next = *it;\n    if (next < prev)\n        return std::nullopt;\n  \
    \  ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    prev = *it;\n\
    \    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    next =\
    \ *it;\n    if (next < prev)\n        return std::nullopt;\n    ++it;\n    if\
    \ (it == lst.end())\n        return std::nullopt;\n    prev = *it;\n    ++it;\n\
    \    if (it == lst.end())\n        return std::nullopt;\n    next = *it;\n   \
    \ if (next < prev)\n        return std::nullopt;\n    return std::optional<long>(prev);",
  "    // Your code here\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front())\n        ++it;\n    if (*it < lst.back())\n      \
    \  ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    return *it;",
  "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    return std::optional<long>(max);", " \
    \   if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for (size_t i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    // Your code here\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto it2 = lst.begin();\n    long val = *it;\n    long val2\
    \ = *it2;\n    while (it != lst.end()) {\n        it++;\n        if (*it < val)\
    \ {\n            val = *it;\n        }\n        it2++;\n        if (*it2 < val2)\
    \ {\n            val2 = *it2;\n        }\n    }\n    if (val2 < val + 1) {\n \
    \       return std::nullopt;\n    }\n    return val;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    return std::optional<long>(max);", "    if(lst.size() ==\
    \ 0)\n        return std::nullopt;\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    for(long i : lst)\n        if(i == smallest)\n            return\
    \ std::nullopt;\n    return smallest;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev = *it;\n   \
    \ for (++it; it != lst.end(); ++it) {\n        if (*it < prev) {\n           \
    \ return prev;\n        }\n        prev = *it;\n    }\n    return prev;", "  \
    \  long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.begin() + 1);\n    if (second_smallest\
    \ == smallest)\n        return std::nullopt;\n    return second_smallest;", " \
    \   if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for (size_t i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    // Your code here\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n           \
    \ second_smallest = smallest;\n            smallest = i;\n        } else if (i\
    \ < second_smallest) {\n            second_smallest = i;\n        }\n    }\n \
    \   return second_smallest == lst[0] ? std::nullopt : second_smallest;", "   \
    \ if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = *lst.begin();\n    for (long i : lst) {\n        if (i < smallest) {\n   \
    \         smallest = i;\n        }\n    }\n    return smallest;", "    // Write\
    \ your code here\n    long smallest = lst[0];\n    long second_smallest = lst[0];\n\
    \    for (long i : lst) {\n        if (i < smallest) {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        } else if (i == smallest) {\n\
    \            second_smallest = i;\n        }\n    }\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    long min = lst[0];\n  \
    \  long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    return std::optional<long>(max);", "    if (lst.size() == 0)\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\n   \
    \         return std::nullopt;\n        prev = *it;\n    }\n    return prev;",
  "    if (lst.size() == 0) return std::nullopt;\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin(), lst.begin()\
    \ + 1);\n    if (second_smallest == smallest) return std::nullopt;\n    return\
    \ second_smallest;", "    if (lst.empty()) return std::nullopt;\n    long min\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n    }\n    return min;", "    if (lst.empty()) return std::nullopt;\n\
    \    long smallest = *lst.begin();\n    for (long &i : lst) {\n        if (i <\
    \ smallest) smallest = i;\n    }\n    return smallest;", "    long smallest =\
    \ lst[0];\n    long second_smallest = lst[1];\n    for (long i : lst) {\n    \
    \    if (i < smallest) {\n            second_smallest = smallest;\n          \
    \  smallest = i;\n        } else if (i > second_smallest) {\n            second_smallest\
    \ = i;\n        }\n    }\n    return second_smallest == smallest ? std::nullopt\
    \ : second_smallest;", "    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);"]
stop_tokens:
- "\n}"
