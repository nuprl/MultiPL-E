name: HumanEval_133_sum_squares
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of numbers.\n\
  // You need to return the sum of squared numbers in the given list,\n// round each\
  \ element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0,\
  \ (float)4.0, (float)9.0})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0,\
  \ (float)3.0, (float)5.0, (float)7.0})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4,\
  \ (float)4.2, (float)0.0})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4,\
  \ (float)1.0, (float)1.0})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\n"
tests: "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
  \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
  \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
  \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
  \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
  \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
  \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
  \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
  \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
  \ == (2));\n}\n"
completions: ["    long sum = 0;\n    for (float x : lst) {\n        sum += x * x;\n\
    \    }\n    return sum;", "    long long ans = 0;\n    for(auto i : lst) {\n \
    \       ans += i*i;\n    }\n    return ans;", "    long sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;", "  \
    \  long long sum = 0;\n    for(auto &x: lst) {\n        sum += x * x;\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (float f : lst) {\n        sum\
    \ += std::round(f * f);\n    }\n    return sum;", "    long long ans = 0;\n  \
    \  for (auto &i : lst) {\n        ans += i * i;\n    }\n    return ans;", "  \
    \  long long ans = 0;\n    for(auto &x : lst) {\n        ans += x * x;\n    }\n\
    \    return ans;", "    long long ans = 0;\n    for(auto &i : lst) {\n       \
    \ ans += i*i;\n    }\n    return ans;", "    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += f*f;\n    }\n    return ans;", "    long sum = 0;\n\
    \    for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;", " \
    \   // Write your code here.\n    long sum = 0;\n    long n = lst.size();\n  \
    \  long i = 0;\n    long sum_squares = 0;\n    while(i < n) {\n        sum +=\
    \ lst[i];\n        sum_squares += lst[i] * lst[i];\n        i++;\n    }\n    return\
    \ sum_squares/n;", "    long sum = 0;\n    for (float x : lst) {\n        sum\
    \ += x * x;\n    }\n    return sum;", "    long sum = 0;\n    for (float f : lst)\
    \ {\n        sum += std::round(f * f);\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (float f : lst) {\n        sum += std::round(f * f);\n    }\n\
    \    return sum;", "    long sum = 0;\n    long n = lst.size();\n    long m =\
    \ lst.front();\n    for (long i = 0; i < n; i++) {\n        sum += (long)((double)m\
    \ * m);\n        m += lst.at(i);\n    }\n    return sum;", "    long long ans\
    \ = 0;\n    for (float x : lst) {\n        ans += x * x;\n    }\n    return ans;",
  "    long sum = 0;\n    long n = lst.size();\n    long m = lst.front();\n    for\
    \ (long i = 0; i < n; i++) {\n        sum += (long long)m * m;\n        m += lst[i];\n\
    \    }\n    return sum;", "    long sum = 0;\n    for (float f : lst) {\n    \
    \    sum += std::round(f * f);\n    }\n    return sum;", "    // Your code here\n\
    \    long sum = 0;\n    for (auto i : lst) {\n        sum += i * i;\n    }\n \
    \   return sum;", "    long sum = 0;\n    long n = lst.size();\n    for(long i\
    \ = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]), 2);\n\
    \    }\n    return sum;"]
stop_tokens:
- "\n}"
