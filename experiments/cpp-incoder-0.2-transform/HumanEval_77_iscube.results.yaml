language: cpp
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    long cube\
    \ = n * n * n;\n    if (cube == a) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekjg8c79.cpp: In function 'int main()':\n/tmp/tmpekjg8c79.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekjg8c79.cpp:2:\n/tmp/tmpekjg8c79.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int sum\
    \ = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow((double)i, 3);\n\
    \    }\n    if (sum == n) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztjdyfzy.cpp: In function 'int main()':\n/tmp/tmpztjdyfzy.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpztjdyfzy.cpp:2:\n/tmp/tmpztjdyfzy.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int cube = a*a*a;\n\
    \    if (cube%a == 0) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs3pgdeq.cpp: In function 'int main()':\n/tmp/tmpjs3pgdeq.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjs3pgdeq.cpp:2:\n/tmp/tmpjs3pgdeq.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long) a;\n    long long int c = 1;\n    long long int d = 1;\n    long long\
    \ int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long\
    \ int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long\
    \ int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long\
    \ int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long\
    \ int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long\
    \ int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long\
    \ int z = 1;\n    long long int A = 1;\n    long long int B = 1;\n    long long\
    \ int C = 1;\n    long long int D = 1;\n    long long int E = 1;\n    long long\
    \ int F = 1;\n    long long int G = 1;\n    long long int H = 1;\n    long long\
    \ int I = 1;\n    long long int J = 1;\n    long long int K = 1;\n    long long\
    \ int L = 1;\n    long long int M = 1;\n    long long int N = 1;\n    long long\
    \ int O = 1;\n    long long int P = 1;\n    long long int Q = 1;\n    long long\
    \ int R = 1;\n    long long int S = 1;\n    long long int T = 1;\n    long long\
    \ int U = 1;\n    long long int V = 1;\n    long long int W = 1;\n    long long\
    \ int X = 1;\n    long long int Y = 1;\n    long long int Z = 1;\n    long long\
    \ int aa = 1;\n    long long int ab = 1;\n    long long int ac = 1;\n    long\
    \ long int ad = 1;\n    long long int ae = 1;\n    long long int af = 1;\n   \
    \ long long int ag = 1;\n    long long int ah = 1;\n    long long int ai = 1;\n\
    \    long long int aj = 1;\n    long long int ak = 1;\n    long long int al =\
    \ 1;\n    long long int am = 1;\n    long long int an = 1;\n    long long int\
    \ ao = 1;\n    long long int ap = 1;\n    long long int aq = 1;\n    long long\
    \ int ar = 1;\n    long long int as = 1;\n    long long int at = 1;\n    long\
    \ long int au = 1;\n    long long int av\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7o9ekmr.cpp: In function 'bool iscube(long int)':\n/tmp/tmpr7o9ekmr.cpp:93:1:\
    \ error: expected initializer before '}' token\n }\n ^\n/tmp/tmpr7o9ekmr.cpp:\
    \ In function 'int main()':\n/tmp/tmpr7o9ekmr.cpp:95:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = iscube;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7o9ekmr.cpp:2:\n/tmp/tmpr7o9ekmr.cpp:96:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    long ans\
    \ = 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    while (i <= n)\
    \ {\n        ans = ans + i;\n        i++;\n    }\n    while (j <= n) {\n     \
    \   ans = ans + j;\n        j++;\n    }\n    while (k <= n) {\n        ans = ans\
    \ + k;\n        k++;\n    }\n    if (ans == a) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxh9iaye.cpp: In function 'int main()':\n/tmp/tmpuxh9iaye.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxh9iaye.cpp:2:\n/tmp/tmpuxh9iaye.cpp:44:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a%a;\n\
    \    long long int c = a%b;\n    long long int d = a%c;\n    long long int e =\
    \ a%d;\n    long long int f = a%e;\n    long long int g = a%f;\n    long long\
    \ int h = a%g;\n    long long int i = a%h;\n    long long int j = a%i;\n    long\
    \ long int k = a%j;\n    long long int l = a%k;\n    long long int m = a%l;\n\
    \    long long int n = a%m; \n    long long int o = a%n;\n    long long int p\
    \ = a%o;\n    long long int q = a%p;\n    long long int r = a%q;\n    long long\
    \ int s = a%r;\n    long long int t = a%s;\n    long long int u = a%t;\n    long\
    \ long int v = a%u;\n    long long int w = a%v;\n    long long int x = a%w;\n\
    \    long long int y = a%x;\n    long long int z = a%y;\n    long long int a =\
    \ a%z;\n    long long int b = a%a;\n    long long int c = a%b;\n    long long\
    \ int d = a%d;\n    long long int e = a%e;\n    long long int f = a%f;\n    long\
    \ long int g = a%g;\n    long long int h = a%h;\n    long long int i = a%i;\n\
    \    long long int j = a%j;\n    long long int k = a%k;\n    long long int l =\
    \ a%l;\n    long long int m = a%m;\n    long long int n = a%n;\n    long long\
    \ int o = a%o;\n    long long int p = a%p;\n    long long int q = a%q;\n    long\
    \ long int r = a%r;\n    long long int s = a%s;\n    long long int t = a%t;\n\
    \    long long int u = a%u;\n    long long int v = a%v;\n    long long int w =\
    \ a%w;\n    long long int x = a%x;\n    long long int y = a%y;\n    long long\
    \ int z = a%z;\n    long long int a = a%a;\n    long long int b = a%b;\n    long\
    \ long int c = a%c;\n    long long int d = a%d;\n    long long int e = \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5pxur4g9.cpp: In function 'bool iscube(long int)':\n/tmp/tmp5pxur4g9.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a%z;\n                   ^\n/tmp/tmp5pxur4g9.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a%a;\n                   ^\n/tmp/tmp5pxur4g9.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a%a;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a%b;\n                   ^\n/tmp/tmp5pxur4g9.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a%b;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a%d;\n                   ^\n/tmp/tmp5pxur4g9.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a%c;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a%e;\n                   ^\n/tmp/tmp5pxur4g9.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a%d;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a%f;\n                   ^\n/tmp/tmp5pxur4g9.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a%e;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a%g;\n                   ^\n/tmp/tmp5pxur4g9.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a%f;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a%h;\n                   ^\n/tmp/tmp5pxur4g9.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a%g;\n\
    \                   ^\n/tmp/tmp5pxur4g9.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a%i;\n                   ^\n/tmp/tmp5px"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int cube = a\
    \ * a * a;\n    long long int square = a * a;\n    long long int cube_of_square\
    \ = cube*square;\n    long long int cube_of_cube = cube*cube;\n    long long int\
    \ cube_of_cube_of_square = cube_of_square*cube;\n    long long int cube_of_cube_of_cube\
    \ = cube_of_cube*cube;\n    long long int cube_of_cube_of_cube_of_square = cube_of_cube_of_square*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_square = cube_of_cube_of_cube_of_square*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube_of_cube*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_square = cube_of_cube_of_cube_of_cube_of_square*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube_of_cube_of_cube*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square = cube_of_cube_of_cube_of_cube_of_cube_of_square*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube_of_cube_of_cube_of_cube*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square = cube_of_cube_of_cube_of_cube_of_cube_of_square*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube_of_cube_of_cube_of_cube*cube;\n\
    \    long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square\
    \ = cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square*cube;\n    long long\
    \ int cube_of_\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzzb6pg2.cpp: In function 'bool iscube(long int)':\n/tmp/tmpbzzb6pg2.cpp:34:19:\
    \ error: redeclaration of 'long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square'\n\
    \     long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square = cube_of_cube_of_cube_of_cube_of_cube_of_square*cube;\n\
    \                   ^\n/tmp/tmpbzzb6pg2.cpp:32:19: error: 'long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square'\
    \ previously declared here\n     long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_square\
    \ = cube_of_cube_of_cube_of_cube_of_cube_of_square*cube;\n                   ^\n\
    /tmp/tmpbzzb6pg2.cpp:35:19: error: redeclaration of 'long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube'\n\
    \     long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube = cube_of_cube_of_cube_of_cube_of_cube_of_cube*cube;\n\
    \                   ^\n/tmp/tmpbzzb6pg2.cpp:33:19: error: 'long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube'\
    \ previously declared here\n     long long int cube_of_cube_of_cube_of_cube_of_cube_of_cube_of_cube\
    \ = cube_of_cube_of_cube_of_cube_of_cube_of_cube*cube;\n                   ^\n\
    /tmp/tmpbzzb6pg2.cpp:38:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpbzzb6pg2.cpp: In function 'int main()':\n/tmp/tmpbzzb6pg2.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbzzb6pg2.cpp:2:\n/tmp/tmpbzzb6pg2.cpp:41:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n\
    \    long long int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25g95zmv.cpp: In function 'bool iscube(long int)':\n/tmp/tmp25g95zmv.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int cube = a*a*a;\n\
    \    long long int cube_power = 1;\n    long long int cube_power_2 = 1;\n    long\
    \ long int cube_power_3 = 1;\n    long long int cube_power_4 = 1;\n    long long\
    \ int cube_power_5 = 1;\n    long long int cube_power_6 = 1;\n    long long int\
    \ cube_power_7 = 1;\n    long long int cube_power_8 = 1;\n    long long int cube_power_9\
    \ = 1;\n    long long int cube_power_10 = 1;\n    long long int cube_power_11\
    \ = 1;\n    long long int cube_power_12 = 1;\n    long long int cube_power_13\
    \ = 1;\n    long long int cube_power_14 = 1;\n    long long int cube_power_15\
    \ = 1;\n    long long int cube_power_16 = 1;\n    long long int cube_power_17\
    \ = 1;\n    long long int cube_power_18 = 1;\n    long long int cube_power_19\
    \ = 1;\n    long long int cube_power_20 = 1;\n    long long int cube_power_21\
    \ = 1;\n    long long int cube_power_22 = 1;\n    long long int cube_power_23\
    \ = 1;\n    long long int cube_power_24 = 1;\n    long long int cube_power_25\
    \ = 1;\n    long long int cube_power_26 = 1;\n    long long int cube_power_27\
    \ = 1;\n    long long int cube_power_28 = 1;\n    long long int cube_power_29\
    \ = 1;\n    long long int cube_power_30 = 1;\n    long long int cube_power_31\
    \ = 1;\n    long long int cube_power_32 = 1;\n    long long int cube_power_33\
    \ = 1;\n    long long int cube_power_34 = 1;\n    long long int cube_power_35\
    \ = 1;\n    long long int cube_power_36 = 1;\n    long long int cube_power_37\
    \ = 1;\n    long long int cube_power_38 = 1;\n    long long int cube_power_39\
    \ = 1;\n    long long int cube_power_40 = 1;\n    long long int cube_power_41\
    \ = 1;\n    long long int cube_power_42 = 1;\n    long long int cube_power_43\
    \ = 1;\n    long long int cube_power_44 = 1;\n    long long int cube_power_45\
    \ = 1;\n    long long int cube_power_46 = 1;\n    long long int cube_power_47\
    \ = 1;\n    long long int cube_power_48 = 1;\n    long long int cube_power_49\
    \ = 1;\n    long long int cube_power_50 = 1;\n\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi6h_58x5.cpp: In function 'int main()':\n/tmp/tmpi6h_58x5.cpp:74:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi6h_58x5.cpp:2:\n/tmp/tmpi6h_58x5.cpp:75:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 3 == 0)\n    \
    \    return true;\n    if (a % 5 == 0)\n        return true;\n    if (a % 7 ==\
    \ 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrm8on2y.cpp: In function 'int main()':\n/tmp/tmplrm8on2y.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplrm8on2y.cpp:2:\n/tmp/tmplrm8on2y.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0)\n        return\
    \ false;\n    if (a == 1)\n        return true;\n    if (a == 2)\n        return\
    \ true;\n    if (a == 3)\n        return true;\n    if (a == 4)\n        return\
    \ true;\n    if (a == 5)\n        return true;\n    if (a == 6)\n        return\
    \ true;\n    if (a == 7)\n        return true;\n    if (a == 8)\n        return\
    \ true;\n    if (a == 9)\n        return true;\n    if (a == 10)\n        return\
    \ true;\n    if (a == 11)\n        return true;\n    if (a == 12)\n        return\
    \ true;\n    if (a == 13)\n        return true;\n    if (a == 14)\n        return\
    \ true;\n    if (a == 15)\n        return true;\n    if (a == 16)\n        return\
    \ true;\n    if (a == 17)\n        return true;\n    if (a == 18)\n        return\
    \ true;\n    if (a == 19)\n        return true;\n    if (a == 20)\n        return\
    \ true;\n    if (a == 21)\n        return true;\n    if (a == 22)\n        return\
    \ true;\n    if (a == 23)\n        return true;\n    if (a == 24)\n        return\
    \ true;\n    if (a == 25)\n        return true;\n    if (a == 26)\n        return\
    \ true;\n    if (a == 27)\n        return true;\n    if (a == 28)\n        return\
    \ true;\n    if (a == 29)\n        return true;\n    if (a == 30)\n        return\
    \ true;\n    if (a == 31)\n        return true;\n    if (a == 32)\n        return\
    \ true;\n    if (a == 33)\n        return true;\n    if (a == 34)\n        return\
    \ true;\n    if (a == 35)\n        return true;\n    if (a == 36)\n        return\
    \ true;\n    if (a == 37)\n        return true;\n    if (a == 38)\n        return\
    \ true;\n    if (a == 39)\n        return true;\n    if (a == 40)\n        return\
    \ true;\n    if (a == 41)\n        return true;\n    if (a == 42)\n        return\
    \ true;\n    if (a == 43)\n        return true;\n    if (a == 44)\n        return\
    \ true;\n    if (a == 45)\n        return true;\n    if (a == 46)\n        return\
    \ true;\n    if (a == 47)\n        return true;\n    if (a == 48)\n        return\
    \ true;\n    if (a == 49)\n        return true;\n    if (a == 50)\n        return\
    \ true;\n    if (a == 51)\n        return true;\n    if (a == 52)\n        return\
    \ true;\n    if (a == 53)\n        return true;\n    if (a == 54)\n        return\
    \ true;\n    if (a == 55)\n        return true;\n    if (a == 56)\n        return\
    \ true;\n    if (a == 57)\n        return true;\n    if (a == 58)\n        return\
    \ true;\n    if (a == 59)\n        return true;\n    if (a == 60)\n        return\
    \ true;\n    if (a == 61)\n        return true;\n    if (a == 62)\n        return\
    \ true;\n    if (a == 63)\n        return true;\n    if (a == 64)\n        return\
    \ true;\n    if (a == 65)\n        return true;\n    if (a == 66)\n        return\
    \ true;\n    if (a == 67)\n        return true;\n    if (a == 68)\n        return\
    \ true;\n    if (a == 69)\n        return true;\n    if (a == 70)\n        return\
    \ true;\n    if (a == 71)\n        return true;\n    if (a == 72)\n        return\
    \ true;\n    if (a == 73)\n        return true;\n    if (a == 74)\n        return\
    \ true;\n    if (a == 75)\n        return true;\n    if (a == 76)\n        return\
    \ true;\n    if (a == 77)\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa00i6n7e.cpp: In function 'bool iscube(long int)':\n/tmp/tmpa00i6n7e.cpp:175:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa00i6n7e.cpp:175:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpa00i6n7e.cpp: In function 'int\
    \ main()':\n/tmp/tmpa00i6n7e.cpp:177:10: error: 'candidate' does not name a type\n\
    \     auto candidate = iscube;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa00i6n7e.cpp:2:\n/tmp/tmpa00i6n7e.cpp:178:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (a /\
    \ 3);\n    long long int c = a % 3;\n    long long int d = b * b;\n    long long\
    \ int e = c * c;\n    long long int f = d * d;\n    long long int g = e * e;\n\
    \    long long int h = f * f;\n    long long int i = g * g;\n    long long int\
    \ j = h * h;\n    long long int k = i * i;\n    long long int l = j * j;\n   \
    \ long long int m = k * k;\n    long long int n = l * l;\n    long long int o\
    \ = m * m;\n    long long int p = n * n;\n    long long int q = o * o;\n    long\
    \ long int r = p * p;\n    long long int s = q * q;\n    long long int t = r *\
    \ r;\n    long long int u = s * s;\n    long long int v = t * t;\n    long long\
    \ int w = u * u;\n    long long int x = v * v;\n    long long int y = w * w;\n\
    \    long long int z = x * x;\n    long long int a = y * y;\n    long long int\
    \ b = z * z;\n    long long int c = a * a;\n    long long int d = b * b;\n   \
    \ long long int e = c * c;\n    long long int f = d * d;\n    long long int g\
    \ = e * e;\n    long long int h = f * f;\n    long long int i = g * g;\n    long\
    \ long int j = h * h;\n    long long int k = i * i;\n    long long int l = j *\
    \ j;\n    long long int m = k * k;\n    long long int n = l * l;\n    long long\
    \ int o = m * m;\n    long long int p = n * n;\n    long long int q = o * o;\n\
    \    long long int r = p * p;\n    long long int s = q * q;\n    long long int\
    \ t = r * r;\n    long long int u = s * s;\n    long long int v = t * t;\n   \
    \ long long int w = u * u;\n    long long int x = v * v;\n    long long int y\
    \ = w * w;\n    long long int z = x * x;\n    long long int a = y * y;\n    long\
    \ long int b = z * z;\n    long long int c = a * a;\n    long long int d = b *\
    \ b;\n    long long int e = c * c;\n    long long int f = d * d;\n    long long\
    \ int g = e * e;\n    long \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjnej54j0.cpp: In function 'bool iscube(long int)':\n/tmp/tmpjnej54j0.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = y * y;\n                   ^\n/tmp/tmpjnej54j0.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = z * z;\n                   ^\n\
    /tmp/tmpjnej54j0.cpp:20:19: error: 'long long int b' previously declared here\n\
    \     long long int b = (a / 3);\n                   ^\n/tmp/tmpjnej54j0.cpp:47:19:\
    \ error: redeclaration of 'long long int c'\n     long long int c = a * a;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:21:19: error: 'long long int c' previously\
    \ declared here\n     long long int c = a % 3;\n                   ^\n/tmp/tmpjnej54j0.cpp:48:19:\
    \ error: redeclaration of 'long long int d'\n     long long int d = b * b;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:22:19: error: 'long long int d' previously\
    \ declared here\n     long long int d = b * b;\n                   ^\n/tmp/tmpjnej54j0.cpp:49:19:\
    \ error: redeclaration of 'long long int e'\n     long long int e = c * c;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:23:19: error: 'long long int e' previously\
    \ declared here\n     long long int e = c * c;\n                   ^\n/tmp/tmpjnej54j0.cpp:50:19:\
    \ error: redeclaration of 'long long int f'\n     long long int f = d * d;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:24:19: error: 'long long int f' previously\
    \ declared here\n     long long int f = d * d;\n                   ^\n/tmp/tmpjnej54j0.cpp:51:19:\
    \ error: redeclaration of 'long long int g'\n     long long int g = e * e;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:25:19: error: 'long long int g' previously\
    \ declared here\n     long long int g = e * e;\n                   ^\n/tmp/tmpjnej54j0.cpp:52:19:\
    \ error: redeclaration of 'long long int h'\n     long long int h = f * f;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:26:19: error: 'long long int h' previously\
    \ declared here\n     long long int h = f * f;\n                   ^\n/tmp/tmpjnej54j0.cpp:53:19:\
    \ error: redeclaration of 'long long int i'\n     long long int i = g * g"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a % 3 == 0;\n    else\n        return a % 3 == 1;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhw76i_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a==1) return true;\n    if (a==2) return true;\n    if (a==3) return\
    \ true;\n    if (a==4) return true;\n    if (a==5) return true;\n    if (a==6)\
    \ return true;\n    if (a==7) return true;\n    if (a==8) return true;\n    if\
    \ (a==9) return true;\n    if (a==10) return true;\n    if (a==11) return true;\n\
    \    if (a==12) return true;\n    if (a==13) return true;\n    if (a==14) return\
    \ true;\n    if (a==15) return true;\n    if (a==16) return true;\n    if (a==17)\
    \ return true;\n    if (a==18) return true;\n    if (a==19) return true;\n   \
    \ if (a==20) return true;\n    if (a==21) return true;\n    if (a==22) return\
    \ true;\n    if (a==23) return true;\n    if (a==24) return true;\n    if (a==25)\
    \ return true;\n    if (a==26) return true;\n    if (a==27) return true;\n   \
    \ if (a==28) return true;\n    if (a==29) return true;\n    if (a==30) return\
    \ true;\n    if (a==31) return true;\n    if (a==32) return true;\n    if (a==33)\
    \ return true;\n    if (a==34) return true;\n    if (a==35) return true;\n   \
    \ if (a==36) return true;\n    if (a==37) return true;\n    if (a==38) return\
    \ true;\n    if (a==39) return true;\n    if (a==40) return true;\n    if (a==41)\
    \ return true;\n    if (a==42) return true;\n    if (a==43) return true;\n   \
    \ if (a==44) return true;\n    if (a==45) return true;\n    if (a==46) return\
    \ true;\n    if (a==47) return true;\n    if (a==48) return true;\n    if (a==49)\
    \ return true;\n    if (a==50) return true;\n    if (a==51) return true;\n   \
    \ if (a==52) return true;\n    if (a==53) return true;\n    if (a==54) return\
    \ true;\n    if (a==55) return true;\n    if (a==56) return true;\n    if (a==57)\
    \ return true;\n    if (a==58) return true;\n    if (a==59) return true;\n   \
    \ if (a==60) return true;\n    if (a==61) return true;\n    if (a==62) return\
    \ true;\n    if (a==63) return true;\n    if (a==64) return true;\n    if (a==65)\
    \ return true;\n    if (a==66) return true;\n    if (a==67) return true;\n   \
    \ if (a==68) return true;\n    if (a==69) return true;\n    if (a==70) return\
    \ true;\n    if (a==71) return true;\n    if (a==\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzyoum45k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a % 3 == 0;\n    else\n        return a % 3 == 1;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhw76i_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int a1 = a;\n    long long int a2 = a;\n    long\
    \ long int a3 = a;\n    long long int a4 = a;\n    long long int a5 = a;\n   \
    \ long long int a6 = a;\n    long long int a7 = a;\n    long long int a8 = a;\n\
    \    long long int a9 = a;\n    long long int a10 = a;\n    long long int a11\
    \ = a;\n    long long int a12 = a;\n    long long int a13 = a;\n    long long\
    \ int a14 = a;\n    long long int a15 = a;\n    long long \n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpixa46y7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a == 1) return true;\n    if (a == -1) return true;\n    if (a == 2)\
    \ return true;\n    if (a == -2) return true;\n    if (a == 3) return true;\n\
    \    if (a == -3) return true;\n    if (a == 4) return true;\n    if (a == -4)\
    \ return true;\n    if (a == 5) return true;\n    if (a == -5) return true;\n\
    \    if (a == 6) return true;\n    if (a == -6) return true;\n    if (a == 7)\
    \ return true;\n    if (a == -7) return true;\n    if (a == 8) return true;\n\
    \    if (a == -8) return true;\n    if (a == 9) return true;\n    if (a == -9)\
    \ return true;\n    if (a == 10) return true;\n    if (a == -10) return true;\n\
    \    if (a == 11) return true;\n    if (a == -11) return true;\n    if (a == 12)\
    \ return true;\n    if (a == -12) return true;\n    if (a == 13) return true;\n\
    \    if (a == -13) return true;\n    if (a == 14) return true;\n    if (a == -14)\
    \ return true;\n    if (a == 15) return true;\n    if (a == -15) return true;\n\
    \    if (a == 16) return true;\n    if (a == -16) return true;\n    if (a == 17)\
    \ return true;\n    if (a == -17) return true;\n    if (a == 18) return true;\n\
    \    if (a == -18) return true;\n    if (a == 19) return true;\n    if (a == -19)\
    \ return true;\n    if (a == 20) return true;\n    if (a == -20) return true;\n\
    \    if (a == 21) return true;\n    if (a == -21) return true;\n    if (a == 22)\
    \ return true;\n    if (a == -22) return true;\n    if (a == 23) return true;\n\
    \    if (a == -23) return true;\n    if (a == 24) return true;\n    if (a == -24)\
    \ return true;\n    if (a == 25) return true;\n    if (a == -25) return true;\n\
    \    if (a == 26) return true;\n    if (a == -26) return true;\n    if (a == 27)\
    \ return true;\n    if (a == -27) return true;\n    if (a == 28) return true;\n\
    \    if (a == -28) return true;\n    if (a == 29) return true;\n    if (a == -29)\
    \ return true;\n    if (a == 30) return true;\n    if (a == -30) return true;\n\
    \    if (a == 31) return true;\n    if (a == -31) return true;\n    if (a == 32)\
    \ return true;\n    if (a == -32) return true;\n    if (a == 33) return true;\n\
    \    if (a == -33) return true;\n    if (a == 34) return true;\n    if (a == -34)\
    \ return true;\n    if (a == 35) return true;\n    if (a == -35) return true;\n\
    \    if (a == 36) return true;\n    if (a == -36) return true;\n    if (a == 37)\
    \ return true;\n    if (a == -37) return true;\n    if (a == 38) return true;\n\
    \    if (a == -38) return true;\n    if (a == 39) return true;\n    if (a == -39)\
    \ return true;\n    if (a == 40) return true;\n    if (a == -40) return true;\n\
    \    if (a == 41) return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi3bn2ofw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4z_t5ki_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int aa = a;\n\
    \    long long int bb = a;\n    long long int cc = a;\n    long long int dd =\
    \ a;\n    long long int ee = a;\n    long long int ff = a;\n    long long int\
    \ gg = a;\n    long long int hh = a;\n    long long int ii = a;\n    long long\
    \ int jj = a;\n    long long int kk = a;\n    long long int ll = a;\n    long\
    \ long int mm = a;\n    long long int nn = a;\n    long long int oo = a;\n   \
    \ long long int pp = a;\n    long \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmd1vbwuw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    if (n\
    \ % 2 == 0) {\n        if (n % 3 == 0) {\n            if (n % 5 == 0) {\n    \
    \            return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpffyao6lb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (a /\
    \ 3);\n    long long int c = a % 3;\n    long long int d = b * b;\n    long long\
    \ int e = c * c;\n    long long int f = d * d;\n    long long int g = e * e;\n\
    \    long long int h = f * f;\n    long long int i = g * g;\n    long long int\
    \ j = h * h;\n    long long int k = i * i;\n    long long int l = j * j;\n   \
    \ long long int m = k * k;\n    long long int n = l * l;\n    long long int o\
    \ = m * m;\n    long long int p = n * n;\n    long long int q = o * o;\n    long\
    \ long int r = p * p;\n    long long int s = q * q;\n    long long int t = r *\
    \ r;\n    long long int u = s * s;\n    long long int v = t * t;\n    long long\
    \ int w = u * u;\n    long long int x = v * v;\n    long long int y = w * w;\n\
    \    long long int z = x * x;\n    long long int a = y * y;\n    long long int\
    \ b = z * z;\n    long long int c = a * a;\n    long long int d = b * b;\n   \
    \ long long int e = c * c;\n    long long int f = d * d;\n    long long int g\
    \ = e * e;\n    long long int h = f * f;\n    long long int i = g * g;\n    long\
    \ long int j = h * h;\n    long long int k = i * i;\n    long long int l = j *\
    \ j;\n    long long int m = k * k;\n    long long int n = l * l;\n    long long\
    \ int o = m * m;\n    long long int p = n * n;\n    long long int q = o * o;\n\
    \    long long int r = p * p;\n    long long int s = q * q;\n    long long int\
    \ t = r * r;\n    long long int u = s * s;\n    long long int v = t * t;\n   \
    \ long long int w = u * u;\n    long long int x = v * v;\n    long long int y\
    \ = w * w;\n    long long int z = x * x;\n    long long int a = y * y;\n    long\
    \ long int b = z * z;\n    long long int c = a * a;\n    long long int d = b *\
    \ b;\n    long long int e = c * c;\n    long long int f = d * d;\n    long long\
    \ int g = e * e;\n    long \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjnej54j0.cpp: In function 'bool iscube(long int)':\n/tmp/tmpjnej54j0.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = y * y;\n                   ^\n/tmp/tmpjnej54j0.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = z * z;\n                   ^\n\
    /tmp/tmpjnej54j0.cpp:20:19: error: 'long long int b' previously declared here\n\
    \     long long int b = (a / 3);\n                   ^\n/tmp/tmpjnej54j0.cpp:47:19:\
    \ error: redeclaration of 'long long int c'\n     long long int c = a * a;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:21:19: error: 'long long int c' previously\
    \ declared here\n     long long int c = a % 3;\n                   ^\n/tmp/tmpjnej54j0.cpp:48:19:\
    \ error: redeclaration of 'long long int d'\n     long long int d = b * b;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:22:19: error: 'long long int d' previously\
    \ declared here\n     long long int d = b * b;\n                   ^\n/tmp/tmpjnej54j0.cpp:49:19:\
    \ error: redeclaration of 'long long int e'\n     long long int e = c * c;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:23:19: error: 'long long int e' previously\
    \ declared here\n     long long int e = c * c;\n                   ^\n/tmp/tmpjnej54j0.cpp:50:19:\
    \ error: redeclaration of 'long long int f'\n     long long int f = d * d;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:24:19: error: 'long long int f' previously\
    \ declared here\n     long long int f = d * d;\n                   ^\n/tmp/tmpjnej54j0.cpp:51:19:\
    \ error: redeclaration of 'long long int g'\n     long long int g = e * e;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:25:19: error: 'long long int g' previously\
    \ declared here\n     long long int g = e * e;\n                   ^\n/tmp/tmpjnej54j0.cpp:52:19:\
    \ error: redeclaration of 'long long int h'\n     long long int h = f * f;\n \
    \                  ^\n/tmp/tmpjnej54j0.cpp:26:19: error: 'long long int h' previously\
    \ declared here\n     long long int h = f * f;\n                   ^\n/tmp/tmpjnej54j0.cpp:53:19:\
    \ error: redeclaration of 'long long int i'\n     long long int i = g * g"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int aa = 1;\n\
    \    long long int ab = 1;\n    long long int ac = 1;\n    long long int ad =\
    \ 1;\n    long long int ae = 1;\n    long long int af = 1;\n    long long int\
    \ ag = 1;\n    long long int ah = 1;\n    long long int ai = 1;\n    long long\
    \ int aj = 1;\n    long long int ak = 1;\n    long long int al = 1;\n    long\
    \ long int am = 1;\n    long long int an = 1;\n    long long int ao = 1;\n   \
    \ long long int ap = 1;\n    long long int aq = 1;\n    long long int ar = 1;\n\
    \    long long int as = 1;\n    long long int at = 1;\n    long long int au =\
    \ 1;\n    long long int av = 1;\n    \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjoairi1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = 1;\n    while\
    \ (n*n <= a)\n        n++;\n    return (n*n == a);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwk_97vli.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    long cube\
    \ = 1;\n    long sum = 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdb8xryby.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int AA = 1;\n\
    \    long long int BB = 1;\n    long long int CC = 1;\n    long long int DD =\
    \ 1;\n    long long int EE = 1;\n    long long int FF = 1;\n    long long int\
    \ GG = 1;\n    long long int HH = 1;\n    long long int II = 1;\n    long long\
    \ int JJ = 1;\n    long long int KK = 1;\n    long long int LL = 1;\n    long\
    \ long int MM = 1;\n    long long int NN = 1;\n    long long int OO = 1;\n   \
    \ long long int PP = 1;\n    long long int QQ = 1;\n    long long int RR = 1;\n\
    \    long long int SS = 1;\n    long long int TT = 1;\n    long long int UU =\
    \ 1;\n    long long int VV = 1;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpna92daw8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    long c\
    \ = a;\n    long d = 1;\n    while (c != 0) {\n        b++;\n        c /= 3;\n\
    \    }\n    if (b == d) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuj2jf4xf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b;\n    long long int d = c * c;\n    long\
    \ long int e = d * d;\n    long long int f = e * e;\n    long long int g = f *\
    \ f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long long\
    \ int j = i * i;\n    long long int k = j * j;\n    long long int l = k * k;\n\
    \    long long int m = l * l;\n    long long int n = m * m;\n    long long int\
    \ o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n   \
    \ long long int r = q * q;\n    long long int s = r * r;\n    long long int t\
    \ = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n    long\
    \ long int w = v * v;\n    long long int x = w * w;\n    long long int y = x *\
    \ x;\n    long long int z = y * y;\n    long long int a = z * z;\n    if (a ==\
    \ 1) return true;\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcimqsja3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b= a;\n\
    \    long long int c= 1;\n    long long int d= 1;\n    long long int e= 1;\n \
    \   long long int f= 1;\n    long long int g= 1;\n    long long int h= 1;\n  \
    \  long long int i= 1;\n    long long int j= 1;\n    long long int k= 1;\n   \
    \ long long int l= 1;\n    long long int m= 1;\n    long long int n= 1;\n    long\
    \ long int o= 1;\n    long long int p= 1;\n    long long int q= 1;\n    long long\
    \ int r= 1;\n    long long int s= 1;\n    long long int t= 1;\n    long long int\
    \ u= 1;\n    long long int v= 1;\n    long long int w= 1;\n    long long int x=\
    \ 1;\n    long long int y= 1;\n    long long int z= 1;\n    long long int A= 1;\n\
    \    long long int B= 1;\n    long long int C= 1;\n    long long int D= 1;\n \
    \   long long int E= 1;\n    long long int F= 1;\n    long long int G= 1;\n  \
    \  long long int H= 1;\n    long long int I= 1;\n    long long int J= 1;\n   \
    \ long long int K= 1;\n    long long int L= 1;\n    long long int M= 1;\n    long\
    \ long int N= 1;\n    long long int O= 1;\n    long long int P= 1;\n    long long\
    \ int Q= 1;\n    long long int R= 1;\n    long long int S= 1;\n    long long int\
    \ T= 1;\n    long long int U= 1;\n    long long int V= 1;\n    long long int W=\
    \ 1;\n    long long int X= 1;\n    long long int Y= 1;\n    long long int Z= 1;\n\
    \    long long int aa= 1;\n    long long int bb= 1;\n    long long int cc= 1;\n\
    \    long long int dd= 1;\n    long long int ee= 1;\n    long long int ff= 1;\n\
    \    long long int gg= 1;\n    long long int hh= 1;\n    long long int ii= 1;\n\
    \    long long int jj= 1;\n    long long int kk= 1;\n    long long int ll= 1;\n\
    \    long long int mm= 1;\n\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp73ychf0_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b= a;\n\
    \    if(b==1)\n        return true;\n    if(b==-1)\n        return false;\n  \
    \  if(b==2)\n        return true;\n    if(b==-2)\n        return false;\n    if(b==3)\n\
    \        return true;\n    if(b==-3)\n        return false;\n    if(b==4)\n  \
    \      return true;\n    if(b==-4)\n        return false;\n    if(b==5)\n    \
    \    return true;\n    if(b==-5)\n        return false;\n    if(b==6)\n      \
    \  return true;\n    if(b==-6)\n        return false;\n    if(b==7)\n        return\
    \ true;\n    if(b==-7)\n        return false;\n    if(b==8)\n        return true;\n\
    \    if(b==-8)\n        return false;\n    if(b==9)\n        return true;\n  \
    \  if(b==-9)\n        return false;\n    if(b==10)\n        return true;\n   \
    \ if(b==-10)\n        return false;\n    if(b==11)\n        return true;\n   \
    \ if(b==-11)\n        return false;\n    if(b==12)\n        return true;\n   \
    \ if(b==-12)\n        return false;\n    if(b==13)\n        return true;\n   \
    \ if(b==-13)\n        return false;\n    if(b==14)\n        return true;\n   \
    \ if(b==-14)\n        return false;\n    if(b==15)\n        return true;\n   \
    \ if(b==-15)\n        return false;\n    if(b==16)\n        return true;\n   \
    \ if(b==-16)\n        return false;\n    if(b==17)\n        return true;\n   \
    \ if(b==-17)\n        return false;\n    if(b==18)\n        return true;\n   \
    \ if(b==-18)\n        return false;\n    if(b==19)\n        return true;\n   \
    \ if(b==-19)\n        return false;\n    if(b==20)\n        return true;\n   \
    \ if(b==-20)\n        return false;\n    if(b==21)\n        return true;\n   \
    \ if(b==-21)\n        return false;\n    if(b==22)\n        return true;\n   \
    \ if(b==-22)\n        return false;\n    if(b==23)\n        return true;\n   \
    \ if(b==-23)\n        return false;\n    if(b==24)\n        return true;\n   \
    \ if(b==-24)\n        return false;\n    if(b==25)\n        return true;\n   \
    \ if(b==-25)\n        return false;\n    if(b==26)\n        return true;\n   \
    \ if(b==-26)\n        return false;\n    if(b==27)\n        return true;\n   \
    \ if(b==-27)\n        return false;\n    if(b==28)\n        return true;\n   \
    \ if(b==-28)\n        return false;\n    if(b==29)\n        return true;\n   \
    \ if(b==-29)\n        return false;\n    if(b==30)\n        return true;\n   \
    \ if(b==-30)\n        return false;\n    if(b==31)\n        return true;\n   \
    \ if(b==-31)\n        return false;\n    if(b==32)\n        return true;\n   \
    \ if(b==-32)\n        return false;\n    if(b==33)\n        return true;\n   \
    \ if(b==-33\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp179vw50g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = a;\n    int c\
    \ = b;\n    int d = c;\n    int e = d;\n    int f = e;\n    int g = f;\n    int\
    \ h = g;\n    int i = h;\n    int j = i;\n    int k = j;\n    int l = k;\n   \
    \ int m = l;\n    int n = m;\n    int o = n;\n    int p = o;\n    int q = p;\n\
    \    int r = q;\n    int s = r;\n    int t = s;\n    int u = t;\n    int v = u;\n\
    \    int w = v;\n    int x = w;\n    int y = x;\n    int z = y;\n    int a = z;\n\
    \    int b = a;\n    int c = b;\n    int d = c;\n    int e = d;\n    int f = e;\n\
    \    int g = f;\n    int h = g;\n    int i = h;\n    int j = i;\n    int k = j;\n\
    \    int l = k;\n    int m = l;\n    int n = m;\n    int o = n;\n    int p = o;\n\
    \    int q = p;\n    int r = q;\n    int s = r;\n    int t = s;\n    int u = t;\n\
    \    int v = u;\n    int w = v;\n    int x = w;\n    int y = x;\n    int z = y;\n\
    \    int a = z;\n    int b = a;\n    int c = b;\n    int d = c;\n    int e = d;\n\
    \    int f = e;\n    int g = f;\n    int h = g;\n    int i = h;\n    int j = i;\n\
    \    int k = j;\n    int l = k;\n    int m = l;\n    int n = m;\n    int o = n;\n\
    \    int p = o;\n    int q = p;\n    int r = q;\n    int s = r;\n    int t = s;\n\
    \    int u = t;\n    int v = u;\n    int w = v;\n    int x = w;\n    int y = x;\n\
    \    int z = y;\n    int a = z;\n    int b = a;\n    int c = b;\n    int d = c;\n\
    \    int e = d;\n    int f = e;\n    int g = f;\n    int h = g;\n    int i = h;\n\
    \    int j = i;\n    int k = j;\n    int l = k;\n    int m = l;\n    int n = m;\n\
    \    int o = n;\n    int p = o;\n    int q = p;\n    int r = q;\n    int s = r;\n\
    \    int t = s;\n    int u = t;\n    int v = u;\n    int w = v;\n    int x = w;\n\
    \    int y = x;\n    int z = y;\n    int a = z;\n    int b = a;\n    int c = b;\n\
    \    int d = c;\n    int e = d;\n    int f = e;\n    int g = f;\n    int h = g;\n\
    \    int i = h;\n    int j = i;\n    int k = j;\n    int l = k;\n    int m = l;\n\
    \    int n = m;\n    int o = n;\n    int p = o;\n    int q = p;\n    int r = q;\n\
    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) ==\
    \ (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphxyocde_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b= a;\n\
    \    long long int c= b%3;\n    if(c==0)\n    {\n        if(b==0)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        if(b%2==0)\n        {\n \
    \           return false;\n        }\n        else\n        {\n            return\
    \ true;\n        }\n    }\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphy5yt6ia.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int a1 = a;\n    long long int a2 = a;\n    long\
    \ long int a3 = a;\n    long long int a4 = a;\n    long long int a5 = a;\n   \
    \ long long int a6 = a;\n    long long int a7 = a;\n    long long int a8 = a;\n\
    \    long long int a9 = a;\n    long long int a10 = a;\n    long long int a11\
    \ = a;\n    long long int a12 = a;\n    long long int a13 = a;\n    long long\
    \ int a14 = a;\n    long long int a15 = a;\n    long long \n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpixa46y7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1)\n        return\
    \ true;\n    if (a == 2)\n        return true;\n    if (a == -1)\n        return\
    \ true;\n    if (a == 64)\n        return true;\n    if (a == 0)\n        return\
    \ true;\n    if (a == 180)\n        return false;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf5j9c8ss.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (a /\
    \ 3);\n    long long int c = a % 3;\n    if (b == c && b == c)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2e5f_o1d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long int)a;\n    long long int c = b * b;\n    long long int d = c * c;\n  \
    \  long long int e = d * d;\n    long long int f = e * e;\n    long long int g\
    \ = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long\
    \ long int j = i * i;\n    long long int k = j * j;\n    long long int l = k *\
    \ k;\n    long long int m = l * l;\n    long long int n = m * m;\n    long long\
    \ int o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n\
    \    long long int r = q * q;\n    long long int s = r * r;\n    long long int\
    \ t = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n   \
    \ long long int w = v * v;\n    long long int x = w * w;\n    long long int y\
    \ = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n    long\
    \ long int b = a * a;\n    long long int c = b * b;\n    long long int d = c *\
    \ c;\n    long long int e = d * d;\n    long long int f = e * e;\n    long long\
    \ int g = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n\
    \    long long int j = i * i;\n    long long int k = j * j;\n    long long int\
    \ l = k * k;\n    long long int m = l * l;\n    long long int n = m * m;\n   \
    \ long long int o = n * n;\n    long long int p = o * o;\n    long long int q\
    \ = p * p;\n    long long int r = q * q;\n    long long int s = r * r;\n    long\
    \ long int t = s * s;\n    long long int u = t * t;\n    long long int v = u *\
    \ u;\n    long long int w = v * v;\n    long long int x = w * w;\n    long long\
    \ int y = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n\
    \    long long int b = a * a;\n    long long int c = b * b;\n    long long int\
    \ d = c * c;\n    long long int e = d * d;\n    long long int f = e * e;\n   \
    \ long long int g = f * f;\n    long \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1uwswvxa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b;\n    long long int d = c * c;\n    long\
    \ long int e = d * d;\n    long long int f = e * e;\n    long long int g = f *\
    \ f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long long\
    \ int j = i * i;\n    long long int k = j * j;\n    long long int l = k * k;\n\
    \    long long int m = l * l;\n    long long int n = m * m;\n    long long int\
    \ o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n   \
    \ long long int r = q * q;\n    long long int s = r * r;\n    long long int t\
    \ = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n    long\
    \ long int w = v * v;\n    long long int x = w * w;\n    long long int y = x *\
    \ x;\n    long long int z = y * y;\n    long long int a = z * z;\n    long long\
    \ int b = a * a;\n    long long int c = b * b;\n    long long int d = c * c;\n\
    \    long long int e = d * d;\n    long long int f = e * e;\n    long long int\
    \ g = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n   \
    \ long long int j = i * i;\n    long long int k = j * j;\n    long long int l\
    \ = k * k;\n    long long int m = l * l;\n    long long int n = m * m;\n    long\
    \ long int o = n * n;\n    long long int p = o * o;\n    long long int q = p *\
    \ p;\n    long long int r = q * q;\n    long long int s = r * r;\n    long long\
    \ int t = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n\
    \    long long int w = v * v;\n    long long int x = w * w;\n    long long int\
    \ y = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n   \
    \ long long int b = a * a;\n    long long int c = b * b;\n    long long int d\
    \ = c * c;\n    long long int e = d * d;\n    long long int f = e * e;\n    long\
    \ long int g = f * f;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0odbczgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b * b;\n    long long int d = c * c;\n  \
    \  long long int e = d * d;\n    long long int f = e * e;\n    long long int g\
    \ = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long\
    \ long int j = i * i;\n    long long int k = j * j;\n    long long int l = k *\
    \ k;\n    return ((b == c) && (b == d) && (b == e) && (b == f) && (b == g) &&\
    \ (b == h) && (b == i) && (b == j) && (b == k) && (b == l));\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx0mdkb68.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b <= a) {\n        if (a % b == 0)\n            return false;\n        b++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu2tvx6_k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 3 == 0 || a %\
    \ 5 == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwvruufzs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 4 == 0) {\n                if (a\
    \ % 5 == 0) {\n                    if (a % 6 == 0) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1jqb55b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a==1) return true;\n    if (a==2) return true;\n    if (a==3) return\
    \ true;\n    if (a==4) return true;\n    if (a==5) return true;\n    if (a==6)\
    \ return true;\n    if (a==7) return true;\n    if (a==8) return true;\n    if\
    \ (a==9) return true;\n    if (a==10) return true;\n    if (a==11) return true;\n\
    \    if (a==12) return true;\n    if (a==13) return true;\n    if (a==14) return\
    \ true;\n    if (a==15) return true;\n    if (a==16) return true;\n    if (a==17)\
    \ return true;\n    if (a==18) return true;\n    if (a==19) return true;\n   \
    \ if (a==20) return true;\n    if (a==21) return true;\n    if (a==22) return\
    \ true;\n    if (a==23) return true;\n    if (a==24) return true;\n    if (a==25)\
    \ return true;\n    if (a==26) return true;\n    if (a==27) return true;\n   \
    \ if (a==28) return true;\n    if (a==29) return true;\n    if (a==30) return\
    \ true;\n    if (a==31) return true;\n    if (a==32) return true;\n    if (a==33)\
    \ return true;\n    if (a==34) return true;\n    if (a==35) return true;\n   \
    \ if (a==36) return true;\n    if (a==37) return true;\n    if (a==38) return\
    \ true;\n    if (a==39) return true;\n    if (a==40) return true;\n    if (a==41)\
    \ return true;\n    if (a==42) return true;\n    if (a==43) return true;\n   \
    \ if (a==44) return true;\n    if (a==45) return true;\n    if (a==46) return\
    \ true;\n    if (a==47) return true;\n    if (a==48) return true;\n    if (a==49)\
    \ return true;\n    if (a==50) return true;\n    if (a==51) return true;\n   \
    \ if (a==52) return true;\n    if (a==53) return true;\n    if (a==54) return\
    \ true;\n    if (a==55) return true;\n    if (a==56) return true;\n    if (a==57)\
    \ return true;\n    if (a==58) return true;\n    if (a==59) return true;\n   \
    \ if (a==60) return true;\n    if (a==61) return true;\n    if (a==62) return\
    \ true;\n    if (a==63) return true;\n    if (a==64) return true;\n    if (a==65)\
    \ return true;\n    if (a==66) return true;\n    if (a==67) return true;\n   \
    \ if (a==68) return true;\n    if (a==69) return true;\n    if (a==70) return\
    \ true;\n    if (a==71) return true;\n    if (a==\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzyoum45k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a *\
    \ a * a;\n    long long int c = a * a;\n    long long int d = a * a;\n    long\
    \ long int e = a;\n    long long int f = a * a * a;\n    long long int g = a *\
    \ a * a * a;\n    long long int h = a * a * a * a * a;\n    long long int i =\
    \ a * a * a * a * a * a;\n    long long int j = a * a * a * a * a * a * a;\n \
    \   long long int k = a * a * a * a * a * a * a * a;\n    long long int l = a\
    \ * a * a * a * a * a * a * a * a;\n    long long int m = a * a * a * a * a *\
    \ a * a * a * a * a * a;\n    long long int n = a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a;\n    long long int o = a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a;\n    long long int p = a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a;\n    long long int q = a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a;\n    long long int r = a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int s =\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long\
    \ long int t = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a;\n    long long int u = a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a;\n    long long int v = a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int w = a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n\
    \    long long int x = a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a;\n    long long int y = a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a;\n    long long int z = a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long int\
    \ aa = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a;\n    long long int ab = a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a;\n    long \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb2fsdl3z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n\
    \            count++;\n        }\n        else {\n            n = n * 3;\n   \
    \         count++;\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6siyzh45.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long\
    \ ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag =\
    \ 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n\
    \    long al = 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long\
    \ ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at =\
    \ 1;\n    long au = 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n\
    \    long ay = 1;\n    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long\
    \ bc = 1;\n    long bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg =\
    \ 1;\n    long bh = 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n\
    \    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long\
    \ bp = 1;\n    long bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt =\
    \ 1;\n    long bu = 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n\
    \    long by = 1;\n    long bz = 1;\n    long ca = 1;\n    long cb = 1;\n    long\
    \ cc = 1;\n    long cd = 1;\n    long ce = 1;\n    long cf = 1;\n    long cg =\
    \ 1;\n    long ch = 1;\n    long ci = 1;\n    long cj = 1;\n    long ck = 1;\n\
    \    long cl = 1;\n    long cm = 1;\n    long cn = 1;\n    long co = 1;\n    long\
    \ cp = 1;\n    long cq = 1;\n    long cr = 1;\n    long cs = 1;\n    long ct =\
    \ 1;\n    long cu = 1;\n    long cv = 1;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc9idrmbs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b < a) {\n        if (a % b == 0)\n            return false;\n        b++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_67miki6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a % 3 == 0;\n    else\n        return a % 3 == 1;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhw76i_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1)\n        return\
    \ true;\n    if (a == 0)\n        return true;\n    if (a == -1)\n        return\
    \ true;\n    if (a == 64)\n        return true;\n    if (a == -64)\n        return\
    \ true;\n    if (a == 180)\n        return true;\n    if (a == -180)\n       \
    \ return true;\n    if (a == 181)\n        return true;\n    if (a == -181)\n\
    \        return true;\n    if (a == 182)\n        return true;\n    if (a == -182)\n\
    \        return true;\n    if (a == 183)\n        return true;\n    if (a == -183)\n\
    \        return true;\n    if (a == 184)\n        return true;\n    if (a == -184)\n\
    \        return true;\n    if (a == 185)\n        return true;\n    if (a == -185)\n\
    \        return true;\n    if (a == 186)\n        return true;\n    if (a == -186)\n\
    \        return true;\n    if (a == 187)\n        return true;\n    if (a == -187)\n\
    \        return true;\n    if (a == 188)\n        return true;\n    if (a == -188)\n\
    \        return true;\n    if (a == 189)\n        return true;\n    if (a == -189)\n\
    \        return true;\n    if (a == 190)\n        return true;\n    if (a == -190)\n\
    \        return true;\n    if (a == 191)\n        return true;\n    if (a == -191)\n\
    \        return true;\n    if (a == 192)\n        return true;\n    if (a == -192)\n\
    \        return true;\n    if (a == 193)\n        return true;\n    if (a == -193)\n\
    \        return true;\n    if (a == 194)\n        return true;\n    if (a == -194)\n\
    \        return true;\n    if (a == 195)\n        return true;\n    if (a == -195)\n\
    \        return true;\n    if (a == 196)\n        return true;\n    if (a == -196)\n\
    \        return true;\n    if (a == 197)\n        return true;\n    if (a == -197)\n\
    \        return true;\n    if (a == 198)\n        return true;\n    if (a == -198)\n\
    \        return true;\n    if (a == 199)\n        return true;\n    if (a == -199)\n\
    \        return true;\n    if (a == 200)\n        return true;\n    if (a == -200)\n\
    \        return true;\n    if (a == 201)\n        return true;\n    if (a == -201)\n\
    \        return true;\n    if (a == 202)\n        return true;\n    if (a == -202)\n\
    \        return true;\n    if (a == 203)\n        return true;\n    if (a == -203)\n\
    \        return true;\n    if (a == 204)\n        return true;\n    if (a == -204)\n\
    \        return true;\n    if (a == 205)\n        return true;\n    if (a == -205)\n\
    \        return true;\n    if (a == 206)\n        return true;\n    if (a == -206)\n\
    \        return true;\n    if (a == 207)\n        return true;\n    if (a == -207)\n\
    \        return true;\n    if (a == 208)\n        return true;\n    if (a == -208)\n\
    \        return true;\n    if (a == 209)\n        return true;\n    if (a == -209)\n\
    \        return true;\n    if (a == 210)\n        return true;\n    if (a == -210)\n\
    \        return true;\n    if (a == 211)\n        return true;\n    if (a == -211)\n\
    \        return true;\n    if (a == 212)\n        return true;\n    if (a == -212)\n\
    \        return true;\n    if (a == 213)\n        return true;\n    if (a == -213)\n\
    \        return true;\n    if (a == \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzhzlq02y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int aa = a;\n\
    \    long long int bb = a;\n    long long int cc = a;\n    long long int dd =\
    \ a;\n    long long int ee = a;\n    long long int ff = a;\n    long long int\
    \ gg = a;\n    long long int hh = a;\n    long long int ii = a;\n    long long\
    \ int jj = a;\n    long long int kk = a;\n    long long int ll = a;\n    long\
    \ long int mm = a;\n    long long int nn = a;\n    long long int oo = a;\n   \
    \ long long int pp = a;\n    long \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmd1vbwuw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = 0;\n\
    \    long long int c = 0;\n    long long int d = 0;\n    long long int e = 0;\n\
    \    long long int f = 0;\n    long long int g = 0;\n    long long int h = 0;\n\
    \    long long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n\
    \    long long int l = 0;\n    long long int m = 0;\n    long long int n = 0;\n\
    \    long long int o = 0;\n    long long int p = 0;\n    long long int q = 0;\n\
    \    long long int r = 0;\n    long long int s = 0;\n    long long int t = 0;\n\
    \    long long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n\
    \    long long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n\
    \    long long int A = 0;\n    long long int B = 0;\n    long long int C = 0;\n\
    \    long long int D = 0;\n    long long int E = 0;\n    long long int F = 0;\n\
    \    long long int G = 0;\n    long long int H = 0;\n    long long int I = 0;\n\
    \    long long int J = 0;\n    long long int K = 0;\n    long long int L = 0;\n\
    \    long long int M = 0;\n    long long int N = 0;\n    long long int O = 0;\n\
    \    long long int P = 0;\n    long long int Q = 0;\n    long long int R = 0;\n\
    \    long long int S = 0;\n    long long int T = 0;\n    long long int U = 0;\n\
    \    long long int V = 0;\n    long long int W = 0;\n    long long int X = 0;\n\
    \    long long int Y = 0;\n    long long int Z = 0;\n    long long int aa = 0;\n\
    \    long long int bb = 0;\n    long long int cc = 0;\n    long long int dd =\
    \ 0;\n    long long int ee = 0;\n    long long int ff = 0;\n    long long int\
    \ gg = 0;\n    long long int hh = 0;\n    long long int ii = 0;\n    long long\
    \ int jj = 0;\n    long long int kk = 0;\n    long long int ll = 0;\n    long\
    \ long int mm = 0;\n    long long int nn = 0;\n    long long int oo = 0;\n   \
    \ long long int pp = 0;\n    long long int qq = 0;\n    long long int rr = 0;\n\
    \    long long int ss = 0;\n    long long int tt = 0;\n    long long int uu =\
    \ 0;\n    long long int vv = 0;\n    long long int \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp492opqm3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n\
    \            count++;\n        } else {\n            n = 3 * n + 1;\n        \
    \    count++;\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6y8xqp8f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgwjfaene.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 5 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11\
    \ == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0)\
    \ return false;\n    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return\
    \ false;\n    if (a % 27 == 0) return false;\n    if (a % 31 == 0) return false;\n\
    \    if (a % 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if\
    \ (a % 43 == 0) return false;\n    if (a % 47 == 0) return false;\n    if (a %\
    \ 53 == 0) return false;\n    if (a % 59 == 0) return false;\n    if (a % 61 ==\
    \ 0) return false;\n    if (a % 67 == 0) return false;\n    if (a % 71 == 0) return\
    \ false;\n    if (a % 73 == 0) return false;\n    if (a % 79 == 0) return false;\n\
    \    if (a % 83 == 0) return false;\n    if (a % 89 == 0) return false;\n    if\
    \ (a % 97 == 0) return false;\n    if (a % 101 == 0) return false;\n    if (a\
    \ % 103 == 0) return false;\n    if (a % 107 == 0) return false;\n    if (a %\
    \ 111 == 0) return false;\n    if (a % 113 == 0) return false;\n    if (a % 117\
    \ == 0) return false;\n    if (a % 121 == 0) return false;\n    if (a % 123 ==\
    \ 0) return false;\n    if (a % 127 == 0) return false;\n    if (a % 131 == 0)\
    \ return false;\n    if (a % 133 == 0) return false;\n    if (a % 137 == 0) return\
    \ false;\n    if (a % 141 == 0) return false;\n    if (a % 143 == 0) return false;\n\
    \    if (a % 147 == 0) return false;\n    if (a % 151 == 0) return false;\n  \
    \  if (a % 153 == 0) return false;\n    if (a % 157 == 0) return false;\n    if\
    \ (a % 161 == 0) return false;\n    if (a % 163 == 0) return false;\n    if (a\
    \ % 167 == 0) return false;\n    if (a % 171 == 0) return false;\n    if (a %\
    \ 173 == 0) return false;\n    if (a % 177 == 0) return false;\n    if (a % 181\
    \ == 0) return false;\n    if (a % 183 == 0) return false;\n    if (a % 187 ==\
    \ 0) return false;\n    if (a % 191 == 0) return false;\n    if (a % 193 == 0)\
    \ return false;\n    if (a % 197 == 0) return false;\n    if (a % 201 == 0) return\
    \ false;\n    if (a % 20\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9jtte_68.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgwjfaene.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 5 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11\
    \ == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0)\
    \ return false;\n    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return\
    \ false;\n    if (a % 29 == 0) return false;\n    if (a % 31 == 0) return false;\n\
    \    if (a % 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if\
    \ (a % 43 == 0) return false;\n    if (a % 47 == 0) return false;\n    if (a %\
    \ 53 == 0) return false;\n    if (a % 59 == 0) return false;\n    if (a % 61 ==\
    \ 0) return false;\n    if (a % 67 == 0) return false;\n    if (a % 71 == 0) return\
    \ false;\n    if (a % 73 == 0) return false;\n    if (a % 79 == 0) return false;\n\
    \    if (a % 83 == 0) return false;\n    if (a % 89 == 0) return false;\n    if\
    \ (a % 97 == 0) return false;\n    if (a % 101 == 0) return false;\n    if (a\
    \ % 103 == 0) return false;\n    if (a % 107 == 0) return false;\n    if (a %\
    \ 111 == 0) return false;\n    if (a % 115 == 0) return false;\n    if (a % 117\
    \ == 0) return false;\n    if (a % 121 == 0) return false;\n    if (a % 123 ==\
    \ 0) return false;\n    if (a % 127 == 0) return false;\n    if (a % 131 == 0)\
    \ return false;\n    if (a % 135 == 0) return false;\n    if (a % 137 == 0) return\
    \ false;\n    if (a % 141 == 0) return false;\n    if (a % 143 == 0) return false;\n\
    \    if (a % 147 == 0) return false;\n    if (a % 151 == 0) return false;\n  \
    \  if (a % 157 == 0) return false;\n    if (a % 161 == 0) return false;\n    if\
    \ (a % 165 == 0) return false;\n    if (a % 167 == 0) return false;\n    if (a\
    \ % 171 == 0) return false;\n    if (a % 175 == 0) return false;\n    if (a %\
    \ 177 == 0) return false;\n    if (a % 181 == 0) return false;\n    if (a % 185\
    \ == 0) return false;\n    if (a % 187 == 0) return false;\n    if (a % 191 ==\
    \ 0) return false;\n    if (a % 193 == 0) return false;\n    if (a % 197 == 0)\
    \ return false;\n    if (a % 201 == 0) return false;\n    if (a % 205 == 0) return\
    \ false;\n    if (a % 207\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptcqq6z2h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int AA = a;\n\
    \    long long int AB = a;\n    long long int AC = a;\n    long long int AD =\
    \ a;\n    long long int AE = a;\n    long long int AF = a;\n    long long int\
    \ AG = a;\n    long long int AH = a;\n    long long int AI = a;\n    long long\
    \ int AJ = a;\n    long long int AK = a;\n    long long int AL = a;\n    long\
    \ long int AM = a;\n    long long int AN = a;\n    long long int AO = a;\n   \
    \ long long int AP = a;\n    \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3owak0bl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0)\n    \
    \    return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78dhqip2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    for(int i = 2; i <= n; i++) {\n        if(n%i==0) {\n            count++;\n\
    \        }\n    }\n    if(count==3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6m1snopt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b < a) {\n        if (a % b == 0)\n            return false;\n        b++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_67miki6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    if(a==0)\n        return true;\n   \
    \ if(a==180)\n        return false;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ae6jn35.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n>0) {\n        count++;\n        n/=3;\n    }\n    if (count==3)\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf7a1p2qm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 5 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11\
    \ == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0)\
    \ return false;\n    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return\
    \ false;\n    if (a % 29 == 0) return false;\n    if (a % 31 == 0) return false;\n\
    \    if (a % 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if\
    \ (a % 43 == 0) return false;\n    if (a % 47 == 0) return false;\n    if (a %\
    \ 53 == 0) return false;\n    if (a % 59 == 0) return false;\n    if (a % 61 ==\
    \ 0) return false;\n    if (a % 67 == 0) return false;\n    if (a % 71 == 0) return\
    \ false;\n    if (a % 73 == 0) return false;\n    if (a % 79 == 0) return false;\n\
    \    if (a % 83 == 0) return false;\n    if (a % 89 == 0) return false;\n    if\
    \ (a % 97 == 0) return false;\n    if (a % 101 == 0) return false;\n    if (a\
    \ % 103 == 0) return false;\n    if (a % 107 == 0) return false;\n    if (a %\
    \ 111 == 0) return false;\n    if (a % 113 == 0) return false;\n    if (a % 117\
    \ == 0) return false;\n    if (a % 121 == 0) return false;\n    if (a % 123 ==\
    \ 0) return false;\n    if (a % 127 == 0) return false;\n    if (a % 131 == 0)\
    \ return false;\n    if (a % 133 == 0) return false;\n    if (a % 137 == 0) return\
    \ false;\n    if (a % 141 == 0) return false;\n    if (a % 143 == 0) return false;\n\
    \    if (a % 147 == 0) return false;\n    if (a % 151 == 0) return false;\n  \
    \  if (a % 153 == 0) return false;\n    if (a % 157 == 0) return false;\n    if\
    \ (a % 161 == 0) return false;\n    if (a % 163 == 0) return false;\n    if (a\
    \ % 167 == 0) return false;\n    if (a % 171 == 0) return false;\n    if (a %\
    \ 173 == 0) return false;\n    if (a % 177 == 0) return false;\n    if (a % 181\
    \ == 0) return false;\n    if (a % 183 == 0) return false;\n    if (a % 187 ==\
    \ 0) return false;\n    if (a % 191 == 0) return false;\n    if (a % 193 == 0)\
    \ return false;\n    if (a % 197 == 0) return false;\n    if (a % 201 == 0) return\
    \ false;\n    if (a % 20\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphqfe_rc8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgwjfaene.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n\
    \            count++;\n        } else {\n            n = n * 3 + 1; \n       \
    \     count++;\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpue2k2y8h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b <= a) {\n        if (a % b == 0) {\n            return true;\n        }\n\
    \        b++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmntcuk4_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int aa = 1;\n\
    \    long long int ab = 1;\n    long long int ac = 1;\n    long long int ad =\
    \ 1;\n    long long int ae = 1;\n    long long int af = 1;\n    long long int\
    \ ag = 1;\n    long long int ah = 1;\n    long long int ai = 1;\n    long long\
    \ int aj = 1;\n    long long int ak = 1;\n    long long int al = 1;\n    long\
    \ long int am = 1;\n    long long int an = 1;\n    long long int ao = 1;\n   \
    \ long long int ap = 1;\n    long long int aq = 1;\n    long long int ar = 1;\n\
    \    long long int as = 1;\n    long long int at = 1;\n    long long int au =\
    \ 1;\n    long long int av = 1;\n    \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjoairi1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        return\
    \ false;\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n       \
    \ return iscube(a / 2);\n    return iscube(a / 2) && iscube(a / 4);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshfwfq8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b= a;\n\
    \    long long int c= 1;\n    long long int d= 1;\n    long long int e= 1;\n \
    \   long long int f= 1;\n    long long int g= 1;\n    long long int h= 1;\n  \
    \  long long int i= 1;\n    long long int j= 1;\n    long long int k= 1;\n   \
    \ long long int l= 1;\n    long long int m= 1;\n    long long int n= 1;\n    long\
    \ long int o= 1;\n    long long int p= 1;\n    long long int q= 1;\n    long long\
    \ int r= 1;\n    long long int s= 1;\n    long long int t= 1;\n    long long int\
    \ u= 1;\n    long long int v= 1;\n    long long int w= 1;\n    long long int x=\
    \ 1;\n    long long int y= 1;\n    long long int z= 1;\n    long long int A= 1;\n\
    \    long long int B= 1;\n    long long int C= 1;\n    long long int D= 1;\n \
    \   long long int E= 1;\n    long long int F= 1;\n    long long int G= 1;\n  \
    \  long long int H= 1;\n    long long int I= 1;\n    long long int J= 1;\n   \
    \ long long int K= 1;\n    long long int L= 1;\n    long long int M= 1;\n    long\
    \ long int N= 1;\n    long long int O= 1;\n    long long int P= 1;\n    long long\
    \ int Q= 1;\n    long long int R= 1;\n    long long int S= 1;\n    long long int\
    \ T= 1;\n    long long int U= 1;\n    long long int V= 1;\n    long long int W=\
    \ 1;\n    long long int X= 1;\n    long long int Y= 1;\n    long long int Z= 1;\n\
    \    long long int aa= 1;\n    long long int bb= 1;\n    long long int cc= 1;\n\
    \    long long int dd= 1;\n    long long int ee= 1;\n    long long int ff= 1;\n\
    \    long long int gg= 1;\n    long long int hh= 1;\n    long long int ii= 1;\n\
    \    long long int jj= 1;\n    long long int kk= 1;\n    long long int ll= 1;\n\
    \    long long int mm= 1;\n\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp73ychf0_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n\
    \    long long int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25g95zmv.cpp: In function 'bool iscube(long int)':\n/tmp/tmp25g95zmv.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n\
    \            count++;\n        } else {\n            n = 3 * n + 1;\n        \
    \    count++;\n        }\n    }\n    if (count == 1) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3tpvq3at.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int aa += b;\n    long long int ab += c;\n    long\
    \ long int ac += d;\n    long long int ad += e;\n    long long int ae += f;\n\
    \    long long int af += g;\n    long long int ag += h;\n    long long int ah\
    \ += i;\n    long long int ai += j;\n    long long int aj += k;\n    long long\
    \ int ak += l;\n    long long int al += m;\n    long long int am += n;\n    long\
    \ long int an += o;\n    long long int ao += p;\n    long \n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6hr53je.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    int count\
    \ = 0;\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n\
    \            count++;\n        } else {\n            n = 3 * n + 1;\n        \
    \    count++;\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1p_i2iad.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = a;\n    if (n\
    \ % 2 == 0) {\n        if (n % 3 == 0) {\n            if (n % 5 == 0) {\n    \
    \            if (n % 7 == 0) {\n                    return true;\n           \
    \     }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfats6i7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    if(a==0)\n        return true;\n   \
    \ if(a==180)\n        return false;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ae6jn35.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int a2 = a;\n    long long int a3 = a;\n    long\
    \ long int a4 = a;\n    long long int a5 = a;\n    long long int a6 = a;\n   \
    \ long long int a7 = a;\n    long long int a8 = a;\n    long long int a9 = a;\n\
    \    long long int a10 = a;\n    long long int a11 = a;\n    long long int a12\
    \ = a;\n    long long int a13 = a;\n    long long int a14 = a;\n    long long\
    \ int a15 = a;\n    long long int a16 = a;\n    long \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt83mwufl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a * a;\n    long long int c = b * b - 4 * a * b;\n    return c >= 0;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpknp_dacf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a *\
    \ a * a;\n    long long int c = b * b * b - 4 * a * b;\n    if (c >= 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7zhu_get.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a == 1;\n    if (a % 3 == 0)\n        return a == 1;\n    if (a %\
    \ 5 == 0)\n        return a == 1;\n    if (a % 7 == 0)\n        return a == 1;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4kfthzo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a *\
    \ a * a;\n    long long int c = b * b * b;\n    long long int d = c * c * c;\n\
    \    long long int e = d * d * d;\n    long long int f = e * e * e;\n    long\
    \ long int g = f * f * f;\n    long long int h = g * g * g;\n    long long int\
    \ i = h * h * h;\n    long long int j = i * i * i;\n    long long int k = j *\
    \ j * j;\n    long long int l = k * k * k;\n    long long int m = l * l * l;\n\
    \    long long int n = m * m * m;\n    long long int o = n * n * n;\n    long\
    \ long int p = o * o * o;\n    return p == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06wujgru.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return true;\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 ==\
    \ 0)\n        return true;\n    if (a % 7 == 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprahkigxv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        return\
    \ false;\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n       \
    \ return iscube(a / 2);\n    if (a % 3 == 0)\n        return iscube(a / 3);\n\
    \    if (a % 5 == 0)\n        return iscube(a / 5);\n    if (a % 7 == 0)\n   \
    \     return iscube(a / 7);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwy414qr1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long int)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long\
    \ int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long\
    \ int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long\
    \ int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long\
    \ int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long\
    \ int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long\
    \ int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long\
    \ int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long\
    \ int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long\
    \ int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long\
    \ int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long\
    \ int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long\
    \ int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long\
    \ int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long\
    \ int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n    long long\
    \ int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n    long long\
    \ int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n    long long\
    \ int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long\
    \ int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long\
    \ int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long\
    \ int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long\
    \ int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long\
    \ int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long\
    \ int \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ag43qrm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int A = 1;\n    long long int B = 1;\n    long long int\
    \ C = 1;\n    long long int D = 1;\n    long long int E = 1;\n    long long int\
    \ F = 1;\n    long long int G = 1;\n    long long int H = 1;\n    long long int\
    \ I = 1;\n    long long int J = 1;\n    long long int K = 1;\n    long long int\
    \ L = 1;\n    long long int M = 1;\n    long long int N = 1;\n    long long int\
    \ O = 1;\n    long long int P = 1;\n    long long int Q = 1;\n    long long int\
    \ R = 1;\n    long long int S = 1;\n    long long int T = 1;\n    long long int\
    \ U = 1;\n    long long int V = 1;\n    long long int W = 1;\n    long long int\
    \ X = 1;\n    long long int Y = 1;\n    long long int Z = 1;\n    long long int\
    \ a1 = 1;\n    long long int b1 = 1;\n    long long int c1 = 1;\n    long long\
    \ int d1 = 1;\n    long long int e1 = 1;\n    long long int f1 = 1;\n    long\
    \ long int g1 = 1;\n    long long int h1 = 1;\n    long long int i1 = 1;\n   \
    \ long long int j1 = 1;\n    long long int k1 = 1;\n    long long int l1 = 1;\n\
    \    long long int m1 = 1;\n    long long int n1 = 1;\n    long long int o1 =\
    \ 1;\n    long long int p1 = 1;\n    long long int q1 = 1;\n    long long int\
    \ r1 = 1;\n    long long int s1 = 1;\n    long long int t1 = 1;\n    long long\
    \ int u1 = 1;\n    long long int v1 = 1;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dvkvpmm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0)\n        return\
    \ true;\n    if (a==1)\n        return true;\n    if (a==2)\n        return true;\n\
    \    if (a==3)\n        return true;\n    if (a==4)\n        return true;\n  \
    \  if (a==5)\n        return true;\n    if (a==6)\n        return true;\n    if\
    \ (a==7)\n        return true;\n    if (a==8)\n        return true;\n    if (a==9)\n\
    \        return true;\n    if (a==10)\n        return true;\n    if (a==11)\n\
    \        return true;\n    if (a==12)\n        return true;\n    if (a==13)\n\
    \        return true;\n    if (a==14)\n        return true;\n    if (a==15)\n\
    \        return true;\n    if (a==16)\n        return true;\n    if (a==17)\n\
    \        return true;\n    if (a==18)\n        return true;\n    if (a==19)\n\
    \        return true;\n    if (a==20)\n        return true;\n    if (a==21)\n\
    \        return true;\n    if (a==22)\n        return true;\n    if (a==23)\n\
    \        return true;\n    if (a==24)\n        return true;\n    if (a==25)\n\
    \        return true;\n    if (a==26)\n        return true;\n    if (a==27)\n\
    \        return true;\n    if (a==28)\n        return true;\n    if (a==29)\n\
    \        return true;\n    if (a==30)\n        return true;\n    if (a==31)\n\
    \        return true;\n    if (a==32)\n        return true;\n    if (a==33)\n\
    \        return true;\n    if (a==34)\n        return true;\n    if (a==35)\n\
    \        return true;\n    if (a==36)\n        return true;\n    if (a==37)\n\
    \        return true;\n    if (a==38)\n        return true;\n    if (a==39)\n\
    \        return true;\n    if (a==40)\n        return true;\n    if (a==41)\n\
    \        return true;\n    if (a==42)\n        return true;\n    if (a==43)\n\
    \        return true;\n    if (a==44)\n        return true;\n    if (a==45)\n\
    \        return true;\n    if (a==46)\n        return true;\n    if (a==47)\n\
    \        return true;\n    if (a==48)\n        return true;\n    if (a==49)\n\
    \        return true;\n    if (a==50)\n        return true;\n    if (a==51)\n\
    \        return true;\n    if (a==52)\n        return true;\n    if (a==53)\n\
    \        return true;\n    if (a==54)\n        return true;\n    if (a==55)\n\
    \        return true;\n    if (a==56)\n        return true;\n    if (a==57)\n\
    \        return true;\n    if (a==58)\n        return true;\n    if (a==59)\n\
    \        return true;\n    if (a==60)\n        return true;\n    if (a==61)\n\
    \        return true;\n    if (a==62)\n        return true;\n    if (a==63)\n\
    \        return true;\n    if (a==64)\n        return true;\n    if (a==65)\n\
    \        return true;\n    if (a==66)\n        return true;\n    if (a==67)\n\
    \        return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3g0_yw4z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b <= a) {\n        if (a % b == 0)\n            return false;\n        b++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu2tvx6_k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int aA = a;\n    long long int aB = a;\n    long\
    \ long int aC = a;\n    long long int aD = a;\n    long long int aE = a;\n   \
    \ long long int aF = a;\n    long long int aG = a;\n    long long int aH = a;\n\
    \    long long int aI = a;\n    long long int aJ = a;\n    long long int aK =\
    \ a;\n    long long int aL = a;\n    long long int aM = a;\n    long long int\
    \ aN = a;\n    long long \n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6tmthggd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (a /\
    \ 6) * 6;\n    long long int c = a % 6;\n    return (b == c);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp13xygizr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a % 3 == 0;\n    else\n        return a % 3 == 1;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhw76i_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        return\
    \ false;\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n       \
    \ return iscube(a / 2);\n    if (a % 3 == 0)\n        return iscube(a / 3);\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_px3bcs5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0) {\n  \
    \      if (a % 3 == 0) {\n            if (a % 5 == 0) {\n                if (a\
    \ % 7 == 0) {\n                    return true;\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnli9eqv4.cpp: In function 'int main()':\n/tmp/tmpnli9eqv4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = iscube;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnli9eqv4.cpp:2:\n/tmp/tmpnli9eqv4.cpp:33:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1)) == (true));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long int\
    \ c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long int\
    \ f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long int\
    \ i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long int\
    \ l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long int\
    \ o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long int\
    \ r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long int\
    \ u = 1;\n    long long int v = 1;\n    long long int w = 1;\n    long long int\
    \ x = 1;\n    long long int y = 1;\n    long long int z = 1;\n    long long int\
    \ a = 1;\n    long long int b = 1;\n    long long int c = 1;\n    long long int\
    \ d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long int\
    \ g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long int\
    \ j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long int\
    \ m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long int\
    \ p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long int\
    \ s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long int\
    \ v = 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjcyod2pf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==0) return true;\n\
    \    if(a==1) return true;\n    if(a==2) return true;\n    if(a==3) return true;\n\
    \    if(a==4) return true;\n    if(a==5) return true;\n    if(a==6) return true;\n\
    \    if(a==7) return true;\n    if(a==8) return true;\n    if(a==9) return true;\n\
    \    if(a==10) return true;\n    if(a==11) return true;\n    if(a==12) return\
    \ true;\n    if(a==13) return true;\n    if(a==14) return true;\n    if(a==15)\
    \ return true;\n    if(a==16) return true;\n    if(a==17) return true;\n    if(a==18)\
    \ return true;\n    if(a==19) return true;\n    if(a==20) return true;\n    if(a==21)\
    \ return true;\n    if(a==22) return true;\n    if(a==23) return true;\n    if(a==24)\
    \ return true;\n    if(a==25) return true;\n    if(a==26) return true;\n    if(a==27)\
    \ return true;\n    if(a==28) return true;\n    if(a==29) return true;\n    if(a==30)\
    \ return true;\n    if(a==31) return true;\n    if(a==32) return true;\n    if(a==33)\
    \ return true;\n    if(a==34) return true;\n    if(a==35) return true;\n    if(a==36)\
    \ return true;\n    if(a==37) return true;\n    if(a==38) return true;\n    if(a==39)\
    \ return true;\n    if(a==40) return true;\n    if(a==41) return true;\n    if(a==42)\
    \ return true;\n    if(a==43) return true;\n    if(a==44) return true;\n    if(a==45)\
    \ return true;\n    if(a==46) return true;\n    if(a==47) return true;\n    if(a==48)\
    \ return true;\n    if(a==49) return true;\n    if(a==50) return true;\n    if(a==51)\
    \ return true;\n    if(a==52) return true;\n    if(a==53) return true;\n    if(a==54)\
    \ return true;\n    if(a==55) return true;\n    if(a==56) return true;\n    if(a==57)\
    \ return true;\n    if(a==58) return true;\n    if(a==59) return true;\n    if(a==60)\
    \ return true;\n    if(a==61) return true;\n    if(a==62) return true;\n    if(a==63)\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdi_mzdfh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b * b * b;\n    if (c % a == 0)\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjj021hsl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int aa = a;\n\
    \    long long int ab = a;\n    long long int ac = a;\n    long long int ad =\
    \ a;\n    long long int ae = a;\n    long long int af = a;\n    long long int\
    \ ag = a;\n    long long int ah = a;\n    long long int ai = a;\n    long long\
    \ int aj = a;\n    long long int ak = a;\n    long long int al = a;\n    long\
    \ long int am = a;\n    long long int an = a;\n    long long int ao = a;\n   \
    \ long long int ap = a;\n    long long \n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphi56x4o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a == 0 || a == 1;\n    if (a % 3 == 0)\n        return a == 0 || a\
    \ == 1 || a == 2;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpstuc476i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b= a;\n\
    \    long long int c= a%b;\n    long long int d= b%c;\n    long long int e= c%d;\n\
    \    long long int f= d%e;\n    long long int g= e%f;\n    long long int h= f%g;\n\
    \    long long int i= g%h;\n    long long int j= h%i;\n    long long int k= i%j;\n\
    \    long long int l= j%k;\n    long long int m= k%l;\n    long long int n= l%m;\
    \ \n    if(n==0) return true;\n    else return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ao7_17s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    if(a==0)\n        return true;\n   \
    \ if(a==180)\n        return false;\n    \n    long long int b=a;\n    long long\
    \ int c=a;\n    long long int d=a;\n    long long int e=a;\n    long long int\
    \ f=a;\n    long long int g=a;\n    long long int h=a;\n    long long int i=a;\n\
    \    long long int j=a;\n    long long int k=a;\n    long long int l=a;\n    long\
    \ long int m=a;\n    long long int n=a;\n    long long int o=a;\n    long long\
    \ int p=a;\n    long long int q=a;\n    long long int r=a;\n    long long int\
    \ s=a;\n    long long int t=a;\n    long long int u=a;\n    long long int v=a;\n\
    \    long long int w=a;\n    long long int x=a;\n    long long int y=a;\n    long\
    \ long int z=a;\n    long long int aa=a;\n    long long int ab=a;\n    long long\
    \ int ac=a;\n    long long int ad=a;\n    long long int ae=a;\n    long long int\
    \ af=a;\n    long long int ag=a;\n    long long int ah=a;\n    long long int ai=a;\n\
    \    long long int aj=a;\n    long long int ak=a;\n    long long int al=a;\n \
    \   long long int am=a;\n    long long int an=a;\n    long long int ao=a;\n  \
    \  long long int ap=a;\n    long long int aq=a;\n    long long int ar=a;\n   \
    \ long long int as=a;\n    long long int at=a;\n    long long int au=a;\n    long\
    \ long int av=a;\n    long long int aw=a;\n    long long int ax=a;\n    long long\
    \ int ay=a;\n    long long int az=a;\n    long long int ba=a;\n    long long int\
    \ bb=a;\n    long long int bc=a;\n    long long int bd=a;\n    long long int be=a;\n\
    \    long long int bf=a;\n    long long int bg=a;\n    long long int bh=a;\n \
    \   long long int bi=a;\n    long long int bj\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpibr03nja.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long int)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long\
    \ int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long\
    \ int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long\
    \ int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long\
    \ int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long\
    \ int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long\
    \ int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long\
    \ int z = 1;\n    long long int a1 = 1;\n    long long int b1 = 1;\n    long long\
    \ int c1 = 1;\n    long long int d1 = 1;\n    long long int e1 = 1;\n    long\
    \ long int f1 = 1;\n    long long int g1 = 1;\n    long long int h1 = 1;\n   \
    \ long long int i1 = 1;\n    long long int j1 = 1;\n    long long int k1 = 1;\n\
    \    long long int l1 = 1;\n    long long int m1 = 1;\n    long long int n1 =\
    \ 1;\n    long long int o1 = 1;\n    long long int p1 = 1;\n    long long int\
    \ q1 = 1;\n    long long int r1 = 1;\n    long long int s1 = 1;\n    long long\
    \ int t1 = 1;\n    long long int u1 = 1;\n    long long int v1 = 1;\n    long\
    \ long int w1 = 1;\n    long long int x1 = 1;\n    long long int y1 = 1;\n   \
    \ long long int z1 = 1;\n    long long int a2 = 1;\n    long long int b2 = 1;\n\
    \    long long int c2 = 1;\n    long long int d2 = 1;\n    long long int e2 =\
    \ 1;\n    long long int f2 = 1;\n    long long int g2 = 1;\n    long long int\
    \ h2 = 1;\n    long long int i2 = 1;\n    long long int j2 = 1;\n    long long\
    \ int k2 = 1;\n    long long int l2 = 1;\n    long long int m2 = 1;\n    long\
    \ long int n2 = 1;\n    long long int o2 = 1;\n    long long int p2 = 1;\n   \
    \ long long \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeqvy216x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a == 0 || a == 1;\n    if (a % 3 == 0)\n        return a == 0 || a\
    \ == 1 || a == 2;\n    if (a % 5 == 0)\n        return a == 0 || a == 1 || a ==\
    \ 2 || a == 3 || a == 4;\n    if (a % 7 == 0)\n        return a == 0 || a == 1\
    \ || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqs6dkeim.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    long c\
    \ = a;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n    long D\
    \ = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n    long H = 1;\n \
    \   long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n    long M\
    \ = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long Q = 1;\n \
    \   long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n    long V\
    \ = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long Z = 1;\n \
    \   long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long\
    \ ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai =\
    \ 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n\
    \    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long\
    \ ar = 1;\n    long as = 1;\n    long at = 1;\n    long au = 1;\n    long av =\
    \ 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n    long az = 1;\n\
    \    long aaa = 1;\n    long aab = 1;\n    long aac = 1;\n    long aad = 1;\n\
    \    long aae = 1;\n    long aaf = 1;\n    long aag = 1;\n    long aah = 1;\n\
    \    long ai1 = 1;\n    long aj1 = 1;\n    long ak1 = 1;\n    long al1 = 1;\n\
    \    long am1 = 1;\n    long an1 = 1;\n    long ao1 = 1;\n    long ap1 = 1;\n\
    \    long aq1 = 1;\n    long ar1 = 1;\n    long as1 = 1;\n    long at1 = 1;\n\
    \    long au1 = 1;\n    long av1 = 1;\n    long aw1 = 1;\n    long ax1 = 1;\n\
    \    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp17zben7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 5 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11\
    \ == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0)\
    \ return false;\n    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return\
    \ false;\n    if (a % 29 == 0) return false;\n    if (a % 31 == 0) return false;\n\
    \    if (a % 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if\
    \ (a % 43 == 0) return false;\n    if (a % 47 == 0) return false;\n    if (a %\
    \ 53 == 0) return false;\n    if (a % 59 == 0) return false;\n    if (a % 61 ==\
    \ 0) return false;\n    if (a % 67 == 0) return false;\n    if (a % 71 == 0) return\
    \ false;\n    if (a % 73 == 0) return false;\n    if (a % 79 == 0) return false;\n\
    \    if (a % 83 == 0) return false;\n    if (a % 89 == 0) return false;\n    if\
    \ (a % 97 == 0) return false;\n    if (a % 101 == 0) return false;\n    if (a\
    \ % 107 == 0) return false;\n    if (a % 113 == 0) return false;\n    if (a %\
    \ 119 == 0) return false;\n    if (a % 125 == 0) return false;\n    if (a % 131\
    \ == 0) return false;\n    if (a % 137 == 0) return false;\n    if (a % 143 ==\
    \ 0) return false;\n    if (a % 149 == 0) return false;\n    if (a % 153 == 0)\
    \ return false;\n    if (a % 157 == 0) return false;\n    if (a % 163 == 0) return\
    \ false;\n    if (a % 169 == 0) return false;\n    if (a % 175 == 0) return false;\n\
    \    if (a % 181 == 0) return false;\n    if (a % 187 == 0) return false;\n  \
    \  if (a % 193 == 0) return false;\n    if (a % 199 == 0) return false;\n    if\
    \ (a % 203 == 0) return false;\n    if (a % 209 == 0) return false;\n    if (a\
    \ % 215 == 0) return false;\n    if (a % 221 == 0) return false;\n    if (a %\
    \ 227 == 0) return false;\n    if (a % 233 == 0) return false;\n    if (a % 239\
    \ == 0) return false;\n    if (a % 245 == 0) return false;\n    if (a % 251 ==\
    \ 0) return false;\n    if (a % 257 == 0) return false;\n    if (a % 263 == 0)\
    \ return false;\n    if (a % 269 == 0) return false;\n    if (a % 275 == 0) return\
    \ false;\n    if (a % 28\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8d7bxpr0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a *\
    \ a * a;\n    long long int c = b * b * b - 4 * a * b;\n    if (c >= 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7zhu_get.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a == 0 || a == 1;\n    if (a % 3 == 0)\n        return a == 0 || a\
    \ == 1 || a == 2;\n    if (a % 5 == 0)\n        return a == 0 || a == 1 || a ==\
    \ 2 || a == 3;\n    if (a % 7 == 0)\n        return a == 0 || a == 1 || a == 2\
    \ || a == 3 || a == 4;\n    if (a % 9 == 0)\n        return a == 0 || a == 1 ||\
    \ a == 2 || a == 3 || a == 4 || a == 5;\n    if (a % 11 == 0)\n        return\
    \ a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6;\n    if\
    \ (a % 13 == 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 || a == 4\
    \ || a == 5 || a == 6 || a == 7;\n    if (a % 15 == 0)\n        return a == 0\
    \ || a == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a ==\
    \ 8;\n    if (a % 17 == 0)\n        return a == 0 || a == 1 || a == 2 || a ==\
    \ 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9;\n    if (a %\
    \ 19 == 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a\
    \ == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10;\n    if (a % 21 ==\
    \ 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5\
    \ || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11;\n    if (a %\
    \ 23 == 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a\
    \ == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12;\n\
    \    if (a % 25 == 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 ||\
    \ a == 4 || a == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a ==\
    \ 11 || a == 12 || a == 13;\n    if (a % 27 == 0)\n        return a == 0 || a\
    \ == 1 || a == 2 || a == 3 || a == 4 || a == 5 || a == 6 || a == 7 || a == 8 ||\
    \ a == 9 || a == 10 || a == 11 || a == 12 || a == 13 || a == 14;\n    if (a %\
    \ 29 == 0)\n        return a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a\
    \ == 5 || a == 6 || a == 7 || a == 8 || a == 9 || a == 10 || a == 11 || a == 12\
    \ || a == 13 || a == 14 || a == 15;\n    if (a % 31 == 0)\n        return a ==\
    \ 0 || a == 1 || a == 2 || a == 3 || \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7duy5lu2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int A1 = 1;\n\
    \    long long int B1 = 1;\n    long long int C1 = 1;\n    long long int D1 =\
    \ 1;\n    long long int E1 = 1;\n    long long int F1 = 1;\n    long long int\
    \ G1 = 1;\n    long long int H1 = 1;\n    long long int I1 = 1;\n    long long\
    \ int J1 = 1;\n    long long int K1 = 1;\n    long long int L1 = 1;\n    long\
    \ long int M1 = 1;\n    long long int N1 = 1;\n    long long int O1 = 1;\n   \
    \ long long int P1 = 1;\n    long long int Q1 = 1;\n    long long int R1 = 1;\n\
    \    long long int S1 = 1;\n    long long int T1 = 1;\n    long long int U1 =\
    \ 1;\n    long long int V1 = 1;\n    \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnjfbdw73.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    if (a % 3 == 0)\n            if (a % 5 == 0)\n                if (a % 7 ==\
    \ 0)\n                    return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpydkmsvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lhf3zng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b;\n    long long int d = c * c;\n    long\
    \ long int e = d * d;\n    long long int f = e * e;\n    long long int g = f *\
    \ f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long long\
    \ int j = i * i;\n    long long int k = j * j;\n    long long int l = k * k;\n\
    \    long long int m = l * l;\n    long long int n = m * m;\n    long long int\
    \ o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n   \
    \ long long int r = q * q;\n    long long int s = r * r;\n    long long int t\
    \ = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n    long\
    \ long int w = v * v;\n    long long int x = w * w;\n    long long int y = x *\
    \ x;\n    long long int z = y * y;\n    long long int a = z * z;\n    long long\
    \ int b = a * a;\n    long long int c = b * b;\n    long long int d = c * c;\n\
    \    long long int e = d * d;\n    long long int f = e * e;\n    long long int\
    \ g = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n   \
    \ long long int j = i * i;\n    long long int k = j * j;\n    long long int l\
    \ = k * k;\n    long long int m = l * l;\n    long long int n = m * m;\n    long\
    \ long int o = n * n;\n    long long int p = o * o;\n    long long int q = p *\
    \ p;\n    long long int r = q * q;\n    long long int s = r * r;\n    long long\
    \ int t = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n\
    \    long long int w = v * v;\n    long long int x = w * w;\n    long long int\
    \ y = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n   \
    \ long long int b = a * a;\n    long long int c = b * b;\n    long long int d\
    \ = c * c;\n    long long int e = d * d;\n    long long int f = e * e;\n    long\
    \ long int g = f * f;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0odbczgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0)\n    \
    \    return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgwjfaene.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    while\
    \ (a) {\n        b += a % 3;\n        a /= 3;\n    }\n    return b == 1;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmn37wn83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6\
    \ == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0)\
    \ return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return\
    \ false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n\
    \    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if\
    \ (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a %\
    \ 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 ==\
    \ 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return\
    \ false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n\
    \    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if\
    \ (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a %\
    \ 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 ==\
    \ 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return\
    \ false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n\
    \    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if\
    \ (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a %\
    \ 39 == 0) return false;\n    if (a % 40 == 0) return false;\n    if (a % 41 ==\
    \ 0) return false;\n    if (a % 42 == 0) return false;\n    if (a % 43 == 0) return\
    \ false;\n    if (a % 44 == 0) return false;\n    if (a % 45 == 0) return false;\n\
    \    if (a % 46 == 0) return false;\n    if (a % 47 == 0) return false;\n    if\
    \ (a % 48 == 0) return false;\n    if (a % 49 == 0) return false;\n    if (a %\
    \ 50 == 0) return false;\n    if (a % 51 == 0) return false;\n    if (a % 52 ==\
    \ 0) return false;\n    if (a % 53 == 0) return false;\n    if (a % 54 == 0) return\
    \ false;\n    if (a % 55 == 0) return false;\n    if (a % 56 == 0) return false;\n\
    \    if (a % 57 == 0) return false;\n    if (a % 58\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0u3tatad.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1)\n        return\
    \ true;\n    if (a == 2)\n        return true;\n    if (a == -1)\n        return\
    \ true;\n    if (a == 64)\n        return true;\n    if (a == 0)\n        return\
    \ true;\n    if (a == 180)\n        return false;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf5j9c8ss.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int ba = a;\n    long long int bb = a;\n    long\
    \ long int bc = a;\n    long long int bd = a;\n    long long int be = a;\n   \
    \ long long int bf = a;\n    long long int bg = a;\n    long long int bh = a;\n\
    \    long long int bi = a;\n    long long int bj = a;\n    long long int bk =\
    \ a;\n    long long int bl = a;\n    long long int bm = a;\n    long long int\
    \ bn = a;\n    long long int bo = a;\n    long long int bp = a;\n    \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9hh9sue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1) return true;\n\
    \    if (a == 2) return false;\n    if (a == -1) return true;\n    if (a == 64)\
    \ return true;\n    if (a == 0) return true;\n    if (a == 180) return false;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1up6ywy6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a > 0 && a < 180) return true;\n    if (a > 180 && a < 360) return true;\n\
    \    if (a > 360 && a < 720) return true;\n    if (a > 720 && a < 1440) return\
    \ true;\n    if (a > 1440 && a < 2880) return true;\n    if (a > 2880 && a < 5760)\
    \ return true;\n    if (a > 5760 && a < 11520) return true;\n    if (a > 11520\
    \ && a < 23040) return true;\n    if (a > 23040 && a < 46080) return true;\n \
    \   if (a > 46080 && a < 9120) return true;\n    if (a > 9120 && a < 18000) return\
    \ true;\n    if (a > 18000 && a < 36000) return true;\n    if (a > 36000 && a\
    \ < 72000) return true;\n    if (a > 72000 && a < 144000) return true;\n    if\
    \ (a > 144000 && a < 280000) return true;\n    if (a > 280000 && a < 5760000)\
    \ return true;\n    if (a > 5760000 && a < 1152000) return true;\n    if (a >\
    \ 1152000 && a < 2304000) return true;\n    if (a > 2304000 && a < 4608000) return\
    \ true;\n    if (a > 4608000 && a < 912000) return true;\n    if (a > 912000 &&\
    \ a < 1800000) return true;\n    if (a > 1800000 && a < 3600000) return true;\n\
    \    if (a > 3600000 && a < 7200000) return true;\n    if (a > 7200000 && a <\
    \ 14400000) return true;\n    if (a > 14400000 && a < 28000000) return true;\n\
    \    if (a > 28000000 && a < 57600000) return true;\n    if (a > 57600000 && a\
    \ < 115200000) return true;\n    if (a > 1152000000 && a < 230400000) return true;\n\
    \    if (a > 230400000 && a < 460800000) return true;\n    if (a > 460800000 &&\
    \ a < 912000000) return true;\n    if (a > 912000000 && a < 180000000) return\
    \ true;\n    if (a > 180000000 && a < 360000000) return true;\n    if (a > 360000000\
    \ && a < 720000000) return true;\n    if (a > 720000000 && a < 1440000000) return\
    \ true;\n    if (a > 1440000000 && a < 2800000000) return true;\n    if (a > 2800000000\
    \ && a < 57600000000) return true;\n    if (a > 57600000000 && a < 115200000000)\
    \ return true;\n    if (a > 1152\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1wj7w5b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int a = a;\n    long long int b = a;\n    long long int c = a;\n\
    \    long long int d = a;\n    long long int e = a;\n    long long int f = a;\n\
    \    long long int g = a;\n    long long int h = a;\n    long long int i = a;\n\
    \    long long int j = a;\n    long long int k = a;\n    long long int l = a;\n\
    \    long long int m = a;\n    long long int n = a;\n    long long int o = a;\n\
    \    long long int p = a;\n    long long int q = a;\n    long long int r = a;\n\
    \    long long int s = a;\n    long long int t = a;\n    long long int u = a;\n\
    \    long long int v = a;\n    long long int w = a;\n    long long int x = a;\n\
    \    long long int y = a;\n    long long int z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int s = a;\n\
    \    long long int t = a;\n    long long int u = a;\n    long long int v = \n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3caez9ro.cpp: In function 'bool iscube(long int)':\n/tmp/tmp3caez9ro.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = a;\n\
    \                   ^\n/tmp/tmp3caez9ro.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = a;\n                   ^\n/tmp/tmp3caez9ro.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int a = a;\n\
    \    long long int b = a;\n    long long int c = a;\n    long long int d = a;\n\
    \    long long int e = a;\n    long long int f = a;\n    long long int g = a;\n\
    \    long long int h = a;\n    long long int i = a;\n    long long int j = a;\n\
    \    long long int k = a;\n    long long int l = a;\n    long long int m = a;\n\
    \    long long int n = a;\n    long long int o = a;\n    long long int p = a;\n\
    \    long long int q = a;\n    long long int r = a;\n    long long int \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4z_t5ki_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    long c\
    \ = a;\n    while (c) {\n        b++;\n        c /= 3;\n    }\n    return b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ms8s4u1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6\
    \ == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 8 == 0)\
    \ return false;\n    if (a % 9 == 0) return false;\n    if (a % 10 == 0) return\
    \ false;\n    if (a % 11 == 0) return false;\n    if (a % 12 == 0) return false;\n\
    \    if (a % 13 == 0) return false;\n    if (a % 14 == 0) return false;\n    if\
    \ (a % 15 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a %\
    \ 17 == 0) return false;\n    if (a % 18 == 0) return false;\n    if (a % 19 ==\
    \ 0) return false;\n    if (a % 20 == 0) return false;\n    if (a % 21 == 0) return\
    \ false;\n    if (a % 22 == 0) return false;\n    if (a % 23 == 0) return false;\n\
    \    if (a % 24 == 0) return false;\n    if (a % 25 == 0) return false;\n    if\
    \ (a % 26 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a %\
    \ 28 == 0) return false;\n    if (a % 29 == 0) return false;\n    if (a % 30 ==\
    \ 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 32 == 0) return\
    \ false;\n    if (a % 33 == 0) return false;\n    if (a % 34 == 0) return false;\n\
    \    if (a % 35 == 0) return false;\n    if (a % 36 == 0) return false;\n    if\
    \ (a % 37 == 0) return false;\n    if (a % 38 == 0) return false;\n    if (a %\
    \ 39 == 0) return false;\n    if (a % 40 == 0) return false;\n    if (a % 41 ==\
    \ 0) return false;\n    if (a % 42 == 0) return false;\n    if (a % 43 == 0) return\
    \ false;\n    if (a % 44 == 0) return false;\n    if (a % 45 == 0) return false;\n\
    \    if (a % 46 == 0) return false;\n    if (a % 47 == 0) return false;\n    if\
    \ (a % 48 == 0) return false;\n    if (a % 49 == 0) return false;\n    if (a %\
    \ 50 == 0) return false;\n    if (a % 51 == 0) return false;\n    if (a % 52 ==\
    \ 0) return false;\n    if (a % 53 == 0) return false;\n    if (a % 54 == 0) return\
    \ false;\n    if (a % 55 == 0) return false;\n    if (a % 56 == 0) return false;\n\
    \    if (a % 57 == 0) return false;\n    if (a % 58\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0u3tatad.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = b * b;\n    long long int d = c * c;\n    long\
    \ long int e = d * d;\n    long long int f = e * e;\n    long long int g = f *\
    \ f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long long\
    \ int j = i * i;\n    long long int k = j * j;\n    long long int l = k * k;\n\
    \    long long int m = l * l;\n    long long int n = m * m;\n    long long int\
    \ o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n   \
    \ long long int r = q * q;\n    long long int s = r * r;\n    long long int t\
    \ = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n    long\
    \ long int w = v * v;\n    long long int x = w * w;\n    long long int y = x *\
    \ x;\n    long long int z = y * y;\n    long long int a = z * z;\n    long long\
    \ int b = a * a;\n    long long int c = b * b;\n    long long int d = c * c;\n\
    \    long long int e = d * d;\n    long long int f = e * e;\n    long long int\
    \ g = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n   \
    \ long long int j = i * i;\n    long long int k = j * j;\n    long long int l\
    \ = k * k;\n    long long int m = l * l;\n    long long int n = m * m;\n    long\
    \ long int o = n * n;\n    long long int p = o * o;\n    long long int q = p *\
    \ p;\n    long long int r = q * q;\n    long long int s = r * r;\n    long long\
    \ int t = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n\
    \    long long int w = v * v;\n    long long int x = w * w;\n    long long int\
    \ y = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n   \
    \ long long int b = a * a;\n    long long int c = b * b;\n    long long int d\
    \ = c * c;\n    long long int e = d * d;\n    long long int f = e * e;\n    long\
    \ long int g = f * f;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0odbczgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long int)a;\n    long long int c = b * b;\n    long long int d = c * c;\n  \
    \  long long int e = d * d;\n    long long int f = e * e;\n    long long int g\
    \ = f * f;\n    long long int h = g * g;\n    long long int i = h * h;\n    long\
    \ long int j = i * i;\n    long long int k = j * j;\n    long long int l = k *\
    \ k;\n    long long int m = l * l;\n    long long int n = m * m;\n    long long\
    \ int o = n * n;\n    long long int p = o * o;\n    long long int q = p * p;\n\
    \    long long int r = q * q;\n    long long int s = r * r;\n    long long int\
    \ t = s * s;\n    long long int u = t * t;\n    long long int v = u * u;\n   \
    \ long long int w = v * v;\n    long long int x = w * w;\n    long long int y\
    \ = x * x;\n    long long int z = y * y;\n    long long int a = z * z;\n    if\
    \ (a == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9osjjg4u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int aa = a;\n    long long int ab = a;\n    long long int ac =\
    \ a;\n    long long int ad = a;\n    long long int ae = a;\n    long long int\
    \ af = a;\n    long long int ag = a;\n    long long int ah = a;\n    long long\
    \ int ai = a;\n    long long int aj = a;\n    long long int ak = a;\n    long\
    \ long int al = a;\n    long long int am = a;\n    long long int an = a;\n   \
    \ long long int ao = a;\n    long long int ap = a;\n    long long int aq = a;\n\
    \    long long int ar = a;\n    long long int as = a;\n    long long int at =\
    \ a;\n    long long int au = a;\n    long long int av = a;\n    long long int\
    \ aw = a;\n    long long int ax = a;\n    long long int ay = a;\n    long long\
    \ int az = a;\n    long long int aA = a;\n    long long int aB = a;\n    long\
    \ long int aC = a;\n    long long int aD = a;\n    long long int aE = a;\n   \
    \ long long int aF = a;\n    long long int aG = a;\n    long long int aH = a;\n\
    \    long long int aI = a;\n    long long int aJ = a;\n    long long int aK =\
    \ a;\n    long long int aL = a;\n    long long int aM = a;\n    long long int\
    \ aN = a;\n    long long \n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6tmthggd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==1)\n        return\
    \ true;\n    if (a==0)\n        return true;\n    if (a==-1)\n        return true;\n\
    \    if (a==64)\n        return true;\n    if (a==-64)\n        return true;\n\
    \    if (a==180)\n        return true;\n    if (a==-180)\n        return true;\n\
    \    if (a==181)\n        return true;\n    if (a==-181)\n        return true;\n\
    \    if (a==182)\n        return true;\n    if (a==-182)\n        return true;\n\
    \    if (a==183)\n        return true;\n    if (a==-183)\n        return true;\n\
    \    if (a==184)\n        return true;\n    if (a==-184)\n        return true;\n\
    \    if (a==185)\n        return true;\n    if (a==-185)\n        return true;\n\
    \    if (a==186)\n        return true;\n    if (a==-186)\n        return true;\n\
    \    if (a==187)\n        return true;\n    if (a==-187)\n        return true;\n\
    \    if (a==188)\n        return true;\n    if (a==-188)\n        return true;\n\
    \    if (a==189)\n        return true;\n    if (a==-189)\n        return true;\n\
    \    if (a==190)\n        return true;\n    if (a==-190)\n        return true;\n\
    \    if (a==191)\n        return true;\n    if (a==-191)\n        return true;\n\
    \    if (a==192)\n        return true;\n    if (a==-192)\n        return true;\n\
    \    if (a==193)\n        return true;\n    if (a==-193)\n        return true;\n\
    \    if (a==194)\n        return true;\n    if (a==-194)\n        return true;\n\
    \    if (a==195)\n        return true;\n    if (a==-195)\n        return true;\n\
    \    if (a==196)\n        return true;\n    if (a==-196)\n        return true;\n\
    \    if (a==197)\n        return true;\n    if (a==-197)\n        return true;\n\
    \    if (a==198)\n        return true;\n    if (a==-198)\n        return true;\n\
    \    if (a==199)\n        return true;\n    if (a==-199)\n        return true;\n\
    \    if (a==200)\n        return true;\n    if (a==-200)\n        return true;\n\
    \    if (a==201)\n        return true;\n    if (a==-201)\n        return true;\n\
    \    if (a==202)\n        return true;\n    if (a==-202)\n        return true;\n\
    \    if (a==203)\n        return true;\n    if (a==-203)\n        return true;\n\
    \    if (a==204)\n        return true;\n    if (a==-204)\n        return true;\n\
    \    if (a==205)\n        return true;\n    if (a==-205)\n        return true;\n\
    \    if (a==206)\n        return true;\n    if (a==-206)\n        return true;\n\
    \    if (a==207)\n        return true;\n    if (a==-207)\n        return true;\n\
    \    if (a==208)\n        return true;\n    if (a==-208)\n        return true;\n\
    \    if (a==209)\n        return true;\n    if (a==\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdcl9ksn6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a==1) return true;\n    if (a==-1) return true;\n    if (a==2) return\
    \ true;\n    if (a==3) return true;\n    if (a==4) return true;\n    if (a==5)\
    \ return true;\n    if (a==6) return true;\n    if (a==7) return true;\n    if\
    \ (a==8) return true;\n    if (a==9) return true;\n    if (a==10) return true;\n\
    \    if (a==11) return true;\n    if (a==12) return true;\n    if (a==13) return\
    \ true;\n    if (a==14) return true;\n    if (a==15) return true;\n    if (a==16)\
    \ return true;\n    if (a==17) return true;\n    if (a==18) return true;\n   \
    \ if (a==19) return true;\n    if (a==20) return true;\n    if (a==21) return\
    \ true;\n    if (a==22) return true;\n    if (a==23) return true;\n    if (a==24)\
    \ return true;\n    if (a==25) return true;\n    if (a==26) return true;\n   \
    \ if (a==27) return true;\n    if (a==28) return true;\n    if (a==29) return\
    \ true;\n    if (a==30) return true;\n    if (a==31) return true;\n    if (a==32)\
    \ return true;\n    if (a==33) return true;\n    if (a==34) return true;\n   \
    \ if (a==35) return true;\n    if (a==36) return true;\n    if (a==37) return\
    \ true;\n    if (a==38) return true;\n    if (a==39) return true;\n    if (a==40)\
    \ return true;\n    if (a==41) return true;\n    if (a==42) return true;\n   \
    \ if (a==43) return true;\n    if (a==44) return true;\n    if (a==45) return\
    \ true;\n    if (a==46) return true;\n    if (a==47) return true;\n    if (a==48)\
    \ return true;\n    if (a==49) return true;\n    if (a==50) return true;\n   \
    \ if (a==51) return true;\n    if (a==52) return true;\n    if (a==53) return\
    \ true;\n    if (a==54) return true;\n    if (a==55) return true;\n    if (a==56)\
    \ return true;\n    if (a==57) return true;\n    if (a==58) return true;\n   \
    \ if (a==59) return true;\n    if (a==60) return true;\n    if (a==61) return\
    \ true;\n    if (a==62) return true;\n    if (a==63) return true;\n    if (a==64)\
    \ return true;\n    if (a==65) return true;\n    if (a==66) return true;\n   \
    \ if (a==67) return true;\n    if (a==68) return true;\n    if (a==69) return\
    \ true;\n    if (a==70) return true;\n    if (a==7\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn63fctyx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = a;\n    long long int d = a;\n    long long int e = a;\n\
    \    long long int f = a;\n    long long int g = a;\n    long long int h = a;\n\
    \    long long int i = a;\n    long long int j = a;\n    long long int k = a;\n\
    \    long long int l = a;\n    long long int m = a;\n    long long int n = a;\n\
    \    long long int o = a;\n    long long int p = a;\n    long long int q = a;\n\
    \    long long int r = a;\n    long long int s = a;\n    long long int t = a;\n\
    \    long long int u = a;\n    long long int v = a;\n    long long int w = a;\n\
    \    long long int x = a;\n    long long int y = a;\n    long long int z = a;\n\
    \    long long int A = a;\n    long long int B = a;\n    long long int C = a;\n\
    \    long long int D = a;\n    long long int E = a;\n    long long int F = a;\n\
    \    long long int G = a;\n    long long int H = a;\n    long long int I = a;\n\
    \    long long int J = a;\n    long long int K = a;\n    long long int L = a;\n\
    \    long long int M = a;\n    long long int N = a;\n    long long int O = a;\n\
    \    long long int P = a;\n    long long int Q = a;\n    long long int R = a;\n\
    \    long long int S = a;\n    long long int T = a;\n    long long int U = a;\n\
    \    long long int V = a;\n    long long int W = a;\n    long long int X = a;\n\
    \    long long int Y = a;\n    long long int Z = a;\n    long long int aa = a;\n\
    \    long long int ab = a;\n    long long int ac = a;\n    long long int ad =\
    \ a;\n    long long int ae = a;\n    long long int af = a;\n    long long int\
    \ ag = a;\n    long long int ah = a;\n    long long int ai = a;\n    long long\
    \ int aj = a;\n    long long int ak = a;\n    long long int al = a;\n    long\
    \ long int am = a;\n    long long int an = a;\n    long long int ao = a;\n   \
    \ long long int ap = a;\n    long long \n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphi56x4o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long int\
    \ e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long int\
    \ h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long int\
    \ k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long int\
    \ n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long int\
    \ q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long int\
    \ t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long int\
    \ w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long int\
    \ z = 1;\n    long long int A = 1;\n    long long int B = 1;\n    long long int\
    \ C = 1;\n    long long int D = 1;\n    long long int E = 1;\n    long long int\
    \ F = 1;\n    long long int G = 1;\n    long long int H = 1;\n    long long int\
    \ I = 1;\n    long long int J = 1;\n    long long int K = 1;\n    long long int\
    \ L = 1;\n    long long int M = 1;\n    long long int N = 1;\n    long long int\
    \ O = 1;\n    long long int P = 1;\n    long long int Q = 1;\n    long long int\
    \ R = 1;\n    long long int S = 1;\n    long long int T = 1;\n    long long int\
    \ U = 1;\n    long long int V = 1;\n    long long int W = 1;\n    long long int\
    \ X = 1;\n    long long int Y = 1;\n    long long int Z = 1;\n    long long int\
    \ A1 = 1;\n    long long int B1 = 1;\n    long long int C1 = 1;\n    long long\
    \ int D1 = 1;\n    long long int E1 = 1;\n    long long int F1 = 1;\n    long\
    \ long int G1 = 1;\n    long long int H1 = 1;\n    long long int I1 = 1;\n   \
    \ long long int J1 = 1;\n    long long int K1 = 1;\n    long long int L1 = 1;\n\
    \    long long int M1 = 1;\n    long long int N1 = 1;\n    long long int O1 =\
    \ 1;\n    long long int P1 = 1;\n    long long int Q1 = 1;\n    long long int\
    \ R1 = 1;\n    long long int S1 = 1;\n    long long int T1 = 1;\n    long long\
    \ int U1 = 1;\n    long long int V1 = 1;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpro3xj484.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    long c\
    \ = a;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n    long D\
    \ = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n    long H = 1;\n \
    \   long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n    long M\
    \ = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long Q = 1;\n \
    \   long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n    long V\
    \ = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long Z = 1;\n \
    \   long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long\
    \ ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai =\
    \ 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n\
    \    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long\
    \ ar = 1;\n    long as = 1;\n    long at = 1;\n    long au = 1;\n    long av =\
    \ 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n    long az = 1;\n\
    \    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long\
    \ be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh = 1;\n    long bi =\
    \ 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n\
    \    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long\
    \ br = 1;\n    long bs = 1;\n    long bt1 = 1;\n    long bt2 = 1;\n    long bt3\
    \ = 1;\n    long bt4 = 1;\n    long bt5 = 1;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpod98wpj7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a==1) return true;\n    if (a==2) return true;\n    if (a==3) return\
    \ true;\n    if (a==4) return true;\n    if (a==5) return true;\n    if (a==6)\
    \ return true;\n    if (a==7) return true;\n    if (a==8) return true;\n    if\
    \ (a==9) return true;\n    if (a==10) return true;\n    if (a==11) return true;\n\
    \    if (a==12) return true;\n    if (a==13) return true;\n    if (a==14) return\
    \ true;\n    if (a==15) return true;\n    if (a==16) return true;\n    if (a==17)\
    \ return true;\n    if (a==18) return true;\n    if (a==19) return true;\n   \
    \ if (a==20) return true;\n    if (a==21) return true;\n    if (a==22) return\
    \ true;\n    if (a==23) return true;\n    if (a==24) return true;\n    if (a==25)\
    \ return true;\n    if (a==26) return true;\n    if (a==27) return true;\n   \
    \ if (a==28) return true;\n    if (a==29) return true;\n    if (a==30) return\
    \ true;\n    if (a==31) return true;\n    if (a==32) return true;\n    if (a==33)\
    \ return true;\n    if (a==34) return true;\n    if (a==35) return true;\n   \
    \ if (a==36) return true;\n    if (a==37) return true;\n    if (a==38) return\
    \ true;\n    if (a==39) return true;\n    if (a==40) return true;\n    if (a==41)\
    \ return true;\n    if (a==42) return true;\n    if (a==43) return true;\n   \
    \ if (a==44) return true;\n    if (a==45) return true;\n    if (a==46) return\
    \ true;\n    if (a==47) return true;\n    if (a==48) return true;\n    if (a==49)\
    \ return true;\n    if (a==50) return true;\n    if (a==51) return true;\n   \
    \ if (a==52) return true;\n    if (a==53) return true;\n    if (a==54) return\
    \ true;\n    if (a==55) return true;\n    if (a==56) return true;\n    if (a==57)\
    \ return true;\n    if (a==58) return true;\n    if (a==59) return true;\n   \
    \ if (a==60) return true;\n    if (a==61) return true;\n    if (a==62) return\
    \ true;\n    if (a==63) return true;\n    if (a==64) return true;\n    if (a==65)\
    \ return true;\n    if (a==66) return true;\n    if (a==67) return true;\n   \
    \ if (a==68) return true;\n    if (a==69) return true;\n    if (a==70) return\
    \ true;\n    if (a==71) return true;\n    if (a==\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzyoum45k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794645
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = b;\n    long long int d = c;\n    long long int e = d;\n\
    \    long long int f = e;\n    long long int g = f;\n    long long int h = g;\n\
    \    long long int i = h;\n    long long int j = i;\n    long long int k = j;\n\
    \    long long int l = k;\n    long long int m = l;\n    long long int n = m;\n\
    \    long long int o = n;\n    long long int p = o;\n    long long int q = p;\n\
    \    long long int r = q;\n    long long int s = r;\n    long long int t = s;\n\
    \    long long int u = t;\n    long long int v = u;\n    long long int w = v;\n\
    \    long long int x = w;\n    long long int y = x;\n    long long int z = y;\n\
    \    long long int a = z;\n    long long int b = a;\n    long long int c = b;\n\
    \    long long int d = c;\n    long long int e = d;\n    long long int f = e;\n\
    \    long long int g = f;\n    long long int h = g;\n    long long int i = h;\n\
    \    long long int j = i;\n    long long int k = j;\n    long long int l = k;\n\
    \    long long int m = l;\n    long long int n = m;\n    long long int o = n;\n\
    \    long long int p = o;\n    long long int q = p;\n    long long int r = q;\n\
    \    long long int s = r;\n    long long int t = s;\n    long long int u = t;\n\
    \    long long int v = u;\n    long long int w = v;\n    long long int x = w;\n\
    \    long long int y = x;\n    long long int z = y;\n    long long int a = z;\n\
    \    long long int b = a;\n    long long int c = b;\n    long long int d = c;\n\
    \    long long int e = d;\n    long long int f = e;\n    long long int g = f;\n\
    \    long long int h = g;\n    long long int i = h;\n    long long int j = i;\n\
    \    long long int k = j;\n    long long int l = k;\n    long long int m = l;\n\
    \    long long int n = m;\n    long long int o = n;\n    long long int p = o;\n\
    \    long long int q = p;\n    long long int r = q;\n    long long int s = r;\n\
    \    long long int t = s;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a6c3sna.cpp: In function 'bool iscube(long int)':\n/tmp/tmp_a6c3sna.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = z;\n                   ^\n/tmp/tmp_a6c3sna.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = a;\n                   ^\n/tmp/tmp_a6c3sna.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = b;\n                   ^\n/tmp/tmp_a6c3sna.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = b;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = c;\n                   ^\n/tmp/tmp_a6c3sna.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = c;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = d;\n                   ^\n/tmp/tmp_a6c3sna.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = d;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = e;\n                   ^\n/tmp/tmp_a6c3sna.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = e;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = f;\n                   ^\n/tmp/tmp_a6c3sna.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = f;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = g;\n                   ^\n/tmp/tmp_a6c3sna.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = g;\n\
    \                   ^\n/tmp/tmp_a6c3sna.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = h;\n                   ^\n/tmp/tmp_a6c3sna.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n\
    \    long long int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25g95zmv.cpp: In function 'bool iscube(long int)':\n/tmp/tmp25g95zmv.cpp:45:19:\
    \ error: declaration of 'long long int a' shadows a parameter\n     long long\
    \ int a = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:46:19: error: redeclaration\
    \ of 'long long int b'\n     long long int b = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:20:19:\
    \ error: 'long long int b' previously declared here\n     long long int b = a;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:47:19: error: redeclaration of 'long\
    \ long int c'\n     long long int c = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:21:19:\
    \ error: 'long long int c' previously declared here\n     long long int c = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:48:19: error: redeclaration of 'long\
    \ long int d'\n     long long int d = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:22:19:\
    \ error: 'long long int d' previously declared here\n     long long int d = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:49:19: error: redeclaration of 'long\
    \ long int e'\n     long long int e = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:23:19:\
    \ error: 'long long int e' previously declared here\n     long long int e = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:50:19: error: redeclaration of 'long\
    \ long int f'\n     long long int f = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:24:19:\
    \ error: 'long long int f' previously declared here\n     long long int f = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:51:19: error: redeclaration of 'long\
    \ long int g'\n     long long int g = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:25:19:\
    \ error: 'long long int g' previously declared here\n     long long int g = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:52:19: error: redeclaration of 'long\
    \ long int h'\n     long long int h = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:26:19:\
    \ error: 'long long int h' previously declared here\n     long long int h = 1;\n\
    \                   ^\n/tmp/tmp25g95zmv.cpp:53:19: error: redeclaration of 'long\
    \ long int i'\n     long long int i = 1;\n                   ^\n/tmp/tmp25g95zmv.cpp:27:19:\
    \ error: 'long lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = (long\
    \ long int)a;\n    long long int c = 1;\n    long long int d = 1;\n    long long\
    \ int e = 1;\n    long long int f = 1;\n    long long int g = 1;\n    long long\
    \ int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n    long long\
    \ int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n    long long\
    \ int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n    long long\
    \ int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n    long long\
    \ int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n    long long\
    \ int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n    long long\
    \ int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n    long long\
    \ int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n    long long\
    \ int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n    long long\
    \ int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n    long long\
    \ int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n    long long\
    \ int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n    long long\
    \ int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n    long long\
    \ int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n    long long\
    \ int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n    long long\
    \ int d = 1;\n    long long int e = 1;\n    long long int f = 1;\n    long long\
    \ int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n    long long\
    \ int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n    long long\
    \ int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n    long long\
    \ int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n    long long\
    \ int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n    long long\
    \ int \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ag43qrm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==0)\n        return true;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    if(a==-64)\n        return true;\n \
    \   if(a==180)\n        return true;\n    if(a==-180)\n        return true;\n\
    \    if(a==270)\n        return true;\n    if(a==-270)\n        return true;\n\
    \    if(a==360)\n        return true;\n    if(a==-360)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqcv85gr3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659794647
