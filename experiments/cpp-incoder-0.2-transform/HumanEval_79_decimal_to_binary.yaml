name: HumanEval_79_decimal_to_binary
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
  \ in decimal form and your task is to convert it to\n// binary format. The function\
  \ should return a string, with each character representing a binary\n// number.\
  \ Each character in the string will be '0' or '1'.\n// There will be an extra couple\
  \ of characters 'db' at the beginning and at the end of the string.\n// The extra\
  \ characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n\
  // (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string\
  \ decimal_to_binary(long decimal) {\n"
tests: "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
  \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
  \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
completions: ["    std::string binary = \"\";\n    while (decimal > 0) {\n       \
    \ binary += \"0\";\n        decimal -= 1;\n    }\n    binary += \"1\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   long counter = 1;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = remainder + binary;\n  \
    \      remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n     \
    \   binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 32) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (decimal != 0) {\n        remainder\
    \ *= 10;\n        decimal -= remainder;\n        binary += to_string(counter);\n\
    \        counter += 1;\n    }\n    binary += \"db\";\n    binary += to_string(counter);\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder;\n \
    \   long counter = 1;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n     \
    \   counter *= 2;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" :\
    \ \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary += \"0\";\n     \
    \   binary += remainder;\n        remainder = remainder / 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 0;\n    long remainder_counter = 0;\n    long decimal_counter\
    \ = 0;\n    long decimal_counter2 = 0;\n    long decimal_counter3 = 0;\n    long\
    \ decimal_counter4 = 0;\n    long decimal_counter5 = 0;\n    long decimal_counter6\
    \ = 0;\n    long decimal_counter7 = 0;\n    long decimal_counter8 = 0;\n    long\
    \ decimal_counter9 = 0;\n    long decimal_counter10 = 0;\n    long decimal_counter11\
    \ = 0;\n    long decimal_counter12 = 0;\n    long decimal_counter13 = 0;\n   \
    \ long decimal_counter14 = 0;\n    long decimal_counter15 = 0;\n    long decimal_counter16\
    \ = 0;\n    long decimal_counter17 = 0;\n    long decimal_counter18 = 0;\n   \
    \ long decimal_counter19 = 0;\n    long decimal_counter20 = 0;\n    long decimal_counter21\
    \ = 0;\n    long decimal_counter22 = 0;\n    long decimal_counter23 = 0;\n   \
    \ long decimal_counter24 = 0;\n    long decimal_counter25 = 0;\n    long decimal_counter26\
    \ = 0;\n    long decimal_counter27 = 0;\n    long decimal_counter28 = 0;\n   \
    \ long decimal_counter29 = 0;\n    long decimal_counter30 = 0;\n    long decimal_counter31\
    \ = 0;\n    long decimal_counter32 = 0;\n    long decimal_counter33 = 0;\n   \
    \ long decimal_counter34 = 0;\n    long decimal_counter35 = 0;\n    long decimal_counter36\
    \ = 0;\n    long decimal_counter37 = 0;\n    long decimal_counter38 = 0;\n   \
    \ long decimal_counter39 = 0;\n    long decimal_counter40 = 0;\n    long decimal_counter41\
    \ = 0;\n    long decimal_counter42 = 0;\n    long decimal_counter43 = 0;\n   \
    \ long decimal_counter44 = 0;\n    long decimal_counter45 = 0;\n    long decimal_counter46\
    \ = 0;\n    long decimal_counter47 = 0;\n    long decimal_counter48 = 0;\n   \
    \ long decimal_counter49 = 0;\n    long decimal_counter50 = 0;\n    long decimal_counter51\
    \ = 0;\n    long decimal_counter52 = 0;\n    long decimal_counter53 = 0;\n   \
    \ long decimal_counter54 = 0;\n    long decimal_counter55 = 0;\n    long decimal_counter56\
    \ = 0;\n    long decimal_counter57 = 0;\n    long decimal_counter58 = 0;\n   \
    \ long decimal_counter59 = 0;\n    long decimal_counter60 = 0;\n    long decimal_counter61\
    \ = 0;\n    long decimal_counter62 = 0;\n    long decimal_counter63 = 0;\n   \
    \ long decimal_counter64 = 0;\n    long decimal_counter65 = 0;\n    long decimal_counter66\
    \ = 0;\n    long decimal_counter67 = 0;\n    long decimal_counter68 = 0;\n   \
    \ long decimal_counter69 = 0;\n    long decimal_counter70 = 0;\n    long decimal_counter",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (decimal != 0) {\n        remainder *= 2;\n        decimal -=\
    \ remainder;\n        binary += counter % 2 == 0 ? \"1\" : \"0\";\n        counter\
    \ /= 2;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n    return\
    \ binary;", "    std::string binary = \"\";\n    int remainder = decimal;\n  \
    \  int count = 0;\n    while (decimal != 0) {\n        remainder *= 2;\n     \
    \   count++;\n        decimal -= remainder;\n    }\n    binary.resize(count +\
    \ 2);\n    binary[0] = 'b';\n    binary[1] = '\\0';\n    int i = 2;\n    while\
    \ (decimal != 0) {\n        binary[i] = '0' + remainder % 2;\n        remainder\
    \ = remainder / 2;\n        i++;\n    }\n    return binary + binary[0];", "  \
    \  std::string binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int i = 0;\n    while (decimal\
    \ != 0) {\n        remainder *= 2;\n        if (remainder >= 10) {\n         \
    \   binary += \"1\";\n            remainder -= 10;\n        } else {\n       \
    \     binary += \"0\";\n        }\n        decimal -= remainder;\n        i++;\n\
    \    }\n    std::string result = \"\";\n    result += binary;\n    result += \"\
    db\";\n    result += binary;\n    return result;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    binary = binary + \"db\";\n\
    \    return binary;", "    std::string binary;\n    long remainder;\n    long\
    \ counter = 1;\n    long remainder2;\n    long counter2 = 1;\n    long remainder3;\n\
    \    long counter3 = 1;\n    long remainder4;\n    long counter4 = 1;\n    long\
    \ remainder5;\n    long counter5 = 1;\n    long remainder6;\n    long counter6\
    \ = 1;\n    long remainder7;\n    long counter7 = 1;\n    long remainder8;\n \
    \   long counter8 = 1;\n    long remainder9;\n    long counter9 = 1;\n    long\
    \ remainder10;\n    long counter10 = 1;\n    long remainder11;\n    long counter11\
    \ = 1;\n    long remainder12;\n    long counter12 = 1;\n    long remainder13;\n\
    \    long counter13 = 1;\n    long remainder14;\n    long counter14 = 1;\n   \
    \ long remainder15;\n    long counter15 = 1;\n    long remainder16;\n    long\
    \ counter16 = 1;\n    long remainder17;\n    long counter17 = 1;\n    long remainder18;\n\
    \    long counter18 = 1;\n    long remainder19;\n    long counter19 = 1;\n   \
    \ long remainder20;\n    long counter20 = 1;\n    long remainder21;\n    long\
    \ counter21 = 1;\n    long remainder22;\n    long counter22 = 1;\n    long remainder23;\n\
    \    long counter23 = 1;\n    long remainder24;\n    long counter24 = 1;\n   \
    \ long remainder25;\n    long counter25 = 1;\n    long remainder26;\n    long\
    \ counter26 = 1;\n    long remainder27;\n    long counter27 = 1;\n    long remainder28;\n\
    \    long counter28 = 1;\n    long remainder29;\n    long counter29 = 1;\n   \
    \ long remainder30;\n    long counter30 = 1;\n    long remainder31;\n    long\
    \ counter31 = 1;\n    long remainder32;\n    long counter32 = 1;\n    long remainder33;\n\
    \    long counter33 = 1;\n    long remainder34;\n    long counter34 = 1;\n   \
    \ long remainder35;\n    long counter35 = 1;\n    long remainder36;\n    long\
    \ counter36 = 1;\n    long remainder37;\n    long counter37 = 1;\n    long remainder38;\n\
    \    long counter38 = 1;\n    long remainder39;\n    long counter39 = 1;\n   \
    \ long remainder40;\n    long counter40 = 1;\n    long remainder41;\n    ", " \
    \   std::string binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary += \"0\" + std::to_string(remainder);\n        remainder = remainder\
    \ / 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder *= 2;\n        decimal -=\
    \ remainder;\n        counter += 1;\n    }\n    binary = std::to_string(counter);\n\
    \    binary.insert(0, \"db\");\n    binary.insert(0, std::to_string(remainder));\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        counter += 1;\n    }\n    binary = std::to_string(counter);\n\
    \    binary.insert(0, \"db\");\n    binary.insert(0, std::to_string(remainder));\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary += \"0\";\n        decimal %= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += decimal%2;\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = remainder + binary;\n        remainder = remainder / 2;\n  \
    \  }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  binary = to_string(remainder) + binary;\n        remainder = remainder % 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 0;\n    long digit;\n    long power =\
    \ 1;\n    long power2 = 1;\n    long power3 = 1;\n    long power4 = 1;\n    long\
    \ power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long power8 = 1;\n\
    \    long power9 = 1;\n    long power10 = 1;\n    long power11 = 1;\n    long\
    \ power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n    long power15\
    \ = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long power18 = 1;\n\
    \    long power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n    long\
    \ power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long power25\
    \ = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long power28 = 1;\n\
    \    long power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n    long\
    \ power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long power35\
    \ = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long power38 = 1;\n\
    \    long power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n    long\
    \ power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long power45\
    \ = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long power48 = 1;\n\
    \    long power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n    long\
    \ power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long power55\
    \ = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long power58 = 1;\n\
    \    long power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n    long\
    \ power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long power65\
    \ = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long power68 = 1;\n\
    \    long power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n    long\
    \ power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long power75\
    \ = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long power78 = 1;\n\
    \    long power79 = 1;\n    long power80 = 1;\n    long power81 = 1;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += \"0\";\n      \
    \  decimal %= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n        counter++;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    binary += \"1\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    for(int\
    \ i = binary.length() - 1; i >= 0; i--) {\n        if(binary[i] == '1') {\n  \
    \          binary[i] = '0';\n        } else {\n            binary[i] = '1';\n\
    \        }\n    }\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal%2)\
    \ + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary += \"0\";\n        decimal /= 2;\n    }\n    binary = binary +\
    \ \"1\";\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += decimal%2;\n \
    \       decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n   \
    \ return binary;", "    std::string binary;\n    long remainder;\n    long digit;\n\
    \    long count = 0;\n    long base = 1;\n    long temp;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % base;\n        digit = decimal / base;\n\
    \        binary.push_back('0');\n        if (remainder > 0) {\n            binary.push_back('1');\n\
    \        }\n        decimal -= remainder;\n        temp = digit;\n        base\
    \ = base * 2;\n        count += 1;\n    }\n    binary.insert(binary.begin(), 'd');\n\
    \    binary.insert(binary.end(), std::to_string(count).c_str());\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder *= 2;\n        binary += \"1\";\n    }\n    while\
    \ (remainder != 0) {\n        remainder /= 2;\n        binary += \"0\";\n    }\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary += \"0\";\n    }\n    binary += \"1\";\n  \
    \  return binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n\
    \        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += \"0\";\n     \
    \   decimal /= 2;\n    }\n    while (binary.length() < 8) {\n        binary +=\
    \ \"0\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n \
    \       remainder *= 2;\n        counter += 1;\n    }\n    binary.append(\"db\"\
    );\n    while (counter > 0) {\n        binary.append(\"0\");\n        counter\
    \ -= 1;\n    }\n    binary.append(remainder);\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 32) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = decimal % 2;\n        decimal /= 2;\n        binary += (remainder\
    \ == 1) ? \"1\" : \"0\";\n        counter++;\n    }\n    binary = std::string(counter,\
    \ 'b') + binary;\n    return binary + \"db\";", "    std::string binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n\
    \    }\n    binary += \"1\";\n    return binary;", "    std::string binary = \"\
    \";\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = std::to_string(remainder) + binary;\n        counter++;\n      \
    \  remainder = remainder / 2;\n    }\n    binary = std::to_string(counter) + binary;\n\
    \    return binary;", "    std::string binary;\n    long remainder;\n    long\
    \ counter = 0;\n    long digit;\n    long remainder2;\n    long counter2 = 0;\n\
    \    long digit2;\n    long remainder3;\n    long counter3 = 0;\n    long digit3;\n\
    \    long remainder4;\n    long counter4 = 0;\n    long digit4;\n    long remainder5;\n\
    \    long counter5 = 0;\n    long digit5;\n    long remainder6;\n    long counter6\
    \ = 0;\n    long digit6;\n    long remainder7;\n    long counter7 = 0;\n    long\
    \ digit7;\n    long remainder8;\n    long counter8 = 0;\n    long digit8;\n  \
    \  long remainder9;\n    long counter9 = 0;\n    long digit9;\n    long remainder10;\n\
    \    long counter10 = 0;\n    long digit10;\n    long remainder11;\n    long counter11\
    \ = 0;\n    long digit11;\n    long remainder12;\n    long counter12 = 0;\n  \
    \  long digit12;\n    long remainder13;\n    long counter13 = 0;\n    long digit13;\n\
    \    long remainder14;\n    long counter14 = 0;\n    long digit14;\n    long remainder15;\n\
    \    long counter15 = 0;\n    long digit15;\n    long remainder16;\n    long counter16\
    \ = 0;\n    long digit16;\n    long remainder17;\n    long counter17 = 0;\n  \
    \  long digit17;\n    long remainder18;\n    long counter18 = 0;\n    long digit18;\n\
    \    long remainder19;\n    long counter19 = 0;\n    long digit19;\n    long remainder20;\n\
    \    long counter20 = 0;\n    long digit20;\n    long remainder21;\n    long counter21\
    \ = 0;\n    long digit21;\n    long remainder22;\n    long counter22 = 0;\n  \
    \  long digit22;\n    long remainder23;\n    long counter23 = 0;\n    long digit23;\n\
    \    long remainder24;\n    long counter24 = 0;\n    long digit24;\n    long remainder25;\n\
    \    long counter25 = 0;\n    long digit25;\n    long remainder26;\n    long counter26\
    \ = 0;\n    long digit26;\n    long remainder27;\n    long counter27 = 0;\n  \
    \  long digit27;\n    long remainder28;\n    long counter28 = 0;\n    long digit28;\n\
    \    long remainder29;\n    long counter29 = 0;\n    ", "    std::string binary\
    \ = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (remainder != 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = to_string(counter) + \"db\" + binary;\n    return binary;", "   \
    \ std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        remainder = remainder /\
    \ 2;\n        counter++;\n    }\n    binary = to_string(counter) + binary;\n \
    \   binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    int remainder;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 8) {\n        binary += \"\
    1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary.push_back(remainder);\n        remainder = remainder / 2;\n  \
    \  }\n    binary.push_back(remainder);\n    binary.insert(binary.begin(), \"db\"\
    );\n    return binary;", "    std::string binary = \"\";\n    while (decimal !=\
    \ 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    binary\
    \ = binary + \"db\";\n    return binary;", "    std::string binary;\n    long\
    \ remainder;\n    long counter = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 0;\n    long temp = 0;\n    while (decimal != 0) {\n     \
    \   remainder = decimal % 2;\n        decimal = decimal / 2;\n        temp = remainder\
    \ * counter;\n        binary.push_back(temp % 2);\n        counter = temp / 2;\n\
    \    }\n    binary.push_back('b');\n    binary.push_back('b');\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (counter > 0) {\n        remainder = remainder % 2;\n      \
    \  binary = to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \        counter = counter + 1;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary;\n    long remainder;\n    long quotient;\n\
    \    long digit;\n    long power = 1;\n    long digits = 1;\n    long power =\
    \ 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long\
    \ power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n\
    \    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits\
    \ = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long\
    \ digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n\
    \    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power\
    \ = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long\
    \ power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n\
    \    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits\
    \ = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long\
    \ digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n\
    \    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power\
    \ = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long\
    \ power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n\
    \    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits\
    \ = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long\
    \ digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power = 1;\n\
    \    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long power\
    \ = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n    long\
    \ power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits = 1;\n\
    \    long power = 1;\n    long digits = 1;\n    long power = 1;\n    long digits\
    \ = 1;\n    long power = 1;\n    long digits = ", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += \"0\";\n      \
    \  decimal /= 2;\n    }\n    binary = binary + \"1\";\n    return binary;", " \
    \   std::string binary = \"\";\n    int remainder = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder ? \"1\" : \"0\";\n    }\n    std::string db = \"db\";\n    binary\
    \ = db + binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = remainder + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n  \
    \  return binary;", "    std::string binary = \"\";\n    long remainder = 0;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter++;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = to_string(counter) + binary;\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    binary += \"1\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        int remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0){\n        binary += decimal%2;\n   \
    \     decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    binary.append(\"\
    db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    std::string\
    \ db = \"db\";\n    binary = db + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary;\n    long remainder;\n    long counter\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary.push_back(remainder);\n        counter++;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n  \
    \  return binary;", "    std::string binary = \"\";\n    int remainder = 0;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += \"0\";\n     \
    \   decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n     \
    \   binary += \"1\";\n        decimal -= 1;\n    }\n    while (binary.size() <\
    \ 32) {\n        binary += \"0\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    binary.insert(0, \"db\");\n    binary.append(\"\
    db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter\
    \ = counter * 2;\n        remainder = remainder / 2;\n    }\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary\
    \ += \"1\";\n    }\n    binary += \"0\"; // add extra zero at the end\n    while\
    \ (binary.size() < 32) {\n        binary += \"0\";\n    }\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary += (decimal\
    \ % 2) + '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (remainder > 0) {\n        counter++;\n        remainder = remainder % 2;\n\
    \        binary += (remainder > 0 ? \"1\" : \"0\");\n    }\n    binary = binary\
    \ + \"db\";\n    binary = binary + std::to_string(counter);\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    int digit;\n\
    \    while (remainder > 0) {\n        digit = remainder % 2;\n        remainder\
    \ = remainder / 2;\n        binary = std::to_string(digit) + binary;\n    }\n\
    \    binary = std::to_string(digit) + binary;\n    binary.insert(0, \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal > 0)\
    \ {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n \
    \   }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ % 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        binary += counter % 2 ==\
    \ 0 ? \"1\" : \"0\";\n        counter /= 2;\n    }\n    std::string db = \"db\"\
    ;\n    binary = db + binary;\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = remainder + binary;\n        remainder =\
    \ remainder / 2;\n    }\n    binary = binary + \"db\";\n    return binary;", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        binary = to_string(remainder) + binary;\n        remainder =\
    \ remainder % 2;\n    }\n    binary = binary + \"db\";\n    return binary;", " \
    \   std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    1\";\n        decimal -= 1;\n    }\n    while (binary.length() < 32) {\n     \
    \   binary += \"0\";\n    }\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    long counter = 0;\n    while (remainder\
    \ > 0) {\n        remainder *= 2;\n        counter += 1;\n    }\n    while (counter\
    \ > 0) {\n        binary += \"1\";\n        counter -= 1;\n    }\n    binary =\
    \ \"db\" + binary + \"db\";\n    return binary;", "    std::string binary = \"\
    \";\n    while(decimal != 0) {\n        binary.push_back((decimal%2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 1;\n    long remainder_counter = 1;\n    long decimal_counter\
    \ = 1;\n    long decimal_remainder = 1;\n    long decimal_remainder_counter =\
    \ 1;\n    long decimal_remainder_remainder = 1;\n    long decimal_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder = 1;\n    long decimal_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder = 1;\n    long\
    \ decimal_remainder_remainder_remainder_remainder_counter = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_counter = 1;\n\
    \    long decimal_remainder_remainder_remainder_remainder_remainder_counter =\
    \ 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_counter\
    \ = 1;\n    long decimal_remainder_remainder_remain", "    std::string binary;\n\
    \    long remainder = decimal;\n    long counter = 1;\n    while (counter > 0)\
    \ {\n        remainder = remainder % 2;\n        binary.push_back(remainder +\
    \ '0');\n        counter /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;", "    std::string binary;\n    long remainder;\n    long\
    \ counter = 1;\n    long temp = decimal;\n    while(temp > 0) {\n        remainder\
    \ = temp % 2;\n        temp = temp / 2;\n        binary.push_back(remainder);\n\
    \    }\n    binary.push_back('d');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    binary.push_back('b');\n\
    \    binary.push_back", "    std::string binary = \"\";\n    while (decimal >\
    \ 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    binary.insert(0, \"db\");\n  \
    \  return binary;", "    std::string binary = \"\";\n    long remainder = 0;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += (remainder ? \"1\" : \"0\");\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 0;\n    long temp = 0;\n    long power = 1;\n    long digit;\n\
    \    long decimal_temp = decimal;\n    while(decimal_temp != 0) {\n        digit\
    \ = decimal_temp % 2;\n        temp = temp * 10 + digit;\n        decimal_temp\
    \ = decimal_temp / 2;\n    }\n    while(counter < temp) {\n        remainder =\
    \ temp % 2;\n        temp = temp / 2;\n        binary = binary + remainder;\n\
    \        counter++;\n    }\n    binary = binary + \"db\";\n    while(counter >\
    \ 0) {\n        remainder = temp % 2;\n        temp = temp / 2;\n        binary\
    \ = binary + remainder;\n        counter--;\n    }\n    return binary;", "   \
    \ std::string binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal%2)\
    \ + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"\
    db\");\n    binary.insert(binary.end(), binary.begin(), binary.end());\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal != 0) {\n    \
    \    binary += (decimal % 2) == 0 ? \"1\" : \"0\";\n        decimal /= 2;\n  \
    \  }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    int digit;\n    bool isNegative = false;\n\
    \    if (decimal < 0) {\n        isNegative = true;\n        decimal = -decimal;\n\
    \    }\n    remainder = 0;\n    while (decimal != 0) {\n        digit = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        remainder = remainder * 10 + digit;\n\
    \    }\n    binary.push_back('0');\n    while (binary.size() < remainder) {\n\
    \        binary.push_back('0');\n    }\n    if (isNegative) {\n        binary.insert(0,\
    \ \"db\");\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n  \
    \      decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n  \
    \  std::string db = \"db\";\n    binary = db + binary;\n    return binary;", " \
    \   std::string binary = \"\";\n    while(decimal != 0) {\n        binary += \"\
    0\";\n        decimal /= 2;\n    }\n    while(binary.length() < 32) {\n      \
    \  binary += \"1\";\n    }\n    return binary;", "    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += (remainder == 1) ? \"1\" : \"0\";\n        counter++;\n    }\n    std::string\
    \ db = \"db\";\n    binary = db + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += (decimal % 2)\
    \ == 0 ? \"1\" : \"0\";\n        decimal /= 2;\n    }\n    binary = \"db\" + binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ *= 2;\n        counter --;\n    }\n    while (decimal > remainder) {\n     \
    \   binary += \"1\";\n        decimal -= remainder;\n    }\n    binary += \"0\"\
    ;\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal --;\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" :\
    \ \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (counter > 0) {\n        remainder = remainder % 2;\n      \
    \  binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n        counter = counter * 2;\n    }\n    binary = binary + \"db\";\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal > 0)\
    \ {\n        binary += \"0\";\n        decimal %= 2;\n    }\n    while(decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n    binary =\
    \ binary + \"db\";\n    return binary;", "    std::string binary;\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary\
    \ += '1';\n    }\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n    binary += '0';\n    binary += '0';\n    binary += '0';\n\
    \    binary += '0';\n", "    std::string binary = \"\";\n    int remainder = decimal;\n\
    \    int counter = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n     \
    \   counter++;\n    }\n    binary.insert(0, \"db\");\n    binary.insert(binary.length(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter\
    \ > 0) {\n        remainder = remainder % 2;\n        binary.push_back(remainder\
    \ + '0');\n        counter /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.size()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = binary +\
    \ \"db\";\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long digit;\n    long power = 1;\n    long\
    \ i = 0;\n    long remainder2;\n    long remainder3;\n    long remainder4;\n \
    \   long remainder5;\n    long remainder6;\n    long remainder7;\n    long remainder8;\n\
    \    long remainder9;\n    long remainder10;\n    long remainder11;\n    long\
    \ remainder12;\n    long remainder13;\n    long remainder14;\n    long remainder15;\n\
    \    long remainder16;\n    long remainder17;\n    long remainder18;\n    long\
    \ remainder19;\n    long remainder20;\n    long remainder21;\n    long remainder22;\n\
    \    long remainder23;\n    long remainder24;\n    long remainder25;\n    long\
    \ remainder26;\n    long remainder27;\n    long remainder28;\n    long remainder29;\n\
    \    long remainder30;\n    long remainder31;\n    long remainder32;\n    long\
    \ remainder33;\n    long remainder34;\n    long remainder35;\n    long remainder36;\n\
    \    long remainder37;\n    long remainder38;\n    long remainder39;\n    long\
    \ remainder40;\n    long remainder41;\n    long remainder42;\n    long remainder43;\n\
    \    long remainder44;\n    long remainder45;\n    long remainder46;\n    long\
    \ remainder47;\n    long remainder48;\n    long remainder49;\n    long remainder50;\n\
    \    long remainder51;\n    long remainder52;\n    long remainder53;\n    long\
    \ remainder54;\n    long remainder55;\n    long remainder56;\n    long remainder57;\n\
    \    long remainder58;\n    long remainder59;\n    long remainder60;\n    long\
    \ remainder61;\n    long remainder62;\n    long remainder63;\n    long remainder64;\n\
    \    long remainder65;\n    long remainder66;\n    long remainder67;\n    long\
    \ remainder68;\n    long remainder69;\n    long remainder70;\n    long remainder71;\n\
    \    long remainder72;\n    long remainder73;\n    ", "    std::string binary\
    \ = \"\";\n    int remainder;\n    while (decimal != 0) {\n        remainder =\
    \ decimal % 2;\n        decimal /= 2;\n        binary += remainder ? \"1\" : \"\
    0\";\n    }\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary += to_string(remainder);\n    }\n   \
    \ binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;",
  "    std::string binary;\n    long remainder = decimal;\n    long counter = 0;\n\
    \    while (remainder > 0) {\n        counter++;\n        remainder = remainder\
    \ % 2;\n    }\n    binary.resize(counter);\n    long counter2 = 0;\n    while\
    \ (remainder > 0) {\n        binary[counter2] = remainder % 2;\n        remainder\
    \ = remainder / 2;\n        counter2++;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 1;\n    long temp;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        temp = remainder * counter;\n        binary.push_back((char)(temp\
    \ + '0'));\n        counter = counter * 2;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 1;\n    long temp = decimal;\n\
    \    while(temp != 0) {\n        remainder = temp % 2;\n        temp = temp /\
    \ 2;\n        binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), counter);\n    return binary;", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 0;\n    while (remainder != 0) {\n        remainder *= 2;\n        counter\
    \ += 1;\n    }\n    std::string binary_string = std::to_string(counter);\n   \
    \ std::string binary_string_reversed = binary_string[binary_string.length() -\
    \ 1];\n    binary_string_reversed = binary_string_reversed + \"b\";\n    std::string\
    \ binary_string_reversed_reversed = binary_string_reversed + \"b\";\n    std::string\
    \ binary_string_reversed_reversed_reversed = binary_string_reversed_reversed +\
    \ \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed =\
    \ binary_string_reversed_reversed_reversed + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed + \"b\";\n    std::string\
    \ binary_string_reversed_reversed_reversed_reversed_reversed_reversed = binary_string_reversed_reversed_reversed_reversed_reversed\
    \ + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed + \"b\"\
    ;\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed + \"b\"\
    ;\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + \"b\";\n    std::string binary_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = binary_string_reversed_reversed_reversed_reversed_reversed_reversed + \"b\"\
    ;\n    std::string binary_string_reversed_reversed_reversed_reversed_", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ = to_string(remainder) + binary;\n        count++;\n    }\n    binary = to_string(count)\
    \ + \"db\" + binary;\n    return binary;", "    std::string binary;\n    long\
    \ remainder;\n    int decimal_places = 1;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ + '0';\n        decimal_places++;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), decimal_places, 'd');\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.length() < 8) {\n      \
    \  binary += \"1\";\n    }\n    return binary;", "    std::string binary = \"\"\
    ;\n    long remainder;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += (remainder ? \"1\" : \"0\");\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while\
    \ (counter < 32) {\n        remainder *= 2;\n        if (remainder >= 1) {\n \
    \           binary += \"1\";\n            remainder -= 1;\n        } else {\n\
    \            binary += \"0\";\n        }\n        counter += 1;\n    }\n    binary\
    \ += \"db\";\n    counter += 1;\n    while (counter < 32) {\n        remainder\
    \ *= 2;\n        if (remainder >= 1) {\n            binary += \"1\";\n       \
    \     remainder -= 1;\n        } else {\n            binary += \"0\";\n      \
    \  }\n        counter += 1;\n    }\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal\
    \ != 0) {\n        remainder *= 2;\n        decimal -= remainder;\n        counter\
    \ += 1;\n    }\n    while (counter > 0) {\n        binary += \"1\";\n        counter\
    \ -= 1;\n    }\n    binary += \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\";\n  \
    \  while (binary.size() < 32) {\n        binary += \"0\";\n    }\n    return binary;",
  "    std::string binary;\n    long remainder;\n    long temp;\n    int count = 0;\n\
    \    temp = decimal;\n    while (temp != 0) {\n        remainder = temp % 2;\n\
    \        temp = temp / 2;\n        binary.push_back(remainder);\n        count++;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ std::to_string(count).c_str());\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long quotient;\n    long remainder_temp;\n    long quotient_temp;\n\
    \    long remainder_temp_temp;\n    long quotient_temp_temp;\n    long remainder_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp;\n    long remainder_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long\
    \ quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long quotient_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary +=\
    \ counter % 2 == 0 ? \"1\" : \"0\";\n        counter /= 2;\n    }\n    binary\
    \ += \"db\";\n    return binary;", "    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n  \
    \  while (decimal > 0) {\n        binary += \"1\";\n        decimal /= 2;\n  \
    \  }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while (decimal > 0) {\n        binary += \"1\";\n        decimal\
    \ -= 1;\n    }\n    binary += \"0\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n        remainder = remainder / 2;\n\
    \    }\n    return binary + \"db\";", "    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 8) {\n        binary += \"\
    1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"0\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while (decimal != 0) {\n\
    \        binary = std::to_string(decimal % 2) + binary;\n        decimal /= 2;\n\
    \    }\n    binary = std::to_string(decimal) + binary;\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        int remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal);\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    int remainder = 0;\n    while (decimal > 0)\
    \ {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary +=\
    \ remainder ? \"1\" : \"0\";\n    }\n    binary.insert(binary.begin(), \"db\"\
    );\n    return binary;", "    std::string binary = \"\";\n    while (decimal !=\
    \ 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(0, \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    int count = 0;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n        count++;\n    }\n    binary = std::to_string(count)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n        counter++;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 0;\n    long temp = 0;\n  \
    \  long power = 1;\n    long sum = 0;\n    long digit = 0;\n    long digits =\
    \ 0;\n    long power2 = 0;\n    long power3 = 0;\n    long power4 = 0;\n    long\
    \ power5 = 0;\n    long power6 = 0;\n    long power7 = 0;\n    long power8 = 0;\n\
    \    long power9 = 0;\n    long power10 = 0;\n    long power11 = 0;\n    long\
    \ power12 = 0;\n    long power13 = 0;\n    long power14 = 0;\n    long power15\
    \ = 0;\n    long power16 = 0;\n    long power17 = 0;\n    long power18 = 0;\n\
    \    long power19 = 0;\n    long power20 = 0;\n    long power21 = 0;\n    long\
    \ power22 = 0;\n    long power23 = 0;\n    long power24 = 0;\n    long power25\
    \ = 0;\n    long power26 = 0;\n    long power27 = 0;\n    long power28 = 0;\n\
    \    long power29 = 0;\n    long power30 = 0;\n    long power31 = 0;\n    long\
    \ power32 = 0;\n    long power33 = 0;\n    long power34 = 0;\n    long power35\
    \ = 0;\n    long power36 = 0;\n    long power37 = 0;\n    long power38 = 0;\n\
    \    long power39 = 0;\n    long power40 = 0;\n    long power41 = 0;\n    long\
    \ power42 = 0;\n    long power43 = 0;\n    long power44 = 0;\n    long power45\
    \ = 0;\n    long power46 = 0;\n    long power47 = 0;\n    long power48 = 0;\n\
    \    long power49 = 0;\n    long power50 = 0;\n    long power51 = 0;\n    long\
    \ power52 = 0;\n    long power53 = 0;\n    long power54 = 0;\n    long power55\
    \ = 0;\n    long power56 = 0;\n    long power57 = 0;\n    long power58 = 0;\n\
    \    long power59 = 0;\n    long power60 = 0;\n    long power61 = 0;\n    long\
    \ power62 = 0;\n    long power63 = 0;\n    long power64 = 0;\n    long power65\
    \ = 0;\n    long power66 = 0;\n    long power67 = 0;\n    long power68 = 0;\n\
    \    long power69 = 0;\n    long power70 = 0;\n    long power71 = 0;\n    long\
    \ power72 = 0;\n    long power73 = 0;\n    long power74 = 0;\n    long power75\
    \ = 0;\n    long power76 = 0;\n    long power77 = 0;\n    long power78 = 0;\n\
    \    long power79 = 0;\n    long power80 = 0;\n", "    std::string binary = \"\
    \";\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal %= 2;\n\
    \    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n    }\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder *= 2;\n        binary += \"1\"\
    ;\n    }\n    while (remainder != 0) {\n        remainder /= 2;\n        binary\
    \ += \"0\";\n    }\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long quotient;\n    long temp;\n    long digit;\n\
    \    long power;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long\
    \ E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long\
    \ K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long\
    \ Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long\
    \ W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long\
    \ C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long\
    \ I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long\
    \ O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long\
    \ U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long\
    \ A;\n    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long\
    \ G;\n    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long\
    \ M;\n    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long\
    \ S;\n    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long\
    \ Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long ",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal /= 2;\n    }\n    while (decimal > 0) {\n        binary\
    \ += \"1\";\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (counter > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        counter = counter\
    \ * 2;\n        remainder = remainder / 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    long remainder =\
    \ decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    int remainder = decimal;\n    while (remainder\
    \ > 0) {\n        int digit = remainder % 2;\n        remainder = remainder /\
    \ 2;\n        binary = std::to_string(digit) + binary;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   long counter = 1;\n    while (counter != 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n        counter++;\n    }\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.length() < 8) {\n      \
    \  binary += \"1\";\n    }\n    return binary;", "    std::string binary = \"\"\
    ;\n    while (decimal != 0) {\n        int remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 8) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary.push_back(remainder);\n        decimal /= 2;\n    }\n \
    \   binary.push_back(remainder);\n    binary.insert(binary.begin(), \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal != 0)\
    \ {\n        int remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary;\n    long remainder = decimal;\n    long\
    \ counter = 1;\n    while (counter > 0) {\n        remainder *= 2;\n        counter\
    \ --;\n    }\n    long remainder2 = remainder;\n    long counter2 = 1;\n    while\
    \ (remainder2 > 0) {\n        remainder2 /= 2;\n        counter2 --;\n    }\n\
    \    binary.push_back('0');\n    while (remainder > 0) {\n        binary.push_back('1');\n\
    \        remainder --;\n    }\n    binary.push_back('0');\n    while (remainder2\
    \ > 0) {\n        binary.push_back('1');\n        remainder2 --;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary += \"0\";\n        binary += remainder;\n \
    \       remainder = remainder / 2;\n    }\n    binary.insert(0, \"db\");\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary;\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ *= 2;\n        counter -= 1;\n    }\n    long remainder2 = remainder;\n    long\
    \ counter2 = 1;\n    while (remainder2 > 0) {\n        remainder2 *= 2;\n    \
    \    counter2 -= 1;\n    }\n    long remainder3 = remainder2;\n    long counter3\
    \ = 1;\n    while (remainder3 > 0) {\n        remainder3 *= 2;\n        counter3\
    \ -= 1;\n    }\n    long remainder4 = remainder3;\n    long counter4 = 1;\n  \
    \  while (remainder4 > 0) {\n        remainder4 *= 2;\n        counter4 -= 1;\n\
    \    }\n    long remainder5 = remainder4;\n    long counter5 = 1;\n    while (remainder5\
    \ > 0) {\n        remainder5 *= 2;\n        counter5 -= 1;\n    }\n    long remainder6\
    \ = remainder5;\n    long counter6 = 1;\n    while (remainder6 > 0) {\n      \
    \  remainder6 *= 2;\n        counter6 -= 1;\n    }\n    long remainder7 = remainder6;\n\
    \    long counter7 = 1;\n    while (remainder7 > 0) {\n        remainder7 *= 2;\n\
    \        counter7 -= 1;\n    }\n    long remainder8 = remainder7;\n    long counter8\
    \ = 1;\n    while (remainder8 > 0) {\n        remainder8 *= 2;\n        counter8\
    \ -= 1;\n    }\n    long remainder9 = remainder8;\n    long counter9 = 1;\n  \
    \  while (remainder9 > 0) {\n        remainder9 *= 2;\n        counter9 -= 1;\n\
    \    }\n    long remainder10 = remainder9;\n    long counter10 = 1;\n    while\
    \ (remainder10 > 0) {\n        remainder10 *= 2;\n        counter10 -= 1;\n  \
    \  }\n    long remainder11 = remainder10;\n    long counter11 = 1;\n    while\
    \ (remainder11 > 0) {\n        remainder11 *= 2;\n        counter11 -= 1;\n  \
    \  }\n    long remainder12 = remainder11;\n    long counter12 = 1;\n    while\
    \ (remainder12 > 0) {\n        remainder12 *= 2;\n        counter12 -= 1;\n  \
    \  }\n    long remainder13 = remainder12;\n    long counter13 = 1;\n    while\
    \ (remainder13 > 0) {\n        remainder13 *= 2;\n        counter13 -= 1;\n  \
    \  }\n    long remainder14 = remainder13;\n    long counter14 = 1;\n    while\
    \ (remainder14 > 0) {\n        re", "    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n  \
    \  while (binary.length() < 8) {\n        binary += \"1\";\n    }\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal > 0) {\n      \
    \  binary += \"0\";\n        decimal /= 2;\n    }\n    while(decimal) {\n    \
    \    binary += \"1\";\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\"\
    );\n    return binary;"]
stop_tokens:
- "\n}"
